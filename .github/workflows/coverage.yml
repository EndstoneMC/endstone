name: Code Coverage

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions: read-all

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: ${{ runner.os }}-conan-Debug-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-conan-Debug-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Clang 16
        env:
          LLVM_VERSION: 16
        run: |
          sudo apt-get update -y -q
          sudo apt-get install -y -q build-essential lsb-release wget software-properties-common gnupg
          sudo wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh ${LLVM_VERSION}
          sudo apt-get install -y -q libc++-${LLVM_VERSION}-dev libc++abi-${LLVM_VERSION}-dev
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM_VERSION} 200
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM_VERSION} 200
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-${LLVM_VERSION} 100
          sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.lld-${LLVM_VERSION} 100
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Set up CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Set up Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect --force
          conan install . --build=missing -s compiler.cppstd=20 -s compiler.libcxx=libc++ -s build_type=Debug -c tools.cmake.cmaketoolchain:generator=Ninja

      - name: Build with CMake
        run: |
          cmake --preset conan-debug -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON
          cmake --build build/Debug

      - name: Run Tests and Generate Coverage Data
        run: |
          pip install gcovr
          ctest --test-dir build/Debug
          gcovr -r . --filter src/endstone_core/ --gcov-executable "llvm-cov gcov" --xml coverage.xml build/Debug

      - name: Upload Coverage Reports to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
