{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Write you plugins in Python or C++ and enhance the Bedrock Dedicated Servers in minutes - add custom features and functionality, design innovative and bespoke player experiences.</p>"},{"location":"#ready-to-start","title":"\ud83d\ude80 Ready to Start?","text":"<ul> <li> <p>Install Endstone server</p> <p>Follow the comprehensive guide to install and configure your Endstone server.</p> <p> Getting Started</p> </li> <li> <p>Write your first plugin</p> <p>Our step-by-step tutorial takes you from zero to hero as you create your first plugin.</p> <p> Tutorials</p> </li> </ul>"},{"location":"#looking-for-hosting-support","title":"\ud83c\udfae Looking for Hosting Support?","text":"<p>Try Bisect Hosting and get 25% off with promo code <code>endstone</code>.</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0109-2025-10-30","title":"0.10.9 - 2025-10-30","text":"<p>Compare with 0.10.8</p>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Resolved crashes in the chunk-related API.</li> <li>Stack traces are no longer shown when the server fails to start due to a port conflict on Windows.</li> <li>Fixed an issue where <code>CommandSenderWrapper</code> could not capture the output of custom commands.</li> <li>Fixed an issue in the <code>/status</code> command where permission checks were not performed.</li> <li>Fixed a crash that could occur when the Minecraft service was unavailable.</li> </ul>"},{"location":"changelog/#0108-2025-10-28","title":"0.10.8 - 2025-10-28","text":"<p>Compare with 0.10.7</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.120.4.</li> </ul>"},{"location":"changelog/#0107-2025-10-14","title":"0.10.7 - 2025-10-14","text":"<p>Compare with 0.10.6</p>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.113.1.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Resolve a crash when joining a server using a grayscale skin with an alpha channel.</li> <li>Resolve an issue where item stacks containing blocks could not be given to players.</li> </ul>"},{"location":"changelog/#0106-2025-10-02","title":"0.10.6 - 2025-10-02","text":"<p>Compare with 0.10.5</p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.111.1.</li> </ul>"},{"location":"changelog/#0105-2025-09-26","title":"0.10.5 - 2025-09-26","text":"<p>Compare with 0.10.4</p>"},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.102.1.</li> <li>Added <code>Level::getSeed</code> to retrieve the seed of the current level.</li> <li>Added the <code>/seed</code> command to display the current level's seed.</li> <li>Added <code>PlayerChatEvent::getFormat</code> and <code>PlayerChatEvent::setFormat</code> to customize the message format.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed a crash that could occur when a sub-client joined.</li> <li>Ensured <code>Inventory::setItem</code> properly updates the client.</li> <li>Item data is now handled correctly during <code>ItemStack</code> construction.</li> <li><code>ItemStack::setCount</code> now correctly updates the item count instead of clearing the entire stack.</li> <li><code>PlayerChatEvent::setMessage</code> now correctly displays the updated message to the client.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>If a command usage includes a parameter of type <code>message</code>, it must be the final parameter. No additional parameters   are allowed after it.</li> <li>On Windows, if the automatic loopback exemption fails, a warning will be shown, but the server will no longer stop   running.</li> </ul>"},{"location":"changelog/#0104-2025-08-10","title":"0.10.4 - 2025-08-10","text":"<p>Compare with 0.10.3</p>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Death messages are now correctly displayed on the death screen.</li> <li>Resolved a crash that could occur after payload updates in <code>PacketReceiveEvent</code>.</li> <li>Resolved a crash when running <code>/reload</code> after updating native plugins.</li> </ul>"},{"location":"changelog/#0103-2025-08-06","title":"0.10.3 - 2025-08-06","text":"<p>Compare with 0.10.2</p>"},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.100.7</li> </ul>"},{"location":"changelog/#0102-2025-08-05","title":"0.10.2 - 2025-08-05","text":"<p>Compare with 0.10.1</p>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Added support for game version 1.21.100</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed an issue where knockback is still applied when <code>ActorDamageEvent</code> is cancelled</li> </ul>"},{"location":"changelog/#0101-2025-07-31","title":"0.10.1 - 2025-07-31","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Fixed a crash that occurred when parsing a command with an empty message argument.</li> <li>Resolve an issue where an actor could be damaged again in their invulnerability window if the damage value from a   prior <code>ActorDamageEvent</code> had been lowered.</li> </ul>"},{"location":"changelog/#0100-2025-07-30","title":"0.10.0 - 2025-07-30","text":"<p>Compare with 0.9</p>"},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.95.1.</li> <li>Added ability to register commands as console-only by setting <code>console</code> in the <code>default</code> field.</li> <li>Added <code>ItemStack::getData</code> and <code>ItemStack::setData</code> methods for accessing item data values.</li> <li>Added <code>LeavesDecayEvent</code> by @killcerr in #209</li> <li>Added <code>BlockCookEvent</code> by @killcerr in #212</li> <li>Added <code>PlayerItemHeldEvent</code> by @killcerr in #213</li> <li>Added <code>PlayerInteractEvent::Action</code> enum for distinguishing interaction types.</li> <li>Added <code>BlockPistonExtendEvent</code> and <code>BlockPistonRetractEvent</code> for piston-related events.</li> <li>Added <code>PlayerBedEnterEvent</code> and <code>PlayerBedLeaveEvent</code> for player sleeping events by @dreamguxiang   in #196</li> <li>Added <code>Server::getProtocolVersion</code> to retrieve the supported network protocol version.</li> <li>Added <code>PlayerEmoteEvent::setMuted</code> to suppress server broadcasts for player emotes.</li> <li>Added <code>PlayerSkinChangeEvent</code>, triggered when a player changes their in-game skin.</li> <li>Added <code>Player::getEnderChest</code> to get a player's Ender Chest inventory.</li> <li>Added <code>Item</code> entity for dropped items.</li> <li>Added a new configuration option <code>commands.log</code> to <code>endstone.toml</code> to control whether the server logs when a player   executes a command.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li><code>PlayerInteractEvent</code> now triggers on right- and left-clicks with both air and blocks.</li> <li><code>PlayerEmoteEvent</code> is now cancellable; cancelling prevents broadcasting to other players.</li> <li>Player bans and IP bans are now checked before the server sends resource packs to clients.</li> <li><code>PlayerPickupItemEvent::getItem()</code> now returns an <code>Item</code> entity instead of an <code>ItemStack</code>.</li> <li>BREAKING CHANGE (Python API): <code>Button</code> class has been moved from the <code>ActionForm</code> class to the <code>endstone.form</code>   module.</li> <li>BREAKING CHANGE (Python API): <code>PlayerJoinEvent</code>, <code>PlayerQuitEvent</code> and <code>PlayerDeathEvent</code> now use <code>Translatable</code>   for messages by default.</li> <li>Changed VENV_DIR to \"$HOME/.virtualenvs/endstone\" in <code>autoinstall.sh</code> and <code>start.sh</code> to avoid polluting users' home   directory by @GyanPrakash2483 in #226</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li><code>PlayerKickEvent</code> no longer triggers when <code>PlayerLoginEvent</code> is cancelled.</li> <li>Input (<code>stdin</code>) can now be passed down from a parent process when Endstone is running as a subprocess.</li> <li><code>ActorDamageEvent</code> now respects the invulnerable time after hurt and will be triggered by damage from a potion.</li> <li>Fixed an error that could occur with <code>ActionForm</code> when a button's <code>onClick</code> is not set.</li> <li>Use the correct colour for average TPS in <code>/status</code> command output by @MisledWater79   in #232</li> <li>Fixed a bug where the selector argument got cut short when parsing commands.</li> <li>Fixed <code>Server.name</code> property in Python API by @cenk in #220</li> </ul>"},{"location":"changelog/#094-2025-07-14","title":"0.9.4 - 2025-07-14","text":"<p>Compare with 0.9.3</p>"},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.94.2.</li> </ul>"},{"location":"changelog/#093-2025-07-04","title":"0.9.3 - 2025-07-04","text":"<p>Compare with 0.9.2</p>"},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.93.1.</li> </ul>"},{"location":"changelog/#092-2025-06-30","title":"0.9.2 - 2025-06-30","text":"<p>Compare with 0.9.1</p>"},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.92.1.</li> <li>Added <code>ChunkLoadEvent</code> and <code>ChunkUnloadEvent</code>, which are called during chunk loading and unloading.</li> <li>Added <code>PlayerPickupItemEvent</code>, which is called when a player is about to pick up an item from the ground.</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li><code>Chunk::getZ()</code> now returns the correct value.</li> <li>Fixed a crash when accessing a registry entry multiple times.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li><code>ActorRemoveEvent</code> is no longer triggered if <code>ActorSpawnEvent</code> is cancelled.</li> <li><code>PlayerTeleportEvent</code> is no longer triggered if <code>PlayerMoveEvent</code> or <code>PlayerJumpEvent</code> is cancelled.</li> </ul>"},{"location":"changelog/#091-2025-06-19","title":"0.9.1 - 2025-06-19","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.91.1.</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li><code>ItemType::getTranslationKey</code> now returns the correct translation key.</li> </ul>"},{"location":"changelog/#090-2025-06-17","title":"0.9.0 - 2025-06-17","text":"<p>Compare with 0.8.2</p>"},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.90.28 (preview).</li> <li>Added <code>PlayerConsumeItemEvent</code>, triggered when a player consumes an item (e.g., food, milk bucket).</li> <li>Added <code>PlayerMoveEvent</code>, triggered when a player moves.</li> <li>Added <code>PlayerJumpEvent</code>, triggered when a player jumps.</li> <li>Added the <code>ItemType</code> API to retrieve inherent attributes of a known item type, such as max durability.</li> <li>Added <code>Server::getPort</code> and <code>Server::getPortV6</code> to retrieve server ports.</li> <li>Expanded the <code>Inventory</code> API with additional methods.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>BREAKING CHANGE: Renamed various fields in the <code>Skin</code> class:<ul> <li><code>Skin::getSkinImage</code> -&gt; <code>Skin::getImage</code></li> <li><code>Skin::getSkinId</code> -&gt; <code>Skin::getId</code></li> </ul> </li> <li>BREAKING CHANGE: <code>ItemStack::getType</code> now returns <code>ItemType</code> instead of <code>std::string</code>. You can still compare an   <code>ItemType</code> with a string.</li> <li>BREAKING CHANGE: <code>PacketSendEvent</code> and <code>PacketReceiveEvent</code> now fire for both pre-login and post-login packets.   Ensure null safety when accessing the player object, as it may be <code>null</code> during pre-login.</li> </ul>"},{"location":"changelog/#082-2025-06-07","title":"0.8.2 - 2025-06-07","text":"<p>Compare with 0.8.1</p>"},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.84.1</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Fixed an issue when parsing arguments in custom commands (#190)</li> <li>Ensure only certain server files are overwritten during update (#185)</li> </ul>"},{"location":"changelog/#081-2025-05-20","title":"0.8.1 - 2025-05-20","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.82.1</li> </ul>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Resolve compatibility issues with custom commands registered via the beta Script API (   <code>init.customCommandRegistry.registerCommand</code>).</li> <li>Resolve a compatibility issue with LegacyScriptEngine when used in LeviStone, a downstream project.</li> <li>Fix #150 by allowing explicit permission grants for non-OP   players to execute OP commands.</li> <li><code>ActorDamageEvent</code> will no longer fire if the <code>damage_sensor</code> determines that no damage should be dealt.</li> <li><code>BlockBreakEvent</code> will no longer fire when a player uses an item that's not supposed to break blocks in Creative mode.</li> </ul>"},{"location":"changelog/#080-2025-05-11","title":"0.8.0 - 2025-05-11","text":"<p>Compare with 0.7.3</p>"},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.80.3</li> <li>Introduced a new Registry API for accessing the built-in definitions (e.g., all available enchantments via   <code>Server::getEnchantmentRegistry</code>)</li> <li>Added ability to edit item enchantments via the <code>ItemMeta</code> API</li> <li>Added ability to get and set an item's repair cost and mark it as unbreakable via the <code>ItemMeta</code> API</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>C++ plugins can now register event handlers for <code>PlayerDeathEvent</code></li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Simplified <code>endstone::Result</code> for improved error handling</li> </ul>"},{"location":"changelog/#073-2025-05-06","title":"0.7.3 \u2013 2025-05-06","text":"<p>Compare with 0.7.2</p>"},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.80.</li> <li>Added divider and header for <code>ActionForm</code>.</li> </ul>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Ensure SetLocalPlayerAsInitializedPacket is handled only once when a player   joins (#171).</li> <li>Death message is now correctly localised on the client side.</li> <li>Python interpreter now launches correctly in multiprocessing scenarios.</li> </ul>"},{"location":"changelog/#072-2025-03-29","title":"0.7.2 \u2013 2025-03-29","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.71.01.</li> <li>Added <code>getDamage</code> and <code>setDamage</code> to <code>ItemMeta</code> for handling item durability.</li> <li>Added <code>getRuntimeId</code> to <code>BlockData</code> to retrieve the runtime ID of a block permutation (also known as the network hash   ID).</li> </ul>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Fixed an issue where outgoing packet statistics were not written to <code>packet-statistics.txt</code>.</li> </ul>"},{"location":"changelog/#071-2025-03-27","title":"0.7.1 - 2025-03-27","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>Added support for BDS version 1.21.70.04.</li> <li>Added new <code>setPayload</code> method in <code>PacketSendEvent</code> and <code>PacketReceiveEvent</code> for editing packet contents.</li> <li>Introduced a configuration file, <code>endstone.toml</code>, for Endstone configurations.</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Resolved a crash caused by sending packets within the <code>PacketSendEvent</code> handler.</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Updated the behavior of server pack enforcement to match vanilla BDS: clients are not allowed to use custom packs when   <code>texturepack-required</code> is set to <code>true</code> in <code>server.properties</code>. This behavior can be overridden by setting   <code>allow-client-packs</code> in <code>endstone.toml</code>.</li> </ul>"},{"location":"changelog/#070-2025-03-25","title":"0.7.0 - 2025-03-25","text":"<p>Compare with 0.6.2</p>"},{"location":"changelog/#added_18","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.70.</li> <li>Introduced the <code>Service</code> API, enabling plugins to register services that can be utilized by other plugins.</li> <li>Implemented dependency resolution for the plugin manager.</li> <li>Anonymous enums are now supported in command registration. For example, instead of writing <code>/home (add|remove)&lt;action: HomeAction&gt;</code>, you can now simply write <code>/home &lt;add|remove&gt;</code>.</li> <li>Inventory API: Added a basic <code>ItemMeta</code> API, allowing you to get and set the display name and lore of an item.</li> <li>Inventory API: Introduced various methods to get and set items in armor slots as well as main/off-hand slots.</li> <li>Inventory API: Added methods to get and set the selected hotbar slot.</li> </ul>"},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Fixed a crash caused by a conflict with the event system of the scripting API.</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>BREAKING CHANGE: <code>DataPacketReceiveEvent</code> and <code>DataPacketSendEvent</code> have been renamed to <code>PacketReceiveEvent</code>   and <code>PacketSendEvent</code>, respectively. Both events now provide a packet ID and payload instead of a <code>data</code> field.</li> <li>BREAKING CHANGE: <code>Player::sendPacket</code> now requires a packet ID and payload as arguments instead of a <code>Packet</code>   object.</li> </ul>"},{"location":"changelog/#062-2025-03-09","title":"0.6.2 - 2025-03-09","text":"<p>Compare with 0.6.1</p>"},{"location":"changelog/#added_19","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.62.</li> <li>Added <code>DataPacketReceiveEvent</code> and <code>DataPacketSendEvent</code> to allow viewing/intercepting low-level packet payloads.</li> <li>Added <code>Actor::remove</code> to remove an actor from its associated dimension.</li> <li>Python API: Added <code>Dimension.get_highest_block_at</code> to get the top non-air block at a given coordinate.</li> </ul>"},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>Usages are now displayed correctly as percentages in <code>/status</code> command output.</li> <li>Boss bars are now displayed correctly.</li> <li>Death messages are no longer sent when the <code>SHOW_DEATH_MESSAGES</code> game rule is set to false.</li> <li>Command feedback is now suppressed when the <code>SEND_COMMAND_FEEDBACK</code> game rule is set to false.</li> <li><code>PlayerJoinEvent</code> is now triggered after the client is fully initialized.</li> <li>Crash reporting now works properly on Linux.</li> </ul>"},{"location":"changelog/#061-2025-02-20","title":"0.6.1 - 2025-02-20","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Resolved a crash caused by <code>ProxiedCommandSender</code></li> </ul>"},{"location":"changelog/#060-2025-02-19","title":"0.6.0 \u2013 2025-02-19","text":"<p>Compare with 0.5.7.1</p>"},{"location":"changelog/#added_20","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.60.</li> <li>Added more liquid-related data to the DevTools by @smartcmd in #113.</li> <li>Added Sentry for crash reporting.</li> <li>Added <code>Player::playSound</code>, <code>Player::stopSound</code>, and <code>Player::stopAllSounds</code> for client-side sound playing.</li> <li>Added <code>Player::isSneaking</code> and <code>Player::setSneaking</code> to toggle the sneaking mode of a player.</li> <li>Added <code>Player::isSprinting</code> and <code>Player::setSprinting</code> to toggle the sprinting mode of a player.</li> <li>Added <code>PlayerGameModeChangeEvent</code>, triggered when a player's game mode changes. This event is cancellable.</li> <li>Added <code>PlayerEmoteEvent</code>, triggered when a player sends an emote.</li> <li>Added <code>PlayerRespawnEvent</code>, triggered when a player respawns after death.</li> <li>Added <code>ActorDamageEvent</code>, triggered when a living entity receives damage. You can cancel this event to stop the damage   from being effective.</li> <li>Added <code>ActorExplodeEvent</code>, triggered when a mob (e.g. Creeper) explodes. You can cancel this event to stop the   explosion.</li> <li>Added more statistics to the <code>/status</code> command (e.g., memory usage, chunk status, etc.).</li> <li>Added damage source to <code>ActorDeathEvent</code> and <code>PlayerDeathEvent</code> to retrieve information about the damager.</li> <li>Added a basic chunk API.</li> <li>Added block collision data to the DevTools by @smartcmd in #132.</li> </ul>"},{"location":"changelog/#fixed_18","title":"Fixed","text":"<ul> <li>Fixed the logic of finding the Python executable associated with the current interpreter   by @killcerr in #114.</li> <li>Fixed the logic for parsing the <code>message</code> command parameter type.</li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Python API: Events that are cancellable now inherit from <code>Cancellable</code>. You can check if an event is cancellable   by using <code>isinstance(event, Cancellable)</code>.</li> <li><code>Dimension::getBlockAt</code> now returns a pointer to a <code>Block</code> directly instead of a <code>Result</code> wrapper, making the   interface more concise. If the requested block is in an unloaded or unpopulated chunk, it returns an empty block.</li> </ul>"},{"location":"changelog/#0571-2024-12-24","title":"0.5.7.1 - 2024-12-24","text":"<p>Compare with 0.5.7</p>"},{"location":"changelog/#fixed_19","title":"Fixed","text":"<ul> <li>Fixed an issue where the <code>event.is_cancelled</code> property in the Python binding was not writable.</li> <li>Prevented player command execution from being printed to the console if the <code>PlayerCommandEvent</code> was already cancelled   by plugins.</li> </ul>"},{"location":"changelog/#057-2024-12-23","title":"0.5.7 - 2024-12-23","text":"<p>Compare with 0.5.6</p>"},{"location":"changelog/#added_21","title":"Added","text":"<ul> <li>Added getter and setter for name tags and score tags in the <code>Actor</code> class.</li> <li>Added the <code>Actor::getType</code> function to retrieve actor types (e.g., <code>minecraft:pig</code>).</li> <li>Added <code>isNameTagAlwaysVisible</code> and <code>setNameTagAlwaysVisible</code> methods to the <code>Actor</code> class to control the visibility of   name tags.</li> <li>Implemented <code>/ban-ip</code> and <code>/unban-ip</code> commands.</li> <li>Added <code>Server::getIpBanList</code> for managing IP bans.</li> <li>Added setters for fields in <code>ServerListPingEvent</code> by @theaddonn.</li> <li>Added a new color code (<code>\u00a7v</code>).</li> </ul>"},{"location":"changelog/#fixed_20","title":"Fixed","text":"<ul> <li>Prevented a crash caused by killing a player in a form callback, which invalidated the player object.</li> <li>Fixed an issue where the player inventory was not updated after calling <code>clear</code>.</li> <li>Fixed loading of encrypted resource packs.</li> <li>Ensured the correct plugin loader is selected when loading from a file by third-party plugin loaders   by @engsr6982.</li> <li>Ensured players with matching IP addresses are immediately kicked upon banning.</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Renamed <code>Server::getPlayerBanList</code> to <code>Server::getBanList</code>.</li> <li>Removed deprecated material from DevTools by @smartcmd.</li> </ul>"},{"location":"changelog/#056-2024-12-06","title":"0.5.6 - 2024-12-06","text":"<p>Compare with 0.5.5</p>"},{"location":"changelog/#added_22","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.50 (The Garden Awakens).</li> <li>Added <code>Inventory::getItem</code> and <code>Inventory::setItem</code> methods to manipulate a player's inventory.</li> <li>Added <code>Inventory::getContents</code> method to retrieve all items in an inventory.</li> <li>Added <code>/ban</code> and <code>/unban</code> commands to add or remove players from the deny list.</li> <li>Added <code>/banlist [ips|players]</code> command to list all banned players and/or IPs.</li> <li>Added <code>PluginManager::loadPlugin</code> to allow third-party plugin loaders to load plugins from single files instead of   directories. #98</li> </ul>"},{"location":"changelog/#fixed_21","title":"Fixed","text":"<ul> <li>Fixed an issue where <code>block_palette.nbt</code> was dumped twice in the DevTools.</li> </ul>"},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Added support for loading a mixture of folder packs listed in <code>world_resource_packs.json</code> (the conventional method)   and zipped packs in <code>.zip</code> or <code>.mcpack</code> format placed under <code>resource_packs</code>.</li> </ul>"},{"location":"changelog/#055-2024-10-26","title":"0.5.5 - 2024-10-26","text":"<p>Compare with 0.5.4.1</p>"},{"location":"changelog/#added_23","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.40 (Bundles of Bravery).</li> <li>CommandSender will now be downcast to the correct derived type on the Python side.</li> <li>Added the <code>Objective::isDisplayed</code> method to check if an objective is being displayed in any of the scoreboard slots.</li> <li>Added <code>Server::getOnlineMode</code> to check if the server is running with authentication enabled.</li> <li>Added <code>Actor::getScoreboardTags</code> to get the list of tags added to the actor.</li> <li>Added <code>Actor::addScoreboardTag</code> and <code>Actor::removeScoreboardTag</code> to modify the actor's tags.</li> <li>Added support for loading zipped resource packs. You can now put <code>.zip</code> and <code>.mcpack</code> resource packs under   the <code>resource_packs</code> folder, and they will be loaded automatically when the server starts.</li> <li>Added support for encrypted resource packs. You can put the keys in the <code>.zip.key</code> or <code>.mcpack.key</code> format next to the   resource packs.</li> <li>Added the <code>ScriptMessageEvent</code>, which will get called when a script message is sent using the <code>/scriptevent</code> command.</li> <li>Added <code>Server::getLanguage</code> to translate a message into a specific locale.</li> <li>Added <code>Actor::getHealth</code>, <code>Actor::setHealth</code>, and <code>Actor::getMaxHealth</code> for getting and setting actor health.</li> <li>Added <code>CommandSenderWrapper</code> to capture the output of command execution for any command sender.</li> <li>Added <code>Player::spawnParticle</code> to send a particle effect that is only visible to the player.</li> </ul>"},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Error messages from DevTools, when OpenGL is not available, are now suppressed.</li> <li>The return type of several methods has been changed to <code>endstone::Result</code> to include error messages, which will   automatically throw exceptions with the same messages on the Python side.</li> </ul>"},{"location":"changelog/#fixed_22","title":"Fixed","text":"<ul> <li>Fixed a crash that occurred while handling server ping   requests (#60).</li> </ul>"},{"location":"changelog/#0541-2023-09-19","title":"0.5.4.1 - 2023-09-19","text":"<p>Compare with 0.5.4</p>"},{"location":"changelog/#fixed_23","title":"Fixed","text":"<ul> <li>Fixed a crash that could occur when the player uses emotes.</li> </ul>"},{"location":"changelog/#054-2024-09-19","title":"0.5.4 - 2024-09-19","text":"<p>Compare with 0.5.3</p>"},{"location":"changelog/#added_24","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.30.</li> <li>Added support for Python 3.13.</li> <li>Added biome data to the DevTools by @CoolLoong.</li> </ul>"},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>BREAKING CHANGE: <code>Player::performCommand</code> now executes the command as a Player to   resolve #53. This means the command execution will now depend on   the player's permissions as operator permissions are no longer granted. If you still want to have the player perform a   command with elevated permissions, consider using <code>Server::dispatchCommand</code> to execute   <code>execute as {player_name} run {command}</code>.</li> </ul>"},{"location":"changelog/#fixed_24","title":"Fixed","text":"<ul> <li><code>Actor::isOnGround</code>, <code>Actor::isInWater</code>, and <code>Actor::isInLava</code> now return the correct values.</li> <li>Fixed a typo in the documentation by @thatgurkangurk.</li> <li>Fixed the command parser logic for chained commands.</li> <li>Fixed a server crash when spawning a simulated player due to the absence of an invalid network identifier.</li> </ul>"},{"location":"changelog/#053-2024-09-12","title":"0.5.3 - 2024-09-12","text":"<p>Compare with 0.5.2</p>"},{"location":"changelog/#added_25","title":"Added","text":"<ul> <li>Added support for Minecraft v1.21.23.</li> <li>Introduced the <code>BlockData</code> class, which encapsulates both the block type and a specific state from all possible block   states.</li> <li>Block types and block states can now be used as command arguments.</li> <li>Added <code>PlayerKnockbackEvent</code>, triggered when a player receives knockback. Developers can modify the knockback that the   player will receive.</li> <li>Added <code>PlayerKickEvent</code>, triggered when a player is kicked from the server, allowing for customization of kick   messages.</li> <li>Introduced the <code>BlockState</code> class, representing a snapshot of a block at a specific point in time.</li> <li><code>PlayerJoinEvent</code> and <code>PlayerQuitEvent</code> now include getter and setter methods for customizing join/quit messages.</li> <li>Integrated bStats metrics.</li> </ul>"},{"location":"changelog/#changed_12","title":"Changed","text":"<ul> <li>BREAKING CHANGE: Renamed <code>Server::getNewScoreboard</code> to <code>Server::createScoreboard</code> for consistency with other   methods like <code>createBossbar</code> and <code>createBlockData</code>.</li> <li>Lifted the restriction on the <code>/reload</code> command for console use. It can now be executed in-game.</li> </ul>"},{"location":"changelog/#fixed_25","title":"Fixed","text":"<ul> <li>Enforced the use of libc++ for C++ plugins on Linux to resolve symbol errors.</li> <li><code>Player::setExpProgress</code> now correctly sets experience progress without precision loss.</li> <li>Fixed an issue where death messages were being sent to players twice.</li> <li>Resolved a crash when calling <code>ItemStack::getType</code> on an item from <code>PlayerInteractEvent</code> when the player interacts   with a block with bare hands.</li> <li><code>PlayerInteractEvent::hasItem</code> now correctly returns <code>false</code> if the player has no item in hand when interacting.</li> </ul>"},{"location":"changelog/#052-2024-08-30","title":"0.5.2 - 2024-08-30","text":"<p>Compare with 0.5.1</p>"},{"location":"changelog/#added_26","title":"Added","text":"<ul> <li>Support for Minecraft v1.21.22.</li> <li>Boss bar API.</li> <li><code>Block::getRelative</code> to get a block relative to a block face.</li> <li><code>BlockBreakEvent</code> triggered when a player breaks a block.</li> <li><code>BlockPlaceEvent</code> triggered when a player places a block against another block.</li> <li><code>PlayerInteractEvent</code> triggered when a player right-clicks a block.</li> <li><code>PlayerInteractActorEvent</code> triggered when a player interacts with an actor.</li> <li>An auto installer script for installing Endstone on Linux (thanks to @legitbox).</li> </ul>"},{"location":"changelog/#changed_13","title":"Changed","text":"<ul> <li>Check chunk states before getting the block in <code>Dimension::getBlockAt</code>.</li> </ul>"},{"location":"changelog/#fixed_26","title":"Fixed","text":"<ul> <li>#38 - Plugins can now be properly loaded inside a virtual   environment on Linux.</li> </ul>"},{"location":"changelog/#051-2024-08-24","title":"0.5.1 - 2024-08-24","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#added_27","title":"Added","text":"<ul> <li>Support for Minecraft v1.21.20.</li> <li><code>Player::getScoreboard</code> and <code>Player::setScoreboard</code> methods to allow each player to have their own scoreboard (   separate from the main shared scoreboard).</li> <li><code>PlayerTeleportEvent</code>, which is called when a player is teleported from one location to another.</li> <li><code>Actor::teleport</code> method to teleport an actor to a given location or actor.</li> <li>The server can now be gracefully shut down when <code>Ctrl</code> + <code>C</code> is pressed.</li> <li><code>/status</code> command to show the uptime and performance of the server.</li> <li>Basic network API to allow plugins to send custom packets. Currently, only <code>SpawnParticleEffectPacket</code> is supported.</li> <li><code>/reload</code> command to reload plugins in addition to addons.</li> <li><code>Player::sendToast</code> method to send a toast message to players.</li> <li>Furnace-related item data to DevTools by @smartcmd.</li> </ul>"},{"location":"changelog/#changed_14","title":"Changed","text":"<ul> <li><code>Player::isOp</code> and <code>Player::setOp</code> methods are now consistent with the similar methods in the scripting API.</li> <li>The fix for the warning message about empty packets is now redundant and has been removed.</li> <li>BREAKING CHANGE: <code>Server::getLevels</code> has been replaced by <code>Server::getLevel</code>.</li> <li>BREAKING CHANGE: <code>Player::getDeviceId</code> now returns a string object instead of a UUID object, as it is not   guaranteed to be a UUID on all platforms.</li> </ul>"},{"location":"changelog/#fixed_27","title":"Fixed","text":"<ul> <li>#29 - Commands will no longer be sent to a player who doesn't have</li> <li>#32 - Creating an action form without an <code>on_submit</code> callback will   no longer crashes the server</li> <li>Plugin config files are now always read and written in UTF-8 encoding.</li> <li>Added a missing parameter to <code>ActionForm::addButton</code>.</li> <li>Action forms without any buttons can now be displayed correctly on the client side.</li> <li>The Python executable can now be located in multiple possible locations on Linux.</li> </ul>"},{"location":"changelog/#050-2024-07-29","title":"0.5.0 - 2024-07-29","text":"<p>Compare with 0.4.10</p>"},{"location":"changelog/#added_28","title":"Added","text":"<ul> <li>Support for Minecraft v1.21.3.</li> <li><code>Actor::getId</code> function to get an actor's unique id, persisting between server runs.</li> <li><code>Actor::isDead</code> function to check if an actor is marked for removal post-death.</li> <li><code>ActorTeleport</code> event that triggers when an entity teleports (e.g., Enderman, Wolf).</li> <li><code>Mob::isGliding</code> function to check if a living entity is gliding.</li> <li><code>Player::sendTitle</code> and <code>Player::resetTitle</code> functions for sending and resetting an on-screen title.</li> <li><code>Player::transfer</code> function to transfer a player to another server.</li> <li><code>Player::getXuid</code> to get the Xbox User ID (XUID) of the player.</li> <li>Python: package metadata can now be used as a fallback for plugin metadata.</li> <li>Python: <code>isinstance</code> function can now be used to check if a <code>CommandSender</code> is a <code>Player</code> or <code>ConsoleCommandSender</code>.</li> <li>Experimental Scoreboard API.</li> <li>Experimental Form API.</li> </ul>"},{"location":"changelog/#changed_15","title":"Changed","text":"<ul> <li><code>Player</code> class now inherits from the <code>Mob</code> class instead of <code>Actor</code> class.</li> <li>BREAKING CHANGE: Plugin names should only contain lowercase letters, numbers, and underscores. Use the prefix   property to display a different name for the plugin logger.</li> <li>BREAKING CHANGE: The <code>player.ping</code> property now returns an <code>int</code> instead of <code>datetime.timedelta</code>.</li> </ul>"},{"location":"changelog/#fixed_28","title":"Fixed","text":"<ul> <li>Fixed issue where <code>Server::setMaxPlayers</code> would crash due to a change in the internal struct in BDS.</li> <li>Fixed issue that python executable cannot be located when running in a virtual environment.</li> </ul>"},{"location":"changelog/#0410-2024-07-10","title":"0.4.10 - 2024-07-10","text":"<p>Compare with 0.4.9</p>"},{"location":"changelog/#added_29","title":"Added","text":"<ul> <li>Support for Minecraft v1.21.2.</li> <li><code>Player::getSkin</code> method to retrieve the current skin of a player.</li> <li>Support for recipes with output items possessing NBT (Named Binary Tag) tags. These tags are now also included   in the dumped data.</li> </ul>"},{"location":"changelog/#fixed_29","title":"Fixed","text":"<ul> <li>Issue with shaped recipes. Recipes that have item tags as input (instead of item names) can now be dumped correctly.</li> </ul>"},{"location":"changelog/#049-2024-07-05","title":"0.4.9 - 2024-07-05","text":"<p>Compare with 0.4.8.1</p>"},{"location":"changelog/#added_30","title":"Added","text":"<ul> <li>Support for Minecraft v1.21.1.</li> <li><code>ActorDeathEvent</code> and <code>PlayerDeathEvent</code> triggers when an actor or a player dies.</li> <li><code>Player::giveExp</code> and <code>Player::giveExpLevels</code> functionality for adding experience points/levels added.</li> <li><code>Player::getAllowFlight</code> and <code>Player::setAllowFlight</code> to check or grant the ability for players not in creative mode   to fly.</li> <li><code>Player::setFlying</code> to toggle a player's flying status.</li> <li>An overload of <code>sendMessage</code> to allow sending of translatable messages with parameters that will be localized on the   client side.</li> <li><code>Player::getExpProgress</code> and <code>Player::setExpProgress</code> to get or set a player's progress towards the next level.</li> <li><code>Player::getExpLevel</code> and <code>Player::setExpLevel</code> to get or set a player's current experience level.</li> <li><code>Player::getTotalExp</code> to get the total amount of experiences a player has collected.</li> <li><code>Player::getLocale</code> to get the player's current locale.</li> <li><code>Player::getDeviceId</code> and <code>Player::getDeviceOS</code> to get information related to player's device.</li> <li>A DevTools to help community projects get necessary data from BDS (currently only available on Windows). To open the   DevTools, use command <code>/devtools</code> in the console.</li> </ul>"},{"location":"changelog/#changed_16","title":"Changed","text":"<ul> <li><code>Permissible.op</code> property in the python binding is renamed to <code>Permissible.is_op</code>.</li> <li>Crash dumps will now print system and version info in addition to stacktraces.</li> </ul>"},{"location":"changelog/#fixed_30","title":"Fixed","text":"<ul> <li>Suppressed warning message about empty UDP packets from the output.</li> </ul>"},{"location":"changelog/#0481-2024-06-15","title":"0.4.8.1 - 2024-06-15","text":"<p>Compare with 0.4.7</p>"},{"location":"changelog/#added_31","title":"Added","text":"<ul> <li>Support Minecraft v1.21 (Tricky Trials)</li> </ul>"},{"location":"changelog/#fixed_31","title":"Fixed","text":"<ul> <li><code>Player::getPing</code> now returns correct value instead of -1 on Linux.</li> <li><code>Player::isFlying</code> now works correctly in all conditions.</li> <li>Calling python binding of <code>Server::getPlayer</code> with uuid no longer crashes.</li> <li>Fixed a regression in vanilla command permissions.</li> <li>Permission attachment now works as expected.</li> </ul>"},{"location":"changelog/#047-2024-06-13","title":"0.4.7 - 2024-06-13","text":"<p>Compare with 0.4.6</p>"},{"location":"changelog/#added_32","title":"Added","text":"<ul> <li><code>Player::performCommand</code> allows a player to execute a given command. During the command execution, the player is   temporarily granted the operator permission.</li> <li><code>Level::getDimension</code> and <code>Level::getDimensions</code> for getting dimensions within a specific level.</li> <li><code>Actor::getDimension</code> for getting the dimension that an actor resides in.</li> <li><code>Player::getGameMode</code> and <code>Player::setGameMode</code> for getting and setting a player's game mode.</li> <li>Plugin configuration for Python plugins.</li> <li>Added more struct info by @Duckos-Mods   in #11.</li> <li>World seed will no longer be sent to the client when <code>client-side-chunk-generation-enabled</code> is disabled   in <code>server.properties</code>.</li> <li>Command permissions are now checked before its parsing.</li> <li><code>Server::dispatchCommand</code> allows one to dispatch a command on the server.</li> <li><code>Server::getMaxPlayers</code> and <code>Server::setMaxPlayers</code> for getting and setting the maximum amount of players allowed to   be logged in.</li> <li><code>Server::getPlayer</code> now also accepts a string argument to get a player by name instead of UUID.</li> </ul>"},{"location":"changelog/#changed_17","title":"Changed","text":"<ul> <li>Changed logging level look-up from using a hashmap to using a switch by @Duckos-Mods   in #12</li> <li>Endstone no longer requires the presence of debug symbols at runtime.</li> </ul>"},{"location":"changelog/#fixed_32","title":"Fixed","text":"<ul> <li><code>Actor::getVelocity</code> now returns the correct velocity when the actor rides a vehicle.</li> <li>Python plugin loader now works correctly with Python 3.9.</li> </ul>"},{"location":"changelog/#046-2024-05-15","title":"0.4.6 - 2024-05-15","text":"<p>Compare with 0.4.5</p>"},{"location":"changelog/#fixed_33","title":"Fixed","text":"<ul> <li>Improved the detection of Python executable.</li> </ul>"},{"location":"changelog/#045-2024-05-14","title":"0.4.5 - 2024-05-14","text":"<p>Compare with 0.4.3</p>"},{"location":"changelog/#added_33","title":"Added","text":"<ul> <li>Bootstrap now protects specific files from overwriting during update.</li> <li>Python plugin loader now loads all <code>*.whl</code> plugins under the <code>plguins</code> folder and their dependencies during server   start up.</li> </ul>"},{"location":"changelog/#fixed_34","title":"Fixed","text":"<ul> <li>Scheduler now works on Linux.</li> </ul>"},{"location":"changelog/#043-2024-05-13","title":"0.4.3 - 2024-05-13","text":"<p>Compare with 0.4.2</p>"},{"location":"changelog/#added_34","title":"Added","text":"<ul> <li><code>Server::getOnlinePlayers</code> for getting all online players.</li> <li><code>Player::kick</code> for kicking a specific player with a custom message.</li> <li><code>Player::getPing</code> for getting the average latency of a connected player.</li> <li><code>Actor::getLocation</code> and <code>Actor::getVelocity</code> for getting the location and velocity of an actor respectively.</li> <li><code>Actor::getLevel</code> for getting the <code>Level</code> that an actor resides in.</li> </ul>"},{"location":"changelog/#changed_18","title":"Changed","text":"<ul> <li><code>Level</code> is no longer created for each <code>Dimension</code> in a Minecraft world. Instead, one <code>Level</code> now manages multiple   <code>Dimension</code>s.</li> <li><code>Player::getAddress</code> now returns a <code>SocketAddress</code> instead of <code>std::string</code>. <code>Player::getPort</code> was removed,   use <code>SocketAddress::getPort</code> instead.</li> <li>Executable <code>endstone</code> now accepts <code>--server-folder</code> instead of <code>--install-folder</code>, and <code>--no-confirm</code> instead   of <code>--install</code>.</li> <li>Endstone server will now ask the user whether to update the Bedrock Dedicated Server if an older version is found.</li> </ul>"},{"location":"changelog/#042-2024-04-30","title":"0.4.2 - 2024-04-30","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#added_35","title":"Added","text":"<ul> <li><code>Level::getDimension</code> for getting the dimension of a specific level.</li> <li><code>Player::getAddress</code> and <code>Player::getPort</code> for getting the socket address and port of a specific player, respectively.</li> <li>Logs are now written to <code>logs/latest.log</code> with rotations.</li> <li>Basic scheduler implementation, currently supporting only synchronized task execution.</li> <li><code>PlayerLoginEvent</code> is called when a player attempts to log in.</li> </ul>"},{"location":"changelog/#changed_19","title":"Changed","text":"<ul> <li>Support for Minecraft v1.20.81 (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_35","title":"Fixed","text":"<ul> <li>Server no longer crashes when the weather is changed on Linux.</li> </ul>"},{"location":"changelog/#041-2024-04-24","title":"0.4.1 - 2024-04-24","text":"<p>Compare with 0.4.0</p> <p>This release focuses on supporting game version v1.20.80, which adds several new features. Additionally, we add a few useful functions to <code>Player</code> and <code>Server</code>.</p>"},{"location":"changelog/#added_36","title":"Added","text":"<ul> <li>Commands executed by players are now logged to the console.</li> <li>Message of <code>/say</code> command will be logged to the console.</li> <li><code>PlayerCommandEvent</code> is called when a player attempts to execute a command.</li> <li><code>Server::broadcastMessage</code> for broadcasting messages to all players.</li> <li><code>BroadcastMessageEvent</code> is called when a message is broadcast by the server.</li> </ul>"},{"location":"changelog/#changed_20","title":"Changed","text":"<ul> <li>Support for Minecraft v1.20.80 - Armored Paws (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_36","title":"Fixed","text":"<ul> <li>Player permissions are recalculated when the op status is changed.</li> <li>Incorrect UUID for Players corrected.</li> </ul>"},{"location":"changelog/#040-2024-04-20","title":"0.4.0 - 2024-04-20","text":"<p>Compare with 0.3.0</p> <p>In this release, we added an event system and several basic interfaces for game objects like <code>Level</code>, <code>Actor</code> and <code>Player</code>.</p>"},{"location":"changelog/#added_37","title":"Added","text":"<ul> <li>Event system that allows plugins to listen for specific events.</li> <li><code>ServerLoadEvent</code> is called when a server is started up.</li> <li><code>Plugin::registerEventHandler</code> for registering an event handler in C++ plugins.</li> <li>Decorator <code>@event_handler</code> for registering an event handler in Python plugins.</li> <li><code>PluginEnableEvent</code> and <code>PluginDisableEvent</code> are called when a plugin is enabled or disabled.</li> <li><code>ServerPingListEvent</code> can be listened to for customizing how the server appears in the client list.</li> <li><code>ServerCommandEvent</code> is called when the server executes a command.</li> <li><code>WeatherChangeEvent</code> and <code>ThunderChangeEvent</code> are called when the weather or thunder status changes in a level.</li> <li>Basic interface <code>endstone::Level</code> for a level/world.</li> <li>Basic interface <code>endstone::Actor</code> for entities/actors.</li> <li>Basic interface <code>endstone::Player</code> for players.</li> <li><code>Server::getPlayer</code> for getting a player instance by UUID.</li> <li><code>Player::sendPopup</code> and <code>Player::sendTip</code> for sending popup and tip messages.</li> <li>Stack traces are now printed to the console when an unrecoverable error occurs.</li> <li><code>PlayerJoinEvent</code> and <code>PlayerQuitEvent</code> are called when a player joins and leaves the server.</li> <li><code>ActorSpawnEvent</code> is called when an actor is spawned in the level.</li> <li><code>ActorRemoveEvent</code> is called when an actor is removed from the level.</li> <li><code>PlayerChatEvent</code> is called when a player sends a message.</li> </ul>"},{"location":"changelog/#changed_21","title":"Changed","text":"<ul> <li>Singletons are now managed using <code>entt::locator</code>.</li> <li>Macro <code>ENDSTONE_PLUGIN</code> is improved to simplify the definition of plugin metadata.</li> <li><code>ColorFormat</code> and <code>GameMode</code> have been moved from <code>endstone.util</code> to <code>endstone</code> in the Python package.</li> <li>Wheels are now built and released with <code>RelWithDebInfo</code> configuration to enable stack trace printing.</li> <li>Support for Minecraft v1.20.73 (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_37","title":"Fixed","text":"<ul> <li>Server no longer crashes when <code>/listd</code> command is executed.</li> </ul>"},{"location":"changelog/#030-2024-03-21","title":"0.3.0 - 2024-03-21","text":"<p>Compare with 0.2.0</p> <p>This is the second release of Endstone with a focus on the permission system and improving the plugin loading mechanisms.</p>"},{"location":"changelog/#added_38","title":"Added","text":"<ul> <li>Basic permission systems.</li> <li>Enforced Plugin API version checks for C++ and Python plugins to ensure ABI/API compatibility.</li> <li>Commands are now defined within the plugin metadata which will be automatically registered when the associated plugin   is enabled.</li> <li>PluginDescription properties are extended to support <code>website</code>, <code>load_order</code>, <code>depend</code>, <code>soft_depend</code>, <code>load_before</code>,   and <code>provides</code>.</li> </ul>"},{"location":"changelog/#changed_22","title":"Changed","text":"<ul> <li>Improved <code>ENDSTONE_PLUGIN</code> macro to further simplify the definition of plugin metadata.</li> <li>Plugin names and websites are now displayed when using <code>/version [plugin: PluginName]</code>.</li> <li>Support for Minecraft v1.20.72 (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_38","title":"Fixed","text":"<ul> <li>C++ plugin loader now respects the <code>prefix</code> property of a plugin.</li> </ul>"},{"location":"changelog/#020-2024-03-19","title":"0.2.0 - 2024-03-19","text":"<p>Hello World! This is the first release of Endstone.</p>"},{"location":"changelog/#added_39","title":"Added","text":"<ul> <li>Basic plugin loader for C++ and Python plugins.</li> <li>Basic command system that allows plugins to register custom commands.</li> </ul>"},{"location":"getting-started/contributing/","title":"Contributing","text":"<p>\ud83d\udc4d\ud83c\udf89 First off, thanks for taking the time to contribute! \ud83c\udf89\ud83d\udc4d</p>"},{"location":"getting-started/contributing/#where-to-start","title":"Where to start?","text":"<p>If you are looking for a good issue to start with, please check the following:</p> <ul> <li>good first issue - issues that   should be pretty simple to implement,</li> <li>help wanted - issues that typically are   a bit more involved than beginner issues,</li> <li>high priority - things to fix ASAP   but often of higher complexity.</li> </ul>"},{"location":"getting-started/contributing/#source","title":"Source","text":"<p>To build from source on your local machine, please follow the instructions below:</p>"},{"location":"getting-started/contributing/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/EndstoneMC/endstone.git\ncd endstone\n</code></pre>"},{"location":"getting-started/contributing/#install-the-package-manager-conan","title":"Install the package manager (conan)","text":"<p>The dependencies needed for the development of Endstone are provided Conan Package Manager (<code>&gt;=2.0</code>). The install the package manager, run the following commands in your Python environment.</p> <pre><code>pip install conan\nconan profile detect\n</code></pre>"},{"location":"getting-started/contributing/#install-dependencies","title":"Install dependencies","text":"<p>First of all, run the following commands to install dependencies of this project:</p>  Command Prompt Powershell Linux <pre><code>conan install . --build=missing -s compiler.cppstd=20 -c tools.cmake.cmaketoolchain:generator=Ninja\n</code></pre> <pre><code>conan install . --build=missing -s compiler.cppstd=20 -c tools.cmake.cmaketoolchain:generator=Ninja -c tools.env.virtualenv:powershell=True\n</code></pre> <pre><code>conan install . --build=missing -s compiler.cppstd=20 -s compiler.libcxx=libc++ -c tools.cmake.cmaketoolchain:generator=Ninja\n</code></pre> <p>Now, activate the build virtual environment create by conan.</p>  Command Prompt Powershell Linux <pre><code>.\\build\\Release\\generators\\conanbuild.bat\n</code></pre> <pre><code>.\\build\\Release\\generators\\conanbuild.ps1\n</code></pre> <pre><code>source ./build/Release/generators/conanbuild.sh\n</code></pre> <p>Run <code>cmake</code> and check the version:</p> <pre><code>$ cmake --version\ncmake version 3.31.2\n</code></pre>"},{"location":"getting-started/contributing/#build-with-cmake","title":"Build with CMake","text":"<pre><code>cmake --preset conan-release\ncmake --build --preset conan-release\n</code></pre>"},{"location":"getting-started/contributing/#install","title":"Install","text":"<p>To install Endstone from your local sources, simply run:</p> <pre><code>pip install -U .\n</code></pre>"},{"location":"getting-started/contributing/#documentation","title":"Documentation","text":"<p>We are building our documentation using Material for MkDocs. The easiest way to install all the required dependencies is with <code>pip</code>:</p> <pre><code>pip install -r docs/requirements.txt\n</code></pre> <p>After that, you can either:</p> <ul> <li>Start a live server to preview the documentation as you write, or</li> </ul> <pre><code>mkdocs serve\n</code></pre> <ul> <li>Build the documentation</li> </ul> <pre><code>mkdocs build\n</code></pre>"},{"location":"getting-started/installation/","title":"Getting started","text":"<p>Endstone offers a powerful plugin API for Bedrock Dedicated Servers, the official server software for Minecraft: Bedrock Edition. If you're familiar with Python, you can install Endstone with <code>pip</code>, the Python package manager. If not, we recommend using <code>docker</code>.</p>"},{"location":"getting-started/installation/#installation","title":"Installation","text":""},{"location":"getting-started/installation/#environment","title":"Environment optional","text":"<p>We recommend using a virtual environment, which is an isolated Python runtime. If you are in a virtual environment, any packages that you install or upgrade will be local to the environment. If you run into problems, you can just delete and recreate the environment. It's trivial to set up:</p> <ul> <li> <p>Create a new virtual environment with:</p> <pre><code>python3 -m venv venv\n</code></pre> </li> <li> <p>Activate the environment with:</p>  Windows Linux <pre><code>. venv/Scripts/activate\n</code></pre> <pre><code>. venv/bin/activate\n</code></pre> <p>Your terminal should now print <code>(venv)</code> before the prompt, which is how you know that you are inside the virtual environment that you just created.</p> </li> <li> <p>Exit the environment with:</p> <pre><code>deactivate\n</code></pre> </li> </ul>"},{"location":"getting-started/installation/#with-pip","title":"with pip recommended","text":"<p>Endstone is published as a Python package and can be installed with <code>pip</code>, ideally by using the virtual environment  from the last step. Open up a terminal and install Endstone with:</p> Latest <pre><code>pip install endstone\n</code></pre>"},{"location":"getting-started/installation/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get the Endstone server up and running in a few minutes. Open up a terminal and pull the image with:</p> Latest <pre><code>docker pull endstone/endstone\n</code></pre>"},{"location":"getting-started/project-structure/","title":"Project Structure","text":"<p>This chapter provides a high-level overview of the project to make it easier to navigate, build, and use.</p>"},{"location":"getting-started/project-structure/#cmake-projects-and-dependencies","title":"CMake Projects and Dependencies","text":"<p>The GitHub repository contains the following CMake projects:</p> <ul> <li> <p>Endstone API (<code>include/endstone</code>)</p> <ul> <li>This is the header-only API layer that developers use to create plugins.</li> <li>It provides a standardized set of methods and abstractions to interact with Minecraft, ensuring plugins work   across different Minecraft versions with minimal adjustments.</li> <li>It abstracts Minecraft internals, allowing plugins to interact with the game in a version-agnostic way without   directly interfacing with Mojang's code.</li> </ul> </li> <li> <p>Endstone Python Bindings (<code>src/endstone_python</code>)</p> <ul> <li>This is the Python binding of the Endstone API.</li> <li>It allows developers to create plugins in Python by translating API calls from Python to the underlying C++ calls.</li> </ul> </li> <li> <p>Endstone Core (<code>src/endstone_core</code>)</p> <ul> <li>This is the implementation of the Endstone API. It sits between the API and the game itself.</li> <li>It provides the actual behavior for API methods by interacting directly with the Bedrock Dedicated Server (BDS),   translating abstracted API calls from plugins into specific BDS internal calls.</li> </ul> </li> <li> <p>Endstone Runtime (<code>src/endstone_runtime</code>)</p> <ul> <li>This includes hooks that are applied to the executable binary of the Bedrock Dedicated Server to modify or extend   functionality, providing bug fixes and features that are not possible through the API alone.</li> <li>These hooks are necessary because the original software is compiled into binary, and updates to Minecraft   frequently break compatibility with existing code.</li> </ul> </li> <li> <p>Endstone DevTools (<code>src/endstone_devtools</code>)</p> <ul> <li>This provides a Graphical User Interface (GUI) that allows advanced users to dump useful data from the vanilla   software for other purposes, such as third-party server software.</li> <li>It is currently enabled only on Windows and requires OpenGL functionality to be available on the system.</li> </ul> </li> </ul>"},{"location":"getting-started/project-structure/#python-project","title":"Python Project","text":"<p>Endstone is released as a Python package on PyPI, which encapsulates several utilities written in pure Python, in addition to the compiled libraries of the CMake projects and the Python bindings of the Endstone API. These Python codes are located under the <code>python/src</code> folder, and unit tests are located under <code>python/tests</code>.</p>"},{"location":"getting-started/start-your-server/","title":"Start your server","text":"<p>After you've installed Endstone, you can bootstrap your server using the <code>endstone</code> executable. Go to the directory where you want your server to be located and enter:</p> <pre><code>endstone\n</code></pre> <p>Alternatively, if you're running Endstone from within Docker, use:</p>  Linux /  Powershell Command Prompt <pre><code>docker run --rm -it -v ${PWD}:/home/endstone -p 19132:19132/udp endstone/endstone\n</code></pre> <pre><code>docker run --rm -it -v \"%cd%\":/home/endstone -p 19132:19132/udp endstone/endstone\n</code></pre> <p>You should see this in your console:</p> <p></p> <p>Tip</p> <p>The first time you run the bootstrap, it will need to download the Bedrock Dedicated Server from the official mirror. Press Y and Enter to continue.</p>"},{"location":"reference/","title":"Reference","text":"<p>In the course of your plugin development, you may choose between the Python API and C++ API. If you are seeking a quick start and prefer a more flexible language, the Python API documentation can be your starting point. However, if you need to implement more performance-driven, highly optimized code, you may want to delve into the C++ API documentation.</p> <ul> <li> <p> Python API</p> <p>Craft your plugins using the Python API for a quick start.</p> <p> Learn more</p> </li> <li> <p> C++ API</p> <p>Write your plugins using the C++ API for maximum performance.</p> <p> Learn more</p> </li> </ul>"},{"location":"reference/python/actor/","title":"Actor","text":""},{"location":"reference/python/actor/#endstone.actor","title":"endstone.actor","text":"<p>Classes relating to actors (entities) that can exist in a world, including all players, monsters, projectiles, etc.</p> <p>Classes:</p> Name Description <code>Actor</code> <p>Represents a base actor in the level.</p> <code>Item</code> <p>Represents a base actor in the level.</p> <code>Mob</code> <p>Represents a mobile entity (i.e. living entity), such as a monster or player.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor","title":"Actor","text":"<p>               Bases: <code>CommandSender</code></p> <p>Represents a base actor in the level.</p> <p>Methods:</p> Name Description <code>add_scoreboard_tag</code> <p>Adds a tag to this actor.</p> <code>remove</code> <p>Remove this actor from the level.</p> <code>remove_scoreboard_tag</code> <p>Removes a given tag from this actor.</p> <code>set_rotation</code> <p>Sets the actor's rotation.</p> <code>teleport</code> <p>Attributes:</p> Name Type Description <code>dimension</code> <code>Dimension</code> <p>Gets the current Dimension this actor resides in.</p> <code>health</code> <code>int</code> <p>Gets or sets the entity's health from 0 to its max possible value, where 0 is dead.</p> <code>id</code> <code>int</code> <p>Returns a unique id for this actor.</p> <code>is_dead</code> <code>bool</code> <p>Returns true if this actor has been marked for removal.</p> <code>is_in_lava</code> <code>bool</code> <p>Returns true if the actor is in lava.</p> <code>is_in_water</code> <code>bool</code> <p>Returns true if the actor is in water.</p> <code>is_name_tag_always_visible</code> <code>bool</code> <p>Gets or sets if the actor's name tag is always visible or not.</p> <code>is_name_tag_visible</code> <code>bool</code> <p>Gets or sets if the actor's name tag is visible or not.</p> <code>is_on_ground</code> <code>bool</code> <p>Returns true if the actor is supported by a block, i.e. on ground.</p> <code>is_valid</code> <code>bool</code> <p>Returns false if the entity has died, been despawned for some other reason, or has not been added to the level.</p> <code>level</code> <code>Level</code> <p>Gets the current Level this actor resides in.</p> <code>location</code> <code>Location</code> <p>Gets the actor's current position.</p> <code>max_health</code> <code>int</code> <p>Gets the maximum health this entity has.</p> <code>name_tag</code> <code>str</code> <p>Gets or sets the current name tag of the actor.</p> <code>runtime_id</code> <code>int</code> <p>Returns the runtime id for this actor.</p> <code>score_tag</code> <code>str</code> <p>Gets or sets the current score tag of the actor.</p> <code>scoreboard_tags</code> <code>list[str]</code> <p>Returns a list of scoreboard tags for this actor.</p> <code>type</code> <code>str</code> <p>Gets the type of the actor.</p> <code>velocity</code> <code>Vector</code> <p>Gets this actor's current velocity.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.dimension","title":"dimension  <code>property</code>","text":"<pre><code>dimension: Dimension\n</code></pre> <p>Gets the current Dimension this actor resides in.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.health","title":"health  <code>property</code> <code>writable</code>","text":"<pre><code>health: int\n</code></pre> <p>Gets or sets the entity's health from 0 to its max possible value, where 0 is dead.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.id","title":"id  <code>property</code>","text":"<pre><code>id: int\n</code></pre> <p>Returns a unique id for this actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_dead","title":"is_dead  <code>property</code>","text":"<pre><code>is_dead: bool\n</code></pre> <p>Returns true if this actor has been marked for removal.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_in_lava","title":"is_in_lava  <code>property</code>","text":"<pre><code>is_in_lava: bool\n</code></pre> <p>Returns true if the actor is in lava.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_in_water","title":"is_in_water  <code>property</code>","text":"<pre><code>is_in_water: bool\n</code></pre> <p>Returns true if the actor is in water.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_name_tag_always_visible","title":"is_name_tag_always_visible  <code>property</code> <code>writable</code>","text":"<pre><code>is_name_tag_always_visible: bool\n</code></pre> <p>Gets or sets if the actor's name tag is always visible or not.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_name_tag_visible","title":"is_name_tag_visible  <code>property</code> <code>writable</code>","text":"<pre><code>is_name_tag_visible: bool\n</code></pre> <p>Gets or sets if the actor's name tag is visible or not.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_on_ground","title":"is_on_ground  <code>property</code>","text":"<pre><code>is_on_ground: bool\n</code></pre> <p>Returns true if the actor is supported by a block, i.e. on ground.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_valid","title":"is_valid  <code>property</code>","text":"<pre><code>is_valid: bool\n</code></pre> <p>Returns false if the entity has died, been despawned for some other reason, or has not been added to the level.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Gets the current Level this actor resides in.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.location","title":"location  <code>property</code>","text":"<pre><code>location: Location\n</code></pre> <p>Gets the actor's current position.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.max_health","title":"max_health  <code>property</code>","text":"<pre><code>max_health: int\n</code></pre> <p>Gets the maximum health this entity has.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.name_tag","title":"name_tag  <code>property</code> <code>writable</code>","text":"<pre><code>name_tag: str\n</code></pre> <p>Gets or sets the current name tag of the actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.runtime_id","title":"runtime_id  <code>property</code>","text":"<pre><code>runtime_id: int\n</code></pre> <p>Returns the runtime id for this actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.score_tag","title":"score_tag  <code>property</code> <code>writable</code>","text":"<pre><code>score_tag: str\n</code></pre> <p>Gets or sets the current score tag of the actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.scoreboard_tags","title":"scoreboard_tags  <code>property</code>","text":"<pre><code>scoreboard_tags: list[str]\n</code></pre> <p>Returns a list of scoreboard tags for this actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.type","title":"type  <code>property</code>","text":"<pre><code>type: str\n</code></pre> <p>Gets the type of the actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.velocity","title":"velocity  <code>property</code>","text":"<pre><code>velocity: Vector\n</code></pre> <p>Gets this actor's current velocity.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.add_scoreboard_tag","title":"add_scoreboard_tag","text":"<pre><code>add_scoreboard_tag(tag: str) -&gt; bool\n</code></pre> <p>Adds a tag to this actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.remove","title":"remove","text":"<pre><code>remove() -&gt; None\n</code></pre> <p>Remove this actor from the level.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.remove_scoreboard_tag","title":"remove_scoreboard_tag","text":"<pre><code>remove_scoreboard_tag(tag: str) -&gt; bool\n</code></pre> <p>Removes a given tag from this actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.set_rotation","title":"set_rotation","text":"<pre><code>set_rotation(yaw: float, pitch: float) -&gt; None\n</code></pre> <p>Sets the actor's rotation.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.teleport","title":"teleport","text":"<pre><code>teleport(location: Location) -&gt; None\n</code></pre> <p>Teleports this actor to the given location.</p> <pre><code>teleport(target: Actor) -&gt; None\n</code></pre> <p>Teleports this actor to the target Actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Item","title":"Item","text":"<p>               Bases: <code>Actor</code></p> <p>Represents a base actor in the level.</p> <p>Attributes:</p> Name Type Description <code>is_unlimited_lifetime</code> <code>bool</code> <p>Gets or sets if this Item lives forever</p> <code>item_stack</code> <code>ItemStack</code> <p>Gets or sets the item stack associated with this item drop.</p> <code>pickup_delay</code> <code>int</code> <p>Gets or sets the delay before this Item is available to be picked up by players.</p> <code>thrower</code> <code>int | None</code> <p>Gets or sets the thrower of this item.</p>"},{"location":"reference/python/actor/#endstone.actor.Item.is_unlimited_lifetime","title":"is_unlimited_lifetime  <code>property</code> <code>writable</code>","text":"<pre><code>is_unlimited_lifetime: bool\n</code></pre> <p>Gets or sets if this Item lives forever</p>"},{"location":"reference/python/actor/#endstone.actor.Item.item_stack","title":"item_stack  <code>property</code> <code>writable</code>","text":"<pre><code>item_stack: ItemStack\n</code></pre> <p>Gets or sets the item stack associated with this item drop.</p>"},{"location":"reference/python/actor/#endstone.actor.Item.pickup_delay","title":"pickup_delay  <code>property</code> <code>writable</code>","text":"<pre><code>pickup_delay: int\n</code></pre> <p>Gets or sets the delay before this Item is available to be picked up by players.</p>"},{"location":"reference/python/actor/#endstone.actor.Item.thrower","title":"thrower  <code>property</code> <code>writable</code>","text":"<pre><code>thrower: int | None\n</code></pre> <p>Gets or sets the thrower of this item.</p>"},{"location":"reference/python/actor/#endstone.actor.Mob","title":"Mob","text":"<p>               Bases: <code>Actor</code></p> <p>Represents a mobile entity (i.e. living entity), such as a monster or player.</p> <p>Attributes:</p> Name Type Description <code>is_gliding</code> <code>bool</code> <p>Checks to see if an actor is gliding, such as using an Elytra.</p>"},{"location":"reference/python/actor/#endstone.actor.Mob.is_gliding","title":"is_gliding  <code>property</code>","text":"<pre><code>is_gliding: bool\n</code></pre> <p>Checks to see if an actor is gliding, such as using an Elytra.</p>"},{"location":"reference/python/ban/","title":"Ban","text":""},{"location":"reference/python/ban/#endstone.ban","title":"endstone.ban","text":"<p>Classes relevant to bans.</p> <p>Classes:</p> Name Description <code>BanEntry</code> <p>A single entry from a ban list.</p> <code>IpBanEntry</code> <p>Represents a ban entry for an IP address.</p> <code>IpBanList</code> <p>Represents a ban list containing banned IP addresses.</p> <code>PlayerBanEntry</code> <p>Represents a ban entry for a player.</p> <code>PlayerBanList</code> <p>Represents a ban list containing banned players.</p>"},{"location":"reference/python/ban/#endstone.ban.BanEntry","title":"BanEntry","text":"<p>A single entry from a ban list.</p> <p>Attributes:</p> Name Type Description <code>created</code> <code>datetime</code> <p>Gets or sets the date this ban entry was created.</p> <code>expiration</code> <code>datetime | None</code> <p>Gets or sets the date this ban expires on.</p> <code>reason</code> <code>str</code> <p>Gets or sets the reason for this ban.</p> <code>source</code> <code>str</code> <p>Gets or sets the source of this ban.</p>"},{"location":"reference/python/ban/#endstone.ban.BanEntry.created","title":"created  <code>property</code> <code>writable</code>","text":"<pre><code>created: datetime\n</code></pre> <p>Gets or sets the date this ban entry was created.</p>"},{"location":"reference/python/ban/#endstone.ban.BanEntry.expiration","title":"expiration  <code>property</code> <code>writable</code>","text":"<pre><code>expiration: datetime | None\n</code></pre> <p>Gets or sets the date this ban expires on.</p>"},{"location":"reference/python/ban/#endstone.ban.BanEntry.reason","title":"reason  <code>property</code> <code>writable</code>","text":"<pre><code>reason: str\n</code></pre> <p>Gets or sets the reason for this ban.</p>"},{"location":"reference/python/ban/#endstone.ban.BanEntry.source","title":"source  <code>property</code> <code>writable</code>","text":"<pre><code>source: str\n</code></pre> <p>Gets or sets the source of this ban.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanEntry","title":"IpBanEntry","text":"<pre><code>IpBanEntry(address: str)\n</code></pre> <p>               Bases: <code>BanEntry</code></p> <p>Represents a ban entry for an IP address.</p> <p>Attributes:</p> Name Type Description <code>address</code> <code>str</code> <p>Gets the banned IP address.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanEntry.address","title":"address  <code>property</code>","text":"<pre><code>address: str\n</code></pre> <p>Gets the banned IP address.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanList","title":"IpBanList","text":"<p>Represents a ban list containing banned IP addresses.</p> <p>Methods:</p> Name Description <code>add_ban</code> <p>Adds a ban to this list, or updates an existing one.</p> <code>get_ban_entry</code> <p>Gets a BanEntry by IP address.</p> <code>is_banned</code> <p>Checks if a BanEntry exists for the target by IP address.</p> <code>remove_ban</code> <p>Removes an IP address from the ban list.</p> <p>Attributes:</p> Name Type Description <code>entries</code> <code>list[IpBanEntry]</code> <p>Gets a vector of pointers to entries in the ban list.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanList.entries","title":"entries  <code>property</code>","text":"<pre><code>entries: list[IpBanEntry]\n</code></pre> <p>Gets a vector of pointers to entries in the ban list.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanList.add_ban","title":"add_ban","text":"<pre><code>add_ban(\n    address: str,\n    reason: str | None = None,\n    expires: datetime | None = None,\n    source: str | None = None,\n) -&gt; IpBanEntry\n</code></pre> <p>Adds a ban to this list, or updates an existing one.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanList.get_ban_entry","title":"get_ban_entry","text":"<pre><code>get_ban_entry(address: str) -&gt; IpBanEntry\n</code></pre> <p>Gets a BanEntry by IP address.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanList.is_banned","title":"is_banned","text":"<pre><code>is_banned(address: str) -&gt; bool\n</code></pre> <p>Checks if a BanEntry exists for the target by IP address.</p>"},{"location":"reference/python/ban/#endstone.ban.IpBanList.remove_ban","title":"remove_ban","text":"<pre><code>remove_ban(address: str) -&gt; None\n</code></pre> <p>Removes an IP address from the ban list.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanEntry","title":"PlayerBanEntry","text":"<pre><code>PlayerBanEntry(\n    name: str,\n    uuid: UUID | None = None,\n    xuid: str | None = None,\n)\n</code></pre> <p>               Bases: <code>BanEntry</code></p> <p>Represents a ban entry for a player.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Gets the banned player's name.</p> <code>unique_id</code> <code>UUID | None</code> <p>Gets the banned player's unique ID, or None if not available.</p> <code>xuid</code> <code>str | None</code> <p>Gets the banned player's Xbox user ID (XUID), or None if not available.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanEntry.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the banned player's name.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanEntry.unique_id","title":"unique_id  <code>property</code>","text":"<pre><code>unique_id: UUID | None\n</code></pre> <p>Gets the banned player's unique ID, or None if not available.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanEntry.xuid","title":"xuid  <code>property</code>","text":"<pre><code>xuid: str | None\n</code></pre> <p>Gets the banned player's Xbox user ID (XUID), or None if not available.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanList","title":"PlayerBanList","text":"<p>Represents a ban list containing banned players.</p> <p>Methods:</p> Name Description <code>add_ban</code> <p>Adds a ban to this list, or updates an existing one.</p> <code>get_ban_entry</code> <p>Gets a BanEntry by player name, UUID, or XUID.</p> <code>is_banned</code> <p>Checks if a BanEntry exists for the target by name, UUID, or XUID.</p> <code>remove_ban</code> <p>Removes a player from the ban list by name, UUID, or XUID.</p> <p>Attributes:</p> Name Type Description <code>entries</code> <code>list[PlayerBanEntry]</code> <p>Gets a vector of pointers to entries in the ban list.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanList.entries","title":"entries  <code>property</code>","text":"<pre><code>entries: list[PlayerBanEntry]\n</code></pre> <p>Gets a vector of pointers to entries in the ban list.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanList.add_ban","title":"add_ban","text":"<pre><code>add_ban(\n    name: str,\n    uuid: UUID | None = None,\n    xuid: str | None = None,\n    reason: str | None = None,\n    expires: datetime | None = None,\n    source: str | None = None,\n) -&gt; PlayerBanEntry\n</code></pre> <p>Adds a ban to this list, or updates an existing one.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanList.get_ban_entry","title":"get_ban_entry","text":"<pre><code>get_ban_entry(\n    name: str,\n    uuid: UUID | None = None,\n    xuid: str | None = None,\n) -&gt; PlayerBanEntry\n</code></pre> <p>Gets a BanEntry by player name, UUID, or XUID.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanList.is_banned","title":"is_banned","text":"<pre><code>is_banned(\n    name: str,\n    uuid: UUID | None = None,\n    xuid: str | None = None,\n) -&gt; bool\n</code></pre> <p>Checks if a BanEntry exists for the target by name, UUID, or XUID.</p>"},{"location":"reference/python/ban/#endstone.ban.PlayerBanList.remove_ban","title":"remove_ban","text":"<pre><code>remove_ban(\n    name: str,\n    uuid: UUID | None = None,\n    xuid: str | None = None,\n) -&gt; None\n</code></pre> <p>Removes a player from the ban list by name, UUID, or XUID.</p>"},{"location":"reference/python/block/","title":"Block","text":""},{"location":"reference/python/block/#endstone.block","title":"endstone.block","text":"<p>Classes relating to the blocks in a world, including special states.</p> <p>Classes:</p> Name Description <code>Block</code> <p>Represents a block.</p> <code>BlockData</code> <p>Represents the data related to a live block</p> <code>BlockFace</code> <code>BlockState</code> <p>Represents a captured state of a block, which will not update automatically.</p>"},{"location":"reference/python/block/#endstone.block.Block","title":"Block","text":"<p>Represents a block.</p> <p>Methods:</p> Name Description <code>capture_state</code> <p>Captures the current state of this block. The returned object will never be updated, and you are not guaranteed that (for example) a sign is still a sign after you capture its state.</p> <code>get_relative</code> <code>set_data</code> <p>Sets the complete data for this block</p> <code>set_type</code> <p>Sets the type of this block</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>BlockData</code> <p>Gets the complete data for this block</p> <code>dimension</code> <code>Dimension</code> <p>Gets the dimension which contains this Block</p> <code>location</code> <code>Location</code> <p>Gets the Location of the block</p> <code>type</code> <code>str</code> <p>Gets or sets the type of the block.</p> <code>x</code> <code>int</code> <p>Gets the x-coordinate of this block</p> <code>y</code> <code>int</code> <p>Gets the y-coordinate of this block</p> <code>z</code> <code>int</code> <p>Gets the z-coordinate of this block</p>"},{"location":"reference/python/block/#endstone.block.Block.data","title":"data  <code>property</code>","text":"<pre><code>data: BlockData\n</code></pre> <p>Gets the complete data for this block</p>"},{"location":"reference/python/block/#endstone.block.Block.dimension","title":"dimension  <code>property</code>","text":"<pre><code>dimension: Dimension\n</code></pre> <p>Gets the dimension which contains this Block</p>"},{"location":"reference/python/block/#endstone.block.Block.location","title":"location  <code>property</code>","text":"<pre><code>location: Location\n</code></pre> <p>Gets the Location of the block</p>"},{"location":"reference/python/block/#endstone.block.Block.type","title":"type  <code>property</code>","text":"<pre><code>type: str\n</code></pre> <p>Gets or sets the type of the block.</p>"},{"location":"reference/python/block/#endstone.block.Block.x","title":"x  <code>property</code>","text":"<pre><code>x: int\n</code></pre> <p>Gets the x-coordinate of this block</p>"},{"location":"reference/python/block/#endstone.block.Block.y","title":"y  <code>property</code>","text":"<pre><code>y: int\n</code></pre> <p>Gets the y-coordinate of this block</p>"},{"location":"reference/python/block/#endstone.block.Block.z","title":"z  <code>property</code>","text":"<pre><code>z: int\n</code></pre> <p>Gets the z-coordinate of this block</p>"},{"location":"reference/python/block/#endstone.block.Block.capture_state","title":"capture_state","text":"<pre><code>capture_state() -&gt; BlockState\n</code></pre> <p>Captures the current state of this block. The returned object will never be updated, and you are not guaranteed that (for example) a sign is still a sign after you capture its state.</p>"},{"location":"reference/python/block/#endstone.block.Block.get_relative","title":"get_relative","text":"<pre><code>get_relative(\n    offset_x: int, offset_y: int, offset_z: int\n) -&gt; Block\n</code></pre> <p>Gets the block at the given offsets</p> <pre><code>get_relative(face: BlockFace, distance: int = 1) -&gt; Block\n</code></pre> <p>Gets the block at the given distance of the given face</p>"},{"location":"reference/python/block/#endstone.block.Block.set_data","title":"set_data","text":"<pre><code>set_data(\n    data: BlockData, apply_physics: bool = True\n) -&gt; None\n</code></pre> <p>Sets the complete data for this block</p>"},{"location":"reference/python/block/#endstone.block.Block.set_type","title":"set_type","text":"<pre><code>set_type(type: str, apply_physics: bool = True) -&gt; None\n</code></pre> <p>Sets the type of this block</p>"},{"location":"reference/python/block/#endstone.block.BlockData","title":"BlockData","text":"<p>Represents the data related to a live block</p> <p>Attributes:</p> Name Type Description <code>block_states</code> <code>dict[str, bool | str | int]</code> <p>Gets the block states for this block.</p> <code>runtime_id</code> <code>int</code> <p>Gets the runtime id for this block.</p> <code>type</code> <code>str</code> <p>Get the block type represented by this block data.</p>"},{"location":"reference/python/block/#endstone.block.BlockData.block_states","title":"block_states  <code>property</code>","text":"<pre><code>block_states: dict[str, bool | str | int]\n</code></pre> <p>Gets the block states for this block.</p>"},{"location":"reference/python/block/#endstone.block.BlockData.runtime_id","title":"runtime_id  <code>property</code>","text":"<pre><code>runtime_id: int\n</code></pre> <p>Gets the runtime id for this block.</p>"},{"location":"reference/python/block/#endstone.block.BlockData.type","title":"type  <code>property</code>","text":"<pre><code>type: str\n</code></pre> <p>Get the block type represented by this block data.</p>"},{"location":"reference/python/block/#endstone.block.BlockFace","title":"BlockFace","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>DOWN</code> <code>EAST</code> <code>NORTH</code> <code>SOUTH</code> <code>UP</code> <code>WEST</code>"},{"location":"reference/python/block/#endstone.block.BlockFace.DOWN","title":"DOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOWN = 0\n</code></pre>"},{"location":"reference/python/block/#endstone.block.BlockFace.EAST","title":"EAST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EAST = 5\n</code></pre>"},{"location":"reference/python/block/#endstone.block.BlockFace.NORTH","title":"NORTH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NORTH = 2\n</code></pre>"},{"location":"reference/python/block/#endstone.block.BlockFace.SOUTH","title":"SOUTH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SOUTH = 3\n</code></pre>"},{"location":"reference/python/block/#endstone.block.BlockFace.UP","title":"UP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UP = 1\n</code></pre>"},{"location":"reference/python/block/#endstone.block.BlockFace.WEST","title":"WEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WEST = 4\n</code></pre>"},{"location":"reference/python/block/#endstone.block.BlockState","title":"BlockState","text":"<p>Represents a captured state of a block, which will not update automatically.</p> <p>Methods:</p> Name Description <code>update</code> <p>Attempts to update the block represented by this state.</p> <p>Attributes:</p> Name Type Description <code>block</code> <code>Block</code> <p>Gets the block represented by this block state.</p> <code>data</code> <code>BlockData</code> <p>Gets or sets the data for this block state.</p> <code>dimension</code> <code>Dimension</code> <p>Gets the dimension which contains the block represented by this block state.</p> <code>location</code> <code>Location</code> <p>Gets the location of this block state.</p> <code>type</code> <code>str</code> <p>Gets or sets the type of this block state.</p> <code>x</code> <code>int</code> <p>Gets the x-coordinate of this block state.</p> <code>y</code> <code>int</code> <p>Gets the y-coordinate of this block state.</p> <code>z</code> <code>int</code> <p>Gets the z-coordinate of this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.block","title":"block  <code>property</code>","text":"<pre><code>block: Block\n</code></pre> <p>Gets the block represented by this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: BlockData\n</code></pre> <p>Gets or sets the data for this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.dimension","title":"dimension  <code>property</code>","text":"<pre><code>dimension: Dimension\n</code></pre> <p>Gets the dimension which contains the block represented by this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.location","title":"location  <code>property</code>","text":"<pre><code>location: Location\n</code></pre> <p>Gets the location of this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.type","title":"type  <code>property</code> <code>writable</code>","text":"<pre><code>type: str\n</code></pre> <p>Gets or sets the type of this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.x","title":"x  <code>property</code>","text":"<pre><code>x: int\n</code></pre> <p>Gets the x-coordinate of this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.y","title":"y  <code>property</code>","text":"<pre><code>y: int\n</code></pre> <p>Gets the y-coordinate of this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.z","title":"z  <code>property</code>","text":"<pre><code>z: int\n</code></pre> <p>Gets the z-coordinate of this block state.</p>"},{"location":"reference/python/block/#endstone.block.BlockState.update","title":"update","text":"<pre><code>update(\n    force: bool = False, apply_physics: bool = True\n) -&gt; bool\n</code></pre> <p>Attempts to update the block represented by this state.</p>"},{"location":"reference/python/boss/","title":"Boss","text":""},{"location":"reference/python/boss/#endstone.boss","title":"endstone.boss","text":"<p>Classes relating to the boss bars that appear at the top of the player's screen.</p> <p>Classes:</p> Name Description <code>BarColor</code> <code>BarFlag</code> <code>BarStyle</code> <code>BossBar</code> <p>Represents a boss bar that is displayed to players.</p>"},{"location":"reference/python/boss/#endstone.boss.BarColor","title":"BarColor","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>BLUE</code> <code>GREEN</code> <code>PINK</code> <code>PURPLE</code> <code>REBECCA_PURPLE</code> <code>RED</code> <code>WHITE</code> <code>YELLOW</code>"},{"location":"reference/python/boss/#endstone.boss.BarColor.BLUE","title":"BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLUE = 1\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarColor.GREEN","title":"GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GREEN = 3\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarColor.PINK","title":"PINK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PINK = 0\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarColor.PURPLE","title":"PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PURPLE = 5\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarColor.REBECCA_PURPLE","title":"REBECCA_PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REBECCA_PURPLE = 6\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarColor.RED","title":"RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RED = 2\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarColor.WHITE","title":"WHITE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WHITE = 7\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarColor.YELLOW","title":"YELLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YELLOW = 4\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarFlag","title":"BarFlag","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>DARKEN_SKY</code>"},{"location":"reference/python/boss/#endstone.boss.BarFlag.DARKEN_SKY","title":"DARKEN_SKY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARKEN_SKY = 0\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarStyle","title":"BarStyle","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>SEGMENTED_10</code> <code>SEGMENTED_12</code> <code>SEGMENTED_20</code> <code>SEGMENTED_6</code> <code>SOLID</code>"},{"location":"reference/python/boss/#endstone.boss.BarStyle.SEGMENTED_10","title":"SEGMENTED_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEGMENTED_10 = 2\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarStyle.SEGMENTED_12","title":"SEGMENTED_12  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEGMENTED_12 = 3\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarStyle.SEGMENTED_20","title":"SEGMENTED_20  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEGMENTED_20 = 4\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarStyle.SEGMENTED_6","title":"SEGMENTED_6  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEGMENTED_6 = 1\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BarStyle.SOLID","title":"SOLID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SOLID = 0\n</code></pre>"},{"location":"reference/python/boss/#endstone.boss.BossBar","title":"BossBar","text":"<p>Represents a boss bar that is displayed to players.</p> <p>Methods:</p> Name Description <code>add_flag</code> <p>Adds an optional flag to this boss bar.</p> <code>add_player</code> <p>Adds the player to this boss bar causing it to display on their screen.</p> <code>has_flag</code> <p>Checks whether this boss bar has the passed flag set.</p> <code>remove_all</code> <p>Removes all players from this boss bar.</p> <code>remove_flag</code> <p>Removes an existing flag on this boss bar.</p> <code>remove_player</code> <p>Removes the player from this boss bar causing it to be removed from their screen.</p> <p>Attributes:</p> Name Type Description <code>color</code> <code>BarColor</code> <p>The color of this boss bar.</p> <code>is_visible</code> <code>bool</code> <p>If the boss bar is displayed to attached players.</p> <code>players</code> <code>list[Player]</code> <p>Returns all players viewing this boss bar.</p> <code>progress</code> <code>float</code> <p>The progress of the bar between 0.0 and 1.0.</p> <code>style</code> <code>BarStyle</code> <p>The style of this boss bar.</p> <code>title</code> <code>str</code> <p>The title of this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.color","title":"color  <code>property</code> <code>writable</code>","text":"<pre><code>color: BarColor\n</code></pre> <p>The color of this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.is_visible","title":"is_visible  <code>property</code> <code>writable</code>","text":"<pre><code>is_visible: bool\n</code></pre> <p>If the boss bar is displayed to attached players.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.players","title":"players  <code>property</code>","text":"<pre><code>players: list[Player]\n</code></pre> <p>Returns all players viewing this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.progress","title":"progress  <code>property</code> <code>writable</code>","text":"<pre><code>progress: float\n</code></pre> <p>The progress of the bar between 0.0 and 1.0.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.style","title":"style  <code>property</code> <code>writable</code>","text":"<pre><code>style: BarStyle\n</code></pre> <p>The style of this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.title","title":"title  <code>property</code> <code>writable</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.add_flag","title":"add_flag","text":"<pre><code>add_flag(flag: BarFlag) -&gt; None\n</code></pre> <p>Adds an optional flag to this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.add_player","title":"add_player","text":"<pre><code>add_player(player: Player) -&gt; None\n</code></pre> <p>Adds the player to this boss bar causing it to display on their screen.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.has_flag","title":"has_flag","text":"<pre><code>has_flag(flag: BarFlag) -&gt; bool\n</code></pre> <p>Checks whether this boss bar has the passed flag set.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.remove_all","title":"remove_all","text":"<pre><code>remove_all() -&gt; None\n</code></pre> <p>Removes all players from this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.remove_flag","title":"remove_flag","text":"<pre><code>remove_flag(flag: BarFlag) -&gt; None\n</code></pre> <p>Removes an existing flag on this boss bar.</p>"},{"location":"reference/python/boss/#endstone.boss.BossBar.remove_player","title":"remove_player","text":"<pre><code>remove_player(player: Player) -&gt; None\n</code></pre> <p>Removes the player from this boss bar causing it to be removed from their screen.</p>"},{"location":"reference/python/command/","title":"Command","text":""},{"location":"reference/python/command/#endstone.command","title":"endstone.command","text":"<p>Classes relating to handling specialized non-chat player input.</p> <p>Classes:</p> Name Description <code>BlockCommandSender</code> <p>Represents a block command sender.</p> <code>Command</code> <p>Represents a Command, which executes various tasks upon user input</p> <code>CommandExecutor</code> <p>Represents a class which contains a single method for executing commands</p> <code>CommandSender</code> <p>Represents a command sender.</p> <code>CommandSenderWrapper</code> <p>Represents a wrapper that forwards commands to the wrapped CommandSender and captures its output</p> <code>ConsoleCommandSender</code> <p>Represents a console command sender.</p>"},{"location":"reference/python/command/#endstone.command.BlockCommandSender","title":"BlockCommandSender","text":"<p>               Bases: <code>CommandSender</code></p> <p>Represents a block command sender.</p> <p>Attributes:</p> Name Type Description <code>block</code> <code>Block</code> <p>Returns the block this command sender belongs to</p>"},{"location":"reference/python/command/#endstone.command.BlockCommandSender.block","title":"block  <code>property</code>","text":"<pre><code>block: Block\n</code></pre> <p>Returns the block this command sender belongs to</p>"},{"location":"reference/python/command/#endstone.command.Command","title":"Command","text":"<pre><code>Command(\n    name: str,\n    description: str | None = None,\n    usages: list[str] | None = None,\n    aliases: list[str] | None = None,\n    permissions: list[str] | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Represents a Command, which executes various tasks upon user input</p> <p>Methods:</p> Name Description <code>execute</code> <p>Executes the command, returning its success</p> <code>test_permission</code> <p>Tests the given CommandSender to see if they can perform this command.</p> <code>test_permission_silently</code> <p>Tests the given CommandSender to see if they can perform this command. No error is sent to the sender.</p> <p>Attributes:</p> Name Type Description <code>aliases</code> <code>list[str]</code> <p>List of aliases of this command</p> <code>description</code> <code>str</code> <p>Brief description of this command</p> <code>is_registered</code> <code>bool</code> <p>Returns the current registered state of this command</p> <code>name</code> <code>str</code> <p>Name of this command.</p> <code>permissions</code> <code>list[str]</code> <p>The permissions required by users to be able to perform this command</p> <code>usages</code> <code>list[str]</code> <p>List of usages of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.aliases","title":"aliases  <code>property</code> <code>writable</code>","text":"<pre><code>aliases: list[str]\n</code></pre> <p>List of aliases of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.description","title":"description  <code>property</code> <code>writable</code>","text":"<pre><code>description: str\n</code></pre> <p>Brief description of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.is_registered","title":"is_registered  <code>property</code>","text":"<pre><code>is_registered: bool\n</code></pre> <p>Returns the current registered state of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.name","title":"name  <code>property</code> <code>writable</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of this command.</p>"},{"location":"reference/python/command/#endstone.command.Command.permissions","title":"permissions  <code>property</code> <code>writable</code>","text":"<pre><code>permissions: list[str]\n</code></pre> <p>The permissions required by users to be able to perform this command</p>"},{"location":"reference/python/command/#endstone.command.Command.usages","title":"usages  <code>property</code> <code>writable</code>","text":"<pre><code>usages: list[str]\n</code></pre> <p>List of usages of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.execute","title":"execute","text":"<pre><code>execute(sender: CommandSender, args: list[str]) -&gt; bool\n</code></pre> <p>Executes the command, returning its success</p>"},{"location":"reference/python/command/#endstone.command.Command.test_permission","title":"test_permission","text":"<pre><code>test_permission(target: CommandSender) -&gt; bool\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command.</p>"},{"location":"reference/python/command/#endstone.command.Command.test_permission_silently","title":"test_permission_silently","text":"<pre><code>test_permission_silently(target: CommandSender) -&gt; bool\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command. No error is sent to the sender.</p>"},{"location":"reference/python/command/#endstone.command.CommandExecutor","title":"CommandExecutor","text":"<pre><code>CommandExecutor()\n</code></pre> <p>Represents a class which contains a single method for executing commands</p> <p>Methods:</p> Name Description <code>on_command</code> <p>Executes the given command, returning its success.</p>"},{"location":"reference/python/command/#endstone.command.CommandExecutor.on_command","title":"on_command","text":"<pre><code>on_command(\n    sender: CommandSender, command: Command, args: list[str]\n) -&gt; bool\n</code></pre> <p>Executes the given command, returning its success.</p>"},{"location":"reference/python/command/#endstone.command.CommandSender","title":"CommandSender","text":"<p>               Bases: <code>Permissible</code></p> <p>Represents a command sender.</p> <p>Methods:</p> Name Description <code>send_error_message</code> <p>Sends this sender an error message</p> <code>send_message</code> <p>Sends this sender a message</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Gets the name of this command sender</p> <code>server</code> <code>Server</code> <p>Returns the server instance that this command is running on</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of this command sender</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.server","title":"server  <code>property</code>","text":"<pre><code>server: Server\n</code></pre> <p>Returns the server instance that this command is running on</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.send_error_message","title":"send_error_message","text":"<pre><code>send_error_message(message: str | Translatable) -&gt; None\n</code></pre> <p>Sends this sender an error message</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.send_message","title":"send_message","text":"<pre><code>send_message(message: str | Translatable) -&gt; None\n</code></pre> <p>Sends this sender a message</p>"},{"location":"reference/python/command/#endstone.command.CommandSenderWrapper","title":"CommandSenderWrapper","text":"<pre><code>CommandSenderWrapper(\n    sender: CommandSender,\n    on_message: Callable[[str | Translatable], None] = None,\n    on_error: Callable[[str | Translatable], None] = None,\n)\n</code></pre> <p>               Bases: <code>CommandSender</code></p> <p>Represents a wrapper that forwards commands to the wrapped CommandSender and captures its output</p>"},{"location":"reference/python/command/#endstone.command.ConsoleCommandSender","title":"ConsoleCommandSender","text":"<p>               Bases: <code>CommandSender</code></p> <p>Represents a console command sender.</p>"},{"location":"reference/python/damage/","title":"Damage","text":""},{"location":"reference/python/damage/#endstone.damage","title":"endstone.damage","text":"<p>Classes relating to damage types and sources applicable to mobs (living entities).</p> <p>Classes:</p> Name Description <code>DamageSource</code> <p>Represents a source of damage.</p>"},{"location":"reference/python/damage/#endstone.damage.DamageSource","title":"DamageSource","text":"<p>Represents a source of damage.</p> <p>Attributes:</p> Name Type Description <code>actor</code> <code>Actor</code> <p>Get the actor that caused the damage to occur.</p> <code>damaging_actor</code> <code>Actor</code> <p>Get the actor that directly caused the damage.</p> <code>is_indirect</code> <code>bool</code> <p>Get if this damage is indirect.</p> <code>type</code> <code>str</code> <p>Get the damage type.</p>"},{"location":"reference/python/damage/#endstone.damage.DamageSource.actor","title":"actor  <code>property</code>","text":"<pre><code>actor: Actor\n</code></pre> <p>Get the actor that caused the damage to occur.</p>"},{"location":"reference/python/damage/#endstone.damage.DamageSource.damaging_actor","title":"damaging_actor  <code>property</code>","text":"<pre><code>damaging_actor: Actor\n</code></pre> <p>Get the actor that directly caused the damage.</p>"},{"location":"reference/python/damage/#endstone.damage.DamageSource.is_indirect","title":"is_indirect  <code>property</code>","text":"<pre><code>is_indirect: bool\n</code></pre> <p>Get if this damage is indirect.</p>"},{"location":"reference/python/damage/#endstone.damage.DamageSource.type","title":"type  <code>property</code>","text":"<pre><code>type: str\n</code></pre> <p>Get the damage type.</p>"},{"location":"reference/python/enchantments/","title":"Enchantments","text":""},{"location":"reference/python/enchantments/#endstone.enchantments","title":"endstone.enchantments","text":"<p>Classes relating to the specialized enhancements to ItemStacks.</p> <p>Classes:</p> Name Description <code>Enchantment</code>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment","title":"Enchantment","text":"<p>Methods:</p> Name Description <code>can_enchant_item</code> <p>Checks if this Enchantment may be applied to the given ItemStack.</p> <code>conflicts_with</code> <p>Check if this enchantment conflicts with another enchantment.</p> <code>get</code> <p>Attempts to get the Enchantment with the given name.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Return the identifier for this enchantment.</p> <code>max_level</code> <code>int</code> <p>Gets the maximum level that this Enchantment may become.</p> <code>start_level</code> <code>int</code> <p>Gets the level that this Enchantment should start at (also known as minimum level).</p> <code>translation_key</code> <code>str</code> <p>Get the translation key, suitable for use in a translation component.</p>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre> <p>Return the identifier for this enchantment.</p>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment.max_level","title":"max_level  <code>property</code>","text":"<pre><code>max_level: int\n</code></pre> <p>Gets the maximum level that this Enchantment may become.</p>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment.start_level","title":"start_level  <code>property</code>","text":"<pre><code>start_level: int\n</code></pre> <p>Gets the level that this Enchantment should start at (also known as minimum level).</p>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment.translation_key","title":"translation_key  <code>property</code>","text":"<pre><code>translation_key: str\n</code></pre> <p>Get the translation key, suitable for use in a translation component.</p>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment.can_enchant_item","title":"can_enchant_item","text":"<pre><code>can_enchant_item(item: ItemStack) -&gt; bool\n</code></pre> <p>Checks if this Enchantment may be applied to the given ItemStack.</p> <p>This does not check if it conflicts with any enchantments already applied to the item.</p>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment.conflicts_with","title":"conflicts_with","text":"<pre><code>conflicts_with(other: Enchantment) -&gt; bool\n</code></pre> <p>Check if this enchantment conflicts with another enchantment.</p>"},{"location":"reference/python/enchantments/#endstone.enchantments.Enchantment.get","title":"get  <code>staticmethod</code>","text":"<pre><code>get(name: str) -&gt; Enchantment\n</code></pre> <p>Attempts to get the Enchantment with the given name.</p>"},{"location":"reference/python/event/","title":"Event","text":""},{"location":"reference/python/event/#endstone.event","title":"endstone.event","text":"<p>Classes relating to handling triggered code executions.</p> <p>Classes:</p> Name Description <code>ActorDamageEvent</code> <p>Called when an Actor is damaged.</p> <code>ActorDeathEvent</code> <p>Called when an Actor dies.</p> <code>ActorEvent</code> <p>Represents an Actor-related event.</p> <code>ActorExplodeEvent</code> <p>Called when an Actor explodes.</p> <code>ActorKnockbackEvent</code> <p>Called when a living entity receives knockback.</p> <code>ActorRemoveEvent</code> <p>Called when an Actor is removed.</p> <code>ActorSpawnEvent</code> <p>Called when an Actor is spawned into a world.</p> <code>ActorTeleportEvent</code> <p>Called when a non-player entity is teleported from one location to another.</p> <code>BlockBreakEvent</code> <p>Called when a block is broken by a player.</p> <code>BlockCookEvent</code> <p>Called when an ItemStack is successfully cooked in a block.</p> <code>BlockEvent</code> <p>Represents an Block-related event</p> <code>BlockPistonEvent</code> <p>Called when a piston block is triggered</p> <code>BlockPistonExtendEvent</code> <p>Called when a piston extends.</p> <code>BlockPistonRetractEvent</code> <p>Called when a piston retracts.</p> <code>BlockPlaceEvent</code> <p>Called when a block is placed by a player.</p> <code>BroadcastMessageEvent</code> <p>Event triggered for server broadcast messages such as from Server.broadcast</p> <code>Cancellable</code> <p>Represents an event that may be cancelled by a plugin or the server.</p> <code>ChunkEvent</code> <p>Represents a Chunk related event</p> <code>ChunkLoadEvent</code> <p>Called when a chunk is loaded</p> <code>ChunkUnloadEvent</code> <p>Called when a chunk is unloaded</p> <code>DimensionEvent</code> <p>Represents events within a dimension</p> <code>Event</code> <p>Represents an event.</p> <code>EventResult</code> <code>LeavesDecayEvent</code> <p>Called when leaves are decaying naturally.</p> <code>LevelEvent</code> <p>Represents events within a level</p> <code>MapInitializeEvent</code> <p>Called when a map is initialized.</p> <code>MobEvent</code> <p>Represents an Mob-related event.</p> <code>PacketReceiveEvent</code> <p>Called when the server receives a packet from a connected client.</p> <code>PacketSendEvent</code> <p>Called when the server sends a packet to a connected client.</p> <code>PlayerBedEnterEvent</code> <p>Called when a player is almost about to enter the bed.</p> <code>PlayerBedLeaveEvent</code> <p>Called when a player is leaving a bed.</p> <code>PlayerChatEvent</code> <p>Called when a player sends a chat message.</p> <code>PlayerCommandEvent</code> <p>Called whenever a player runs a command.</p> <code>PlayerDeathEvent</code> <p>Called when a player dies</p> <code>PlayerDropItemEvent</code> <p>Called when a player drops an item from their inventory</p> <code>PlayerEmoteEvent</code> <p>Called when a player uses and emote</p> <code>PlayerEvent</code> <p>Represents a player related event</p> <code>PlayerGameModeChangeEvent</code> <p>Called when the GameMode of the player is changed.</p> <code>PlayerInteractActorEvent</code> <p>Represents an event that is called when a player right-clicks an actor.</p> <code>PlayerInteractEvent</code> <p>Represents an event that is called when a player right-clicks a block.</p> <code>PlayerItemConsumeEvent</code> <p>Called when a player is finishing consuming an item (food, potion, milk bucket).</p> <code>PlayerItemHeldEvent</code> <p>Called when a player changes their currently held item.</p> <code>PlayerJoinEvent</code> <p>Called when a player joins a server</p> <code>PlayerJumpEvent</code> <p>Called when a player jumps.</p> <code>PlayerKickEvent</code> <p>Called when a player gets kicked from the server</p> <code>PlayerLoginEvent</code> <p>Called when a player attempts to login in.</p> <code>PlayerMoveEvent</code> <p>Called when a player moves.</p> <code>PlayerPickupItemEvent</code> <p>Called when a player picks an item up from the ground.</p> <code>PlayerQuitEvent</code> <p>Called when a player leaves a server.</p> <code>PlayerRespawnEvent</code> <p>Called when a player respawns.</p> <code>PlayerSkinChangeEvent</code> <p>Called when a player changes their skin.</p> <code>PlayerTeleportEvent</code> <p>Called when a player is teleported from one location to another.</p> <code>PluginDisableEvent</code> <p>Called when a plugin is disabled.</p> <code>PluginEnableEvent</code> <p>Called when a plugin is enabled.</p> <code>ScriptMessageEvent</code> <p>Called when a message is sent by <code>/scriptevent</code> command</p> <code>ServerCommandEvent</code> <p>Called when the console runs a command, early in the process.</p> <code>ServerEvent</code> <p>Represents a server-related event</p> <code>ServerListPingEvent</code> <p>Called when a server ping is coming in.</p> <code>ServerLoadEvent</code> <p>Called when either the server startup or reload has completed.</p> <code>ThunderChangeEvent</code> <p>Called when the thunder state in a world is changing.</p> <code>WeatherChangeEvent</code> <p>Called when the weather (rain) state in a world is changing.</p> <code>WeatherEvent</code> <p>Represents a weather-related event</p> <p>Functions:</p> Name Description <code>event_handler</code>"},{"location":"reference/python/event/#endstone.event.ActorDamageEvent","title":"ActorDamageEvent","text":"<p>               Bases: <code>MobEvent</code>, <code>Cancellable</code></p> <p>Called when an Actor is damaged.</p> <p>Attributes:</p> Name Type Description <code>damage</code> <code>float</code> <p>Gets or sets the amount of damage caused by the event</p> <code>damage_source</code> <code>DamageSource</code> <p>Gets the source of damage.</p>"},{"location":"reference/python/event/#endstone.event.ActorDamageEvent.damage","title":"damage  <code>property</code> <code>writable</code>","text":"<pre><code>damage: float\n</code></pre> <p>Gets or sets the amount of damage caused by the event</p>"},{"location":"reference/python/event/#endstone.event.ActorDamageEvent.damage_source","title":"damage_source  <code>property</code>","text":"<pre><code>damage_source: DamageSource\n</code></pre> <p>Gets the source of damage.</p>"},{"location":"reference/python/event/#endstone.event.ActorDeathEvent","title":"ActorDeathEvent","text":"<p>               Bases: <code>MobEvent</code></p> <p>Called when an Actor dies.</p> <p>Attributes:</p> Name Type Description <code>damage_source</code> <code>DamageSource</code> <p>Gets the source of damage which caused the death.</p>"},{"location":"reference/python/event/#endstone.event.ActorDeathEvent.damage_source","title":"damage_source  <code>property</code>","text":"<pre><code>damage_source: DamageSource\n</code></pre> <p>Gets the source of damage which caused the death.</p>"},{"location":"reference/python/event/#endstone.event.ActorEvent","title":"ActorEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents an Actor-related event.</p> <p>Attributes:</p> Name Type Description <code>actor</code> <code>Actor</code> <p>Returns the Actor involved in this event</p>"},{"location":"reference/python/event/#endstone.event.ActorEvent.actor","title":"actor  <code>property</code>","text":"<pre><code>actor: Actor\n</code></pre> <p>Returns the Actor involved in this event</p>"},{"location":"reference/python/event/#endstone.event.ActorExplodeEvent","title":"ActorExplodeEvent","text":"<p>               Bases: <code>ActorEvent</code>, <code>Cancellable</code></p> <p>Called when an Actor explodes.</p> <p>Attributes:</p> Name Type Description <code>block_list</code> <code>list[Block]</code> <p>Gets or sets the list of blocks that would have been removed or were removed from the explosion event.</p> <code>location</code> <code>Location</code> <p>Returns the location where the explosion happened.</p>"},{"location":"reference/python/event/#endstone.event.ActorExplodeEvent.block_list","title":"block_list  <code>property</code> <code>writable</code>","text":"<pre><code>block_list: list[Block]\n</code></pre> <p>Gets or sets the list of blocks that would have been removed or were removed from the explosion event.</p>"},{"location":"reference/python/event/#endstone.event.ActorExplodeEvent.location","title":"location  <code>property</code>","text":"<pre><code>location: Location\n</code></pre> <p>Returns the location where the explosion happened.</p>"},{"location":"reference/python/event/#endstone.event.ActorKnockbackEvent","title":"ActorKnockbackEvent","text":"<p>               Bases: <code>MobEvent</code>, <code>Cancellable</code></p> <p>Called when a living entity receives knockback.</p> <p>Attributes:</p> Name Type Description <code>knockback</code> <code>Vector</code> <p>Gets or sets the knockback that will be applied to the entity.</p> <code>source</code> <code>Actor</code> <p>Get the source actor that has caused knockback to the defender, if exists.</p>"},{"location":"reference/python/event/#endstone.event.ActorKnockbackEvent.knockback","title":"knockback  <code>property</code> <code>writable</code>","text":"<pre><code>knockback: Vector\n</code></pre> <p>Gets or sets the knockback that will be applied to the entity.</p>"},{"location":"reference/python/event/#endstone.event.ActorKnockbackEvent.source","title":"source  <code>property</code>","text":"<pre><code>source: Actor\n</code></pre> <p>Get the source actor that has caused knockback to the defender, if exists.</p>"},{"location":"reference/python/event/#endstone.event.ActorRemoveEvent","title":"ActorRemoveEvent","text":"<p>               Bases: <code>ActorEvent</code></p> <p>Called when an Actor is removed.</p>"},{"location":"reference/python/event/#endstone.event.ActorSpawnEvent","title":"ActorSpawnEvent","text":"<p>               Bases: <code>ActorEvent</code>, <code>Cancellable</code></p> <p>Called when an Actor is spawned into a world.</p>"},{"location":"reference/python/event/#endstone.event.ActorTeleportEvent","title":"ActorTeleportEvent","text":"<p>               Bases: <code>ActorEvent</code>, <code>Cancellable</code></p> <p>Called when a non-player entity is teleported from one location to another.</p> <p>Attributes:</p> Name Type Description <code>from_location</code> <code>Location</code> <p>Gets or sets the location that this actor moved from.</p> <code>to_location</code> <code>Location</code> <p>Gets or sets the location that this actor moved to.</p>"},{"location":"reference/python/event/#endstone.event.ActorTeleportEvent.from_location","title":"from_location  <code>property</code> <code>writable</code>","text":"<pre><code>from_location: Location\n</code></pre> <p>Gets or sets the location that this actor moved from.</p>"},{"location":"reference/python/event/#endstone.event.ActorTeleportEvent.to_location","title":"to_location  <code>property</code> <code>writable</code>","text":"<pre><code>to_location: Location\n</code></pre> <p>Gets or sets the location that this actor moved to.</p>"},{"location":"reference/python/event/#endstone.event.BlockBreakEvent","title":"BlockBreakEvent","text":"<p>               Bases: <code>BlockEvent</code>, <code>Cancellable</code></p> <p>Called when a block is broken by a player.</p> <p>Attributes:</p> Name Type Description <code>player</code> <code>Player</code> <p>Gets the Player that is breaking the block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.BlockBreakEvent.player","title":"player  <code>property</code>","text":"<pre><code>player: Player\n</code></pre> <p>Gets the Player that is breaking the block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.BlockCookEvent","title":"BlockCookEvent","text":"<p>               Bases: <code>BlockEvent</code>, <code>Cancellable</code></p> <p>Called when an ItemStack is successfully cooked in a block.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>ItemStack</code> <p>Gets or sets the resultant ItemStack for this event</p> <code>source</code> <code>ItemStack</code> <p>Gets the smelted ItemStack for this event</p>"},{"location":"reference/python/event/#endstone.event.BlockCookEvent.result","title":"result  <code>property</code> <code>writable</code>","text":"<pre><code>result: ItemStack\n</code></pre> <p>Gets or sets the resultant ItemStack for this event</p>"},{"location":"reference/python/event/#endstone.event.BlockCookEvent.source","title":"source  <code>property</code>","text":"<pre><code>source: ItemStack\n</code></pre> <p>Gets the smelted ItemStack for this event</p>"},{"location":"reference/python/event/#endstone.event.BlockEvent","title":"BlockEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents an Block-related event</p> <p>Attributes:</p> Name Type Description <code>block</code> <code>Block</code> <p>Gets the block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.BlockEvent.block","title":"block  <code>property</code>","text":"<pre><code>block: Block\n</code></pre> <p>Gets the block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.BlockPistonEvent","title":"BlockPistonEvent","text":"<p>               Bases: <code>BlockEvent</code>, <code>Cancellable</code></p> <p>Called when a piston block is triggered</p> <p>Attributes:</p> Name Type Description <code>direction</code> <code>BlockFace</code> <p>Return the direction in which the piston will operate.</p>"},{"location":"reference/python/event/#endstone.event.BlockPistonEvent.direction","title":"direction  <code>property</code>","text":"<pre><code>direction: BlockFace\n</code></pre> <p>Return the direction in which the piston will operate.</p>"},{"location":"reference/python/event/#endstone.event.BlockPistonExtendEvent","title":"BlockPistonExtendEvent","text":"<p>               Bases: <code>BlockPistonEvent</code></p> <p>Called when a piston extends.</p>"},{"location":"reference/python/event/#endstone.event.BlockPistonRetractEvent","title":"BlockPistonRetractEvent","text":"<p>               Bases: <code>BlockPistonEvent</code></p> <p>Called when a piston retracts.</p>"},{"location":"reference/python/event/#endstone.event.BlockPlaceEvent","title":"BlockPlaceEvent","text":"<p>               Bases: <code>BlockEvent</code>, <code>Cancellable</code></p> <p>Called when a block is placed by a player.</p> <p>Attributes:</p> Name Type Description <code>block_against</code> <code>Block</code> <p>Gets the block that this block was placed against</p> <code>block_placed_state</code> <code>BlockState</code> <p>Gets the BlockState for the block which was placed.</p> <code>block_replaced</code> <code>Block</code> <p>Gets the block which was replaced.</p> <code>player</code> <code>Player</code> <p>Gets the player who placed the block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.BlockPlaceEvent.block_against","title":"block_against  <code>property</code>","text":"<pre><code>block_against: Block\n</code></pre> <p>Gets the block that this block was placed against</p>"},{"location":"reference/python/event/#endstone.event.BlockPlaceEvent.block_placed_state","title":"block_placed_state  <code>property</code>","text":"<pre><code>block_placed_state: BlockState\n</code></pre> <p>Gets the BlockState for the block which was placed.</p>"},{"location":"reference/python/event/#endstone.event.BlockPlaceEvent.block_replaced","title":"block_replaced  <code>property</code>","text":"<pre><code>block_replaced: Block\n</code></pre> <p>Gets the block which was replaced.</p>"},{"location":"reference/python/event/#endstone.event.BlockPlaceEvent.player","title":"player  <code>property</code>","text":"<pre><code>player: Player\n</code></pre> <p>Gets the player who placed the block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.BroadcastMessageEvent","title":"BroadcastMessageEvent","text":"<p>               Bases: <code>ServerEvent</code>, <code>Cancellable</code></p> <p>Event triggered for server broadcast messages such as from Server.broadcast</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str | Translatable</code> <p>Gets or sets the message to broadcast.</p> <code>recipients</code> <code>set[CommandSender]</code> <p>Gets a set of recipients that this broadcast message will be displayed to.</p>"},{"location":"reference/python/event/#endstone.event.BroadcastMessageEvent.message","title":"message  <code>property</code> <code>writable</code>","text":"<pre><code>message: str | Translatable\n</code></pre> <p>Gets or sets the message to broadcast.</p>"},{"location":"reference/python/event/#endstone.event.BroadcastMessageEvent.recipients","title":"recipients  <code>property</code>","text":"<pre><code>recipients: set[CommandSender]\n</code></pre> <p>Gets a set of recipients that this broadcast message will be displayed to.</p>"},{"location":"reference/python/event/#endstone.event.Cancellable","title":"Cancellable","text":"<p>Represents an event that may be cancelled by a plugin or the server.</p> <p>Methods:</p> Name Description <code>cancel</code> <p>Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins.</p> <p>Attributes:</p> Name Type Description <code>cancelled</code> <code>bool</code> <p>Gets or sets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. [Warning] Deprecated: Use is_cancelled instead.</p> <code>is_cancelled</code> <code>bool</code> <p>Gets or sets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins.</p>"},{"location":"reference/python/event/#endstone.event.Cancellable.cancelled","title":"cancelled  <code>property</code> <code>writable</code>","text":"<pre><code>cancelled: bool\n</code></pre> <p>Gets or sets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. [Warning] Deprecated: Use is_cancelled instead.</p>"},{"location":"reference/python/event/#endstone.event.Cancellable.is_cancelled","title":"is_cancelled  <code>property</code> <code>writable</code>","text":"<pre><code>is_cancelled: bool\n</code></pre> <p>Gets or sets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins.</p>"},{"location":"reference/python/event/#endstone.event.Cancellable.cancel","title":"cancel","text":"<pre><code>cancel() -&gt; None\n</code></pre> <p>Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins.</p>"},{"location":"reference/python/event/#endstone.event.ChunkEvent","title":"ChunkEvent","text":"<p>               Bases: <code>DimensionEvent</code></p> <p>Represents a Chunk related event</p> <p>Attributes:</p> Name Type Description <code>chunk</code> <code>Chunk</code> <p>Gets the chunk being loaded/unloaded</p>"},{"location":"reference/python/event/#endstone.event.ChunkEvent.chunk","title":"chunk  <code>property</code>","text":"<pre><code>chunk: Chunk\n</code></pre> <p>Gets the chunk being loaded/unloaded</p>"},{"location":"reference/python/event/#endstone.event.ChunkLoadEvent","title":"ChunkLoadEvent","text":"<p>               Bases: <code>ChunkEvent</code></p> <p>Called when a chunk is loaded</p>"},{"location":"reference/python/event/#endstone.event.ChunkUnloadEvent","title":"ChunkUnloadEvent","text":"<p>               Bases: <code>ChunkEvent</code></p> <p>Called when a chunk is unloaded</p>"},{"location":"reference/python/event/#endstone.event.DimensionEvent","title":"DimensionEvent","text":"<p>               Bases: <code>LevelEvent</code></p> <p>Represents events within a dimension</p> <p>Attributes:</p> Name Type Description <code>dimension</code> <code>Dimension</code> <p>Gets the dimension primarily involved with this event</p>"},{"location":"reference/python/event/#endstone.event.DimensionEvent.dimension","title":"dimension  <code>property</code>","text":"<pre><code>dimension: Dimension\n</code></pre> <p>Gets the dimension primarily involved with this event</p>"},{"location":"reference/python/event/#endstone.event.Event","title":"Event","text":"<p>Represents an event.</p> <p>Attributes:</p> Name Type Description <code>event_name</code> <code>str</code> <p>Gets a user-friendly identifier for this event.</p> <code>is_asynchronous</code> <code>bool</code> <p>Whether the event fires asynchronously.</p>"},{"location":"reference/python/event/#endstone.event.Event.event_name","title":"event_name  <code>property</code>","text":"<pre><code>event_name: str\n</code></pre> <p>Gets a user-friendly identifier for this event.</p>"},{"location":"reference/python/event/#endstone.event.Event.is_asynchronous","title":"is_asynchronous  <code>property</code>","text":"<pre><code>is_asynchronous: bool\n</code></pre> <p>Whether the event fires asynchronously.</p>"},{"location":"reference/python/event/#endstone.event.EventResult","title":"EventResult","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>ALLOW</code> <code>DEFAULT</code> <code>DENY</code>"},{"location":"reference/python/event/#endstone.event.EventResult.ALLOW","title":"ALLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALLOW = 2\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventResult.DEFAULT","title":"DEFAULT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEFAULT = 1\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventResult.DENY","title":"DENY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DENY = 0\n</code></pre>"},{"location":"reference/python/event/#endstone.event.LeavesDecayEvent","title":"LeavesDecayEvent","text":"<p>               Bases: <code>BlockEvent</code>, <code>Cancellable</code></p> <p>Called when leaves are decaying naturally. If a Leaves Decay event is cancelled, the leaves will not decay.</p>"},{"location":"reference/python/event/#endstone.event.LevelEvent","title":"LevelEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents events within a level</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>Level</code> <p>Gets the level primarily involved with this event</p>"},{"location":"reference/python/event/#endstone.event.LevelEvent.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Gets the level primarily involved with this event</p>"},{"location":"reference/python/event/#endstone.event.MapInitializeEvent","title":"MapInitializeEvent","text":"<p>               Bases: <code>ServerEvent</code></p> <p>Called when a map is initialized.</p> <p>Attributes:</p> Name Type Description <code>map</code> <code>MapView</code> <p>Gets the map initialized in this event.</p>"},{"location":"reference/python/event/#endstone.event.MapInitializeEvent.map","title":"map  <code>property</code>","text":"<pre><code>map: MapView\n</code></pre> <p>Gets the map initialized in this event.</p>"},{"location":"reference/python/event/#endstone.event.MobEvent","title":"MobEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents an Mob-related event.</p> <p>Attributes:</p> Name Type Description <code>actor</code> <code>Mob</code> <p>Returns the Mob involved in this event</p>"},{"location":"reference/python/event/#endstone.event.MobEvent.actor","title":"actor  <code>property</code>","text":"<pre><code>actor: Mob\n</code></pre> <p>Returns the Mob involved in this event</p>"},{"location":"reference/python/event/#endstone.event.PacketReceiveEvent","title":"PacketReceiveEvent","text":"<p>               Bases: <code>ServerEvent</code>, <code>Cancellable</code></p> <p>Called when the server receives a packet from a connected client.</p> <p>Attributes:</p> Name Type Description <code>address</code> <code>SocketAddress</code> <p>Gets the network address to which this packet is being sent.</p> <code>packet_id</code> <code>int</code> <p>Gets the ID of the packet.</p> <code>payload</code> <code>bytes</code> <p>Gets or sets the raw packet data excluding the header.</p> <code>player</code> <code>Player</code> <p>Gets the player involved in this event</p> <code>sub_client_id</code> <code>int</code> <p>Gets the SubClient ID (0 = primary client; 1-3 = split-screen clients).</p>"},{"location":"reference/python/event/#endstone.event.PacketReceiveEvent.address","title":"address  <code>property</code>","text":"<pre><code>address: SocketAddress\n</code></pre> <p>Gets the network address to which this packet is being sent.</p>"},{"location":"reference/python/event/#endstone.event.PacketReceiveEvent.packet_id","title":"packet_id  <code>property</code>","text":"<pre><code>packet_id: int\n</code></pre> <p>Gets the ID of the packet.</p>"},{"location":"reference/python/event/#endstone.event.PacketReceiveEvent.payload","title":"payload  <code>property</code> <code>writable</code>","text":"<pre><code>payload: bytes\n</code></pre> <p>Gets or sets the raw packet data excluding the header.</p>"},{"location":"reference/python/event/#endstone.event.PacketReceiveEvent.player","title":"player  <code>property</code>","text":"<pre><code>player: Player\n</code></pre> <p>Gets the player involved in this event NOTE: This may return None if the packet is sent before the player completes the login process.</p>"},{"location":"reference/python/event/#endstone.event.PacketReceiveEvent.sub_client_id","title":"sub_client_id  <code>property</code>","text":"<pre><code>sub_client_id: int\n</code></pre> <p>Gets the SubClient ID (0 = primary client; 1-3 = split-screen clients).</p>"},{"location":"reference/python/event/#endstone.event.PacketSendEvent","title":"PacketSendEvent","text":"<p>               Bases: <code>ServerEvent</code>, <code>Cancellable</code></p> <p>Called when the server sends a packet to a connected client.</p> <p>Attributes:</p> Name Type Description <code>address</code> <code>SocketAddress</code> <p>Gets the network address to which this packet is being sent.</p> <code>packet_id</code> <code>int</code> <p>Gets the ID of the packet.</p> <code>payload</code> <code>bytes</code> <p>Gets or sets the raw packet data excluding the header.</p> <code>player</code> <code>Player</code> <p>Gets the player involved in this event</p> <code>sub_client_id</code> <code>int</code> <p>Gets the SubClient ID (0 = primary client; 1-3 = split-screen clients).</p>"},{"location":"reference/python/event/#endstone.event.PacketSendEvent.address","title":"address  <code>property</code>","text":"<pre><code>address: SocketAddress\n</code></pre> <p>Gets the network address to which this packet is being sent.</p>"},{"location":"reference/python/event/#endstone.event.PacketSendEvent.packet_id","title":"packet_id  <code>property</code>","text":"<pre><code>packet_id: int\n</code></pre> <p>Gets the ID of the packet.</p>"},{"location":"reference/python/event/#endstone.event.PacketSendEvent.payload","title":"payload  <code>property</code> <code>writable</code>","text":"<pre><code>payload: bytes\n</code></pre> <p>Gets or sets the raw packet data excluding the header.</p>"},{"location":"reference/python/event/#endstone.event.PacketSendEvent.player","title":"player  <code>property</code>","text":"<pre><code>player: Player\n</code></pre> <p>Gets the player involved in this event NOTE: This may return None if the packet is sent before the player completes the login process.</p>"},{"location":"reference/python/event/#endstone.event.PacketSendEvent.sub_client_id","title":"sub_client_id  <code>property</code>","text":"<pre><code>sub_client_id: int\n</code></pre> <p>Gets the SubClient ID (0 = primary client; 1-3 = split-screen clients).</p>"},{"location":"reference/python/event/#endstone.event.PlayerBedEnterEvent","title":"PlayerBedEnterEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player is almost about to enter the bed.</p> <p>Attributes:</p> Name Type Description <code>bed</code> <code>Block</code> <p>Returns the bed block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.PlayerBedEnterEvent.bed","title":"bed  <code>property</code>","text":"<pre><code>bed: Block\n</code></pre> <p>Returns the bed block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.PlayerBedLeaveEvent","title":"PlayerBedLeaveEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player is leaving a bed.</p> <p>Attributes:</p> Name Type Description <code>bed</code> <code>Block</code> <p>Returns the bed block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.PlayerBedLeaveEvent.bed","title":"bed  <code>property</code>","text":"<pre><code>bed: Block\n</code></pre> <p>Returns the bed block involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.PlayerChatEvent","title":"PlayerChatEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player sends a chat message.</p> <p>Attributes:</p> Name Type Description <code>format</code> <code>str</code> <p>Sets the format to use to display this chat message</p> <code>message</code> <code>str</code> <p>Gets or sets the message that the player will send.</p> <code>player</code> <code>Player</code> <p>Gets or sets the player that this message will display as</p> <code>recipients</code> <code>list[Player]</code> <p>Gets a set of recipients that this chat message will be displayed to</p>"},{"location":"reference/python/event/#endstone.event.PlayerChatEvent.format","title":"format  <code>property</code> <code>writable</code>","text":"<pre><code>format: str\n</code></pre> <p>Sets the format to use to display this chat message</p>"},{"location":"reference/python/event/#endstone.event.PlayerChatEvent.message","title":"message  <code>property</code> <code>writable</code>","text":"<pre><code>message: str\n</code></pre> <p>Gets or sets the message that the player will send.</p>"},{"location":"reference/python/event/#endstone.event.PlayerChatEvent.player","title":"player  <code>property</code> <code>writable</code>","text":"<pre><code>player: Player\n</code></pre> <p>Gets or sets the player that this message will display as</p>"},{"location":"reference/python/event/#endstone.event.PlayerChatEvent.recipients","title":"recipients  <code>property</code>","text":"<pre><code>recipients: list[Player]\n</code></pre> <p>Gets a set of recipients that this chat message will be displayed to</p>"},{"location":"reference/python/event/#endstone.event.PlayerCommandEvent","title":"PlayerCommandEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called whenever a player runs a command.</p> <p>Attributes:</p> Name Type Description <code>command</code> <code>str</code> <p>Gets or sets the command that the player will send.</p>"},{"location":"reference/python/event/#endstone.event.PlayerCommandEvent.command","title":"command  <code>property</code> <code>writable</code>","text":"<pre><code>command: str\n</code></pre> <p>Gets or sets the command that the player will send.</p>"},{"location":"reference/python/event/#endstone.event.PlayerDeathEvent","title":"PlayerDeathEvent","text":"<p>               Bases: <code>ActorDeathEvent</code>, <code>PlayerEvent</code></p> <p>Called when a player dies</p> <p>Attributes:</p> Name Type Description <code>death_message</code> <code>str | Translatable | None</code> <p>Gets or sets the death message that will appear to everyone on the server.</p>"},{"location":"reference/python/event/#endstone.event.PlayerDeathEvent.death_message","title":"death_message  <code>property</code> <code>writable</code>","text":"<pre><code>death_message: str | Translatable | None\n</code></pre> <p>Gets or sets the death message that will appear to everyone on the server.</p>"},{"location":"reference/python/event/#endstone.event.PlayerDropItemEvent","title":"PlayerDropItemEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player drops an item from their inventory</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>ItemStack</code> <p>Gets the ItemStack dropped by the player</p>"},{"location":"reference/python/event/#endstone.event.PlayerDropItemEvent.item","title":"item  <code>property</code>","text":"<pre><code>item: ItemStack\n</code></pre> <p>Gets the ItemStack dropped by the player</p>"},{"location":"reference/python/event/#endstone.event.PlayerEmoteEvent","title":"PlayerEmoteEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player uses and emote</p> <p>Attributes:</p> Name Type Description <code>emote_id</code> <code>str</code> <p>Gets the emote piece ID</p> <code>is_muted</code> <code>bool</code> <p>Gets or sets the muted state for the emote.</p>"},{"location":"reference/python/event/#endstone.event.PlayerEmoteEvent.emote_id","title":"emote_id  <code>property</code>","text":"<pre><code>emote_id: str\n</code></pre> <p>Gets the emote piece ID</p>"},{"location":"reference/python/event/#endstone.event.PlayerEmoteEvent.is_muted","title":"is_muted  <code>property</code> <code>writable</code>","text":"<pre><code>is_muted: bool\n</code></pre> <p>Gets or sets the muted state for the emote.</p>"},{"location":"reference/python/event/#endstone.event.PlayerEvent","title":"PlayerEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents a player related event</p> <p>Attributes:</p> Name Type Description <code>player</code> <code>Player</code> <p>Returns the player involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.PlayerEvent.player","title":"player  <code>property</code>","text":"<pre><code>player: Player\n</code></pre> <p>Returns the player involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.PlayerGameModeChangeEvent","title":"PlayerGameModeChangeEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when the GameMode of the player is changed.</p> <p>Attributes:</p> Name Type Description <code>new_game_mode</code> <code>GameMode</code> <p>Gets the GameMode the player is switched to.</p>"},{"location":"reference/python/event/#endstone.event.PlayerGameModeChangeEvent.new_game_mode","title":"new_game_mode  <code>property</code>","text":"<pre><code>new_game_mode: GameMode\n</code></pre> <p>Gets the GameMode the player is switched to.</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractActorEvent","title":"PlayerInteractActorEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Represents an event that is called when a player right-clicks an actor.</p> <p>Attributes:</p> Name Type Description <code>actor</code> <code>Actor</code> <p>Gets the actor that was right-clicked by the player.</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractActorEvent.actor","title":"actor  <code>property</code>","text":"<pre><code>actor: Actor\n</code></pre> <p>Gets the actor that was right-clicked by the player.</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent","title":"PlayerInteractEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Represents an event that is called when a player right-clicks a block.</p> <p>Classes:</p> Name Description <code>Action</code> <p>Attributes:</p> Name Type Description <code>LEFT_CLICK_AIR</code> <code>LEFT_CLICK_BLOCK</code> <code>RIGHT_CLICK_AIR</code> <code>RIGHT_CLICK_BLOCK</code> <code>action</code> <code>Action</code> <p>Returns the action type of interaction</p> <code>block</code> <code>Block</code> <p>Returns the clicked block</p> <code>block_face</code> <code>BlockFace</code> <p>Returns the face of the block that was clicked</p> <code>clicked_position</code> <code>Vector | None</code> <p>Gets the exact position on the block the player interacted with.</p> <code>has_block</code> <code>bool</code> <p>Check if this event involved a block</p> <code>has_item</code> <code>bool</code> <p>Check if this event involved an item</p> <code>item</code> <code>ItemStack</code> <p>Returns the item in hand represented by this event</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.LEFT_CLICK_AIR","title":"LEFT_CLICK_AIR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEFT_CLICK_AIR = LEFT_CLICK_AIR\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.LEFT_CLICK_BLOCK","title":"LEFT_CLICK_BLOCK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEFT_CLICK_BLOCK = LEFT_CLICK_BLOCK\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.RIGHT_CLICK_AIR","title":"RIGHT_CLICK_AIR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIGHT_CLICK_AIR = RIGHT_CLICK_AIR\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.RIGHT_CLICK_BLOCK","title":"RIGHT_CLICK_BLOCK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIGHT_CLICK_BLOCK = RIGHT_CLICK_BLOCK\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.action","title":"action  <code>property</code>","text":"<pre><code>action: Action\n</code></pre> <p>Returns the action type of interaction</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.block","title":"block  <code>property</code>","text":"<pre><code>block: Block\n</code></pre> <p>Returns the clicked block</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.block_face","title":"block_face  <code>property</code>","text":"<pre><code>block_face: BlockFace\n</code></pre> <p>Returns the face of the block that was clicked</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.clicked_position","title":"clicked_position  <code>property</code>","text":"<pre><code>clicked_position: Vector | None\n</code></pre> <p>Gets the exact position on the block the player interacted with.</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.has_block","title":"has_block  <code>property</code>","text":"<pre><code>has_block: bool\n</code></pre> <p>Check if this event involved a block</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.has_item","title":"has_item  <code>property</code>","text":"<pre><code>has_item: bool\n</code></pre> <p>Check if this event involved an item</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.item","title":"item  <code>property</code>","text":"<pre><code>item: ItemStack\n</code></pre> <p>Returns the item in hand represented by this event</p>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.Action","title":"Action","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>LEFT_CLICK_AIR</code> <code>LEFT_CLICK_BLOCK</code> <code>RIGHT_CLICK_AIR</code> <code>RIGHT_CLICK_BLOCK</code>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.Action.LEFT_CLICK_AIR","title":"LEFT_CLICK_AIR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEFT_CLICK_AIR = 2\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.Action.LEFT_CLICK_BLOCK","title":"LEFT_CLICK_BLOCK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEFT_CLICK_BLOCK = 0\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.Action.RIGHT_CLICK_AIR","title":"RIGHT_CLICK_AIR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIGHT_CLICK_AIR = 3\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK","title":"RIGHT_CLICK_BLOCK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIGHT_CLICK_BLOCK = 1\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerItemConsumeEvent","title":"PlayerItemConsumeEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player is finishing consuming an item (food, potion, milk bucket).</p> <p>Attributes:</p> Name Type Description <code>hand</code> <code>EquipmentSlot</code> <p>Get the hand used to consume the item.</p> <code>item</code> <code>ItemStack</code> <p>Gets or sets the item that is being consumed.</p>"},{"location":"reference/python/event/#endstone.event.PlayerItemConsumeEvent.hand","title":"hand  <code>property</code>","text":"<pre><code>hand: EquipmentSlot\n</code></pre> <p>Get the hand used to consume the item.</p>"},{"location":"reference/python/event/#endstone.event.PlayerItemConsumeEvent.item","title":"item  <code>property</code>","text":"<pre><code>item: ItemStack\n</code></pre> <p>Gets or sets the item that is being consumed.</p>"},{"location":"reference/python/event/#endstone.event.PlayerItemHeldEvent","title":"PlayerItemHeldEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player changes their currently held item.</p> <p>Attributes:</p> Name Type Description <code>new_slot</code> <code>int</code> <p>Gets the new held slot index</p> <code>previous_slot</code> <code>int</code> <p>Gets the previous held slot index.</p>"},{"location":"reference/python/event/#endstone.event.PlayerItemHeldEvent.new_slot","title":"new_slot  <code>property</code>","text":"<pre><code>new_slot: int\n</code></pre> <p>Gets the new held slot index</p>"},{"location":"reference/python/event/#endstone.event.PlayerItemHeldEvent.previous_slot","title":"previous_slot  <code>property</code>","text":"<pre><code>previous_slot: int\n</code></pre> <p>Gets the previous held slot index.</p>"},{"location":"reference/python/event/#endstone.event.PlayerJoinEvent","title":"PlayerJoinEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player joins a server</p> <p>Attributes:</p> Name Type Description <code>join_message</code> <code>str | Translatable | None</code> <p>Gets or sets the join message to send to all online players.</p>"},{"location":"reference/python/event/#endstone.event.PlayerJoinEvent.join_message","title":"join_message  <code>property</code> <code>writable</code>","text":"<pre><code>join_message: str | Translatable | None\n</code></pre> <p>Gets or sets the join message to send to all online players.</p>"},{"location":"reference/python/event/#endstone.event.PlayerJumpEvent","title":"PlayerJumpEvent","text":"<p>               Bases: <code>PlayerMoveEvent</code></p> <p>Called when a player jumps.</p>"},{"location":"reference/python/event/#endstone.event.PlayerKickEvent","title":"PlayerKickEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player gets kicked from the server</p> <p>Attributes:</p> Name Type Description <code>reason</code> <code>str</code> <p>Gets or sets the reason why the player is getting kicked</p>"},{"location":"reference/python/event/#endstone.event.PlayerKickEvent.reason","title":"reason  <code>property</code> <code>writable</code>","text":"<pre><code>reason: str\n</code></pre> <p>Gets or sets the reason why the player is getting kicked</p>"},{"location":"reference/python/event/#endstone.event.PlayerLoginEvent","title":"PlayerLoginEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player attempts to login in.</p> <p>Attributes:</p> Name Type Description <code>kick_message</code> <code>str</code> <p>Gets or sets kick message to display if event is cancelled</p>"},{"location":"reference/python/event/#endstone.event.PlayerLoginEvent.kick_message","title":"kick_message  <code>property</code> <code>writable</code>","text":"<pre><code>kick_message: str\n</code></pre> <p>Gets or sets kick message to display if event is cancelled</p>"},{"location":"reference/python/event/#endstone.event.PlayerMoveEvent","title":"PlayerMoveEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player moves.</p> <p>Attributes:</p> Name Type Description <code>from_location</code> <code>Location</code> <p>Gets or sets the location that this player moved from.</p> <code>to_location</code> <code>Location</code> <p>Gets or sets the location that this player moved to.</p>"},{"location":"reference/python/event/#endstone.event.PlayerMoveEvent.from_location","title":"from_location  <code>property</code> <code>writable</code>","text":"<pre><code>from_location: Location\n</code></pre> <p>Gets or sets the location that this player moved from.</p>"},{"location":"reference/python/event/#endstone.event.PlayerMoveEvent.to_location","title":"to_location  <code>property</code> <code>writable</code>","text":"<pre><code>to_location: Location\n</code></pre> <p>Gets or sets the location that this player moved to.</p>"},{"location":"reference/python/event/#endstone.event.PlayerPickupItemEvent","title":"PlayerPickupItemEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player picks an item up from the ground.</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>Item</code> <p>Gets the Item picked up by the entity.</p>"},{"location":"reference/python/event/#endstone.event.PlayerPickupItemEvent.item","title":"item  <code>property</code>","text":"<pre><code>item: Item\n</code></pre> <p>Gets the Item picked up by the entity.</p>"},{"location":"reference/python/event/#endstone.event.PlayerQuitEvent","title":"PlayerQuitEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player leaves a server.</p> <p>Attributes:</p> Name Type Description <code>quit_message</code> <code>str | Translatable | None</code> <p>Gets or sets the quit message to send to all online players.</p>"},{"location":"reference/python/event/#endstone.event.PlayerQuitEvent.quit_message","title":"quit_message  <code>property</code> <code>writable</code>","text":"<pre><code>quit_message: str | Translatable | None\n</code></pre> <p>Gets or sets the quit message to send to all online players.</p>"},{"location":"reference/python/event/#endstone.event.PlayerRespawnEvent","title":"PlayerRespawnEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player respawns.</p>"},{"location":"reference/python/event/#endstone.event.PlayerSkinChangeEvent","title":"PlayerSkinChangeEvent","text":"<p>               Bases: <code>PlayerEvent</code>, <code>Cancellable</code></p> <p>Called when a player changes their skin.</p> <p>Attributes:</p> Name Type Description <code>new_skin</code> <code>Skin</code> <p>Gets the player's new skin.</p> <code>skin_change_message</code> <code>str | Translatable | None</code> <p>Gets or sets the message to send to all online players for this skin change.</p>"},{"location":"reference/python/event/#endstone.event.PlayerSkinChangeEvent.new_skin","title":"new_skin  <code>property</code>","text":"<pre><code>new_skin: Skin\n</code></pre> <p>Gets the player's new skin.</p>"},{"location":"reference/python/event/#endstone.event.PlayerSkinChangeEvent.skin_change_message","title":"skin_change_message  <code>property</code> <code>writable</code>","text":"<pre><code>skin_change_message: str | Translatable | None\n</code></pre> <p>Gets or sets the message to send to all online players for this skin change.</p>"},{"location":"reference/python/event/#endstone.event.PlayerTeleportEvent","title":"PlayerTeleportEvent","text":"<p>               Bases: <code>PlayerMoveEvent</code></p> <p>Called when a player is teleported from one location to another.</p>"},{"location":"reference/python/event/#endstone.event.PluginDisableEvent","title":"PluginDisableEvent","text":"<p>               Bases: <code>ServerEvent</code></p> <p>Called when a plugin is disabled.</p> <p>Attributes:</p> Name Type Description <code>plugin</code> <code>Plugin</code>"},{"location":"reference/python/event/#endstone.event.PluginDisableEvent.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PluginEnableEvent","title":"PluginEnableEvent","text":"<p>               Bases: <code>ServerEvent</code></p> <p>Called when a plugin is enabled.</p> <p>Attributes:</p> Name Type Description <code>plugin</code> <code>Plugin</code>"},{"location":"reference/python/event/#endstone.event.PluginEnableEvent.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ScriptMessageEvent","title":"ScriptMessageEvent","text":"<p>               Bases: <code>ServerEvent</code>, <code>Cancellable</code></p> <p>Called when a message is sent by <code>/scriptevent</code> command</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Get the message to send.</p> <code>message_id</code> <code>str</code> <p>Get the message id to send.</p> <code>sender</code> <code>CommandSender</code> <p>Gets the command sender who initiated the command.</p>"},{"location":"reference/python/event/#endstone.event.ScriptMessageEvent.message","title":"message  <code>property</code>","text":"<pre><code>message: str\n</code></pre> <p>Get the message to send.</p>"},{"location":"reference/python/event/#endstone.event.ScriptMessageEvent.message_id","title":"message_id  <code>property</code>","text":"<pre><code>message_id: str\n</code></pre> <p>Get the message id to send.</p>"},{"location":"reference/python/event/#endstone.event.ScriptMessageEvent.sender","title":"sender  <code>property</code>","text":"<pre><code>sender: CommandSender\n</code></pre> <p>Gets the command sender who initiated the command.</p>"},{"location":"reference/python/event/#endstone.event.ServerCommandEvent","title":"ServerCommandEvent","text":"<p>               Bases: <code>ServerEvent</code>, <code>Cancellable</code></p> <p>Called when the console runs a command, early in the process.</p> <p>Attributes:</p> Name Type Description <code>command</code> <code>str</code> <p>Gets or sets the command that the server will execute</p> <code>sender</code> <code>CommandSender</code> <p>Get the command sender.</p>"},{"location":"reference/python/event/#endstone.event.ServerCommandEvent.command","title":"command  <code>property</code> <code>writable</code>","text":"<pre><code>command: str\n</code></pre> <p>Gets or sets the command that the server will execute</p>"},{"location":"reference/python/event/#endstone.event.ServerCommandEvent.sender","title":"sender  <code>property</code>","text":"<pre><code>sender: CommandSender\n</code></pre> <p>Get the command sender.</p>"},{"location":"reference/python/event/#endstone.event.ServerEvent","title":"ServerEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents a server-related event</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent","title":"ServerListPingEvent","text":"<p>               Bases: <code>ServerEvent</code>, <code>Cancellable</code></p> <p>Called when a server ping is coming in.</p> <p>Attributes:</p> Name Type Description <code>game_mode</code> <code>GameMode</code> <p>Gets or sets the current game mode.</p> <code>level_name</code> <code>str</code> <p>Gets or sets the level name.</p> <code>local_port</code> <code>int</code> <p>Get or set the local port of the server.</p> <code>local_port_v6</code> <code>int</code> <p>Get or set the local port of the server for IPv6 support</p> <code>max_players</code> <code>int</code> <p>Gets or sets the maximum number of players allowed.</p> <code>minecraft_version_network</code> <code>str</code> <p>Gets or sets the network version of Minecraft that is supported by this server</p> <code>motd</code> <code>str</code> <p>Gets or sets the message of the day message.</p> <code>network_protocol_version</code> <code>int</code> <p>Get the network protocol version of this server</p> <code>num_players</code> <code>int</code> <p>Gets or sets the number of players online.</p> <code>remote_host</code> <code>str</code> <p>Get the host the ping is coming from.</p> <code>remote_port</code> <code>int</code> <p>Get the port the ping is coming from.</p> <code>server_guid</code> <code>str</code> <p>Get or set the unique identifier of the server.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.game_mode","title":"game_mode  <code>property</code> <code>writable</code>","text":"<pre><code>game_mode: GameMode\n</code></pre> <p>Gets or sets the current game mode.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.level_name","title":"level_name  <code>property</code> <code>writable</code>","text":"<pre><code>level_name: str\n</code></pre> <p>Gets or sets the level name.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.local_port","title":"local_port  <code>property</code> <code>writable</code>","text":"<pre><code>local_port: int\n</code></pre> <p>Get or set the local port of the server.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.local_port_v6","title":"local_port_v6  <code>property</code> <code>writable</code>","text":"<pre><code>local_port_v6: int\n</code></pre> <p>Get or set the local port of the server for IPv6 support</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.max_players","title":"max_players  <code>property</code> <code>writable</code>","text":"<pre><code>max_players: int\n</code></pre> <p>Gets or sets the maximum number of players allowed.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.minecraft_version_network","title":"minecraft_version_network  <code>property</code> <code>writable</code>","text":"<pre><code>minecraft_version_network: str\n</code></pre> <p>Gets or sets the network version of Minecraft that is supported by this server</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.motd","title":"motd  <code>property</code> <code>writable</code>","text":"<pre><code>motd: str\n</code></pre> <p>Gets or sets the message of the day message.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.network_protocol_version","title":"network_protocol_version  <code>property</code>","text":"<pre><code>network_protocol_version: int\n</code></pre> <p>Get the network protocol version of this server</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.num_players","title":"num_players  <code>property</code> <code>writable</code>","text":"<pre><code>num_players: int\n</code></pre> <p>Gets or sets the number of players online.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.remote_host","title":"remote_host  <code>property</code>","text":"<pre><code>remote_host: str\n</code></pre> <p>Get the host the ping is coming from.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.remote_port","title":"remote_port  <code>property</code>","text":"<pre><code>remote_port: int\n</code></pre> <p>Get the port the ping is coming from.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.server_guid","title":"server_guid  <code>property</code> <code>writable</code>","text":"<pre><code>server_guid: str\n</code></pre> <p>Get or set the unique identifier of the server.</p>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent","title":"ServerLoadEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when either the server startup or reload has completed.</p> <p>Classes:</p> Name Description <code>LoadType</code> <p>Attributes:</p> Name Type Description <code>STARTUP</code> <code>type</code> <code>LoadType</code>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.STARTUP","title":"STARTUP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STARTUP = STARTUP\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.type","title":"type  <code>property</code>","text":"<pre><code>type: LoadType\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.LoadType","title":"LoadType","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>STARTUP</code>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.LoadType.STARTUP","title":"STARTUP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STARTUP = 0\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ThunderChangeEvent","title":"ThunderChangeEvent","text":"<p>               Bases: <code>WeatherEvent</code>, <code>Cancellable</code></p> <p>Called when the thunder state in a world is changing.</p> <p>Attributes:</p> Name Type Description <code>to_thunder_state</code> <code>bool</code> <p>Gets the state of thunder that the world is being set to</p>"},{"location":"reference/python/event/#endstone.event.ThunderChangeEvent.to_thunder_state","title":"to_thunder_state  <code>property</code>","text":"<pre><code>to_thunder_state: bool\n</code></pre> <p>Gets the state of thunder that the world is being set to</p>"},{"location":"reference/python/event/#endstone.event.WeatherChangeEvent","title":"WeatherChangeEvent","text":"<p>               Bases: <code>WeatherEvent</code>, <code>Cancellable</code></p> <p>Called when the weather (rain) state in a world is changing.</p> <p>Attributes:</p> Name Type Description <code>to_weather_state</code> <code>bool</code> <p>Gets the state of weather that the world is being set to</p>"},{"location":"reference/python/event/#endstone.event.WeatherChangeEvent.to_weather_state","title":"to_weather_state  <code>property</code>","text":"<pre><code>to_weather_state: bool\n</code></pre> <p>Gets the state of weather that the world is being set to</p>"},{"location":"reference/python/event/#endstone.event.WeatherEvent","title":"WeatherEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents a weather-related event</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>Level</code> <p>Returns the Level where this event is occurring</p>"},{"location":"reference/python/event/#endstone.event.WeatherEvent.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Returns the Level where this event is occurring</p>"},{"location":"reference/python/event/#endstone.event.event_handler","title":"event_handler","text":"<pre><code>event_handler(\n    func=None,\n    *,\n    priority: EventPriority = NORMAL,\n    ignore_cancelled: bool = False\n) -&gt; None\n</code></pre>"},{"location":"reference/python/form/","title":"Form","text":""},{"location":"reference/python/form/#endstone.form","title":"endstone.form","text":"<p>Classes:</p> Name Description <code>ActionForm</code> <p>Represents a form with buttons that let the player take action.</p> <code>Button</code> <p>Represents a button with text and an optional icon.</p> <code>Divider</code> <p>Represents a divider.</p> <code>Dropdown</code> <p>Represents a dropdown with a set of predefined options.</p> <code>Header</code> <p>Represents a header with a label.</p> <code>Label</code> <p>Represents a text label.</p> <code>MessageForm</code> <p>Represents a form with two buttons.</p> <code>ModalForm</code> <p>Represents a modal form with controls.</p> <code>Slider</code> <p>Represents a slider with a label.</p> <code>StepSlider</code> <p>Represents a step slider with a set of predefined options.</p> <code>TextInput</code> <p>Represents a text input field.</p> <code>Toggle</code> <p>Represents a toggle button with a label.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm","title":"ActionForm","text":"<pre><code>ActionForm(\n    title: str | Translatable = \"\",\n    content: str | Translatable = \"\",\n    buttons: (\n        list[Button | Divider | Header | Label] | None\n    ) = None,\n    on_submit: Callable[[Player, int], None] = None,\n    on_close: Callable[[Player], None] = None,\n)\n</code></pre> <p>Represents a form with buttons that let the player take action.</p> <p>Methods:</p> Name Description <code>add_button</code> <p>Adds a button to the form.</p> <code>add_divider</code> <p>Adds a divider to the form.</p> <code>add_header</code> <p>Adds a header to the form.</p> <code>add_label</code> <p>Adds a label to the form.</p> <p>Attributes:</p> Name Type Description <code>content</code> <code>str | Translatable</code> <p>Gets or sets the content of the form.</p> <code>controls</code> <code>list[Button | Divider | Header | Label]</code> <p>Gets or sets the controls of the action form.</p> <code>on_close</code> <code>Callable[[Player], None]</code> <p>Gets or sets the on close callback.</p> <code>on_submit</code> <code>Callable[[Player, int], None]</code> <p>Gets or sets the on submit callback.</p> <code>title</code> <code>str | Translatable</code> <p>Gets or sets the title of the form.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.content","title":"content  <code>property</code> <code>writable</code>","text":"<pre><code>content: str | Translatable\n</code></pre> <p>Gets or sets the content of the form.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.controls","title":"controls  <code>property</code> <code>writable</code>","text":"<pre><code>controls: list[Button | Divider | Header | Label]\n</code></pre> <p>Gets or sets the controls of the action form.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.on_close","title":"on_close  <code>property</code> <code>writable</code>","text":"<pre><code>on_close: Callable[[Player], None]\n</code></pre> <p>Gets or sets the on close callback.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.on_submit","title":"on_submit  <code>property</code> <code>writable</code>","text":"<pre><code>on_submit: Callable[[Player, int], None]\n</code></pre> <p>Gets or sets the on submit callback.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.title","title":"title  <code>property</code> <code>writable</code>","text":"<pre><code>title: str | Translatable\n</code></pre> <p>Gets or sets the title of the form.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.add_button","title":"add_button","text":"<pre><code>add_button(\n    text: str | Translatable,\n    icon: str | None = None,\n    on_click: Callable[[Player], None] = None,\n) -&gt; ActionForm\n</code></pre> <p>Adds a button to the form.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.add_divider","title":"add_divider","text":"<pre><code>add_divider() -&gt; ActionForm\n</code></pre> <p>Adds a divider to the form.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.add_header","title":"add_header","text":"<pre><code>add_header(text: str | Translatable) -&gt; ActionForm\n</code></pre> <p>Adds a header to the form.</p>"},{"location":"reference/python/form/#endstone.form.ActionForm.add_label","title":"add_label","text":"<pre><code>add_label(text: str | Translatable) -&gt; ActionForm\n</code></pre> <p>Adds a label to the form.</p>"},{"location":"reference/python/form/#endstone.form.Button","title":"Button","text":"<pre><code>Button(\n    text: str | Translatable = \"\",\n    icon: str | None = None,\n    on_click: Callable[[Player], None] = None,\n)\n</code></pre> <p>Represents a button with text and an optional icon.</p> <p>Attributes:</p> Name Type Description <code>icon</code> <code>str | None</code> <p>Gets or sets the icon path or URL of the button</p> <code>on_click</code> <code>Callable[[Player], None]</code> <p>Gets or sets the on click callback.</p> <code>text</code> <code>str | Translatable</code> <p>Gets or sets the text of the button</p>"},{"location":"reference/python/form/#endstone.form.Button.icon","title":"icon  <code>property</code> <code>writable</code>","text":"<pre><code>icon: str | None\n</code></pre> <p>Gets or sets the icon path or URL of the button</p>"},{"location":"reference/python/form/#endstone.form.Button.on_click","title":"on_click  <code>property</code> <code>writable</code>","text":"<pre><code>on_click: Callable[[Player], None]\n</code></pre> <p>Gets or sets the on click callback.</p>"},{"location":"reference/python/form/#endstone.form.Button.text","title":"text  <code>property</code> <code>writable</code>","text":"<pre><code>text: str | Translatable\n</code></pre> <p>Gets or sets the text of the button</p>"},{"location":"reference/python/form/#endstone.form.Divider","title":"Divider","text":"<pre><code>Divider()\n</code></pre> <p>Represents a divider.</p>"},{"location":"reference/python/form/#endstone.form.Dropdown","title":"Dropdown","text":"<pre><code>Dropdown(\n    label: str | Translatable = \"\",\n    options: list[str] | None = None,\n    default_index: int | None = None,\n)\n</code></pre> <p>Represents a dropdown with a set of predefined options.</p> <p>Methods:</p> Name Description <code>add_option</code> <p>Adds a new option to the dropdown.</p> <p>Attributes:</p> Name Type Description <code>default_index</code> <code>int | None</code> <p>Gets or sets the optional default index of the dropdown.</p> <code>label</code> <code>str | Translatable</code> <p>Gets or sets the label of the dropdown.</p> <code>options</code> <code>list[str]</code> <p>Gets or sets the options of the dropdown.</p>"},{"location":"reference/python/form/#endstone.form.Dropdown.default_index","title":"default_index  <code>property</code> <code>writable</code>","text":"<pre><code>default_index: int | None\n</code></pre> <p>Gets or sets the optional default index of the dropdown.</p>"},{"location":"reference/python/form/#endstone.form.Dropdown.label","title":"label  <code>property</code> <code>writable</code>","text":"<pre><code>label: str | Translatable\n</code></pre> <p>Gets or sets the label of the dropdown.</p>"},{"location":"reference/python/form/#endstone.form.Dropdown.options","title":"options  <code>property</code> <code>writable</code>","text":"<pre><code>options: list[str]\n</code></pre> <p>Gets or sets the options of the dropdown.</p>"},{"location":"reference/python/form/#endstone.form.Dropdown.add_option","title":"add_option","text":"<pre><code>add_option(option: str) -&gt; Dropdown\n</code></pre> <p>Adds a new option to the dropdown.</p>"},{"location":"reference/python/form/#endstone.form.Header","title":"Header","text":"<pre><code>Header(label: str | Translatable = '')\n</code></pre> <p>Represents a header with a label.</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>str | Translatable</code> <p>Gets or sets the label of the header.</p>"},{"location":"reference/python/form/#endstone.form.Header.label","title":"label  <code>property</code> <code>writable</code>","text":"<pre><code>label: str | Translatable\n</code></pre> <p>Gets or sets the label of the header.</p>"},{"location":"reference/python/form/#endstone.form.Label","title":"Label","text":"<pre><code>Label(text: str | Translatable = '')\n</code></pre> <p>Represents a text label.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str | Translatable</code> <p>Gets or sets the text of the label.</p>"},{"location":"reference/python/form/#endstone.form.Label.text","title":"text  <code>property</code> <code>writable</code>","text":"<pre><code>text: str | Translatable\n</code></pre> <p>Gets or sets the text of the label.</p>"},{"location":"reference/python/form/#endstone.form.MessageForm","title":"MessageForm","text":"<pre><code>MessageForm(\n    title: str | Translatable = \"\",\n    content: str | Translatable = \"\",\n    button1: str | Translatable = \"\",\n    button2: str | Translatable = \"\",\n    on_submit: Callable[[Player, int], None] = None,\n    on_close: Callable[[Player], None] = None,\n)\n</code></pre> <p>Represents a form with two buttons.</p> <p>Attributes:</p> Name Type Description <code>button1</code> <code>str | Translatable</code> <p>Gets or sets the text of button1.</p> <code>button2</code> <code>str | Translatable</code> <p>Gets or sets the text of button2.</p> <code>content</code> <code>str | Translatable</code> <p>Gets or sets the content of the form.</p> <code>on_close</code> <code>Callable[[Player], None]</code> <p>Gets or sets the on close callback.</p> <code>on_submit</code> <code>Callable[[Player, int], None]</code> <p>Gets or sets the on submit callback.</p> <code>title</code> <code>str | Translatable</code> <p>Gets or sets the title of the form.</p>"},{"location":"reference/python/form/#endstone.form.MessageForm.button1","title":"button1  <code>property</code> <code>writable</code>","text":"<pre><code>button1: str | Translatable\n</code></pre> <p>Gets or sets the text of button1.</p>"},{"location":"reference/python/form/#endstone.form.MessageForm.button2","title":"button2  <code>property</code> <code>writable</code>","text":"<pre><code>button2: str | Translatable\n</code></pre> <p>Gets or sets the text of button2.</p>"},{"location":"reference/python/form/#endstone.form.MessageForm.content","title":"content  <code>property</code> <code>writable</code>","text":"<pre><code>content: str | Translatable\n</code></pre> <p>Gets or sets the content of the form.</p>"},{"location":"reference/python/form/#endstone.form.MessageForm.on_close","title":"on_close  <code>property</code> <code>writable</code>","text":"<pre><code>on_close: Callable[[Player], None]\n</code></pre> <p>Gets or sets the on close callback.</p>"},{"location":"reference/python/form/#endstone.form.MessageForm.on_submit","title":"on_submit  <code>property</code> <code>writable</code>","text":"<pre><code>on_submit: Callable[[Player, int], None]\n</code></pre> <p>Gets or sets the on submit callback.</p>"},{"location":"reference/python/form/#endstone.form.MessageForm.title","title":"title  <code>property</code> <code>writable</code>","text":"<pre><code>title: str | Translatable\n</code></pre> <p>Gets or sets the title of the form.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm","title":"ModalForm","text":"<pre><code>ModalForm(\n    title: str | Translatable = \"\",\n    controls: (\n        list[\n            Dropdown\n            | Label\n            | Slider\n            | StepSlider\n            | TextInput\n            | Toggle\n            | Divider\n            | Header\n        ]\n        | None\n    ) = None,\n    submit_button: str | Translatable | None = None,\n    icon: str | None = None,\n    on_submit: Callable[[Player, str], None] = None,\n    on_close: Callable[[Player], None] = None,\n)\n</code></pre> <p>Represents a modal form with controls.</p> <p>Methods:</p> Name Description <code>add_control</code> <p>Adds a control to the form.</p> <p>Attributes:</p> Name Type Description <code>controls</code> <code>list[Dropdown | Label | Slider | StepSlider | TextInput | Toggle | Divider | Header]</code> <p>Gets or sets the controls of the modal form.</p> <code>icon</code> <code>str | None</code> <p>Gets or sets the icon of the form.</p> <code>on_close</code> <code>Callable[[Player], None]</code> <p>Gets or sets the on close callback.</p> <code>on_submit</code> <code>Callable[[Player, str], None]</code> <p>Gets or sets the on submit callback.</p> <code>submit_button</code> <code>str | Translatable | None</code> <p>Gets or sets the submit button message of the form.</p> <code>title</code> <code>str | Translatable</code> <p>Gets or sets the title of the form.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm.controls","title":"controls  <code>property</code> <code>writable</code>","text":"<pre><code>controls: list[\n    Dropdown\n    | Label\n    | Slider\n    | StepSlider\n    | TextInput\n    | Toggle\n    | Divider\n    | Header\n]\n</code></pre> <p>Gets or sets the controls of the modal form.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm.icon","title":"icon  <code>property</code> <code>writable</code>","text":"<pre><code>icon: str | None\n</code></pre> <p>Gets or sets the icon of the form.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm.on_close","title":"on_close  <code>property</code> <code>writable</code>","text":"<pre><code>on_close: Callable[[Player], None]\n</code></pre> <p>Gets or sets the on close callback.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm.on_submit","title":"on_submit  <code>property</code> <code>writable</code>","text":"<pre><code>on_submit: Callable[[Player, str], None]\n</code></pre> <p>Gets or sets the on submit callback.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm.submit_button","title":"submit_button  <code>property</code> <code>writable</code>","text":"<pre><code>submit_button: str | Translatable | None\n</code></pre> <p>Gets or sets the submit button message of the form.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm.title","title":"title  <code>property</code> <code>writable</code>","text":"<pre><code>title: str | Translatable\n</code></pre> <p>Gets or sets the title of the form.</p>"},{"location":"reference/python/form/#endstone.form.ModalForm.add_control","title":"add_control","text":"<pre><code>add_control(\n    control: (\n        Dropdown\n        | Label\n        | Slider\n        | StepSlider\n        | TextInput\n        | Toggle\n        | Divider\n        | Header\n    ),\n) -&gt; ModalForm\n</code></pre> <p>Adds a control to the form.</p>"},{"location":"reference/python/form/#endstone.form.Slider","title":"Slider","text":"<pre><code>Slider(\n    label: str | Translatable = \"\",\n    min: float = 0,\n    max: float = 100,\n    step: float = 20,\n    default_value: float | None = None,\n)\n</code></pre> <p>Represents a slider with a label.</p> <p>Attributes:</p> Name Type Description <code>default_value</code> <code>float | None</code> <p>Gets or sets the optional default value of the slider.</p> <code>label</code> <code>str | Translatable</code> <p>Gets or sets the label of the slider.</p> <code>max</code> <code>float</code> <p>Gets or sets the maximum value of the slider.</p> <code>min</code> <code>float</code> <p>Gets or sets the minimum value of the slider.</p> <code>step</code> <code>float</code> <p>Gets or sets the step size of the slider.</p>"},{"location":"reference/python/form/#endstone.form.Slider.default_value","title":"default_value  <code>property</code> <code>writable</code>","text":"<pre><code>default_value: float | None\n</code></pre> <p>Gets or sets the optional default value of the slider.</p>"},{"location":"reference/python/form/#endstone.form.Slider.label","title":"label  <code>property</code> <code>writable</code>","text":"<pre><code>label: str | Translatable\n</code></pre> <p>Gets or sets the label of the slider.</p>"},{"location":"reference/python/form/#endstone.form.Slider.max","title":"max  <code>property</code> <code>writable</code>","text":"<pre><code>max: float\n</code></pre> <p>Gets or sets the maximum value of the slider.</p>"},{"location":"reference/python/form/#endstone.form.Slider.min","title":"min  <code>property</code> <code>writable</code>","text":"<pre><code>min: float\n</code></pre> <p>Gets or sets the minimum value of the slider.</p>"},{"location":"reference/python/form/#endstone.form.Slider.step","title":"step  <code>property</code> <code>writable</code>","text":"<pre><code>step: float\n</code></pre> <p>Gets or sets the step size of the slider.</p>"},{"location":"reference/python/form/#endstone.form.StepSlider","title":"StepSlider","text":"<pre><code>StepSlider(\n    label: str | Translatable = \"\",\n    options: list[str] | None = None,\n    default_index: int | None = None,\n)\n</code></pre> <p>Represents a step slider with a set of predefined options.</p> <p>Methods:</p> Name Description <code>add_option</code> <p>Adds a new option to the step slider.</p> <p>Attributes:</p> Name Type Description <code>default_index</code> <code>int | None</code> <p>Gets or sets the optional default index of the step slider.</p> <code>label</code> <code>str | Translatable</code> <p>Gets or sets the label of the step slider.</p> <code>options</code> <code>list[str]</code> <p>Gets or sets the options of the step slider.</p>"},{"location":"reference/python/form/#endstone.form.StepSlider.default_index","title":"default_index  <code>property</code> <code>writable</code>","text":"<pre><code>default_index: int | None\n</code></pre> <p>Gets or sets the optional default index of the step slider.</p>"},{"location":"reference/python/form/#endstone.form.StepSlider.label","title":"label  <code>property</code> <code>writable</code>","text":"<pre><code>label: str | Translatable\n</code></pre> <p>Gets or sets the label of the step slider.</p>"},{"location":"reference/python/form/#endstone.form.StepSlider.options","title":"options  <code>property</code> <code>writable</code>","text":"<pre><code>options: list[str]\n</code></pre> <p>Gets or sets the options of the step slider.</p>"},{"location":"reference/python/form/#endstone.form.StepSlider.add_option","title":"add_option","text":"<pre><code>add_option(option: str) -&gt; Dropdown\n</code></pre> <p>Adds a new option to the step slider.</p>"},{"location":"reference/python/form/#endstone.form.TextInput","title":"TextInput","text":"<pre><code>TextInput(\n    label: str | Translatable = \"\",\n    placeholder: str | Translatable = \"\",\n    default_value: str | None = None,\n)\n</code></pre> <p>Represents a text input field.</p> <p>Attributes:</p> Name Type Description <code>default_value</code> <code>str | None</code> <p>Gets or sets the optional default text of the text input field.</p> <code>label</code> <code>str | Translatable</code> <p>Gets or sets the label of the text input field.</p> <code>placeholder</code> <code>str | Translatable</code> <p>Gets or sets the placeholder of the text input field.</p>"},{"location":"reference/python/form/#endstone.form.TextInput.default_value","title":"default_value  <code>property</code> <code>writable</code>","text":"<pre><code>default_value: str | None\n</code></pre> <p>Gets or sets the optional default text of the text input field.</p>"},{"location":"reference/python/form/#endstone.form.TextInput.label","title":"label  <code>property</code> <code>writable</code>","text":"<pre><code>label: str | Translatable\n</code></pre> <p>Gets or sets the label of the text input field.</p>"},{"location":"reference/python/form/#endstone.form.TextInput.placeholder","title":"placeholder  <code>property</code> <code>writable</code>","text":"<pre><code>placeholder: str | Translatable\n</code></pre> <p>Gets or sets the placeholder of the text input field.</p>"},{"location":"reference/python/form/#endstone.form.Toggle","title":"Toggle","text":"<pre><code>Toggle(\n    label: str | Translatable = \"\",\n    default_value: bool = False,\n)\n</code></pre> <p>Represents a toggle button with a label.</p> <p>Attributes:</p> Name Type Description <code>default_value</code> <code>bool</code> <p>Gets or sets the value of the toggle.</p> <code>label</code> <code>str | Translatable</code> <p>Gets or sets the label of the toggle.</p>"},{"location":"reference/python/form/#endstone.form.Toggle.default_value","title":"default_value  <code>property</code> <code>writable</code>","text":"<pre><code>default_value: bool\n</code></pre> <p>Gets or sets the value of the toggle.</p>"},{"location":"reference/python/form/#endstone.form.Toggle.label","title":"label  <code>property</code> <code>writable</code>","text":"<pre><code>label: str | Translatable\n</code></pre> <p>Gets or sets the label of the toggle.</p>"},{"location":"reference/python/inventory/","title":"Inventory","text":""},{"location":"reference/python/inventory/#endstone.inventory","title":"endstone.inventory","text":"<p>Classes relating to player inventories and item interactions.</p> <p>Classes:</p> Name Description <code>EquipmentSlot</code> <code>Inventory</code> <p>Interface to the various inventories.</p> <code>ItemFactory</code> <code>ItemMeta</code> <p>Represents the metadata of a generic item.</p> <code>ItemStack</code> <p>Represents a stack of items.</p> <code>ItemType</code> <p>Represents an item type.</p> <code>MapMeta</code> <p>Represents the metadata for a map item.</p> <code>PlayerInventory</code> <p>Interface to the inventory of a Player, including the four armor slots and any extra slots.</p>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot","title":"EquipmentSlot","text":"<p>               Bases: <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>BODY</code> <p>Only for certain entities such as horses and wolves.</p> <code>CHEST</code> <code>FEET</code> <code>HAND</code> <code>HEAD</code> <code>LEGS</code> <code>OFF_HAND</code>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot.BODY","title":"BODY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BODY = 6\n</code></pre> <p>Only for certain entities such as horses and wolves.</p>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot.CHEST","title":"CHEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHEST = 4\n</code></pre>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot.FEET","title":"FEET  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FEET = 2\n</code></pre>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot.HAND","title":"HAND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HAND = 0\n</code></pre>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot.HEAD","title":"HEAD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HEAD = 5\n</code></pre>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot.LEGS","title":"LEGS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEGS = 3\n</code></pre>"},{"location":"reference/python/inventory/#endstone.inventory.EquipmentSlot.OFF_HAND","title":"OFF_HAND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OFF_HAND = 1\n</code></pre>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory","title":"Inventory","text":"<p>Interface to the various inventories.</p> <p>Methods:</p> Name Description <code>add_item</code> <p>Stores the given ItemStacks in the inventory.</p> <code>all</code> <code>clear</code> <code>contains</code> <code>contains_at_least</code> <code>first</code> <code>get_item</code> <p>Returns the ItemStack found in the slot at the given index</p> <code>remove</code> <code>remove_item</code> <p>Removes the given ItemStacks from the inventory.</p> <code>set_item</code> <p>Stores the ItemStack at the given index of the inventory.</p> <p>Attributes:</p> Name Type Description <code>contents</code> <code>list[ItemStack]</code> <p>Returns all ItemStacks from the inventory</p> <code>first_empty</code> <code>int</code> <p>Returns the first empty Slot.</p> <code>is_empty</code> <code>bool</code> <p>Check whether this inventory is empty. An inventory is considered to be empty if there are no ItemStacks in any slot of this inventory.</p> <code>max_stack_size</code> <code>int</code> <p>Returns the maximum stack size for an ItemStack in this inventory.</p> <code>size</code> <code>int</code> <p>Returns the size of the inventory</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.contents","title":"contents  <code>property</code> <code>writable</code>","text":"<pre><code>contents: list[ItemStack]\n</code></pre> <p>Returns all ItemStacks from the inventory</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.first_empty","title":"first_empty  <code>property</code>","text":"<pre><code>first_empty: int\n</code></pre> <p>Returns the first empty Slot.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.is_empty","title":"is_empty  <code>property</code>","text":"<pre><code>is_empty: bool\n</code></pre> <p>Check whether this inventory is empty. An inventory is considered to be empty if there are no ItemStacks in any slot of this inventory.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.max_stack_size","title":"max_stack_size  <code>property</code>","text":"<pre><code>max_stack_size: int\n</code></pre> <p>Returns the maximum stack size for an ItemStack in this inventory.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.size","title":"size  <code>property</code>","text":"<pre><code>size: int\n</code></pre> <p>Returns the size of the inventory</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.add_item","title":"add_item","text":"<pre><code>add_item(*args) -&gt; dict[int, ItemStack]\n</code></pre> <p>Stores the given ItemStacks in the inventory. This will try to fill existing stacks and empty slots as well as it can.</p> <p>The returned map contains what it couldn't store, where the key is the index, and the value is the ItemStack. If all items are stored, it will return an empty dict.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.all","title":"all","text":"<pre><code>all(item: ItemStack) -&gt; dict[int, ItemStack]\n</code></pre> <p>Finds all slots in the inventory containing any ItemStacks with the given ItemStack. This will only match slots if both the type and the amount of the stack match The returned map contains entries where, the key is the slot index, and the value is the ItemStack in that slot. If no matching ItemStack is found, an empty dict is returned.</p> <pre><code>all(type: str) -&gt; dict[int, ItemStack]\n</code></pre> <p>Finds all slots in the inventory containing any ItemStacks with the given ItemType. The returned map contains entries where, the key is the slot index, and the value is the ItemStack in that slot. If no matching ItemStack is found, an empty dict is returned.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.clear","title":"clear","text":"<pre><code>clear(index: int) -&gt; None\n</code></pre> <p>Clears out a particular slot in the index.</p> <pre><code>clear() -&gt; None\n</code></pre> <p>Clears out the whole Inventory.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.contains","title":"contains","text":"<pre><code>contains(item: ItemStack, amount: int) -&gt; bool\n</code></pre> <p>Checks if the inventory contains at least the minimum amount specified of exactly matching ItemStacks. An ItemStack only counts if both the type and the amount of the stack match.</p> <pre><code>contains(item: ItemStack) -&gt; bool\n</code></pre> <p>Checks if the inventory contains any ItemStacks with the given ItemStack. This will only return true if both the type and the amount of the stack match.</p> <pre><code>contains(type: str) -&gt; bool\n</code></pre> <p>Checks if the inventory contains any ItemStacks with the given ItemType.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.contains_at_least","title":"contains_at_least","text":"<pre><code>contains_at_least(item: ItemStack, amount: int) -&gt; bool\n</code></pre> <p>Checks if the inventory contains ItemStacks matching the given ItemStack whose amounts sum to at least the minimum amount specified.</p> <pre><code>contains_at_least(type: str, amount: int) -&gt; bool\n</code></pre> <p>Checks if the inventory contains any ItemStacks with the given ItemType, adding to at least the minimum amount specified.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.first","title":"first","text":"<pre><code>first(item: ItemStack) -&gt; int\n</code></pre> <p>Returns the first slot in the inventory containing an ItemStack with the given stack. This will only match slots if both the type and the amount of the stack match The returned map contains entries where, the key is the slot index, and the value is the ItemStack in that slot. If no matching ItemStack is found, an empty dict is returned.</p> <pre><code>first(type: str) -&gt; int\n</code></pre> <p>Finds the first slot in the inventory containing an ItemStack with the given ItemType. The returned map contains entries where, the key is the slot index, and the value is the ItemStack in that slot. If no matching ItemStack is found, an empty dict is returned.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.get_item","title":"get_item","text":"<pre><code>get_item(index: int) -&gt; ItemStack\n</code></pre> <p>Returns the ItemStack found in the slot at the given index</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.remove","title":"remove","text":"<pre><code>remove(item: ItemStack) -&gt; None\n</code></pre> <p>Removes all stacks in the inventory matching the given stack. This will only match a slot if both the type and the amount of the stack match</p> <pre><code>remove(type: str) -&gt; None\n</code></pre> <p>Removes all stacks in the inventory matching the given ItemType.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.remove_item","title":"remove_item","text":"<pre><code>remove_item(*args) -&gt; dict[int, ItemStack]\n</code></pre> <p>Removes the given ItemStacks from the inventory. It will try to remove 'as much as possible' from the types and amounts you give as arguments.</p> <p>The returned HashMap contains what it couldn't remove, where the key is the index, and the value is the ItemStack. If all the given ItemStacks are removed, it will return an empty dict.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.set_item","title":"set_item","text":"<pre><code>set_item(index: int, item: ItemStack) -&gt; None\n</code></pre> <p>Stores the ItemStack at the given index of the inventory.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemFactory","title":"ItemFactory","text":"<p>Methods:</p> Name Description <code>as_meta_for</code> <p>Returns an appropriate item meta for the specified item type.</p> <code>equals</code> <p>This method is used to compare two ItemMeta objects.</p> <code>get_item_meta</code> <p>This creates a new item meta for the item type.</p> <code>is_applicable</code> <p>This method checks the item meta to confirm that it is applicable (no data lost if applied) to the specified ItemStack</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemFactory.as_meta_for","title":"as_meta_for","text":"<pre><code>as_meta_for(meta: ItemMeta, type: str) -&gt; ItemMeta\n</code></pre> <p>Returns an appropriate item meta for the specified item type.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemFactory.equals","title":"equals","text":"<pre><code>equals(meta1: ItemMeta, meta2: ItemMeta) -&gt; bool\n</code></pre> <p>This method is used to compare two ItemMeta objects.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemFactory.get_item_meta","title":"get_item_meta","text":"<pre><code>get_item_meta(type: str) -&gt; ItemMeta\n</code></pre> <p>This creates a new item meta for the item type.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemFactory.is_applicable","title":"is_applicable","text":"<pre><code>is_applicable(meta: ItemMeta, type: str) -&gt; bool\n</code></pre> <p>This method checks the item meta to confirm that it is applicable (no data lost if applied) to the specified ItemStack</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta","title":"ItemMeta","text":"<p>Represents the metadata of a generic item.</p> <p>Methods:</p> Name Description <code>add_enchant</code> <p>Adds the specified enchantment to this item meta.</p> <code>clone</code> <p>Creates a clone of the current metadata.</p> <code>get_enchant_level</code> <p>Checks for the level of the specified enchantment.</p> <code>has_enchant</code> <p>Checks for existence of the specified enchantment.</p> <code>remove_enchant</code> <p>Removes the specified enchantment from this item meta.</p> <code>remove_enchants</code> <p>Removes all enchantments from this item meta.</p> <p>Attributes:</p> Name Type Description <code>damage</code> <code>int</code> <p>Gets or sets the damage.</p> <code>display_name</code> <code>str</code> <p>Gets or sets the display name.</p> <code>enchants</code> <code>dict[str, int]</code> <p>Returns a copy the enchantments in this ItemMeta.</p> <code>has_damage</code> <code>bool</code> <p>Checks to see if this item has damage.</p> <code>has_display_name</code> <code>bool</code> <p>Checks for existence of a display name.</p> <code>has_enchants</code> <code>bool</code> <p>Checks for the existence of any enchantments.</p> <code>has_lore</code> <code>bool</code> <p>Checks for existence of lore.</p> <code>has_repair_cost</code> <code>bool</code> <p>Checks to see if this item has a repair penalty.</p> <code>is_unbreakable</code> <code>bool</code> <p>Gets or sets the unbreakable tag. An unbreakable item will not lose durability.</p> <code>lore</code> <code>list[str]</code> <p>Gets or sets the lore for this item.</p> <code>repair_cost</code> <code>int</code> <p>Gets or sets the repair penalty.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.damage","title":"damage  <code>property</code> <code>writable</code>","text":"<pre><code>damage: int\n</code></pre> <p>Gets or sets the damage.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.display_name","title":"display_name  <code>property</code> <code>writable</code>","text":"<pre><code>display_name: str\n</code></pre> <p>Gets or sets the display name.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.enchants","title":"enchants  <code>property</code>","text":"<pre><code>enchants: dict[str, int]\n</code></pre> <p>Returns a copy the enchantments in this ItemMeta.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.has_damage","title":"has_damage  <code>property</code>","text":"<pre><code>has_damage: bool\n</code></pre> <p>Checks to see if this item has damage.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.has_display_name","title":"has_display_name  <code>property</code>","text":"<pre><code>has_display_name: bool\n</code></pre> <p>Checks for existence of a display name.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.has_enchants","title":"has_enchants  <code>property</code>","text":"<pre><code>has_enchants: bool\n</code></pre> <p>Checks for the existence of any enchantments.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.has_lore","title":"has_lore  <code>property</code>","text":"<pre><code>has_lore: bool\n</code></pre> <p>Checks for existence of lore.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.has_repair_cost","title":"has_repair_cost  <code>property</code>","text":"<pre><code>has_repair_cost: bool\n</code></pre> <p>Checks to see if this item has a repair penalty.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.is_unbreakable","title":"is_unbreakable  <code>property</code> <code>writable</code>","text":"<pre><code>is_unbreakable: bool\n</code></pre> <p>Gets or sets the unbreakable tag. An unbreakable item will not lose durability.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.lore","title":"lore  <code>property</code> <code>writable</code>","text":"<pre><code>lore: list[str]\n</code></pre> <p>Gets or sets the lore for this item.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.repair_cost","title":"repair_cost  <code>property</code> <code>writable</code>","text":"<pre><code>repair_cost: int\n</code></pre> <p>Gets or sets the repair penalty.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.add_enchant","title":"add_enchant","text":"<pre><code>add_enchant(\n    id: str, level: int, force: bool = False\n) -&gt; bool\n</code></pre> <p>Adds the specified enchantment to this item meta.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.clone","title":"clone","text":"<pre><code>clone() -&gt; ItemMeta\n</code></pre> <p>Creates a clone of the current metadata.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.get_enchant_level","title":"get_enchant_level","text":"<pre><code>get_enchant_level(id: str) -&gt; int\n</code></pre> <p>Checks for the level of the specified enchantment.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.has_enchant","title":"has_enchant","text":"<pre><code>has_enchant(id: str) -&gt; bool\n</code></pre> <p>Checks for existence of the specified enchantment.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.remove_enchant","title":"remove_enchant","text":"<pre><code>remove_enchant(id: str) -&gt; bool\n</code></pre> <p>Removes the specified enchantment from this item meta.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemMeta.remove_enchants","title":"remove_enchants","text":"<pre><code>remove_enchants() -&gt; None\n</code></pre> <p>Removes all enchantments from this item meta.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack","title":"ItemStack","text":"<pre><code>ItemStack(type: str, amount: int = 1, data: int = 0)\n</code></pre> <p>Represents a stack of items.</p> <p>Methods:</p> Name Description <code>is_similar</code> <p>Checks if the two stacks are equal, but does not consider stack size (amount).</p> <code>set_item_meta</code> <p>Set the ItemMeta of this ItemStack.</p> <p>Attributes:</p> Name Type Description <code>amount</code> <code>int</code> <p>Gets or sets the amount of items in this stack.</p> <code>data</code> <code>int</code> <p>Gets or sets the data for this stack of items.</p> <code>item_meta</code> <code>ItemMeta</code> <p>Gets a copy of the ItemMeta of this ItemStack.</p> <code>max_stack_size</code> <code>int</code> <p>Get the maximum stack size for this item.</p> <code>translation_key</code> <code>str</code> <p>Get the translation key for this item.</p> <code>type</code> <code>str</code> <p>Gets or sets the type of this item.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.amount","title":"amount  <code>property</code> <code>writable</code>","text":"<pre><code>amount: int\n</code></pre> <p>Gets or sets the amount of items in this stack.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: int\n</code></pre> <p>Gets or sets the data for this stack of items.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.item_meta","title":"item_meta  <code>property</code>","text":"<pre><code>item_meta: ItemMeta\n</code></pre> <p>Gets a copy of the ItemMeta of this ItemStack.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.max_stack_size","title":"max_stack_size  <code>property</code>","text":"<pre><code>max_stack_size: int\n</code></pre> <p>Get the maximum stack size for this item.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.translation_key","title":"translation_key  <code>property</code>","text":"<pre><code>translation_key: str\n</code></pre> <p>Get the translation key for this item.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.type","title":"type  <code>property</code> <code>writable</code>","text":"<pre><code>type: str\n</code></pre> <p>Gets or sets the type of this item.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.is_similar","title":"is_similar","text":"<pre><code>is_similar(other: ItemStack) -&gt; bool\n</code></pre> <p>Checks if the two stacks are equal, but does not consider stack size (amount).</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemStack.set_item_meta","title":"set_item_meta","text":"<pre><code>set_item_meta(meta: ItemMeta) -&gt; bool\n</code></pre> <p>Set the ItemMeta of this ItemStack.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemType","title":"ItemType","text":"<p>Represents an item type.</p> <p>Methods:</p> Name Description <code>get</code> <p>Attempts to get the ItemType with the given name.</p> <code>get_translation_key</code> <p>Get the translation key, suitable for use in a translation component.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Return the identifier of this item type.</p> <code>max_durability</code> <code>int</code> <p>Gets the maximum durability of this item type</p> <code>max_stack_size</code> <code>int</code> <p>Gets the maximum amount of this item type that can be held in a stack.</p> <code>translation_key</code> <code>str</code> <p>Get the translation key, suitable for use in a translation component.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemType.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre> <p>Return the identifier of this item type.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemType.max_durability","title":"max_durability  <code>property</code>","text":"<pre><code>max_durability: int\n</code></pre> <p>Gets the maximum durability of this item type</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemType.max_stack_size","title":"max_stack_size  <code>property</code>","text":"<pre><code>max_stack_size: int\n</code></pre> <p>Gets the maximum amount of this item type that can be held in a stack.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemType.translation_key","title":"translation_key  <code>property</code>","text":"<pre><code>translation_key: str\n</code></pre> <p>Get the translation key, suitable for use in a translation component.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemType.get","title":"get  <code>staticmethod</code>","text":"<pre><code>get(name: str) -&gt; ItemType\n</code></pre> <p>Attempts to get the ItemType with the given name.</p>"},{"location":"reference/python/inventory/#endstone.inventory.ItemType.get_translation_key","title":"get_translation_key","text":"<pre><code>get_translation_key(data: int = 0) -&gt; str\n</code></pre> <p>Get the translation key, suitable for use in a translation component.</p>"},{"location":"reference/python/inventory/#endstone.inventory.MapMeta","title":"MapMeta","text":"<p>               Bases: <code>ItemMeta</code></p> <p>Represents the metadata for a map item.</p> <p>Attributes:</p> Name Type Description <code>has_map_id</code> <code>bool</code> <p>Checks for existence of a map ID number.</p> <code>has_map_view</code> <code>bool</code> <p>Checks for existence of an associated map.</p> <code>map_id</code> <code>int</code> <p>Gets or sets the map ID. This is used to determine what map is displayed.</p> <code>map_view</code> <code>MapView</code> <p>Gets or sets the map view that is associated with this map item.</p>"},{"location":"reference/python/inventory/#endstone.inventory.MapMeta.has_map_id","title":"has_map_id  <code>property</code>","text":"<pre><code>has_map_id: bool\n</code></pre> <p>Checks for existence of a map ID number.</p>"},{"location":"reference/python/inventory/#endstone.inventory.MapMeta.has_map_view","title":"has_map_view  <code>property</code>","text":"<pre><code>has_map_view: bool\n</code></pre> <p>Checks for existence of an associated map.</p>"},{"location":"reference/python/inventory/#endstone.inventory.MapMeta.map_id","title":"map_id  <code>property</code> <code>writable</code>","text":"<pre><code>map_id: int\n</code></pre> <p>Gets or sets the map ID. This is used to determine what map is displayed.</p>"},{"location":"reference/python/inventory/#endstone.inventory.MapMeta.map_view","title":"map_view  <code>property</code> <code>writable</code>","text":"<pre><code>map_view: MapView\n</code></pre> <p>Gets or sets the map view that is associated with this map item.</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory","title":"PlayerInventory","text":"<p>               Bases: <code>Inventory</code></p> <p>Interface to the inventory of a Player, including the four armor slots and any extra slots.</p> <p>Attributes:</p> Name Type Description <code>boots</code> <code>ItemStack</code> <p>Gets or sets the ItemStack in the boots slot</p> <code>chestplate</code> <code>ItemStack</code> <p>Gets or sets the ItemStack in the chestplate slot</p> <code>held_item_slot</code> <code>int</code> <p>Gets or sets the slot number of the currently held item</p> <code>helmet</code> <code>ItemStack</code> <p>Gets or sets the ItemStack in the helmet slot</p> <code>item_in_main_hand</code> <code>ItemStack</code> <p>Gets or sets the item the player is currently holding in their main hand.</p> <code>item_in_off_hand</code> <code>ItemStack</code> <p>Gets or sets the item the player is currently holding in their off hand.</p> <code>leggings</code> <code>ItemStack</code> <p>Gets or sets the ItemStack in the leg slot</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory.boots","title":"boots  <code>property</code> <code>writable</code>","text":"<pre><code>boots: ItemStack\n</code></pre> <p>Gets or sets the ItemStack in the boots slot</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory.chestplate","title":"chestplate  <code>property</code> <code>writable</code>","text":"<pre><code>chestplate: ItemStack\n</code></pre> <p>Gets or sets the ItemStack in the chestplate slot</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory.held_item_slot","title":"held_item_slot  <code>property</code> <code>writable</code>","text":"<pre><code>held_item_slot: int\n</code></pre> <p>Gets or sets the slot number of the currently held item</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory.helmet","title":"helmet  <code>property</code> <code>writable</code>","text":"<pre><code>helmet: ItemStack\n</code></pre> <p>Gets or sets the ItemStack in the helmet slot</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory.item_in_main_hand","title":"item_in_main_hand  <code>property</code> <code>writable</code>","text":"<pre><code>item_in_main_hand: ItemStack\n</code></pre> <p>Gets or sets the item the player is currently holding in their main hand.</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory.item_in_off_hand","title":"item_in_off_hand  <code>property</code> <code>writable</code>","text":"<pre><code>item_in_off_hand: ItemStack\n</code></pre> <p>Gets or sets the item the player is currently holding in their off hand.</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory.leggings","title":"leggings  <code>property</code> <code>writable</code>","text":"<pre><code>leggings: ItemStack\n</code></pre> <p>Gets or sets the ItemStack in the leg slot</p>"},{"location":"reference/python/lang/","title":"Language","text":""},{"location":"reference/python/lang/#endstone.lang","title":"endstone.lang","text":"<p>Classes:</p> Name Description <code>Language</code> <p>Represents the interface for translating text into different languages.</p> <code>Translatable</code> <p>Represents an object with a text representation that can be translated by the Minecraft client.</p>"},{"location":"reference/python/lang/#endstone.lang.Language","title":"Language","text":"<p>Represents the interface for translating text into different languages.</p> <p>Methods:</p> Name Description <code>translate</code> <p>Attributes:</p> Name Type Description <code>locale</code> <code>str</code> <p>Gets the current locale.</p>"},{"location":"reference/python/lang/#endstone.lang.Language.locale","title":"locale  <code>property</code>","text":"<pre><code>locale: str\n</code></pre> <p>Gets the current locale.</p>"},{"location":"reference/python/lang/#endstone.lang.Language.translate","title":"translate","text":"<pre><code>translate(\n    text: str,\n    params: list[str] | None = None,\n    locale: str | None = None,\n) -&gt; str\n</code></pre> <p>Translates a given text using a set of parameters for a specific locale.</p> <pre><code>translate(\n    translatable: Translatable, locale: str | None = None\n) -&gt; str\n</code></pre> <p>Translates a Translatable object into a specific locale.</p>"},{"location":"reference/python/lang/#endstone.lang.Translatable","title":"Translatable","text":"<pre><code>Translatable(text: str, params: list[str] | None = None)\n</code></pre> <p>Represents an object with a text representation that can be translated by the Minecraft client.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>list[str]</code> <p>Get the translation parameters.</p> <code>text</code> <code>str</code> <p>Get the text to be translated.</p>"},{"location":"reference/python/lang/#endstone.lang.Translatable.params","title":"params  <code>property</code>","text":"<pre><code>params: list[str]\n</code></pre> <p>Get the translation parameters.</p>"},{"location":"reference/python/lang/#endstone.lang.Translatable.text","title":"text  <code>property</code>","text":"<pre><code>text: str\n</code></pre> <p>Get the text to be translated.</p>"},{"location":"reference/python/level/","title":"Level","text":""},{"location":"reference/python/level/#endstone.level","title":"endstone.level","text":"<p>Classes:</p> Name Description <code>Chunk</code> <p>Represents a chunk of blocks.</p> <code>Dimension</code> <p>Represents a dimension within a Level.</p> <code>Level</code> <code>Location</code> <p>Represents a 3-dimensional location in a dimension within a level.</p>"},{"location":"reference/python/level/#endstone.level.Chunk","title":"Chunk","text":"<p>Represents a chunk of blocks.</p> <p>Attributes:</p> Name Type Description <code>dimension</code> <code>Dimension</code> <p>Gets the dimension containing this chunk</p> <code>level</code> <code>Level</code> <p>Gets the level containing this chunk</p> <code>x</code> <code>int</code> <p>Gets the X-coordinate of this chunk</p> <code>z</code> <code>int</code> <p>Gets the Z-coordinate of this chunk</p>"},{"location":"reference/python/level/#endstone.level.Chunk.dimension","title":"dimension  <code>property</code>","text":"<pre><code>dimension: Dimension\n</code></pre> <p>Gets the dimension containing this chunk</p>"},{"location":"reference/python/level/#endstone.level.Chunk.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Gets the level containing this chunk</p>"},{"location":"reference/python/level/#endstone.level.Chunk.x","title":"x  <code>property</code>","text":"<pre><code>x: int\n</code></pre> <p>Gets the X-coordinate of this chunk</p>"},{"location":"reference/python/level/#endstone.level.Chunk.z","title":"z  <code>property</code>","text":"<pre><code>z: int\n</code></pre> <p>Gets the Z-coordinate of this chunk</p>"},{"location":"reference/python/level/#endstone.level.Dimension","title":"Dimension","text":"<p>Represents a dimension within a Level.</p> <p>Classes:</p> Name Description <code>Type</code> <p>Represents various dimension types.</p> <p>Methods:</p> Name Description <code>drop_item</code> <p>Drops an item at the specified Location</p> <code>get_block_at</code> <code>get_highest_block_at</code> <code>get_highest_block_y_at</code> <p>Gets the highest non-empty (impassable) coordinate at the given coordinates.</p> <code>spawn_actor</code> <p>Creates an actor at the given Location</p> <p>Attributes:</p> Name Type Description <code>CUSTOM</code> <code>NETHER</code> <code>OVERWORLD</code> <code>THE_END</code> <code>actors</code> <code>list[Actor]</code> <p>Get a list of all actors in this dimension</p> <code>level</code> <code>Level</code> <p>Gets the level to which this dimension belongs</p> <code>loaded_chunks</code> <code>list[Chunk]</code> <p>Gets a list of all loaded Chunks</p> <code>name</code> <code>str</code> <p>Gets the name of this dimension</p> <code>type</code> <code>Type</code> <p>Gets the type of this dimension</p>"},{"location":"reference/python/level/#endstone.level.Dimension.CUSTOM","title":"CUSTOM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CUSTOM = CUSTOM\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.NETHER","title":"NETHER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NETHER = NETHER\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.OVERWORLD","title":"OVERWORLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OVERWORLD = OVERWORLD\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.THE_END","title":"THE_END  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>THE_END = THE_END\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.actors","title":"actors  <code>property</code>","text":"<pre><code>actors: list[Actor]\n</code></pre> <p>Get a list of all actors in this dimension</p>"},{"location":"reference/python/level/#endstone.level.Dimension.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Gets the level to which this dimension belongs</p>"},{"location":"reference/python/level/#endstone.level.Dimension.loaded_chunks","title":"loaded_chunks  <code>property</code>","text":"<pre><code>loaded_chunks: list[Chunk]\n</code></pre> <p>Gets a list of all loaded Chunks</p>"},{"location":"reference/python/level/#endstone.level.Dimension.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of this dimension</p>"},{"location":"reference/python/level/#endstone.level.Dimension.type","title":"type  <code>property</code>","text":"<pre><code>type: Type\n</code></pre> <p>Gets the type of this dimension</p>"},{"location":"reference/python/level/#endstone.level.Dimension.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Represents various dimension types.</p> <p>Attributes:</p> Name Type Description <code>CUSTOM</code> <code>NETHER</code> <code>OVERWORLD</code> <code>THE_END</code>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.CUSTOM","title":"CUSTOM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CUSTOM = 999\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.NETHER","title":"NETHER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NETHER = 1\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.OVERWORLD","title":"OVERWORLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OVERWORLD = 0\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.THE_END","title":"THE_END  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>THE_END = 2\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.drop_item","title":"drop_item","text":"<pre><code>drop_item(location: Location, item: ItemStack) -&gt; Item\n</code></pre> <p>Drops an item at the specified Location</p>"},{"location":"reference/python/level/#endstone.level.Dimension.get_block_at","title":"get_block_at","text":"<pre><code>get_block_at(location: Location) -&gt; Block\n</code></pre> <p>Gets the Block at the given Location</p> <pre><code>get_block_at(x: int, y: int, z: int) -&gt; Block\n</code></pre> <p>Gets the Block at the given coordinates</p>"},{"location":"reference/python/level/#endstone.level.Dimension.get_highest_block_at","title":"get_highest_block_at","text":"<pre><code>get_highest_block_at(location: Location) -&gt; Block\n</code></pre> <p>Gets the highest non-empty (impassable) block at the given Location.</p> <pre><code>get_highest_block_at(x: int, z: int) -&gt; Block\n</code></pre> <p>Gets the highest non-empty (impassable) block at the given coordinates.</p>"},{"location":"reference/python/level/#endstone.level.Dimension.get_highest_block_y_at","title":"get_highest_block_y_at","text":"<pre><code>get_highest_block_y_at(x: int, z: int) -&gt; int\n</code></pre> <p>Gets the highest non-empty (impassable) coordinate at the given coordinates.</p>"},{"location":"reference/python/level/#endstone.level.Dimension.spawn_actor","title":"spawn_actor","text":"<pre><code>spawn_actor(location: Location, type: str) -&gt; Actor\n</code></pre> <p>Creates an actor at the given Location</p>"},{"location":"reference/python/level/#endstone.level.Level","title":"Level","text":"<p>Methods:</p> Name Description <code>get_dimension</code> <p>Gets the dimension with the given name.</p> <p>Attributes:</p> Name Type Description <code>actors</code> <code>list[Actor]</code> <p>Get a list of all actors in this level</p> <code>dimensions</code> <code>list[Dimension]</code> <p>Gets a list of all dimensions within this level.</p> <code>name</code> <code>str</code> <p>Gets the unique name of this level</p> <code>seed</code> <code>int</code> <p>Gets the Seed for this level.</p> <code>time</code> <code>int</code> <p>Gets and sets the relative in-game time on the server</p>"},{"location":"reference/python/level/#endstone.level.Level.actors","title":"actors  <code>property</code>","text":"<pre><code>actors: list[Actor]\n</code></pre> <p>Get a list of all actors in this level</p>"},{"location":"reference/python/level/#endstone.level.Level.dimensions","title":"dimensions  <code>property</code>","text":"<pre><code>dimensions: list[Dimension]\n</code></pre> <p>Gets a list of all dimensions within this level.</p>"},{"location":"reference/python/level/#endstone.level.Level.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the unique name of this level</p>"},{"location":"reference/python/level/#endstone.level.Level.seed","title":"seed  <code>property</code>","text":"<pre><code>seed: int\n</code></pre> <p>Gets the Seed for this level.</p>"},{"location":"reference/python/level/#endstone.level.Level.time","title":"time  <code>property</code> <code>writable</code>","text":"<pre><code>time: int\n</code></pre> <p>Gets and sets the relative in-game time on the server</p>"},{"location":"reference/python/level/#endstone.level.Level.get_dimension","title":"get_dimension","text":"<pre><code>get_dimension(name: str) -&gt; Dimension\n</code></pre> <p>Gets the dimension with the given name.</p>"},{"location":"reference/python/level/#endstone.level.Location","title":"Location","text":"<pre><code>Location(\n    x: float,\n    y: float,\n    z: float,\n    pitch: float = 0.0,\n    yaw: float = 0.0,\n    dimension: Dimension = None,\n)\n</code></pre> <p>               Bases: <code>Vector</code></p> <p>Represents a 3-dimensional location in a dimension within a level.</p> <p>Attributes:</p> Name Type Description <code>block_x</code> <code>int</code> <p>Gets the floored value of the X component, indicating the block that this location is contained with.</p> <code>block_y</code> <code>int</code> <p>Gets the floored value of the Y component, indicating the block that this location is contained with.</p> <code>block_z</code> <code>int</code> <p>Gets the floored value of the Z component, indicating the block that this location is contained with.</p> <code>dimension</code> <code>Dimension</code> <p>The Dimension that contains this position</p> <code>pitch</code> <code>float</code> <p>The pitch of this location, measured in degrees.</p> <code>yaw</code> <code>float</code> <p>The yaw of this location, measured in degrees.</p>"},{"location":"reference/python/level/#endstone.level.Location.block_x","title":"block_x  <code>property</code>","text":"<pre><code>block_x: int\n</code></pre> <p>Gets the floored value of the X component, indicating the block that this location is contained with.</p>"},{"location":"reference/python/level/#endstone.level.Location.block_y","title":"block_y  <code>property</code>","text":"<pre><code>block_y: int\n</code></pre> <p>Gets the floored value of the Y component, indicating the block that this location is contained with.</p>"},{"location":"reference/python/level/#endstone.level.Location.block_z","title":"block_z  <code>property</code>","text":"<pre><code>block_z: int\n</code></pre> <p>Gets the floored value of the Z component, indicating the block that this location is contained with.</p>"},{"location":"reference/python/level/#endstone.level.Location.dimension","title":"dimension  <code>property</code> <code>writable</code>","text":"<pre><code>dimension: Dimension\n</code></pre> <p>The Dimension that contains this position</p>"},{"location":"reference/python/level/#endstone.level.Location.pitch","title":"pitch  <code>property</code> <code>writable</code>","text":"<pre><code>pitch: float\n</code></pre> <p>The pitch of this location, measured in degrees.</p>"},{"location":"reference/python/level/#endstone.level.Location.yaw","title":"yaw  <code>property</code> <code>writable</code>","text":"<pre><code>yaw: float\n</code></pre> <p>The yaw of this location, measured in degrees.</p>"},{"location":"reference/python/misc/","title":"Miscellaneous","text":""},{"location":"reference/python/misc/#endstone.ColorFormat","title":"endstone.ColorFormat","text":"<p>All supported color and format codes.</p> <p>Attributes:</p> Name Type Description <code>AQUA</code> <code>BLACK</code> <code>BLUE</code> <code>BOLD</code> <code>DARK_AQUA</code> <code>DARK_BLUE</code> <code>DARK_GRAY</code> <code>DARK_GREEN</code> <code>DARK_PURPLE</code> <code>DARK_RED</code> <code>GOLD</code> <code>GRAY</code> <code>GREEN</code> <code>ITALIC</code> <code>LIGHT_PURPLE</code> <code>MATERIAL_AMETHYST</code> <code>MATERIAL_COPPER</code> <code>MATERIAL_DIAMOND</code> <code>MATERIAL_EMERALD</code> <code>MATERIAL_GOLD</code> <code>MATERIAL_IRON</code> <code>MATERIAL_LAPIS</code> <code>MATERIAL_NETHERITE</code> <code>MATERIAL_QUARTZ</code> <code>MATERIAL_REDSTONE</code> <code>MATERIAL_RESIN</code> <code>MINECOIN_GOLD</code> <code>OBFUSCATED</code> <code>RED</code> <code>RESET</code> <code>WHITE</code> <code>YELLOW</code>"},{"location":"reference/python/misc/#endstone.ColorFormat.AQUA","title":"AQUA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AQUA = '\u00a7b'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.BLACK","title":"BLACK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLACK = '\u00a70'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.BLUE","title":"BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLUE = '\u00a79'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.BOLD","title":"BOLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOLD = '\u00a7l'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_AQUA","title":"DARK_AQUA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_AQUA = '\u00a73'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_BLUE","title":"DARK_BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_BLUE = '\u00a71'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_GRAY","title":"DARK_GRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_GRAY = '\u00a78'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_GREEN","title":"DARK_GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_GREEN = '\u00a72'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_PURPLE","title":"DARK_PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_PURPLE = '\u00a75'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_RED","title":"DARK_RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_RED = '\u00a74'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.GOLD","title":"GOLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GOLD = '\u00a76'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.GRAY","title":"GRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GRAY = '\u00a77'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.GREEN","title":"GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GREEN = '\u00a7a'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.ITALIC","title":"ITALIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ITALIC = '\u00a7o'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.LIGHT_PURPLE","title":"LIGHT_PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_PURPLE = '\u00a7d'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_AMETHYST","title":"MATERIAL_AMETHYST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_AMETHYST = '\u00a7u'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_COPPER","title":"MATERIAL_COPPER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_COPPER = '\u00a7n'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_DIAMOND","title":"MATERIAL_DIAMOND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_DIAMOND = '\u00a7s'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_EMERALD","title":"MATERIAL_EMERALD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_EMERALD = '\u00a7q'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_GOLD","title":"MATERIAL_GOLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_GOLD = '\u00a7p'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_IRON","title":"MATERIAL_IRON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_IRON = '\u00a7i'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_LAPIS","title":"MATERIAL_LAPIS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_LAPIS = '\u00a7t'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_NETHERITE","title":"MATERIAL_NETHERITE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_NETHERITE = '\u00a7j'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_QUARTZ","title":"MATERIAL_QUARTZ  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_QUARTZ = '\u00a7h'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_REDSTONE","title":"MATERIAL_REDSTONE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_REDSTONE = '\u00a7m'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_RESIN","title":"MATERIAL_RESIN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MATERIAL_RESIN = '\u00a7v'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MINECOIN_GOLD","title":"MINECOIN_GOLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MINECOIN_GOLD = '\u00a7g'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.OBFUSCATED","title":"OBFUSCATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OBFUSCATED = '\u00a7k'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.RED","title":"RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RED = '\u00a7c'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.RESET","title":"RESET  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESET = '\u00a7r'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.WHITE","title":"WHITE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WHITE = '\u00a7f'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.YELLOW","title":"YELLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YELLOW = '\u00a7e'\n</code></pre>"},{"location":"reference/python/misc/#endstone.EnchantmentRegistry","title":"endstone.EnchantmentRegistry","text":"<p>Server enchantments.</p> <p>Methods:</p> Name Description <code>get</code> <p>Get the object by its key.</p> <code>get_or_throw</code> <p>Get the object by its key or throw if missing.</p>"},{"location":"reference/python/misc/#endstone.EnchantmentRegistry.get","title":"get","text":"<pre><code>get(key: str) -&gt; Enchantment\n</code></pre> <p>Get the object by its key.</p>"},{"location":"reference/python/misc/#endstone.EnchantmentRegistry.get_or_throw","title":"get_or_throw","text":"<pre><code>get_or_throw(key: str) -&gt; Enchantment\n</code></pre> <p>Get the object by its key or throw if missing.</p>"},{"location":"reference/python/misc/#endstone.GameMode","title":"endstone.GameMode","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the various type of game modes that Players may have.</p> <p>Attributes:</p> Name Type Description <code>ADVENTURE</code> <code>CREATIVE</code> <code>SPECTATOR</code> <code>SURVIVAL</code>"},{"location":"reference/python/misc/#endstone.GameMode.ADVENTURE","title":"ADVENTURE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ADVENTURE = 2\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.CREATIVE","title":"CREATIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CREATIVE = 1\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.SPECTATOR","title":"SPECTATOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SPECTATOR = 3\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.SURVIVAL","title":"SURVIVAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SURVIVAL = 0\n</code></pre>"},{"location":"reference/python/misc/#endstone.ItemRegistry","title":"endstone.ItemRegistry","text":"<p>Server item types\u3002</p> <p>Methods:</p> Name Description <code>get</code> <p>Get the object by its key.</p> <code>get_or_throw</code> <p>Get the object by its key or throw if missing.</p>"},{"location":"reference/python/misc/#endstone.ItemRegistry.get","title":"get","text":"<pre><code>get(key: str) -&gt; ItemType\n</code></pre> <p>Get the object by its key.</p>"},{"location":"reference/python/misc/#endstone.ItemRegistry.get_or_throw","title":"get_or_throw","text":"<pre><code>get_or_throw(key: str) -&gt; ItemType\n</code></pre> <p>Get the object by its key or throw if missing.</p>"},{"location":"reference/python/misc/#endstone.Logger","title":"endstone.Logger","text":"<p>Logger class which can format and output varies levels of logs.</p> <p>Classes:</p> Name Description <code>Level</code> <p>Specifies the log level.</p> <p>Methods:</p> Name Description <code>critical</code> <p>Log a message at the CRITICAL level.</p> <code>debug</code> <p>Log a message at the DEBUG level.</p> <code>error</code> <p>Log a message at the ERROR level.</p> <code>info</code> <p>Log a message at the INFO level.</p> <code>is_enabled_for</code> <p>Check if the Logger instance is enabled for the given log Level.</p> <code>set_level</code> <p>Set the logging level for this Logger instance.</p> <code>trace</code> <p>Log a message at the TRACE level.</p> <code>warning</code> <p>Log a message at the WARNING level.</p> <p>Attributes:</p> Name Type Description <code>CRITICAL</code> <code>DEBUG</code> <code>ERROR</code> <code>INFO</code> <code>TRACE</code> <code>WARNING</code> <code>name</code> <code>str</code> <p>Get the name of this Logger instance.</p>"},{"location":"reference/python/misc/#endstone.Logger.CRITICAL","title":"CRITICAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CRITICAL = CRITICAL\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.DEBUG","title":"DEBUG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEBUG = DEBUG\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.ERROR","title":"ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR = ERROR\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.INFO","title":"INFO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFO = INFO\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.TRACE","title":"TRACE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TRACE = TRACE\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.WARNING","title":"WARNING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARNING = WARNING\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Get the name of this Logger instance.</p>"},{"location":"reference/python/misc/#endstone.Logger.Level","title":"Level","text":"<p>               Bases: <code>IntEnum</code></p> <p>Specifies the log level.</p> <p>Attributes:</p> Name Type Description <code>CRITICAL</code> <code>DEBUG</code> <code>ERROR</code> <code>INFO</code> <code>TRACE</code> <code>WARNING</code>"},{"location":"reference/python/misc/#endstone.Logger.Level.CRITICAL","title":"CRITICAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CRITICAL = 5\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.DEBUG","title":"DEBUG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEBUG = 1\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.ERROR","title":"ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR = 4\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.INFO","title":"INFO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFO = 2\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.TRACE","title":"TRACE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TRACE = 0\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.WARNING","title":"WARNING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARNING = 3\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.critical","title":"critical","text":"<pre><code>critical(message: str) -&gt; None\n</code></pre> <p>Log a message at the CRITICAL level.</p>"},{"location":"reference/python/misc/#endstone.Logger.debug","title":"debug","text":"<pre><code>debug(message: str) -&gt; None\n</code></pre> <p>Log a message at the DEBUG level.</p>"},{"location":"reference/python/misc/#endstone.Logger.error","title":"error","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Log a message at the ERROR level.</p>"},{"location":"reference/python/misc/#endstone.Logger.info","title":"info","text":"<pre><code>info(message: str) -&gt; None\n</code></pre> <p>Log a message at the INFO level.</p>"},{"location":"reference/python/misc/#endstone.Logger.is_enabled_for","title":"is_enabled_for","text":"<pre><code>is_enabled_for(level: Level) -&gt; bool\n</code></pre> <p>Check if the Logger instance is enabled for the given log Level.</p>"},{"location":"reference/python/misc/#endstone.Logger.set_level","title":"set_level","text":"<pre><code>set_level(level: Level) -&gt; None\n</code></pre> <p>Set the logging level for this Logger instance.</p>"},{"location":"reference/python/misc/#endstone.Logger.trace","title":"trace","text":"<pre><code>trace(message: str) -&gt; None\n</code></pre> <p>Log a message at the TRACE level.</p>"},{"location":"reference/python/misc/#endstone.Logger.warning","title":"warning","text":"<pre><code>warning(message: str) -&gt; None\n</code></pre> <p>Log a message at the WARNING level.</p>"},{"location":"reference/python/misc/#endstone.util","title":"endstone.util","text":"<p>Multi and single purpose classes.</p> <p>Classes:</p> Name Description <code>SocketAddress</code> <p>Represents an IP Socket Address (hostname + port number).</p> <code>Vector</code> <p>Represents a 3-dimensional vector.</p>"},{"location":"reference/python/misc/#endstone.util.SocketAddress","title":"SocketAddress","text":"<pre><code>SocketAddress()\n</code></pre><pre><code>SocketAddress(hostname: str, port: int)\n</code></pre> <pre><code>SocketAddress()\n</code></pre> <p>Represents an IP Socket Address (hostname + port number).</p> <p>Attributes:</p> Name Type Description <code>hostname</code> <code>str</code> <p>Gets the hostname.</p> <code>port</code> <code>int</code> <p>Gets the port number.</p>"},{"location":"reference/python/misc/#endstone.util.SocketAddress.hostname","title":"hostname  <code>property</code>","text":"<pre><code>hostname: str\n</code></pre> <p>Gets the hostname.</p>"},{"location":"reference/python/misc/#endstone.util.SocketAddress.port","title":"port  <code>property</code>","text":"<pre><code>port: int\n</code></pre> <p>Gets the port number.</p>"},{"location":"reference/python/misc/#endstone.util.Vector","title":"Vector","text":"<pre><code>Vector()\n</code></pre><pre><code>Vector(x: float, y: float, z: float)\n</code></pre> <pre><code>Vector()\n</code></pre> <p>Represents a 3-dimensional vector.</p> <p>Methods:</p> Name Description <code>distance</code> <p>The distance between this Vector and another</p> <code>distance_squared</code> <p>The squared distance between this Vector and another</p> <p>Attributes:</p> Name Type Description <code>length</code> <code>float</code> <p>The magnitude of the Vector</p> <code>length_squared</code> <code>float</code> <p>The squared magnitude of the Vector</p> <code>x</code> <code>float</code> <p>The X component of the vector</p> <code>y</code> <code>float</code> <p>The Y component of the vector</p> <code>z</code> <code>float</code> <p>The Z component of the vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.length","title":"length  <code>property</code>","text":"<pre><code>length: float\n</code></pre> <p>The magnitude of the Vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.length_squared","title":"length_squared  <code>property</code>","text":"<pre><code>length_squared: float\n</code></pre> <p>The squared magnitude of the Vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.x","title":"x  <code>property</code> <code>writable</code>","text":"<pre><code>x: float\n</code></pre> <p>The X component of the vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.y","title":"y  <code>property</code> <code>writable</code>","text":"<pre><code>y: float\n</code></pre> <p>The Y component of the vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.z","title":"z  <code>property</code> <code>writable</code>","text":"<pre><code>z: float\n</code></pre> <p>The Z component of the vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.distance","title":"distance","text":"<pre><code>distance(other: Vector) -&gt; float\n</code></pre> <p>The distance between this Vector and another</p>"},{"location":"reference/python/misc/#endstone.util.Vector.distance_squared","title":"distance_squared","text":"<pre><code>distance_squared(other: Vector) -&gt; float\n</code></pre> <p>The squared distance between this Vector and another</p>"},{"location":"reference/python/permissions/","title":"Permissions","text":""},{"location":"reference/python/permissions/#endstone.permissions","title":"endstone.permissions","text":"<p>Classes relating to permissions of players.</p> <p>Classes:</p> Name Description <code>Permissible</code> <p>Represents an object that may become a server operator and can be assigned permissions.</p> <code>Permission</code> <p>Represents a unique permission that may be attached to a Permissible</p> <code>PermissionAttachment</code> <p>Holds information about a permission attachment on a Permissible object</p> <code>PermissionAttachmentInfo</code> <p>Holds information on a permission and which PermissionAttachment provides it</p> <code>PermissionDefault</code> <p>Represents the possible default values for permissions</p> <code>PermissionLevel</code>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible","title":"Permissible","text":"<p>Represents an object that may become a server operator and can be assigned permissions.</p> <p>Methods:</p> Name Description <code>add_attachment</code> <code>has_permission</code> <code>is_permission_set</code> <code>recalculate_permissions</code> <p>Recalculates the permissions.</p> <code>remove_attachment</code> <p>Removes a given PermissionAttachment.</p> <p>Attributes:</p> Name Type Description <code>effective_permissions</code> <code>set[PermissionAttachmentInfo]</code> <p>Gets effective permissions.</p> <code>permission_level</code> <code>PermissionLevel</code> <p>Gets the permission level of this object</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.effective_permissions","title":"effective_permissions  <code>property</code>","text":"<pre><code>effective_permissions: set[PermissionAttachmentInfo]\n</code></pre> <p>Gets effective permissions.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.permission_level","title":"permission_level  <code>property</code>","text":"<pre><code>permission_level: PermissionLevel\n</code></pre> <p>Gets the permission level of this object</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.add_attachment","title":"add_attachment","text":"<pre><code>add_attachment(\n    plugin: Plugin, name: str, value: bool\n) -&gt; PermissionAttachment\n</code></pre> <p>Adds a new PermissionAttachment.</p> <pre><code>add_attachment(plugin: Plugin) -&gt; PermissionAttachment\n</code></pre> <p>Adds a new PermissionAttachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.has_permission","title":"has_permission","text":"<pre><code>has_permission(name: str) -&gt; bool\n</code></pre> <p>Checks if a permissions is available by name.</p> <pre><code>has_permission(perm: Permission) -&gt; bool\n</code></pre> <p>Checks if a permissions is available by permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.is_permission_set","title":"is_permission_set","text":"<pre><code>is_permission_set(name: str) -&gt; bool\n</code></pre> <p>Checks if a permissions is set by name.</p> <pre><code>is_permission_set(perm: Permission) -&gt; bool\n</code></pre> <p>Checks if a permissions is set by permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.recalculate_permissions","title":"recalculate_permissions","text":"<pre><code>recalculate_permissions() -&gt; None\n</code></pre> <p>Recalculates the permissions.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.remove_attachment","title":"remove_attachment","text":"<pre><code>remove_attachment(attachment: PermissionAttachment) -&gt; None\n</code></pre> <p>Removes a given PermissionAttachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission","title":"Permission","text":"<pre><code>Permission(\n    name: str,\n    description: str | None = None,\n    default: PermissionDefault | None = None,\n    children: Mapping[str, bool] | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Represents a unique permission that may be attached to a Permissible</p> <p>Methods:</p> Name Description <code>add_parent</code> <code>recalculate_permissibles</code> <p>Recalculates all Permissibles that contain this permission.</p> <p>Attributes:</p> Name Type Description <code>children</code> <code>dict[str, bool]</code> <p>Gets the children of this permission.</p> <code>default</code> <code>PermissionDefault</code> <p>The default value of this permission.</p> <code>description</code> <code>str</code> <p>The brief description of this permission</p> <code>name</code> <code>str</code> <p>Gets the unique fully qualified name of this Permission.</p> <code>permissibles</code> <code>set[Permissible]</code> <p>Gets a set containing every Permissible that has this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.children","title":"children  <code>property</code>","text":"<pre><code>children: dict[str, bool]\n</code></pre> <p>Gets the children of this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.default","title":"default  <code>property</code> <code>writable</code>","text":"<pre><code>default: PermissionDefault\n</code></pre> <p>The default value of this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.description","title":"description  <code>property</code> <code>writable</code>","text":"<pre><code>description: str\n</code></pre> <p>The brief description of this permission</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the unique fully qualified name of this Permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.permissibles","title":"permissibles  <code>property</code>","text":"<pre><code>permissibles: set[Permissible]\n</code></pre> <p>Gets a set containing every Permissible that has this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.add_parent","title":"add_parent","text":"<pre><code>add_parent(name: str, value: bool) -&gt; Permission\n</code></pre> <p>Adds this permission to the specified parent permission.</p> <pre><code>add_parent(perm: Permission, value: bool) -&gt; None\n</code></pre> <p>Adds this permission to the specified parent permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.recalculate_permissibles","title":"recalculate_permissibles","text":"<pre><code>recalculate_permissibles() -&gt; None\n</code></pre> <p>Recalculates all Permissibles that contain this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment","title":"PermissionAttachment","text":"<pre><code>PermissionAttachment(\n    plugin: Plugin, permissible: Permissible\n)\n</code></pre> <p>Holds information about a permission attachment on a Permissible object</p> <p>Methods:</p> Name Description <code>remove</code> <p>Removes this attachment from its registered Permissible.</p> <code>set_permission</code> <code>unset_permission</code> <p>Attributes:</p> Name Type Description <code>permissible</code> <code>Permissible</code> <p>Gets the Permissible that this is attached to.</p> <code>permissions</code> <code>dict[str, bool]</code> <p>Gets a copy of all set permissions and values contained within this attachment.</p> <code>plugin</code> <code>Plugin</code> <p>Gets the plugin responsible for this attachment.</p> <code>removal_callback</code> <code>Callable[[PermissionAttachment], None]</code> <p>The callback to be called when this attachment is removed.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.permissible","title":"permissible  <code>property</code>","text":"<pre><code>permissible: Permissible\n</code></pre> <p>Gets the Permissible that this is attached to.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.permissions","title":"permissions  <code>property</code>","text":"<pre><code>permissions: dict[str, bool]\n</code></pre> <p>Gets a copy of all set permissions and values contained within this attachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre> <p>Gets the plugin responsible for this attachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.removal_callback","title":"removal_callback  <code>property</code> <code>writable</code>","text":"<pre><code>removal_callback: Callable[[PermissionAttachment], None]\n</code></pre> <p>The callback to be called when this attachment is removed.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.remove","title":"remove","text":"<pre><code>remove() -&gt; bool\n</code></pre> <p>Removes this attachment from its registered Permissible.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.set_permission","title":"set_permission","text":"<pre><code>set_permission(name: str, value: bool) -&gt; None\n</code></pre> <p>Sets a permission to the given value, by its fully qualified name.</p> <pre><code>set_permission(perm: Permission, value: bool) -&gt; None\n</code></pre> <p>Sets a permission to the given value.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.unset_permission","title":"unset_permission","text":"<pre><code>unset_permission(name: str) -&gt; None\n</code></pre> <p>Removes the specified permission from this attachment by name.</p> <pre><code>unset_permission(perm: Permission) -&gt; None\n</code></pre> <p>Removes the specified permission from this attachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo","title":"PermissionAttachmentInfo","text":"<pre><code>PermissionAttachmentInfo(\n    permissible: Permissible,\n    permission: str,\n    attachment: PermissionAttachment,\n    value: bool,\n)\n</code></pre> <p>Holds information on a permission and which PermissionAttachment provides it</p> <p>Attributes:</p> Name Type Description <code>attachment</code> <code>PermissionAttachment</code> <p>Gets the attachment providing this permission.</p> <code>permissible</code> <code>Permissible</code> <p>Get the permissible this is attached to</p> <code>permission</code> <code>str</code> <p>Gets the permission being set</p> <code>value</code> <code>bool</code> <p>Gets the value of this permission</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.attachment","title":"attachment  <code>property</code>","text":"<pre><code>attachment: PermissionAttachment\n</code></pre> <p>Gets the attachment providing this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.permissible","title":"permissible  <code>property</code>","text":"<pre><code>permissible: Permissible\n</code></pre> <p>Get the permissible this is attached to</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.permission","title":"permission  <code>property</code>","text":"<pre><code>permission: str\n</code></pre> <p>Gets the permission being set</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.value","title":"value  <code>property</code>","text":"<pre><code>value: bool\n</code></pre> <p>Gets the value of this permission</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault","title":"PermissionDefault","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the possible default values for permissions</p> <p>Attributes:</p> Name Type Description <code>CONSOLE</code> <code>FALSE</code> <code>NOT_OP</code> <code>OP</code> <code>TRUE</code>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.CONSOLE","title":"CONSOLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONSOLE = 4\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.FALSE","title":"FALSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FALSE = 1\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.NOT_OP","title":"NOT_OP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NOT_OP = 3\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.OP","title":"OP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OP = 2\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.TRUE","title":"TRUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TRUE = 0\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionLevel","title":"PermissionLevel","text":"<p>               Bases: <code>IntEnum</code></p> <p>Attributes:</p> Name Type Description <code>CONSOLE</code> <code>DEFAULT</code> <code>OP</code>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionLevel.CONSOLE","title":"CONSOLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONSOLE = 2\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionLevel.DEFAULT","title":"DEFAULT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEFAULT = 0\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionLevel.OP","title":"OP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OP = 1\n</code></pre>"},{"location":"reference/python/player/","title":"Player","text":""},{"location":"reference/python/player/#endstone.Player","title":"endstone.Player","text":"<p>               Bases: <code>Mob</code>, <code>OfflinePlayer</code></p> <p>Represents a player.</p> <p>Methods:</p> Name Description <code>close_form</code> <p>Closes the forms that are currently open for the player.</p> <code>give_exp</code> <p>Gives the player the amount of experience specified.</p> <code>give_exp_levels</code> <p>Gives the player the amount of experience levels specified.</p> <code>kick</code> <p>Kicks player with custom kick message.</p> <code>perform_command</code> <p>Makes the player perform the given command.</p> <code>play_sound</code> <p>Play a sound for a player at the location.</p> <code>reset_title</code> <p>Resets the title displayed to the player. This will clear the displayed title / subtitle and reset timings to their default values.</p> <code>send_form</code> <p>Sends a form to the player.</p> <code>send_packet</code> <p>Sends a packet to the player.</p> <code>send_popup</code> <p>Sends this player a popup message</p> <code>send_tip</code> <p>Sends this player a tip message</p> <code>send_title</code> <p>Sends a title and a subtitle message to the player. If they are empty strings, the display will be updated as such.</p> <code>send_toast</code> <p>Sends this player a toast notification.</p> <code>spawn_particle</code> <code>stop_all_sounds</code> <p>Stop all sounds from playing.</p> <code>stop_sound</code> <p>Stop the specified sound from playing.</p> <code>transfer</code> <p>Transfers the player to another server.</p> <code>update_commands</code> <p>Send the list of commands to the client.</p> <p>Attributes:</p> Name Type Description <code>address</code> <code>SocketAddress</code> <p>Gets the socket address of this player</p> <code>allow_flight</code> <code>bool</code> <p>If the Player is allowed to fly via jump key double-tap.</p> <code>device_id</code> <code>str</code> <p>Get the player's current device id.</p> <code>device_os</code> <code>str</code> <p>Get the player's current device's operation system (OS).</p> <code>ender_chest</code> <code>Inventory</code> <p>Get the player's EnderChest inventory.</p> <code>exp_level</code> <code>int</code> <p>Gets or sets the players current experience level.</p> <code>exp_progress</code> <code>float</code> <p>Gets or sets the players current experience progress towards the next level.</p> <code>fly_speed</code> <code>float</code> <p>Gets or sets the current allowed speed that a client can fly.</p> <code>game_mode</code> <code>GameMode</code> <p>The player's current game mode.</p> <code>game_version</code> <code>str</code> <p>Get the player's current game version.</p> <code>inventory</code> <code>PlayerInventory</code> <p>Get the player's inventory.</p> <code>is_flying</code> <code>bool</code> <p>If the player is currently flying or not.</p> <code>is_op</code> <code>bool</code> <p>The operator status of this playerall</p> <code>is_sneaking</code> <code>bool</code> <p>Gets or sets the sneak mode of the player</p> <code>is_sprinting</code> <code>bool</code> <p>Gets or sets whether the player is sprinting or not.</p> <code>locale</code> <code>str</code> <p>Get the player's current locale.</p> <code>name</code> <code>str</code> <p>Returns the name of this player</p> <code>ping</code> <code>int</code> <p>Gets the player's average ping in milliseconds.</p> <code>scoreboard</code> <code>Scoreboard</code> <p>Gets or sets the player's visible Scoreboard.</p> <code>skin</code> <code>Skin</code> <p>Get the player's skin.</p> <code>total_exp</code> <code>int</code> <p>Gets the players total experience points.</p> <code>unique_id</code> <code>UUID</code> <p>Returns the UUID of this player</p> <code>walk_speed</code> <code>float</code> <p>Gets or sets the current allowed speed that a client can walk.</p> <code>xuid</code> <code>str</code> <p>Returns the Xbox User ID (XUID) of this player</p>"},{"location":"reference/python/player/#endstone.Player.address","title":"address  <code>property</code>","text":"<pre><code>address: SocketAddress\n</code></pre> <p>Gets the socket address of this player</p>"},{"location":"reference/python/player/#endstone.Player.allow_flight","title":"allow_flight  <code>property</code> <code>writable</code>","text":"<pre><code>allow_flight: bool\n</code></pre> <p>If the Player is allowed to fly via jump key double-tap.</p>"},{"location":"reference/python/player/#endstone.Player.device_id","title":"device_id  <code>property</code>","text":"<pre><code>device_id: str\n</code></pre> <p>Get the player's current device id.</p>"},{"location":"reference/python/player/#endstone.Player.device_os","title":"device_os  <code>property</code>","text":"<pre><code>device_os: str\n</code></pre> <p>Get the player's current device's operation system (OS).</p>"},{"location":"reference/python/player/#endstone.Player.ender_chest","title":"ender_chest  <code>property</code>","text":"<pre><code>ender_chest: Inventory\n</code></pre> <p>Get the player's EnderChest inventory.</p>"},{"location":"reference/python/player/#endstone.Player.exp_level","title":"exp_level  <code>property</code> <code>writable</code>","text":"<pre><code>exp_level: int\n</code></pre> <p>Gets or sets the players current experience level.</p>"},{"location":"reference/python/player/#endstone.Player.exp_progress","title":"exp_progress  <code>property</code> <code>writable</code>","text":"<pre><code>exp_progress: float\n</code></pre> <p>Gets or sets the players current experience progress towards the next level.</p>"},{"location":"reference/python/player/#endstone.Player.fly_speed","title":"fly_speed  <code>property</code> <code>writable</code>","text":"<pre><code>fly_speed: float\n</code></pre> <p>Gets or sets the current allowed speed that a client can fly.</p>"},{"location":"reference/python/player/#endstone.Player.game_mode","title":"game_mode  <code>property</code> <code>writable</code>","text":"<pre><code>game_mode: GameMode\n</code></pre> <p>The player's current game mode.</p>"},{"location":"reference/python/player/#endstone.Player.game_version","title":"game_version  <code>property</code>","text":"<pre><code>game_version: str\n</code></pre> <p>Get the player's current game version.</p>"},{"location":"reference/python/player/#endstone.Player.inventory","title":"inventory  <code>property</code>","text":"<pre><code>inventory: PlayerInventory\n</code></pre> <p>Get the player's inventory.</p>"},{"location":"reference/python/player/#endstone.Player.is_flying","title":"is_flying  <code>property</code> <code>writable</code>","text":"<pre><code>is_flying: bool\n</code></pre> <p>If the player is currently flying or not.</p>"},{"location":"reference/python/player/#endstone.Player.is_op","title":"is_op  <code>property</code> <code>writable</code>","text":"<pre><code>is_op: bool\n</code></pre> <p>The operator status of this playerall</p>"},{"location":"reference/python/player/#endstone.Player.is_sneaking","title":"is_sneaking  <code>property</code> <code>writable</code>","text":"<pre><code>is_sneaking: bool\n</code></pre> <p>Gets or sets the sneak mode of the player</p>"},{"location":"reference/python/player/#endstone.Player.is_sprinting","title":"is_sprinting  <code>property</code> <code>writable</code>","text":"<pre><code>is_sprinting: bool\n</code></pre> <p>Gets or sets whether the player is sprinting or not.</p>"},{"location":"reference/python/player/#endstone.Player.locale","title":"locale  <code>property</code>","text":"<pre><code>locale: str\n</code></pre> <p>Get the player's current locale.</p>"},{"location":"reference/python/player/#endstone.Player.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Returns the name of this player</p>"},{"location":"reference/python/player/#endstone.Player.ping","title":"ping  <code>property</code>","text":"<pre><code>ping: int\n</code></pre> <p>Gets the player's average ping in milliseconds.</p>"},{"location":"reference/python/player/#endstone.Player.scoreboard","title":"scoreboard  <code>property</code> <code>writable</code>","text":"<pre><code>scoreboard: Scoreboard\n</code></pre> <p>Gets or sets the player's visible Scoreboard.</p>"},{"location":"reference/python/player/#endstone.Player.skin","title":"skin  <code>property</code>","text":"<pre><code>skin: Skin\n</code></pre> <p>Get the player's skin.</p>"},{"location":"reference/python/player/#endstone.Player.total_exp","title":"total_exp  <code>property</code>","text":"<pre><code>total_exp: int\n</code></pre> <p>Gets the players total experience points.</p>"},{"location":"reference/python/player/#endstone.Player.unique_id","title":"unique_id  <code>property</code>","text":"<pre><code>unique_id: UUID\n</code></pre> <p>Returns the UUID of this player</p>"},{"location":"reference/python/player/#endstone.Player.walk_speed","title":"walk_speed  <code>property</code> <code>writable</code>","text":"<pre><code>walk_speed: float\n</code></pre> <p>Gets or sets the current allowed speed that a client can walk.</p>"},{"location":"reference/python/player/#endstone.Player.xuid","title":"xuid  <code>property</code>","text":"<pre><code>xuid: str\n</code></pre> <p>Returns the Xbox User ID (XUID) of this player</p>"},{"location":"reference/python/player/#endstone.Player.close_form","title":"close_form","text":"<pre><code>close_form() -&gt; None\n</code></pre> <p>Closes the forms that are currently open for the player.</p>"},{"location":"reference/python/player/#endstone.Player.give_exp","title":"give_exp","text":"<pre><code>give_exp(amount: int) -&gt; None\n</code></pre> <p>Gives the player the amount of experience specified.</p>"},{"location":"reference/python/player/#endstone.Player.give_exp_levels","title":"give_exp_levels","text":"<pre><code>give_exp_levels(amount: int) -&gt; None\n</code></pre> <p>Gives the player the amount of experience levels specified.</p>"},{"location":"reference/python/player/#endstone.Player.kick","title":"kick","text":"<pre><code>kick(message: str) -&gt; None\n</code></pre> <p>Kicks player with custom kick message.</p>"},{"location":"reference/python/player/#endstone.Player.perform_command","title":"perform_command","text":"<pre><code>perform_command(command: str) -&gt; bool\n</code></pre> <p>Makes the player perform the given command.</p>"},{"location":"reference/python/player/#endstone.Player.play_sound","title":"play_sound","text":"<pre><code>play_sound(\n    location: Location,\n    sound: str,\n    volume: float = 1.0,\n    pitch: float = 1.0,\n) -&gt; None\n</code></pre> <p>Play a sound for a player at the location.</p>"},{"location":"reference/python/player/#endstone.Player.reset_title","title":"reset_title","text":"<pre><code>reset_title() -&gt; None\n</code></pre> <p>Resets the title displayed to the player. This will clear the displayed title / subtitle and reset timings to their default values.</p>"},{"location":"reference/python/player/#endstone.Player.send_form","title":"send_form","text":"<pre><code>send_form(\n    form: MessageForm | ActionForm | ModalForm,\n) -&gt; None\n</code></pre> <p>Sends a form to the player.</p>"},{"location":"reference/python/player/#endstone.Player.send_packet","title":"send_packet","text":"<pre><code>send_packet(packet_id: int, payload: bytes) -&gt; None\n</code></pre> <p>Sends a packet to the player.</p>"},{"location":"reference/python/player/#endstone.Player.send_popup","title":"send_popup","text":"<pre><code>send_popup(message: str) -&gt; None\n</code></pre> <p>Sends this player a popup message</p>"},{"location":"reference/python/player/#endstone.Player.send_tip","title":"send_tip","text":"<pre><code>send_tip(message: str) -&gt; None\n</code></pre> <p>Sends this player a tip message</p>"},{"location":"reference/python/player/#endstone.Player.send_title","title":"send_title","text":"<pre><code>send_title(\n    title: str,\n    subtitle: str,\n    fade_in: int = 10,\n    stay: int = 70,\n    fade_out: int = 20,\n) -&gt; None\n</code></pre> <p>Sends a title and a subtitle message to the player. If they are empty strings, the display will be updated as such.</p>"},{"location":"reference/python/player/#endstone.Player.send_toast","title":"send_toast","text":"<pre><code>send_toast(title: str, content: str) -&gt; None\n</code></pre> <p>Sends this player a toast notification.</p>"},{"location":"reference/python/player/#endstone.Player.spawn_particle","title":"spawn_particle","text":"<pre><code>spawn_particle(\n    name: str,\n    location: Location,\n    molang_variables_json: str | None = None,\n) -&gt; None\n</code></pre> <p>Spawns the particle at the target location.</p> <pre><code>spawn_particle(\n    name: str,\n    x: float,\n    y: float,\n    z: float,\n    molang_variables_json: str | None = None,\n) -&gt; None\n</code></pre> <p>Spawns the particle at the target location.</p>"},{"location":"reference/python/player/#endstone.Player.stop_all_sounds","title":"stop_all_sounds","text":"<pre><code>stop_all_sounds() -&gt; None\n</code></pre> <p>Stop all sounds from playing.</p>"},{"location":"reference/python/player/#endstone.Player.stop_sound","title":"stop_sound","text":"<pre><code>stop_sound(sound: str) -&gt; None\n</code></pre> <p>Stop the specified sound from playing.</p>"},{"location":"reference/python/player/#endstone.Player.transfer","title":"transfer","text":"<pre><code>transfer(host: str, port: int = 19132) -&gt; None\n</code></pre> <p>Transfers the player to another server.</p>"},{"location":"reference/python/player/#endstone.Player.update_commands","title":"update_commands","text":"<pre><code>update_commands() -&gt; None\n</code></pre> <p>Send the list of commands to the client.</p>"},{"location":"reference/python/player/#endstone.OfflinePlayer","title":"endstone.OfflinePlayer","text":"<p>Represents a reference to a player identity and the data belonging to a player that is stored on the disk and can, thus, be retrieved without the player needing to be online.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Returns the name of this player</p> <code>unique_id</code> <code>UUID</code> <p>Returns the UUID of this player</p>"},{"location":"reference/python/player/#endstone.OfflinePlayer.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Returns the name of this player</p>"},{"location":"reference/python/player/#endstone.OfflinePlayer.unique_id","title":"unique_id  <code>property</code>","text":"<pre><code>unique_id: UUID\n</code></pre> <p>Returns the UUID of this player</p>"},{"location":"reference/python/player/#endstone.Skin","title":"endstone.Skin","text":"<pre><code>Skin(\n    id: str,\n    image: ndarray[uint8],\n    cape_id: str | None = None,\n    cape_image: ndarray[uint8] | None = None,\n)\n</code></pre> <p>Represents a player skin.</p> <p>Attributes:</p> Name Type Description <code>cape_id</code> <code>str | None</code> <p>Get the Cape ID.</p> <code>cape_image</code> <code>ndarray[uint8]</code> <p>Get the Cape image.</p> <code>id</code> <code>str</code> <p>Get the Skin ID.</p> <code>image</code> <code>ndarray[uint8]</code> <p>Get the Skin image.</p>"},{"location":"reference/python/player/#endstone.Skin.cape_id","title":"cape_id  <code>property</code>","text":"<pre><code>cape_id: str | None\n</code></pre> <p>Get the Cape ID.</p>"},{"location":"reference/python/player/#endstone.Skin.cape_image","title":"cape_image  <code>property</code>","text":"<pre><code>cape_image: ndarray[uint8]\n</code></pre> <p>Get the Cape image.</p>"},{"location":"reference/python/player/#endstone.Skin.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre> <p>Get the Skin ID.</p>"},{"location":"reference/python/player/#endstone.Skin.image","title":"image  <code>property</code>","text":"<pre><code>image: ndarray[uint8]\n</code></pre> <p>Get the Skin image.</p>"},{"location":"reference/python/plugin/","title":"Plugin","text":""},{"location":"reference/python/plugin/#endstone.plugin","title":"endstone.plugin","text":"<p>Classes relating to loading and managing plugins.</p> <p>Modules:</p> Name Description <code>plugin_loader</code> <p>Classes:</p> Name Description <code>Plugin</code> <p>Represents a Plugin</p> <code>PluginCommand</code> <p>Represents a Command belonging to a Plugin</p> <code>PluginLoadOrder</code> <p>Represents the order in which a plugin should be initialized and enabled.</p> <code>PluginLoader</code> <p>Represents a plugin loader, which handles direct access to specific types of plugins</p> <code>PluginManager</code> <p>Represents a plugin manager that handles all plugins from the Server</p> <code>Service</code> <p>Represents a list of methods.</p> <code>ServiceManager</code> <p>Represent a service manager that manages services and service providers.</p> <code>ServicePriority</code> <p>Represents various priorities of a provider.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin","title":"Plugin","text":"<pre><code>Plugin()\n</code></pre> <p>               Bases: <code>Plugin</code></p> <p>Represents a Plugin</p> <p>Methods:</p> Name Description <code>get_command</code> <p>Gets the command with the given name, specific to this plugin.</p> <code>on_disable</code> <p>Called when this plugin is disabled</p> <code>on_enable</code> <p>Called when this plugin is enabled</p> <code>on_load</code> <p>Called after a plugin is loaded but before it has been enabled.</p> <code>register_events</code> <p>Registers all events defined in the given listener instance.</p> <code>reload_config</code> <p>Returns the plugin's configuration loaded from config.toml.</p> <code>save_config</code> <p>Saves the current configuration to the config.toml file.</p> <code>save_default_config</code> <p>Saves the default config.toml file to the plugin's data folder.</p> <code>save_resources</code> <p>Saves a packaged resource from the plugin module to the data folder.</p> <p>Attributes:</p> Name Type Description <code>api_version</code> <code>authors</code> <code>commands</code> <code>config</code> <code>dict</code> <p>Returns the plugin's configuration loaded from config.toml.</p> <code>contributors</code> <code>data_folder</code> <code>Path</code> <p>Returns the folder that the plugin data's files are located in.</p> <code>default_permission</code> <code>depend</code> <code>description</code> <code>is_enabled</code> <code>bool</code> <p>Returns a value indicating whether this plugin is currently enabled</p> <code>load</code> <code>load_before</code> <code>logger</code> <code>Logger</code> <p>Returns the plugin logger associated with this server's logger.</p> <code>name</code> <code>str</code> <p>Returns the name of the plugin.</p> <code>permissions</code> <code>plugin_loader</code> <code>PluginLoader</code> <p>Gets the associated PluginLoader responsible for this plugin</p> <code>prefix</code> <code>provides</code> <code>server</code> <code>Server</code> <p>Returns the Server instance currently running this plugin</p> <code>soft_depend</code> <code>version</code> <code>website</code>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.authors","title":"authors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>authors = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.commands","title":"commands  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commands = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.config","title":"config  <code>property</code>","text":"<pre><code>config: dict\n</code></pre> <p>Returns the plugin's configuration loaded from config.toml.</p> <p>Loads and returns the plugin\u2019s configuration data from <code>config.toml</code>. If the configuration has not been loaded yet, it is automatically reloaded using <code>reload_config()</code>.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The plugin's configuration data.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.contributors","title":"contributors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contributors = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.data_folder","title":"data_folder  <code>property</code>","text":"<pre><code>data_folder: Path\n</code></pre> <p>Returns the folder that the plugin data's files are located in.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.default_permission","title":"default_permission  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_permission = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.depend","title":"depend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>depend = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.is_enabled","title":"is_enabled  <code>property</code>","text":"<pre><code>is_enabled: bool\n</code></pre> <p>Returns a value indicating whether this plugin is currently enabled</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.load","title":"load  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>load = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.load_before","title":"load_before  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>load_before = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.logger","title":"logger  <code>property</code>","text":"<pre><code>logger: Logger\n</code></pre> <p>Returns the plugin logger associated with this server's logger.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Returns the name of the plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.permissions","title":"permissions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>permissions = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.plugin_loader","title":"plugin_loader  <code>property</code>","text":"<pre><code>plugin_loader: PluginLoader\n</code></pre> <p>Gets the associated PluginLoader responsible for this plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.provides","title":"provides  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>provides = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.server","title":"server  <code>property</code>","text":"<pre><code>server: Server\n</code></pre> <p>Returns the Server instance currently running this plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.soft_depend","title":"soft_depend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>soft_depend = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.website","title":"website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>website = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.get_command","title":"get_command","text":"<pre><code>get_command(name: str) -&gt; PluginCommand\n</code></pre> <p>Gets the command with the given name, specific to this plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.on_disable","title":"on_disable","text":"<pre><code>on_disable() -&gt; None\n</code></pre> <p>Called when this plugin is disabled</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.on_enable","title":"on_enable","text":"<pre><code>on_enable() -&gt; None\n</code></pre> <p>Called when this plugin is enabled</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.on_load","title":"on_load","text":"<pre><code>on_load() -&gt; None\n</code></pre> <p>Called after a plugin is loaded but before it has been enabled.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.register_events","title":"register_events","text":"<pre><code>register_events(listener: object) -&gt; None\n</code></pre> <p>Registers all events defined in the given listener instance.</p> <p>Parameters:</p> Name Type Description Default <code>listener</code> <code>object</code> <p>The listener object containing event handler methods to be registered.</p> required"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.reload_config","title":"reload_config","text":"<pre><code>reload_config() -&gt; dict\n</code></pre> <p>Returns the plugin's configuration loaded from config.toml.</p> <p>Loads and returns the plugin\u2019s configuration data from <code>config.toml</code>. If a default configuration file is packaged with the plugin, its values are used as defaults.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The plugin's configuration data.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.save_config","title":"save_config","text":"<pre><code>save_config() -&gt; None\n</code></pre> <p>Saves the current configuration to the config.toml file.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.save_default_config","title":"save_default_config","text":"<pre><code>save_default_config() -&gt; None\n</code></pre> <p>Saves the default config.toml file to the plugin's data folder.</p> <p>If <code>config.toml</code> does not already exist in the plugin\u2019s data folder, this method copies the default version from the plugin\u2019s packaged resources. If the file already exists, the method does nothing and fails silently.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.save_resources","title":"save_resources","text":"<pre><code>save_resources(path: str, replace: bool = False) -&gt; None\n</code></pre> <p>Saves a packaged resource from the plugin module to the data folder.</p> <p>The method locates a resource bundled within the plugin\u2019s package and copies it to the plugin\u2019s data folder, preserving its relative directory structure. If the target file already exists, it will only be replaced if <code>replace</code> is set to True.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The relative path to the resource inside the plugin\u2019s package. Directory separators are normalized to forward slashes.</p> required <code>replace</code> <code>bool</code> <p>Whether to overwrite the existing file if it already exists. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified resource cannot be found in the package.</p> <code>OSError</code> <p>If an error occurs while copying or creating directories.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand","title":"PluginCommand","text":"<pre><code>PluginCommand(\n    name: str,\n    description: str | None = None,\n    usages: list[str] | None = None,\n    aliases: list[str] | None = None,\n    permissions: list[str] | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Command</code></p> <p>Represents a Command belonging to a Plugin</p> <p>Attributes:</p> Name Type Description <code>executor</code> <code>CommandExecutor</code> <p>The CommandExecutor to run when parsing this command</p> <code>plugin</code> <code>Plugin</code> <p>The owner of this PluginCommand</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.executor","title":"executor  <code>property</code> <code>writable</code>","text":"<pre><code>executor: CommandExecutor\n</code></pre> <p>The CommandExecutor to run when parsing this command</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre> <p>The owner of this PluginCommand</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder","title":"PluginLoadOrder","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the order in which a plugin should be initialized and enabled.</p> <p>Attributes:</p> Name Type Description <code>POSTWORLD</code> <code>STARTUP</code>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder.POSTWORLD","title":"POSTWORLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>POSTWORLD = 1\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder.STARTUP","title":"STARTUP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STARTUP = 0\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader","title":"PluginLoader","text":"<pre><code>PluginLoader(server: Server)\n</code></pre> <p>Represents a plugin loader, which handles direct access to specific types of plugins</p> <p>Methods:</p> Name Description <code>disable_plugin</code> <p>Disables the specified plugin</p> <code>enable_plugin</code> <p>Enables the specified plugin</p> <code>load_plugin</code> <p>Loads the plugin contained in the specified file</p> <code>load_plugins</code> <p>Loads the plugin contained within the specified directory</p> <p>Attributes:</p> Name Type Description <code>plugin_file_filters</code> <code>list[str]</code> <p>Returns a list of all filename filters expected by this PluginLoader</p> <code>server</code> <code>Server</code> <p>Retrieves the Server object associated with the PluginLoader.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.plugin_file_filters","title":"plugin_file_filters  <code>property</code>","text":"<pre><code>plugin_file_filters: list[str]\n</code></pre> <p>Returns a list of all filename filters expected by this PluginLoader</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.server","title":"server  <code>property</code>","text":"<pre><code>server: Server\n</code></pre> <p>Retrieves the Server object associated with the PluginLoader.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.disable_plugin","title":"disable_plugin","text":"<pre><code>disable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Disables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.enable_plugin","title":"enable_plugin","text":"<pre><code>enable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Enables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.load_plugin","title":"load_plugin","text":"<pre><code>load_plugin(file: str) -&gt; Plugin\n</code></pre> <p>Loads the plugin contained in the specified file</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.load_plugins","title":"load_plugins","text":"<pre><code>load_plugins(directory: str) -&gt; list[Plugin]\n</code></pre> <p>Loads the plugin contained within the specified directory</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager","title":"PluginManager","text":"<p>Represents a plugin manager that handles all plugins from the Server</p> <p>Methods:</p> Name Description <code>call_event</code> <p>Calls an event which will be passed to plugins.</p> <code>clear_plugins</code> <p>Disables and removes all plugins</p> <code>disable_plugin</code> <p>Disables the specified plugin</p> <code>disable_plugins</code> <p>Disables all the loaded plugins</p> <code>enable_plugin</code> <p>Enables the specified plugin</p> <code>enable_plugins</code> <p>Enable all the loaded plugins</p> <code>get_default_perm_subscriptions</code> <p>Gets a set containing all subscribed Permissibles to the given default list, by permission level.</p> <code>get_default_permissions</code> <p>Gets the default permissions for the given permission level.</p> <code>get_permission</code> <p>Gets a Permission from its fully qualified name.</p> <code>get_permission_subscriptions</code> <p>Gets a set containing all subscribed Permissibles to the given permission.</p> <code>get_plugin</code> <p>Checks if the given plugin is loaded and returns it when applicable.</p> <code>is_plugin_enabled</code> <code>load_plugin</code> <p>Loads the plugin in the specified file</p> <code>load_plugins</code> <code>recalculate_permission_defaults</code> <p>Recalculates the defaults for the given Permission.</p> <code>register_event</code> <p>Registers the given event</p> <code>remove_permission</code> <code>subscribe_to_default_perms</code> <p>Subscribes to the given Default permissions by permission level.</p> <code>subscribe_to_permission</code> <p>Subscribes the given Permissible for information about the requested Permission.</p> <code>unsubscribe_from_default_perms</code> <p>Unsubscribes from the given Default permissions by permission level.</p> <code>unsubscribe_from_permission</code> <p>Unsubscribes the given Permissible for information about the requested Permission.</p> <p>Attributes:</p> Name Type Description <code>permissions</code> <code>set[Permission]</code> <p>Gets a set of all registered permissions.</p> <code>plugins</code> <code>list[Plugin]</code> <p>Gets a list of all currently loaded plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.permissions","title":"permissions  <code>property</code>","text":"<pre><code>permissions: set[Permission]\n</code></pre> <p>Gets a set of all registered permissions.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.plugins","title":"plugins  <code>property</code>","text":"<pre><code>plugins: list[Plugin]\n</code></pre> <p>Gets a list of all currently loaded plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.call_event","title":"call_event","text":"<pre><code>call_event(event: Event) -&gt; None\n</code></pre> <p>Calls an event which will be passed to plugins.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.clear_plugins","title":"clear_plugins","text":"<pre><code>clear_plugins() -&gt; None\n</code></pre> <p>Disables and removes all plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.disable_plugin","title":"disable_plugin","text":"<pre><code>disable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Disables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.disable_plugins","title":"disable_plugins","text":"<pre><code>disable_plugins() -&gt; None\n</code></pre> <p>Disables all the loaded plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.enable_plugin","title":"enable_plugin","text":"<pre><code>enable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Enables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.enable_plugins","title":"enable_plugins","text":"<pre><code>enable_plugins() -&gt; None\n</code></pre> <p>Enable all the loaded plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_default_perm_subscriptions","title":"get_default_perm_subscriptions","text":"<pre><code>get_default_perm_subscriptions(\n    level: PermissionLevel,\n) -&gt; set[Permissible]\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given default list, by permission level.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_default_permissions","title":"get_default_permissions","text":"<pre><code>get_default_permissions(\n    level: PermissionLevel,\n) -&gt; list[Permission]\n</code></pre> <p>Gets the default permissions for the given permission level.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_permission","title":"get_permission","text":"<pre><code>get_permission(name: str) -&gt; Permission\n</code></pre> <p>Gets a Permission from its fully qualified name.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_permission_subscriptions","title":"get_permission_subscriptions","text":"<pre><code>get_permission_subscriptions(\n    permission: str,\n) -&gt; set[Permissible]\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given permission.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_plugin","title":"get_plugin","text":"<pre><code>get_plugin(name: str) -&gt; Plugin\n</code></pre> <p>Checks if the given plugin is loaded and returns it when applicable.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.is_plugin_enabled","title":"is_plugin_enabled","text":"<pre><code>is_plugin_enabled(plugin: str) -&gt; bool\n</code></pre> <p>Checks if the given plugin is enabled or not</p> <pre><code>is_plugin_enabled(plugin: Plugin) -&gt; bool\n</code></pre> <p>Checks if the given plugin is enabled or not</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.load_plugin","title":"load_plugin","text":"<pre><code>load_plugin(file: str) -&gt; Plugin\n</code></pre> <p>Loads the plugin in the specified file</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.load_plugins","title":"load_plugins","text":"<pre><code>load_plugins(directory: str) -&gt; list[Plugin]\n</code></pre> <p>Loads the plugin contained within the specified directory</p> <pre><code>load_plugins(files: list[str]) -&gt; list[Plugin]\n</code></pre> <p>Loads the plugins in the list of the files</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.recalculate_permission_defaults","title":"recalculate_permission_defaults","text":"<pre><code>recalculate_permission_defaults(perm: Permission) -&gt; None\n</code></pre> <p>Recalculates the defaults for the given Permission.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.register_event","title":"register_event","text":"<pre><code>register_event(\n    name: str,\n    executor: Callable[[Event], None],\n    priority: EventPriority,\n    plugin: Plugin,\n    ignore_cancelled: bool,\n) -&gt; None\n</code></pre> <p>Registers the given event</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.remove_permission","title":"remove_permission","text":"<pre><code>remove_permission(perm: Permission) -&gt; None\n</code></pre> <p>Removes a Permission registration from this plugin manager by permission object.</p> <pre><code>remove_permission(name: str) -&gt; None\n</code></pre> <p>Removes a Permission registration from this plugin manager by name.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.subscribe_to_default_perms","title":"subscribe_to_default_perms","text":"<pre><code>subscribe_to_default_perms(\n    level: PermissionLevel, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Subscribes to the given Default permissions by permission level.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.subscribe_to_permission","title":"subscribe_to_permission","text":"<pre><code>subscribe_to_permission(\n    permission: str, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Subscribes the given Permissible for information about the requested Permission.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.unsubscribe_from_default_perms","title":"unsubscribe_from_default_perms","text":"<pre><code>unsubscribe_from_default_perms(\n    level: PermissionLevel, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Unsubscribes from the given Default permissions by permission level.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.unsubscribe_from_permission","title":"unsubscribe_from_permission","text":"<pre><code>unsubscribe_from_permission(\n    permission: str, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Unsubscribes the given Permissible for information about the requested Permission.</p>"},{"location":"reference/python/plugin/#endstone.plugin.Service","title":"Service","text":"<pre><code>Service()\n</code></pre> <p>Represents a list of methods.</p>"},{"location":"reference/python/plugin/#endstone.plugin.ServiceManager","title":"ServiceManager","text":"<p>Represent a service manager that manages services and service providers.</p> <p>Methods:</p> Name Description <code>load</code> <code>register</code> <p>Register a provider of a service.</p> <code>unregister</code> <code>unregister_all</code> <p>Unregister all the services registered by a particular plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.ServiceManager.load","title":"load","text":"<pre><code>load(name: str) -&gt; Service\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.ServiceManager.register","title":"register","text":"<pre><code>register(\n    name: str,\n    provider: Service,\n    plugin: Plugin,\n    priority: ServicePriority,\n) -&gt; None\n</code></pre> <p>Register a provider of a service.</p>"},{"location":"reference/python/plugin/#endstone.plugin.ServiceManager.unregister","title":"unregister","text":"<pre><code>unregister(name: str, provider: Service) -&gt; None\n</code></pre> <p>Unregister a particular provider for a particular service.</p> <pre><code>unregister(provider: Service) -&gt; None\n</code></pre> <p>Unregister a particular provider.</p>"},{"location":"reference/python/plugin/#endstone.plugin.ServiceManager.unregister_all","title":"unregister_all","text":"<pre><code>unregister_all(plugin: Plugin) -&gt; None\n</code></pre> <p>Unregister all the services registered by a particular plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.ServicePriority","title":"ServicePriority","text":"<p>               Bases: <code>IntEnum</code></p> <p>Represents various priorities of a provider.</p> <p>Attributes:</p> Name Type Description <code>HIGH</code> <code>HIGHEST</code> <code>LOW</code> <code>LOWEST</code> <code>NORMAL</code>"},{"location":"reference/python/plugin/#endstone.plugin.ServicePriority.HIGH","title":"HIGH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HIGH = 3\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.ServicePriority.HIGHEST","title":"HIGHEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HIGHEST = 4\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.ServicePriority.LOW","title":"LOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOW = 1\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.ServicePriority.LOWEST","title":"LOWEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOWEST = 0\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.ServicePriority.NORMAL","title":"NORMAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NORMAL = 2\n</code></pre>"},{"location":"reference/python/scheduler/","title":"Scheduler","text":""},{"location":"reference/python/scheduler/#endstone.scheduler","title":"endstone.scheduler","text":"<p>Classes relating to letting plugins run code at specific time intervals.</p> <p>Classes:</p> Name Description <code>Scheduler</code> <p>Represents a scheduler that executes various tasks</p> <code>Task</code> <p>Represents a task being executed by the scheduler</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler","title":"Scheduler","text":"<p>Represents a scheduler that executes various tasks</p> <p>Methods:</p> Name Description <code>cancel_task</code> <p>Removes task from scheduler.</p> <code>cancel_tasks</code> <p>Removes all tasks associated with a particular plugin from the scheduler.</p> <code>get_pending_tasks</code> <p>Returns a vector of all pending tasks.</p> <code>is_queued</code> <p>Check if the task queued to be run later.</p> <code>is_running</code> <p>Check if the task currently running.</p> <code>run_task</code> <p>Returns a task that will be executed synchronously</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.cancel_task","title":"cancel_task","text":"<pre><code>cancel_task(id: int) -&gt; None\n</code></pre> <p>Removes task from scheduler.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.cancel_tasks","title":"cancel_tasks","text":"<pre><code>cancel_tasks(plugin: Plugin) -&gt; None\n</code></pre> <p>Removes all tasks associated with a particular plugin from the scheduler.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.get_pending_tasks","title":"get_pending_tasks","text":"<pre><code>get_pending_tasks() -&gt; list[Task]\n</code></pre> <p>Returns a vector of all pending tasks.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.is_queued","title":"is_queued","text":"<pre><code>is_queued(id: int) -&gt; bool\n</code></pre> <p>Check if the task queued to be run later.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.is_running","title":"is_running","text":"<pre><code>is_running(id: int) -&gt; bool\n</code></pre> <p>Check if the task currently running.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.run_task","title":"run_task","text":"<pre><code>run_task(\n    plugin: Plugin,\n    task: Callable[[], None],\n    delay: int = 0,\n    period: int = 0,\n) -&gt; Task\n</code></pre> <p>Returns a task that will be executed synchronously</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task","title":"Task","text":"<p>Represents a task being executed by the scheduler</p> <p>Methods:</p> Name Description <code>cancel</code> <p>Attempts to cancel this task.</p> <p>Attributes:</p> Name Type Description <code>is_cancelled</code> <code>bool</code> <p>Returns true if the task has been cancelled.</p> <code>is_sync</code> <code>bool</code> <p>Returns true if the task is run by server thread.</p> <code>owner</code> <code>Plugin</code> <p>Returns the Plugin that owns the task.</p> <code>task_id</code> <code>int</code> <p>Returns the task id.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.is_cancelled","title":"is_cancelled  <code>property</code>","text":"<pre><code>is_cancelled: bool\n</code></pre> <p>Returns true if the task has been cancelled.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.is_sync","title":"is_sync  <code>property</code>","text":"<pre><code>is_sync: bool\n</code></pre> <p>Returns true if the task is run by server thread.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: Plugin\n</code></pre> <p>Returns the Plugin that owns the task.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.task_id","title":"task_id  <code>property</code>","text":"<pre><code>task_id: int\n</code></pre> <p>Returns the task id.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.cancel","title":"cancel","text":"<pre><code>cancel() -&gt; None\n</code></pre> <p>Attempts to cancel this task.</p>"},{"location":"reference/python/scoreboard/","title":"Scoreboard","text":""},{"location":"reference/python/scoreboard/#endstone.scoreboard","title":"endstone.scoreboard","text":"<p>Classes relating to manage the client side score display system.</p> <p>Classes:</p> Name Description <code>Criteria</code> <p>Represents a scoreboard criteria.</p> <code>DisplaySlot</code> <p>Locations for displaying objectives to the player</p> <code>Objective</code> <p>Represents an objective on a scoreboard that can show scores specific to entries.</p> <code>ObjectiveSortOrder</code> <p>Represents the sort order of objectives on a DisplaySlot.</p> <code>RenderType</code> <p>Controls the way in which an Objective is rendered on the client side.</p> <code>Score</code> <p>Represents a score for an objective on a scoreboard.</p> <code>Scoreboard</code> <p>Represents a scoreboard</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Criteria","title":"Criteria","text":"<p>Represents a scoreboard criteria.</p> <p>Classes:</p> Name Description <code>Type</code> <p>Represents a scoreboard criteria.</p> <p>Attributes:</p> Name Type Description <code>DUMMY</code> <p>The dummy criteria. Not changed by the server.</p> <code>default_render_type</code> <code>RenderType</code> <code>is_read_only</code> <code>bool</code> <code>name</code> <code>str</code>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Criteria.DUMMY","title":"DUMMY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DUMMY = DUMMY\n</code></pre> <p>The dummy criteria. Not changed by the server.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Criteria.default_render_type","title":"default_render_type  <code>property</code>","text":"<pre><code>default_render_type: RenderType\n</code></pre>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Criteria.is_read_only","title":"is_read_only  <code>property</code>","text":"<pre><code>is_read_only: bool\n</code></pre>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Criteria.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Criteria.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Represents a scoreboard criteria.</p> <p>Attributes:</p> Name Type Description <code>DUMMY</code> <p>The dummy criteria. Not changed by the server.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Criteria.Type.DUMMY","title":"DUMMY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DUMMY = 0\n</code></pre> <p>The dummy criteria. Not changed by the server.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.DisplaySlot","title":"DisplaySlot","text":"<p>               Bases: <code>Enum</code></p> <p>Locations for displaying objectives to the player</p> <p>Attributes:</p> Name Type Description <code>BELOW_NAME</code> <p>Displays the score below the player's name.</p> <code>PLAYER_LIST</code> <p>Displays the score in the player list on the pause screen.</p> <code>SIDE_BAR</code> <p>Displays the score on the side of the player's screen.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.DisplaySlot.BELOW_NAME","title":"BELOW_NAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BELOW_NAME = 0\n</code></pre> <p>Displays the score below the player's name.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.DisplaySlot.PLAYER_LIST","title":"PLAYER_LIST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLAYER_LIST = 1\n</code></pre> <p>Displays the score in the player list on the pause screen.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.DisplaySlot.SIDE_BAR","title":"SIDE_BAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SIDE_BAR = 2\n</code></pre> <p>Displays the score on the side of the player's screen.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective","title":"Objective","text":"<p>Represents an objective on a scoreboard that can show scores specific to entries.</p> <p>Methods:</p> Name Description <code>get_score</code> <p>Gets an entry's Score for this objective</p> <code>set_display</code> <p>Sets the display slot and sort order for this objective. This will remove it from any other display slot.</p> <code>unregister</code> <p>Unregisters this objective from the associated Scoreboard.</p> <p>Attributes:</p> Name Type Description <code>criteria</code> <code>Criteria</code> <p>Gets the criteria this objective tracks</p> <code>display_name</code> <code>str</code> <p>Gets or sets the name displayed to players for this objective</p> <code>display_slot</code> <code>DisplaySlot | None</code> <p>Gets or sets the display slot this objective is displayed at</p> <code>is_displayed</code> <code>bool</code> <p>Gets if the objective is currently displayed in a slot.</p> <code>is_modifiable</code> <code>bool</code> <p>Gets if the objective's scores can be modified directly by a plugin</p> <code>name</code> <code>str</code> <p>Gets the name of this Objective</p> <code>render_type</code> <code>RenderType</code> <p>Gets the manner in which this objective will be rendered.</p> <code>scoreboard</code> <code>Scoreboard</code> <p>Gets the scoreboard to which this objective is attached</p> <code>sort_order</code> <code>ObjectiveSortOrder | None</code> <p>Gets or sets the sort order for this objective</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.criteria","title":"criteria  <code>property</code>","text":"<pre><code>criteria: Criteria\n</code></pre> <p>Gets the criteria this objective tracks</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.display_name","title":"display_name  <code>property</code> <code>writable</code>","text":"<pre><code>display_name: str\n</code></pre> <p>Gets or sets the name displayed to players for this objective</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.display_slot","title":"display_slot  <code>property</code> <code>writable</code>","text":"<pre><code>display_slot: DisplaySlot | None\n</code></pre> <p>Gets or sets the display slot this objective is displayed at</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.is_displayed","title":"is_displayed  <code>property</code>","text":"<pre><code>is_displayed: bool\n</code></pre> <p>Gets if the objective is currently displayed in a slot.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.is_modifiable","title":"is_modifiable  <code>property</code>","text":"<pre><code>is_modifiable: bool\n</code></pre> <p>Gets if the objective's scores can be modified directly by a plugin</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of this Objective</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.render_type","title":"render_type  <code>property</code>","text":"<pre><code>render_type: RenderType\n</code></pre> <p>Gets the manner in which this objective will be rendered.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.scoreboard","title":"scoreboard  <code>property</code>","text":"<pre><code>scoreboard: Scoreboard\n</code></pre> <p>Gets the scoreboard to which this objective is attached</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.sort_order","title":"sort_order  <code>property</code> <code>writable</code>","text":"<pre><code>sort_order: ObjectiveSortOrder | None\n</code></pre> <p>Gets or sets the sort order for this objective</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.get_score","title":"get_score","text":"<pre><code>get_score(entry: Player | Actor | str) -&gt; Score\n</code></pre> <p>Gets an entry's Score for this objective</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.set_display","title":"set_display","text":"<pre><code>set_display(\n    slot: DisplaySlot | None,\n    order: ObjectiveSortOrder | None = None,\n) -&gt; None\n</code></pre> <p>Sets the display slot and sort order for this objective. This will remove it from any other display slot.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Objective.unregister","title":"unregister","text":"<pre><code>unregister() -&gt; None\n</code></pre> <p>Unregisters this objective from the associated Scoreboard.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.ObjectiveSortOrder","title":"ObjectiveSortOrder","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the sort order of objectives on a DisplaySlot.</p> <p>Attributes:</p> Name Type Description <code>ASCENDING</code> <p>Sorts the objectives in the ascending order</p> <code>DESCENDING</code> <p>Sorts the objectives in the descending order</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.ObjectiveSortOrder.ASCENDING","title":"ASCENDING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ASCENDING = 0\n</code></pre> <p>Sorts the objectives in the ascending order</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.ObjectiveSortOrder.DESCENDING","title":"DESCENDING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DESCENDING = 1\n</code></pre> <p>Sorts the objectives in the descending order</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.RenderType","title":"RenderType","text":"<p>               Bases: <code>Enum</code></p> <p>Controls the way in which an Objective is rendered on the client side.</p> <p>Attributes:</p> Name Type Description <code>HEARTS</code> <code>INTEGER</code>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.RenderType.HEARTS","title":"HEARTS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HEARTS = 1\n</code></pre>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.RenderType.INTEGER","title":"INTEGER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INTEGER = 0\n</code></pre>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Score","title":"Score","text":"<p>Represents a score for an objective on a scoreboard.</p> <p>Attributes:</p> Name Type Description <code>entry</code> <code>Player | Actor | str</code> <p>Gets the entry being tracked by this Score</p> <code>is_score_set</code> <code>bool</code> <p>Shows if this score has been set at any point in time.</p> <code>objective</code> <code>Objective</code> <p>Gets the Objective being tracked by this Score.</p> <code>scoreboard</code> <code>Scoreboard</code> <p>Gets the scoreboard for the associated objective.</p> <code>value</code> <code>int</code> <p>Gets or sets the current score.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Score.entry","title":"entry  <code>property</code>","text":"<pre><code>entry: Player | Actor | str\n</code></pre> <p>Gets the entry being tracked by this Score</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Score.is_score_set","title":"is_score_set  <code>property</code>","text":"<pre><code>is_score_set: bool\n</code></pre> <p>Shows if this score has been set at any point in time.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Score.objective","title":"objective  <code>property</code>","text":"<pre><code>objective: Objective\n</code></pre> <p>Gets the Objective being tracked by this Score.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Score.scoreboard","title":"scoreboard  <code>property</code>","text":"<pre><code>scoreboard: Scoreboard\n</code></pre> <p>Gets the scoreboard for the associated objective.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Score.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value: int\n</code></pre> <p>Gets or sets the current score.</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard","title":"Scoreboard","text":"<p>Represents a scoreboard</p> <p>Methods:</p> Name Description <code>add_objective</code> <p>Registers an Objective on this Scoreboard with a name displayed to players</p> <code>clear_slot</code> <p>Clears any objective in the specified slot</p> <code>get_objective</code> <code>get_objectives_by_criteria</code> <p>Gets all Objectives of a Criteria on the Scoreboard</p> <code>get_scores</code> <p>Gets all scores for an entry on this Scoreboard</p> <code>reset_scores</code> <p>Removes all scores for an entry on this Scoreboard</p> <p>Attributes:</p> Name Type Description <code>entries</code> <code>list[Player | Actor | str]</code> <p>Gets all entries tracked by this Scoreboard</p> <code>objectives</code> <code>list[Objective]</code> <p>Gets all Objectives on this Scoreboard</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.entries","title":"entries  <code>property</code>","text":"<pre><code>entries: list[Player | Actor | str]\n</code></pre> <p>Gets all entries tracked by this Scoreboard</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.objectives","title":"objectives  <code>property</code>","text":"<pre><code>objectives: list[Objective]\n</code></pre> <p>Gets all Objectives on this Scoreboard</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.add_objective","title":"add_objective","text":"<pre><code>add_objective(\n    name: str,\n    criteria: Type,\n    display_name: str | None = None,\n    render_type: RenderType = INTEGER,\n) -&gt; Objective\n</code></pre> <p>Registers an Objective on this Scoreboard with a name displayed to players</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.clear_slot","title":"clear_slot","text":"<pre><code>clear_slot(slot: DisplaySlot) -&gt; None\n</code></pre> <p>Clears any objective in the specified slot</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.get_objective","title":"get_objective","text":"<pre><code>get_objective(name: str) -&gt; Objective\n</code></pre> <p>Gets an Objective on this Scoreboard by name</p> <pre><code>get_objective(slot: DisplaySlot) -&gt; Objective\n</code></pre> <p>Gets the Objective currently displayed in a DisplaySlot on this Scoreboard</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.get_objectives_by_criteria","title":"get_objectives_by_criteria","text":"<pre><code>get_objectives_by_criteria(\n    criteria: Type,\n) -&gt; list[Objective]\n</code></pre> <p>Gets all Objectives of a Criteria on the Scoreboard</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.get_scores","title":"get_scores","text":"<pre><code>get_scores(entry: Player | Actor | str) -&gt; list[Score]\n</code></pre> <p>Gets all scores for an entry on this Scoreboard</p>"},{"location":"reference/python/scoreboard/#endstone.scoreboard.Scoreboard.reset_scores","title":"reset_scores","text":"<pre><code>reset_scores(entry: Player | Actor | str) -&gt; None\n</code></pre> <p>Removes all scores for an entry on this Scoreboard</p>"},{"location":"reference/python/server/","title":"Server","text":""},{"location":"reference/python/server/#endstone.Server","title":"endstone.Server","text":"<p>Represents a server implementation.</p> <p>Methods:</p> Name Description <code>broadcast</code> <p>Broadcasts the specified message to every user with the given permission name.</p> <code>broadcast_message</code> <p>Broadcasts the specified message to every user with permission endstone.broadcast.user</p> <code>create_block_data</code> <p>Creates a new BlockData instance for the specified block type, with all properties initialized to defaults, except for those provided.</p> <code>create_boss_bar</code> <p>Creates a boss bar instance to display to players. The progress defaults to 1.0.</p> <code>create_map</code> <p>Create a new map with an automatically assigned ID.</p> <code>create_scoreboard</code> <p>Creates a new Scoreboard to be tracked by the server.</p> <code>dispatch_command</code> <p>Dispatches a command on this server, and executes it if found.</p> <code>get_map</code> <p>Gets the map from the given map ID.</p> <code>get_player</code> <code>get_plugin_command</code> <p>Gets a PluginCommand with the given name or alias.</p> <code>reload</code> <p>Reloads the server configuration, functions, scripts and plugins.</p> <code>reload_data</code> <p>Reload only the Minecraft data for the server.</p> <code>shutdown</code> <p>Shutdowns the server, stopping everything.</p> <p>Attributes:</p> Name Type Description <code>average_mspt</code> <code>float</code> <p>Gets the average milliseconds per tick (MSPT).</p> <code>average_tick_usage</code> <code>float</code> <p>Gets the average tick usage of the server.</p> <code>average_tps</code> <code>float</code> <p>Gets the average ticks per second (TPS).</p> <code>ban_list</code> <code>PlayerBanList</code> <p>Gets the player ban list.</p> <code>command_sender</code> <code>ConsoleCommandSender</code> <p>Gets a CommandSender for this server.</p> <code>current_mspt</code> <code>float</code> <p>Gets the current milliseconds per tick (MSPT).</p> <code>current_tick_usage</code> <code>float</code> <p>Gets the current tick usage of the server.</p> <code>current_tps</code> <code>float</code> <p>Gets the current ticks per second (TPS).</p> <code>enchantment_registry</code> <code>EnchantmentRegistry</code> <p>Returns the registry for all the enchantments.</p> <code>ip_ban_list</code> <code>IpBanList</code> <p>Gets the IP ban list.</p> <code>item_factory</code> <code>ItemFactory</code> <p>Gets the instance of the item factory (for ItemMeta).</p> <code>item_registry</code> <code>ItemRegistry</code> <p>Returns the registry for all the item types.</p> <code>language</code> <code>Language</code> <p>Gets the current language interface used by the server.</p> <code>level</code> <code>Level</code> <p>Gets the server level.</p> <code>logger</code> <code>Logger</code> <p>Returns the primary logger associated with this server instance.</p> <code>max_players</code> <code>int</code> <p>The maximum amount of players which can login to this server.</p> <code>minecraft_version</code> <code>str</code> <p>Gets the Minecraft version that this server is running.</p> <code>name</code> <code>str</code> <p>Gets the name of this server implementation.</p> <code>online_mode</code> <code>bool</code> <p>Gets whether the Server is in online mode or not.</p> <code>online_players</code> <code>list[Player]</code> <p>Gets a list of all currently online players.</p> <code>plugin_manager</code> <code>PluginManager</code> <p>Gets the plugin manager for interfacing with plugins.</p> <code>port</code> <code>int</code> <p>Get the game port that the server runs on.</p> <code>port_v6</code> <code>int</code> <p>Get the game port (IPv6) that the server runs on.</p> <code>protocol_version</code> <code>int</code> <p>Gets the network protocol version that this server supports.</p> <code>scheduler</code> <code>Scheduler</code> <p>Gets the scheduler for managing scheduled events.</p> <code>scoreboard</code> <code>Scoreboard</code> <p>Gets the primary Scoreboard controlled by the server.</p> <code>service_manager</code> <code>ServiceManager</code> <p>Gets the service manager.</p> <code>start_time</code> <code>datetime</code> <p>Gets the start time of the server.</p> <code>version</code> <code>str</code> <p>Gets the version of this server implementation.</p>"},{"location":"reference/python/server/#endstone.Server.average_mspt","title":"average_mspt  <code>property</code>","text":"<pre><code>average_mspt: float\n</code></pre> <p>Gets the average milliseconds per tick (MSPT).</p>"},{"location":"reference/python/server/#endstone.Server.average_tick_usage","title":"average_tick_usage  <code>property</code>","text":"<pre><code>average_tick_usage: float\n</code></pre> <p>Gets the average tick usage of the server.</p>"},{"location":"reference/python/server/#endstone.Server.average_tps","title":"average_tps  <code>property</code>","text":"<pre><code>average_tps: float\n</code></pre> <p>Gets the average ticks per second (TPS).</p>"},{"location":"reference/python/server/#endstone.Server.ban_list","title":"ban_list  <code>property</code>","text":"<pre><code>ban_list: PlayerBanList\n</code></pre> <p>Gets the player ban list.</p>"},{"location":"reference/python/server/#endstone.Server.command_sender","title":"command_sender  <code>property</code>","text":"<pre><code>command_sender: ConsoleCommandSender\n</code></pre> <p>Gets a CommandSender for this server.</p>"},{"location":"reference/python/server/#endstone.Server.current_mspt","title":"current_mspt  <code>property</code>","text":"<pre><code>current_mspt: float\n</code></pre> <p>Gets the current milliseconds per tick (MSPT).</p>"},{"location":"reference/python/server/#endstone.Server.current_tick_usage","title":"current_tick_usage  <code>property</code>","text":"<pre><code>current_tick_usage: float\n</code></pre> <p>Gets the current tick usage of the server.</p>"},{"location":"reference/python/server/#endstone.Server.current_tps","title":"current_tps  <code>property</code>","text":"<pre><code>current_tps: float\n</code></pre> <p>Gets the current ticks per second (TPS).</p>"},{"location":"reference/python/server/#endstone.Server.enchantment_registry","title":"enchantment_registry  <code>property</code>","text":"<pre><code>enchantment_registry: EnchantmentRegistry\n</code></pre> <p>Returns the registry for all the enchantments.</p>"},{"location":"reference/python/server/#endstone.Server.ip_ban_list","title":"ip_ban_list  <code>property</code>","text":"<pre><code>ip_ban_list: IpBanList\n</code></pre> <p>Gets the IP ban list.</p>"},{"location":"reference/python/server/#endstone.Server.item_factory","title":"item_factory  <code>property</code>","text":"<pre><code>item_factory: ItemFactory\n</code></pre> <p>Gets the instance of the item factory (for ItemMeta).</p>"},{"location":"reference/python/server/#endstone.Server.item_registry","title":"item_registry  <code>property</code>","text":"<pre><code>item_registry: ItemRegistry\n</code></pre> <p>Returns the registry for all the item types.</p>"},{"location":"reference/python/server/#endstone.Server.language","title":"language  <code>property</code>","text":"<pre><code>language: Language\n</code></pre> <p>Gets the current language interface used by the server.</p>"},{"location":"reference/python/server/#endstone.Server.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Gets the server level.</p>"},{"location":"reference/python/server/#endstone.Server.logger","title":"logger  <code>property</code>","text":"<pre><code>logger: Logger\n</code></pre> <p>Returns the primary logger associated with this server instance.</p>"},{"location":"reference/python/server/#endstone.Server.max_players","title":"max_players  <code>property</code> <code>writable</code>","text":"<pre><code>max_players: int\n</code></pre> <p>The maximum amount of players which can login to this server.</p>"},{"location":"reference/python/server/#endstone.Server.minecraft_version","title":"minecraft_version  <code>property</code>","text":"<pre><code>minecraft_version: str\n</code></pre> <p>Gets the Minecraft version that this server is running.</p>"},{"location":"reference/python/server/#endstone.Server.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of this server implementation.</p>"},{"location":"reference/python/server/#endstone.Server.online_mode","title":"online_mode  <code>property</code>","text":"<pre><code>online_mode: bool\n</code></pre> <p>Gets whether the Server is in online mode or not.</p>"},{"location":"reference/python/server/#endstone.Server.online_players","title":"online_players  <code>property</code>","text":"<pre><code>online_players: list[Player]\n</code></pre> <p>Gets a list of all currently online players.</p>"},{"location":"reference/python/server/#endstone.Server.plugin_manager","title":"plugin_manager  <code>property</code>","text":"<pre><code>plugin_manager: PluginManager\n</code></pre> <p>Gets the plugin manager for interfacing with plugins.</p>"},{"location":"reference/python/server/#endstone.Server.port","title":"port  <code>property</code>","text":"<pre><code>port: int\n</code></pre> <p>Get the game port that the server runs on.</p>"},{"location":"reference/python/server/#endstone.Server.port_v6","title":"port_v6  <code>property</code>","text":"<pre><code>port_v6: int\n</code></pre> <p>Get the game port (IPv6) that the server runs on.</p>"},{"location":"reference/python/server/#endstone.Server.protocol_version","title":"protocol_version  <code>property</code>","text":"<pre><code>protocol_version: int\n</code></pre> <p>Gets the network protocol version that this server supports.</p>"},{"location":"reference/python/server/#endstone.Server.scheduler","title":"scheduler  <code>property</code>","text":"<pre><code>scheduler: Scheduler\n</code></pre> <p>Gets the scheduler for managing scheduled events.</p>"},{"location":"reference/python/server/#endstone.Server.scoreboard","title":"scoreboard  <code>property</code>","text":"<pre><code>scoreboard: Scoreboard\n</code></pre> <p>Gets the primary Scoreboard controlled by the server.</p>"},{"location":"reference/python/server/#endstone.Server.service_manager","title":"service_manager  <code>property</code>","text":"<pre><code>service_manager: ServiceManager\n</code></pre> <p>Gets the service manager.</p>"},{"location":"reference/python/server/#endstone.Server.start_time","title":"start_time  <code>property</code>","text":"<pre><code>start_time: datetime\n</code></pre> <p>Gets the start time of the server.</p>"},{"location":"reference/python/server/#endstone.Server.version","title":"version  <code>property</code>","text":"<pre><code>version: str\n</code></pre> <p>Gets the version of this server implementation.</p>"},{"location":"reference/python/server/#endstone.Server.broadcast","title":"broadcast","text":"<pre><code>broadcast(\n    message: str | Translatable, permission: str\n) -&gt; None\n</code></pre> <p>Broadcasts the specified message to every user with the given permission name.</p>"},{"location":"reference/python/server/#endstone.Server.broadcast_message","title":"broadcast_message","text":"<pre><code>broadcast_message(message: str | Translatable) -&gt; None\n</code></pre> <p>Broadcasts the specified message to every user with permission endstone.broadcast.user</p>"},{"location":"reference/python/server/#endstone.Server.create_block_data","title":"create_block_data","text":"<pre><code>create_block_data(\n    type: str,\n    block_states: (\n        Mapping[str, bool | str | int] | None\n    ) = None,\n) -&gt; BlockData\n</code></pre> <p>Creates a new BlockData instance for the specified block type, with all properties initialized to defaults, except for those provided.</p>"},{"location":"reference/python/server/#endstone.Server.create_boss_bar","title":"create_boss_bar","text":"<pre><code>create_boss_bar(\n    title: str,\n    color: BarColor,\n    style: BarStyle,\n    flags: list[BarFlag] | None = None,\n) -&gt; BossBar\n</code></pre> <p>Creates a boss bar instance to display to players. The progress defaults to 1.0.</p>"},{"location":"reference/python/server/#endstone.Server.create_map","title":"create_map","text":"<pre><code>create_map(dimension: Dimension) -&gt; MapView\n</code></pre> <p>Create a new map with an automatically assigned ID.</p>"},{"location":"reference/python/server/#endstone.Server.create_scoreboard","title":"create_scoreboard","text":"<pre><code>create_scoreboard() -&gt; Scoreboard\n</code></pre> <p>Creates a new Scoreboard to be tracked by the server.</p>"},{"location":"reference/python/server/#endstone.Server.dispatch_command","title":"dispatch_command","text":"<pre><code>dispatch_command(\n    sender: CommandSender, command_line: str\n) -&gt; bool\n</code></pre> <p>Dispatches a command on this server, and executes it if found.</p>"},{"location":"reference/python/server/#endstone.Server.get_map","title":"get_map","text":"<pre><code>get_map(id: int) -&gt; MapView\n</code></pre> <p>Gets the map from the given map ID.</p>"},{"location":"reference/python/server/#endstone.Server.get_player","title":"get_player","text":"<pre><code>get_player(name: str) -&gt; Player\n</code></pre> <p>Gets the player with the exact given name, case insensitive.</p> <pre><code>get_player(unique_id: UUID) -&gt; Player\n</code></pre> <p>Gets the player with the given UUID.</p>"},{"location":"reference/python/server/#endstone.Server.get_plugin_command","title":"get_plugin_command","text":"<pre><code>get_plugin_command(name: str) -&gt; PluginCommand\n</code></pre> <p>Gets a PluginCommand with the given name or alias.</p>"},{"location":"reference/python/server/#endstone.Server.reload","title":"reload","text":"<pre><code>reload() -&gt; None\n</code></pre> <p>Reloads the server configuration, functions, scripts and plugins.</p>"},{"location":"reference/python/server/#endstone.Server.reload_data","title":"reload_data","text":"<pre><code>reload_data() -&gt; None\n</code></pre> <p>Reload only the Minecraft data for the server.</p>"},{"location":"reference/python/server/#endstone.Server.shutdown","title":"shutdown","text":"<pre><code>shutdown() -&gt; None\n</code></pre> <p>Shutdowns the server, stopping everything.</p>"},{"location":"tutorials/create-your-first-plugin/","title":"Create your first plugin","text":""},{"location":"tutorials/create-your-first-plugin/#prerequisites","title":"Prerequisites","text":"Python C++ <p>To develop your first plugin with the Python API, you will have to install the following prerequisites:</p> <ul> <li>JetBrains PyCharm</li> <li>Python (&gt;= 3.9)</li> <li>endstone Python package</li> </ul> <p>To develop your first plugin with the C++ API, you will have to install the following prerequisites:</p> <ul> <li>JetBrains CLion</li> <li>CMake (&gt;= 3.15)</li> <li>C++ Compiler<ul> <li> Windows: Visual Studio 2017 or newer</li> <li> Linux: LLVM Toolchain 5 or newer with Clang and libc++</li> </ul> </li> </ul>"},{"location":"tutorials/create-your-first-plugin/#create-a-new-project","title":"Create a new project","text":"Python C++ <p>When you start up PyCharm, you will see this welcome screen:</p> <p></p> <p>Click on New Project</p> <p></p> <p>Let's say you want to name your plugin MyPlugin. In Endstone plugin development, we follow the following  naming convention:</p> <ol> <li>Use <code>lower-case-with-dash</code> for project name</li> <li>Prefix your project name with <code>endstone-</code></li> </ol> <p>Hence, you should put <code>endstone-my-plugin</code> in the Name field.</p> <p>Then, in the Interpreter type, select Custom environment. Select Select existing, and set the path to  where you previously installed <code>endstone</code> as stated in the prerequisites.</p> <p>Finally, click on Create. The PyCharm workspace will pop up and you will see this.</p> <p></p> <p>Tip</p> <p>Endstone server requires its plugins to be installed in the same Python environment. A virtual environment is strongly recommended.</p> <p>When you start up CLion, you will see this welcome screen:</p> <p></p> <p>Click on New Project</p> <p></p> <p>In the side bar, select C++ Library. Select C++ 20 for Language standard.  Select shared for Library type. Click on Create. The CLion workspace will pop up and you will see this.</p> <p></p>"},{"location":"tutorials/create-your-first-plugin/#check-your-dependencies","title":"Check your dependencies","text":"<p>In the last step, you selected the existing interpreter where <code>endstone</code> package is installed. For now, that's the only dependency we need for a simple plugin. To check its installation, click on the  icon on the side bar to open the terminal and type: <pre><code>pip show endstone\n</code></pre></p> <p>You show see something like this: <pre><code>Name: endstone\nVersion: 0.10.9\nSummary: Endstone offers a plugin API for Bedrock Dedicated Servers, supporting both Python and C++.\nHome-page:\nAuthor:\nAuthor-email: Vincent Wu &lt;magicdroidx@gmail.com&gt;\nLicense: Apache License\n</code></pre></p>"},{"location":"tutorials/create-your-first-plugin/#create-pyprojecttoml","title":"Create <code>pyproject.toml</code>","text":"<p>Modern Python packages can contain a <code>pyproject.toml</code> file, first introduced in PEP 518. This file contains build  system requirements and information, which are used by pip to build the package.</p> <p>Now, right click on the project folder and select New &gt; File to create a <code>pyproject.toml</code>. </p> <p> </p> <p>Copy the following content and paste into the file. pyproject.toml<pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"endstone-my-plugin\"\nversion = \"0.1.0\"\ndescription = \"My first Python plugin for Endstone servers!\"\n</code></pre></p> <p>Notice</p> <p>The name field should always be the project name. It must start with <code>endstone-</code> which is enforced by the  plugin loader. The name should also use <code>lower-case-with-dash</code> style.</p>"},{"location":"tutorials/create-your-first-plugin/#file-structure","title":"File structure","text":"<p>From the project view in the side bar, you will notice that CLion created a few files for us.</p> <ul> <li><code>.clang-format</code>: The configuration file for ClangFormat</li> <li><code>CMakeLists.txt</code>: The manifest file for CMake build system</li> <li><code>library.cpp</code>: Source file</li> <li><code>library.h</code>: Header file</li> </ul> <p>Delete <code>library.cpp</code> and <code>library.h</code> as we don't need them. You can keep the <code>.clang-format</code> and  <code>CMakeLists.txt</code>.</p>"},{"location":"tutorials/create-your-first-plugin/#update-cmakeliststxt","title":"Update <code>CMakeLists.txt</code>","text":"<p>Now, open the <code>CMakeLists.txt</code> in the side bar and delete all the existing content.  Then, copy and paste the following into your <code>CMakeLists.txt</code>.</p> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.15)\n\nproject(my_plugin CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(FetchContent)\nFetchContent_Declare(\n    endstone\n    GIT_REPOSITORY https://github.com/EndstoneMC/endstone.git\n    GIT_TAG v0.10 #(1)!\n)\nFetchContent_MakeAvailable(endstone)\n</code></pre> <ol> <li> Important: This specifies the targeted API version of Endstone. Ensure you update it after every major release of Endstone to stay up to date.</li> </ol>"},{"location":"tutorials/create-your-first-plugin/#create-the-main-plugin-class","title":"Create the main plugin class","text":"Python C++ <p>Now, right click on the project folder and select New &gt; Directory to create a <code>src</code> directory. </p> <p>Right click on the <code>src</code> directory you just created and select Mark Directory as &gt; Sources Root. You will notice the colour of the icon changes to blue.</p> <p>Right click again on the <code>src</code> directory and select New &gt; Python Package to create a package for our plugin.  Since my project name is <code>endstone-my-plugin</code>, I will name the package <code>endstone_my_plugin</code>.</p> <p>You should have something similar to this:</p> <p></p> <p>Tip</p> <p>For Python packages, it is a common practice to use <code>lower-case-with-dash</code> for project name and  <code>lower_case_with_underscore</code> for the package name. See PEP 8 for the style guide for Python.</p> <p>Right click on the package you just created and select New &gt; Python File to create a <code>my_plugin.py</code>. Create a class named <code>MyPlugin</code> which extends the <code>Plugin</code> class from <code>endstone.plugin</code>.</p> src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    pass\n</code></pre> <p>Then, open the <code>__init__.py</code> under the same folder and import the <code>MyPlugin</code> class from the Python file and add it  to the <code>__all__</code> variable.</p> src/endstone_my_plugin/__init__.py<pre><code>from endstone_my_plugin.my_plugin import MyPlugin\n\n__all__ = [\"MyPlugin\"]\n</code></pre> <p>Now, create two files: <code>src/my_plugin.cpp</code> and <code>include/my_plugin.h</code>.</p> <p>Open <code>CMakeLists.txt</code> and add a new target.</p> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.15)\n\nproject(my_plugin CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(FetchContent)\nFetchContent_Declare(\n    endstone\n    GIT_REPOSITORY https://github.com/EndstoneMC/endstone.git\n    GIT_TAG v0.10\n)\nFetchContent_MakeAvailable(endstone)\n\nendstone_add_plugin(${PROJECT_NAME} src/my_plugin.cpp)\n</code></pre> <p>You should have something similar to this:</p> <p></p> <p>Open <code>include/my_plugin.h</code> and add a new class <code>MyPlugin</code> which extends the <code>endstone::Plugin</code> class.</p> include/my_plugin.h<pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nclass MyPlugin : public endstone::Plugin {};\n</code></pre> <p>Then, in <code>src/my_plugin.cpp</code>, include the header file.</p> src/my_plugin.cpp<pre><code>#include \"my_plugin.h\"\n</code></pre>"},{"location":"tutorials/create-your-first-plugin/#add-methods","title":"Add methods","text":"Python C++ <p>Now we want to override a few methods from the base class:</p> <ul> <li><code>on_load</code>: this will be called when the plugin is loaded by the server</li> <li><code>on_enable</code>: this will be called when the plugin is enabled</li> <li><code>on_disable</code>: this will be called when the plugin is disabled (e.g. during server shutdown)</li> </ul> <p>You can use the logger to log a message when the plugin is loaded, enabled and disabled like below:</p> src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    def on_load(self) -&gt; None:\n        self.logger.info(\"on_load is called!\")\n\n    def on_enable(self) -&gt; None:\n        self.logger.info(\"on_enable is called!\")\n\n    def on_disable(self) -&gt; None:\n        self.logger.info(\"on_disable is called!\")\n</code></pre> <p>Now we want to override a few methods from the base class:</p> <ul> <li><code>onLoad</code>: this will be called when the plugin is loaded by the server</li> <li><code>onEnable</code>: this will be called when the plugin is enabled</li> <li><code>onDisable</code>: this will be called when the plugin is disabled (e.g. during server shutdown)</li> </ul> <p>You can use the logger to log a message when the plugin is loaded, enabled and disabled like below:</p> include/my_plugin.h<pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nclass MyPlugin : public endstone::Plugin {\npublic:\n    void onLoad() override\n    {\n        getLogger().info(\"onLoad is called\");\n    }\n\n    void onEnable() override\n    {\n        getLogger().info(\"onEnable is called\");\n    }\n\n    void onDisable() override\n    {\n        getLogger().info(\"onDisable is called\");\n    }\n};\n</code></pre>"},{"location":"tutorials/create-your-first-plugin/#configure-plugin-metadata","title":"Configure plugin metadata","text":"Python C++ <p>Now, the plugin is almost finished. Let's tell the server about our compatible API version.</p> src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    def on_load(self) -&gt; None:\n        self.logger.info(\"on_load is called!\")\n\n    def on_enable(self) -&gt; None:\n        self.logger.info(\"on_enable is called!\")\n\n    def on_disable(self) -&gt; None:\n        self.logger.info(\"on_disable is called!\")\n</code></pre> <p>Lastly, to have the plugin discoverable by the server, you must specify an entry point in <code>pyproject.toml</code>.</p> pyproject.toml<pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"endstone-my-plugin\"\nversion = \"0.1.0\"\ndescription = \"My first Python plugin for Endstone servers!\"\n\n[project.entry-points.\"endstone\"]\nmy-plugin = \"endstone_my_plugin:MyPlugin\"\n</code></pre> <p>Notice</p> <p>For the entry point, the name must be the name of your project without the <code>endstone-</code> prefix. For example, our project name is <code>endstone-my-plugin</code> so the entry point's name should be <code>my-plugin</code>. The value is simply  <code>{module}:{class}</code>.</p> <p>Now, the plugin is almost finished. Let's tell the server about our name, version, main class and the description.</p> src/my_plugin.cpp<pre><code>#include \"my_plugin.h\"\n\nENDSTONE_PLUGIN(/*(1)!*/\"my_plugin\", /*(2)!*/\"0.1.0\", /*(3)!*/MyPlugin)\n{\n    description = \"My first C++ plugin for Endstone servers\";\n}\n</code></pre> <ol> <li> This is the plugin name!</li> <li> This is the plugin version!</li> <li> This is the main class of the plugin!</li> </ol> <p>Notice</p> <p>For plugin name, it must contains only lowercase letters, numbers and underscores.</p>"},{"location":"tutorials/install-your-plugin/","title":"Install your plugin","text":"<p>Before installing your first plugin, you will need to build it.</p>  Python C++ <p>Click on the  icon on the side bar to open the  terminal and type:</p> <pre><code>pip install pipx\npipx run build --wheel\n</code></pre> <p>You should see something like this in your console:</p> <p></p> <p>Then, copy the built wheel package <code>endstone_my_plugin.whl</code> under the <code>dist</code> folder to the plugins folder <code>path/to/bedrock_server/plugins</code>.</p> <p>Now, start your server again. You should see your plugin has been successfully loaded.</p> <p></p> <p> Congratulations! You've made your first plugin for Endstone servers!</p> <p>Click on the menu icon on the top bar and select Build &gt; Build Project  to build your plugin.</p> <p></p> <p>Then, copy the built shared library <code>endstone_my_plugin.dll</code> to the plugins  folder <code>path/to/bedrock_server/plugins</code>.</p> <p>Now, start your server again. You should see your plugin has been successfully loaded.</p> <p></p> <p> Congratulations! You've made your first plugin for Endstone servers!</p>"},{"location":"tutorials/install-your-plugin/#development-mode-aka-editable-installs","title":"Development Mode (a.k.a Editable Installs)","text":"<p>When creating a plugin, developers usually want to implement and test changes iteratively, before cutting a release  and preparing a distribution archive. In normal circumstances this can be quite cumbersome and require the  developers to continuously re-build and re-install the plugin.</p> <p>But we've got you! Endstone also allows developers to load the code under development directly from the project folder  without having to copy the <code>whl</code> files to the <code>plugins</code> folder.</p> <p>To do so, you will need the activate the virtual environment. Please make sure Endstone is also installed inside the environment.</p>  Windows Linux <pre><code>. venv/Scripts/activate\n</code></pre> <pre><code>. venv/bin/activate\n</code></pre> <p>You can now enter this \u201cdevelopment mode\u201d by performing an editable installation inside the virtual environment,  using pip\u2019s <code>-e/--editable</code> flag, as shown below:</p> (venv)<pre><code>pip install --editable .\n</code></pre> <p>Now, if you change the source code on the disk, you can simply run the <code>/reload</code> command in Endstone and you change will be effective immediately.</p> <p>When you\u2019re done with a given development task, you can simply uninstall your package  (as you would normally do with <code>pip uninstall &lt;package name&gt;</code>).</p>"},{"location":"tutorials/publish-your-plugin/","title":"Publish your plugin","text":"<p>Let's say you have finished all the work on the new release of your project, written the release notes, increased the version number, tagged the release and are ready to publish.</p>"},{"location":"tutorials/publish-your-plugin/#install-twine","title":"Install <code>twine</code>","text":"<p>You will need to install Twine if you haven't done so. Twine is a utility for publishing Python packages to PyPI and other repositories.</p> <pre><code>pip install twine\n</code></pre>"},{"location":"tutorials/publish-your-plugin/#build-your-package","title":"Build your package","text":"<p>Build your package is as simple as one line of command.</p> <pre><code>pipx run build\n</code></pre> <p>This will build the package in an isolated environment, generating a source-distribution and wheel in the <code>dist/</code> directory.</p>"},{"location":"tutorials/publish-your-plugin/#upload-to-testpypi","title":"Upload to TestPyPI","text":"<p>Unlike PyPI, which is the actual index of all python packages, TestPyPI is a separate instance of the Python Package Index. It's a good place to try distribution tools and processes without affecting the real index.</p> <p>Because TestPyPI has a separate database from the live PyPI, you\u2019ll need a separate user account specifically for TestPyPI. Go to https://test.pypi.org/account/register/ to register your account.</p> <p>Once done, you can upload your distributions to TestPyPI using twine by specifying the <code>--repository</code>/<code>-r</code> flag:</p> <pre><code>twine upload -r testpypi dist/*\n</code></pre> <p>Twine will prompt for your API token or username and password.</p> <p>Tip</p> <p>For security reasons it is strongly recommended to create an API token instead of using your username and password when uploading a package to PyPI. If you haven\u2019t done so, create an API token on both PyPI and the TestPyPI. You will also be asked to choose the scope of this token, for now you can just leave the token unrestricted.</p>"},{"location":"tutorials/publish-your-plugin/#upload-to-pypi","title":"Upload to PyPI","text":"<p>Now if things looks right, you can upload to the actual Python Package Index - PyPI:</p> <pre><code>twine upload -r pypi dist/*\n</code></pre>"},{"location":"tutorials/publish-your-plugin/#publish-using-github-actions-cicd-workflows","title":"Publish using GitHub Actions CI/CD workflows","text":"<p>GitHub Actions CI/CD allows you to run a series of commands whenever an event occurs on the GitHub platform. This can be a great choice if you want your plugin be published to PyPI automatically whenever you created a release.</p> <p>For more information, please follow the instructions here.</p>"},{"location":"tutorials/publish-your-plugin/#and-thats-it","title":"And that's it!","text":"<p> Congratulations! If everything goes well, you should soon be able to see your plugin on <code>https://pypi.org/project/&lt;package name&gt;</code>.</p>"},{"location":"tutorials/register-commands/","title":"Register commands","text":"<p>In this section, we'll walk you through creating a simple command. By the end of this section, you'll have a basic understanding of how to define and register commands with Endstone.</p>"},{"location":"tutorials/register-commands/#create-a-command","title":"Create a command","text":"<p>Let's start with a simple command <code>/hello</code> that greets the command sender.</p>  Python C++ src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    commands = {\n        \"hello\": {\n            \"description\": \"Greet the command sender.\",\n            \"usages\": [\"/hello\"],\n        }\n    }\n\n    # ...\n</code></pre> src/my_plugin.cpp<pre><code>#include \"my_plugin.h\"\n\nENDSTONE_PLUGIN(\"my_plugin\", \"0.1.0\", MyPlugin)\n{\n    description = \"My first C++ plugin for Endstone servers\";\n\n    command(\"hello\")\n        .description(\"Greet the command sender.\")\n        .usages(\"/hello\");\n}\n</code></pre> <p>And it's just as simple as that! You've just created a new command with description and usages.</p>"},{"location":"tutorials/register-commands/#add-permissions","title":"Add permissions","text":"<p>By the default, all the commands in endstone requires the <code>operator</code> permission to execute for security reasons. Since we are creating a simple command here, we might want to change its permission for everyone to use.</p> <p>Let's make the following changes to our code.</p>  Python C++ src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.command import Command, CommandSender\nfrom endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    commands = {\n        \"hello\": {\n            \"description\": \"Greet the command sender.\",\n            \"usages\": [\"/hello\"],\n            \"permissions\": [\"my_plugin.command.hello\"],\n        }\n    }\n\n    permissions = {\n        \"my_plugin.command.hello\": {\n            \"description\": \"Allow users to use the /hello command.\",\n            \"default\": True, #(1)!\n        }\n    }\n\n    # ...\n</code></pre> <ol> <li> See tips</li> </ol> <p>Tip</p> <p>The <code>default</code> field sets the permission level required for executing the command. Possible values are:</p> <ul> <li><code>True</code> or <code>\"true\"</code>: everyone can execute this command</li> <li><code>False</code> or <code>\"false\"</code>: on one can execute this command, unless explicitly granted the permission.</li> <li><code>\"op\"</code>: only operators can execute this command</li> <li><code>\"not_op\"</code>: only non-operators can execute this command</li> <li><code>\"console\"</code>: only console can execute this command</li> </ul> src/my_plugin.cpp<pre><code>#include \"my_plugin.h\"\n\nENDSTONE_PLUGIN(\"my_plugin\", \"0.1.0\", MyPlugin)\n{\n    description = \"My first C++ plugin for Endstone servers\";\n\n    command(\"hello\")\n        .description(\"Greet the command sender.\")\n        .usages(\"/hello\")\n        .permissions(\"my_plugin.command.hello\");\n\n    permission(\"my_plugin.command.hello\")\n        .description(\"Allow users to use the /hello command.\")\n        .default_(endstone::PermissionDefault::True); /*(1)!*/\n}\n</code></pre> <ol> <li> See tips</li> </ol> <p>Tip</p> <p>The <code>default_</code> method sets the permission level required for executing the command. Possible values are:</p> <ul> <li><code>endstone::PermissionDefault::True</code>: everyone can execute this command</li> <li><code>endstone::PermissionDefault::False</code>: on one can execute this command, unless explicitly granted the permission.</li> <li><code>endstone::PermissionDefault::Operator</code>: only operators can execute this command</li> <li><code>endstone::PermissionDefault::NotOperator</code>: only non-operators can execute this command</li> <li><code>endstone::PermissionDefault::Console</code>: only console can execute this command</li> </ul>"},{"location":"tutorials/register-commands/#handle-the-commands","title":"Handle the commands","text":"<p>Now, the next step is to handle the commands we just created. Let's say we want to send a \"Hello, World!\" greeting message to whoever execute this command. It's just a few more lines away from that.</p>  Python C++ src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.command import Command, CommandSender\nfrom endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    commands = {\n        \"hello\": {\n            \"description\": \"Greet the command sender.\",\n            \"usages\": [\"/hello\"],\n            \"permissions\": [\"my_plugin.command.hello\"],\n        }\n    }\n\n    permissions = {\n        \"my_plugin.command.hello\": {\n            \"description\": \"Allow users to use the /hello command.\",\n            \"default\": True,\n        }\n    }\n\n    def on_command(self, sender: CommandSender, command: Command, args: list[str]) -&gt; bool:\n        if command.name == \"hello\":\n            sender.send_message(\"Hello World!\")\n\n        return True\n\n    # ...\n</code></pre> include/my_plugin.h<pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nclass MyPlugin : public endstone::Plugin {\npublic:\n    bool onCommand(endstone::CommandSender &amp;sender, const endstone::Command &amp;command, const std::vector&lt;std::string&gt; &amp;args) override\n    {\n        if (command.getName() == \"hello\") \n        {\n            sender.sendMessage(\"Hello World!\");\n        }\n        return true;\n    }\n\n    // ...\n};\n</code></pre> <p>Now, install your plugin and restart your server. Join the game and type <code>/help hello</code>. You should see the usage information, which indicates that our command has been successfully added to the game!</p> <p>Now, type <code>/hello</code>, and you should receive the message \"Hello World!\".</p> <p></p>"},{"location":"tutorials/register-commands/#add-parameters-to-commands","title":"Add parameters to commands","text":"<p>Now, let's say we want to send a custom message to greet the sender instead of \"Hello World!\". We can add a parameter to the command that accepts a message.</p> <p>In Endstone, there are two basic kinds of parameters:</p> Kind Description Syntax Mandatory This parameter must be provided <code>&lt;name: type&gt;</code> Optional This parameter is optional and can be omitted <code>[name: type]</code> <p>Let's change our code to add an optional parameter <code>msg</code> with <code>message</code> type. Based on the table above, the syntax should be <code>[msg: message]</code>. Let's add it to our code.</p>  Python C++ src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.command import Command, CommandSender\nfrom endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    commands = {\n        \"hello\": {\n            \"description\": \"Greet the command sender.\",\n            \"usages\": [\"/hello [msg: message]\"],\n            \"permissions\": [\"my_plugin.command.hello\"],\n        }\n    }\n\n    permissions = {\n        \"my_plugin.command.hello\": {\n            \"description\": \"Allow users to use the /hello command.\",\n            \"default\": True,\n        }\n    }\n\n    def on_command(self, sender: CommandSender, command: Command, args: list[str]) -&gt; bool:\n        if command.name == \"hello\":\n            if len(args) == 0: #(1)!\n                sender.send_message(\"Hello World!\")\n            else:\n                sender.send_message(args[0])\n\n        return True\n\n    # ...\n</code></pre> <ol> <li> Here, we checked if the optional parameter is provided.</li> </ol> src/my_plugin.cpp<pre><code>#include \"my_plugin.h\"\n\nENDSTONE_PLUGIN(\"my_plugin\", \"0.1.0\", MyPlugin)\n{\n    description = \"My first C++ plugin for Endstone servers\";\n\n    command(\"hello\")\n        .description(\"Greet the command sender.\")\n        .usages(\"/hello [msg: message]\")\n        .permissions(\"my_plugin.command.hello\");\n\n    permission(\"my_plugin.command.hello\")\n        .description(\"Allow users to use the /hello command.\")\n        .default_(endstone::PermissionDefault::True);\n}\n</code></pre> include/my_plugin.h<pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nclass MyPlugin : public endstone::Plugin {\npublic:\n    bool onCommand(endstone::CommandSender &amp;sender, const endstone::Command &amp;command, const std::vector&lt;std::string&gt; &amp;args) override\n    {\n        if (command.getName() == \"hello\") \n        {\n            if (args.empty()) {\n                sender.sendMessage(\"Hello World!\");\n            }\n            else {\n                sender.sendMessage(args[0]);\n            }\n        }\n        return true;\n    }\n\n    // ...\n};\n</code></pre> <p>  And it's done! Now when the users use <code>/hello This is my message!</code>, \"This is my message!\" will be shown to them instead of \"Hello World!\".</p> <p>Tip</p> <p>To make the parameter mandatory, change the parameter from <code>[msg: message]</code> to <code>&lt;msg: message&gt;</code></p>"},{"location":"tutorials/register-commands/#built-in-types","title":"Built-in types","text":"<p>In the section above, we added a parameter with type <code>message</code> which is a built-in type supported by Endstone. Here is a full list of all built-in types currently supported.</p> Type Alias Description Possible Value <code>int</code> Represents an integer <code>10</code> <code>float</code> Represents a floating point number <code>3.14</code> <code>bool</code> Represents a boolean <code>true</code> <code>target</code> <code>actor</code>, <code>entity</code>, <code>player</code> Represents a target selector <code>@e</code>, <code>@r</code>, <code>PlayerName</code> <code>str</code> <code>string</code> Represents a string, terminated by space <code>Hello</code> <code>block_pos</code> <code>vec3i</code> Represents a 3-Dimensionalinteger position <code>1 2 3</code> <code>pos</code> <code>vec3</code>, <code>vec3f</code> Represents a 3-Dimensional float position <code>1.0 2.0 3.0</code> <code>message</code> Represents a message with everything until end of line <code>Hello World!</code> <code>json</code> Represents a JSON string <code>{\"key\": \"value\"}</code> <code>block</code> Represents a block type <code>wood</code> <code>block_states</code> Represents the block states <code>[\"wood_type\"=\"birch\",\"stripped_bit\"=true]</code>"},{"location":"tutorials/register-commands/#user-defined-enum-types","title":"User-defined enum types","text":"<p>Enum Types can be used to represent a set of predefined string constants. This behavior is similar to how literal types function in modern programming languages such as Node.js and Python. Enum types provide a way to define a \"type\" comprised of a set of named constants, referred to as the enumeration, or in short, \"enum\".</p> <p>Endstone allows developer to add their own enums. The basic syntax follows the pattern:</p> <ul> <li>Mandatory: <code>(value1|value2|value3)&lt;name: EnumType&gt;</code></li> <li>Optional: <code>(value1|value2|value3)[name: EnumType]</code></li> </ul> <p>Here, all possible values, separated by the pipeline operator <code>|</code>, are scoped inside the parentheses <code>()</code>, followed by the parameter kind, name and type.</p> <p>Example</p> <p>An example of using enum types in command usages is: <code>/home (add|list|del)&lt;action: HomeAction&gt;</code></p> <p>In this example, the parameter is named <code>action</code> and has a user-defined enum type <code>HomeAction</code>.  When using the command, the user must select one of the specified action from the set: <code>add</code>, <code>list</code>, or <code>del</code>.</p>"},{"location":"tutorials/register-event-listeners/","title":"Register event listeners","text":"<p>Endstone provides a powerful event system that allows plugins to listen to various events that happen in the server. Let's walk you through registering a simple event listener.</p>"},{"location":"tutorials/register-event-listeners/#add-event-handlers","title":"Add event handlers","text":"<p>Let's say your plugin want to listen to when a player joins the server and send a message to inform everyone on the server.</p>  Python C++ src/endstone_my_plugin/my_plugin.py<pre><code>from endstone import ColorFormat\nfrom endstone.event import event_handler, PlayerJoinEvent\nfrom endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    # ...\n\n    def on_enable(self) -&gt; None:\n        self.logger.info(\"on_enable is called!\")\n\n    @event_handler\n    def on_player_join(self, event: PlayerJoinEvent):\n        self.server.broadcast_message(ColorFormat.YELLOW + f\"{event.player.name} has joined the server\")\n</code></pre> include/my_plugin.h<pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nclass MyPlugin : public endstone::Plugin {\npublic:\n    // ...\n\n    void onEnable() override\n    {\n        getLogger().info(\"onEnable is called\");\n    }\n\n    void onPlayerJoin(endstone::PlayerJoinEvent&amp; event)\n    {\n        getServer().broadcastMessage(ColorFormat::Yellow + \"{} has joined the server\", event.getPlayer().getName());\n    }\n};\n</code></pre>"},{"location":"tutorials/register-event-listeners/#register-listeners","title":"Register listeners","text":"<p>Now, we need to register our event handlers to the Endstone event system.</p>  Python C++ src/endstone_my_plugin/my_plugin.py<pre><code>from endstone import ColorFormat\nfrom endstone.event import event_handler, PlayerJoinEvent\nfrom endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    # ...\n\n    def on_enable(self) -&gt; None:\n        self.logger.info(\"on_enable is called!\")\n        self.register_events(self)\n\n    @event_handler\n    def on_player_join(self, event: PlayerJoinEvent):\n        self.server.broadcast_message(ColorFormat.YELLOW + f\"{event.player.name} has joined the server\")\n</code></pre> <p>By calling <code>self.register_events</code>, Endstone will look into the object that is passed in as the argument and register all handlers with a <code>@event_handler</code> decorator to the event system.</p> include/my_plugin.h<pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nclass MyPlugin : public endstone::Plugin {\npublic:\n    // ...\n\n    void onEnable() override\n    {\n        getLogger().info(\"onEnable is called\");\n        registerEvent(&amp;MyPlugin::onPlayerJoin, *this);\n    }\n\n    void onPlayerJoin(endstone::PlayerJoinEvent&amp; event)\n    {\n        getServer().broadcastMessage(ColorFormat::Yellow + \"{} has joined the server\", event.getPlayer().getName());\n    }\n};\n</code></pre> <p> And that's it! Your plugin should now listen to and handle events when player joins. Remember, you can add as many methods as you want to listen to any event.</p>"},{"location":"tutorials/schedule-tasks/","title":"Schedule tasks","text":"<p>Endstone provides a task scheduling system that allows plugins to schedule tasks for future execution, possibly at regular intervals. In this tutorial, we'll guide you on scheduling a straightforward task.</p> <p>Here, we want an on-screen popup displaying \"Hi!\" to appear for every online player at a 1-second interval.</p>  Python C++ src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    api_version = \"0.10\"\n\n    # ...\n\n    def on_enable(self) -&gt; None:\n        self.logger.info(\"on_enable is called!\")\n        self.server.scheduler.run_task(self, self.say_hi, delay=0, period=20)\n\n    def say_hi(self) -&gt; None:\n        for player in self.server.online_players:\n            player.send_popup(\"Hi!\")\n</code></pre> include/my_plugin.h<pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nclass MyPlugin : public endstone::Plugin {\npublic:\n    // ...\n\n    void onEnable() override\n    {\n        getLogger().info(\"onEnable is called\");\n        getServer().getScheduler().runTaskTimer([&amp;]() { sayHi(); }, 0, 20);\n    }\n\n    void sayHi()\n    {\n        for (auto&amp; player : getServer().getOnlinePlayers())\n        {\n            player-&gt;sendPopup(\"Hi\");\n        }\n    }\n};\n</code></pre> <p> And that's it! The server will now send a \"Hi\" message to all players online at an interval of 20 ticks or approximately every second.</p>"},{"location":"tutorials/use-color-codes/","title":"Use color codes","text":"<p>Color codes are used to customize the color and formatting of text in the game, such as on signs, in chat, in titles, in forms and more. These color codes are represented by the section sign (<code>\u00a7</code>) followed by a character. Each character represents a different color or formatting option. Endstone wants to make it easy to use them, that is why an easy to use api is provided.</p>"},{"location":"tutorials/use-color-codes/#usage","title":"Usage","text":"Python C++ <p>This code shows how easy it is to use colored text in endstone:</p> <pre><code>from endstone import ColorFormat\n\nmy_beautiful_text = f\"This is {ColorFormat.YELLOW}yellow, {ColorFormat.AQUA}aqua and {ColorFormat.GOLD}gold{ColorFormat.RESET}.\"\n</code></pre> <p>Pythons f-strings are awesome.</p> <p>Tip</p> <p>Don't forget to end the colored text with <code>ColorFormat.RESET</code>, it ends all extra color format options and resets them. </p> <p>This code shows how easy it is to use colored text in endstone:</p> <pre><code>#include &lt;endstone/endstone.hpp&gt;\n\nauto my_beautiful_text = \"This is \" + endstone::ColorFormat::DarkGreen + \"dark green.\" + endstone::ColorFormat::Reset;\n</code></pre> <p>Tip</p> <p>Don't forget to end the colored text with <code>endstone::ColorFormat::Reset</code>, it ends all extra color format options and resets them. </p>"},{"location":"tutorials/use-color-codes/#all-color-and-format-codes","title":"All color and format codes","text":"Code Name <code>\u00a70</code> black <code>\u00a71</code> dark_blue <code>\u00a72</code> dark_green <code>\u00a73</code> dark_aqua <code>\u00a74</code> dark_red <code>\u00a75</code> dark_purple <code>\u00a76</code> gold <code>\u00a77</code> gray <code>\u00a78</code> dark_gray <code>\u00a79</code> blue <code>\u00a7a</code> green <code>\u00a7b</code> aqua <code>\u00a7c</code> red <code>\u00a7d</code> light_purple <code>\u00a7e</code> yellow <code>\u00a7f</code> white <code>\u00a7g</code> minecoin_gold <code>\u00a7h</code> material_quartz <code>\u00a7i</code> material_iron <code>\u00a7j</code> material_netherite <code>\u00a7k</code> obfuscated <code>\u00a7l</code> bold <code>\u00a7m</code> material_redstone <code>\u00a7n</code> material_copper <code>\u00a7o</code> italic <code>\u00a7p</code> material_gold <code>\u00a7q</code> material_emerald <code>\u00a7r</code> reset <code>\u00a7s</code> material_diamond <code>\u00a7t</code> material_lapis <code>\u00a7u</code> material_amethyst"},{"location":"reference/cpp/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace endstone Represents a button with text and an optional icon. <ul> <li>class ActionForm Represents a form with buttons that let the player take action. </li> <li>class Actor Represents a base actor in the level. </li> <li>class ActorDamageEvent Called when an Actor is damaged. </li> <li>class ActorDeathEvent Called when an Actor dies. </li> <li>class ActorEvent Represents an Actor-related event. </li> <li>class ActorExplodeEvent Called when an actor explodes. </li> <li>class ActorKnockbackEvent Called when a living entity receives knockback. </li> <li>class ActorRemoveEvent Called when an Actor is removed. </li> <li>class ActorSpawnEvent Called when an Actor is spawned into a world. </li> <li>class ActorTeleportEvent Called when a non-player entity is teleported from one location to another. </li> <li>class BanEntry A single entry from a ban list. </li> <li>class BanList Represents a ban list, containing bans. </li> <li>class Block Represents a block. </li> <li>class BlockBreakEvent Called when a block is broken by a player. </li> <li>class BlockCommandSender Represents a block command sender. </li> <li>class BlockCookEvent Called when an ItemStack is successfully cooked in a block. </li> <li>class BlockData Represents the data related to a live block. </li> <li>class BlockEvent Represents an Block-related event. </li> <li>class BlockPistonEvent Called when a piston block is triggered. </li> <li>class BlockPistonExtendEvent Called when a piston extends. </li> <li>class BlockPistonRetractEvent Called when a piston retracts. </li> <li>class BlockPlaceEvent Called when a block is placed by a player. </li> <li>class BlockState Represents a captured state of a block, which will not update automatically. </li> <li>class BossBar Represents a boss bar that is displayed to players. </li> <li>class BroadcastMessageEvent Event triggered for server broadcast messages such as fromServer::broadcast . </li> <li>class Button Represents a button with text and an optional icon. </li> <li>class Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class Chunk Represents a chunk of blocks. </li> <li>class ChunkEvent Represents a Chunk related event. </li> <li>class ChunkLoadEvent Called when a chunk is loaded. </li> <li>class ChunkUnloadEvent Called when a chunk is unloaded. </li> <li>class Color Represents a color with red, green, blue, and alpha components. </li> <li>struct ColorFormat All supported color and format codes. </li> <li>class Colors </li> <li>class Command Represents a Command , which executes various tasks upon user input. </li> <li>class CommandExecutor Represents a class which contains a single method for executing commands. </li> <li>class CommandMap Represents a command map that manages all commands of the Server . </li> <li>class CommandSender Represents a command sender. </li> <li>class CommandSenderWrapper Represents a wrapper that forwards commands to the wrapped CommandSender and captures its output. </li> <li>class ConsoleCommandSender Represents a console command sender. </li> <li>class Criteria Represents a scoreboard criteria. </li> <li>class DamageSource Represents a source of damage. </li> <li>class Dimension Represents a dimension within a Level . </li> <li>class DimensionEvent Represents events within a level. </li> <li>class Divider Represents a divider. </li> <li>class Dropdown Represents a dropdown with a set of predefined options. </li> <li>class Enchantment </li> <li>class Event Represents an event. </li> <li>class EventHandler Represents a registered EventHandler which associates with aPlugin . </li> <li>class Form Represents a generic form. </li> <li>class HandlerList A list of event handlers. Should be instantiated on a per-event basis. </li> <li>class Header Represents a header with a label. </li> <li>class ICancellable </li> <li>class Image Represents an RGBA image. </li> <li>class Inventory Interface to the various inventories. </li> <li>class IpBanEntry </li> <li>class IpBanList Represents a ban list, containing banned IP addresses. </li> <li>class Item Represents a base actor in the level. </li> <li>class ItemFactory </li> <li>class ItemMeta Represents the metadata of a generic item. </li> <li>class ItemStack Represents a stack of items. </li> <li>class ItemType Represents an item type. </li> <li>class Label Represents a text label. </li> <li>class Language Represents the interface for translating text into different languages. </li> <li>class LeavesDecayEvent Called when leaves are decaying naturally. </li> <li>class Level Represents a level, which may contain actors, chunks and blocks. </li> <li>class LevelEvent Represents events within a level. </li> <li>class Location Represents a 3-dimensional location in a dimension within a level. </li> <li>class Logger Logger class which can format and output varies levels of logs. </li> <li>class MapCanvas Represents a canvas for drawing to a map. </li> <li>class MapCursor Represents a cursor on a map. </li> <li>class MapInitializeEvent Called when a map is initialized. </li> <li>class MapMeta Represents the metadata for a map item. </li> <li>class MapRenderer Represents a renderer for a map. </li> <li>class MapView Represents a map item. </li> <li>class MessageForm Represents a form with two buttons. </li> <li>class Mob Represents a mobile entity (i.e. living entity), such as a monster or player. </li> <li>class ModalForm Represents a modal form with controls. </li> <li>class Objective Represents an objective on a scoreboard that can show scores specific to entries. </li> <li>class OfflinePlayer Represents a reference to a player identity and the data belonging to a player that is stored on the disk and can, thus, be retrieved without the player needing to be online. </li> <li>class PacketReceiveEvent Called when the server receives a packet from a connected client. </li> <li>class PacketSendEvent Called when the server sends a packet to a connected client. </li> <li>class Permissible Represents an object that may become a server operator and can be assigned permissions. </li> <li>class Permission Represents a unique permission that may be attached to a Permissible . </li> <li>class PermissionAttachment Holds information about a permission attachment on a Permissible object. </li> <li>class PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it. </li> <li>class Player Represents a player. </li> <li>class PlayerBanEntry </li> <li>class PlayerBanList Represents a ban list, containing banned players. </li> <li>class PlayerBedEnterEvent Called when a player is almost about to enter the bed. </li> <li>class PlayerBedLeaveEvent Called when a player is leaving a bed. </li> <li>class PlayerChatEvent Called when a player sends a chat message. </li> <li>class PlayerCommandEvent Called whenever a player runs a command. </li> <li>class PlayerDeathEvent Called when a Player dies. </li> <li>class PlayerDropItemEvent Called when a player drops an item from their inventory. </li> <li>class PlayerEmoteEvent Called when a player uses an emote. </li> <li>class PlayerEvent Represents a player related event. </li> <li>class PlayerGameModeChangeEvent Called when the GameMode of the player is changed. </li> <li>class PlayerInteractActorEvent Represents an event that is called when a player right-clicks an actor. </li> <li>class PlayerInteractEvent Represents an event that is called when a player right-clicks a block. </li> <li>class PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots. </li> <li>class PlayerItemConsumeEvent Called when a player is finishing consuming an item (food, potion, milk bucket). </li> <li>class PlayerItemHeldEvent Called when a player changes their currently held item. </li> <li>class PlayerJoinEvent Called when a player joins a server. </li> <li>class PlayerJumpEvent Called when a player jumps. </li> <li>class PlayerKickEvent Called when a player gets kicked from the server. </li> <li>class PlayerLoginEvent Called when a player attempts to login in. </li> <li>class PlayerMoveEvent Called when a player moves. </li> <li>class PlayerPickupItemEvent Called when a player picks an item up from the ground. </li> <li>class PlayerQuitEvent Called when a player leaves a server. </li> <li>class PlayerRespawnEvent Called when a player respawns. </li> <li>class PlayerSkinChangeEvent Called when a player changes their skin. </li> <li>class PlayerTeleportEvent Called when a player is teleported from one location to another. </li> <li>class Plugin Represents a Plugin . </li> <li>class PluginCommand Represents a Command belonging to aPlugin . </li> <li>class PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. </li> <li>class PluginDisableEvent Called when a plugin is disabled. </li> <li>class PluginEnableEvent Called when a plugin is enabled. </li> <li>class PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. </li> <li>class PluginManager Represents a plugin manager that handles all plugins from the Server . </li> <li>class Recipe Represents some type of crafting recipe. </li> <li>class Registry Abstract registry interface for keyed objects. </li> <li>class Scheduler Represents a scheduler that executes various tasks. </li> <li>class Score Represents a score for an objective on a scoreboard. </li> <li>class Scoreboard Represents a scoreboard. </li> <li>class ScriptMessageEvent Called when a message is sent by <code>/scriptevent</code> command. </li> <li>class Server Represents a server implementation. </li> <li>class ServerCommandEvent Called when the console runs a command, early in the process. </li> <li>class ServerEvent Represents a Server-related event. </li> <li>class ServerListPingEvent Called when a server ping is coming in. </li> <li>class ServerLoadEvent Called when either the server startup or reload has completed. </li> <li>class Service Services represent a list of methods. </li> <li>class ServiceManager Represent a service manager that manages services and service providers. </li> <li>class Skin Represents a player skin. </li> <li>class Slider Represents a slider with a label. </li> <li>class SocketAddress Represents an IP Socket Address (hostname + port number). </li> <li>class StepSlider Represents a step slider with a set of predefined options. </li> <li>class Task Represents a task being executed by the scheduler. </li> <li>class TextInput Represents a text input field. </li> <li>class ThunderChangeEvent Called when the thunder state in a world is changing. </li> <li>class Toggle Represents a toggle button with a label. </li> <li>class Translatable Represents an object with a text representation that can be translated by the Minecraft client. </li> <li>class UUID Implementation of Universally Unique Identifier ( UUID ) </li> <li>class Vector Represents a 3-dimensional vector. </li> <li>class WeatherChangeEvent Called when the weather (rain) state in a world is changing. </li> <li>class WeatherEvent Represents a Weather-related event. </li> <li>namespace core </li> <li>namespace detail </li> <li>struct overloaded Helper type for visitors. </li> </ul> </li> <li>class CommandBuilder </li> <li>class PermissionBuilder </li> <li>struct PluginDescriptionBuilder </li> <li>namespace fmt <ul> <li>struct formatter&lt; endstone::Actor &gt; </li> <li>struct formatter&lt; endstone::Block &gt; </li> <li>struct formatter&lt; endstone::BlockData &gt; </li> <li>struct formatter&lt; endstone::BlockState &gt; </li> <li>struct formatter&lt; endstone::BlockStates &gt; </li> <li>struct formatter&lt; endstone::BlockStates::mapped_type &gt; </li> <li>struct formatter&lt; endstone::BlockStates::value_type &gt; </li> <li>struct formatter&lt; endstone::Chunk &gt; </li> <li>struct formatter&lt; endstone::DamageSource &gt; </li> <li>struct formatter&lt; endstone::Dimension &gt; </li> <li>struct formatter&lt; endstone::ItemStack &gt; </li> <li>struct formatter&lt; endstone::ItemType &gt; </li> <li>struct formatter&lt; endstone::Location &gt; </li> </ul> </li> <li>namespace std <ul> <li>struct hash&lt; endstone::UUID &gt; </li> </ul> </li> </ul>"},{"location":"reference/cpp/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir include <ul> <li>dir endstone <ul> <li>file color_format.h </li> <li>file game_mode.h </li> <li>dir actor <ul> <li>file actor.h </li> <li>file item.h </li> <li>file mob.h </li> </ul> </li> <li>dir ban <ul> <li>file ban_entry.h </li> <li>file ban_list.h </li> <li>file ip_ban_entry.h </li> <li>file ip_ban_list.h </li> <li>file player_ban_entry.h </li> <li>file player_ban_list.h </li> </ul> </li> <li>dir block <ul> <li>file block.h </li> <li>file block_data.h </li> <li>file block_face.h </li> <li>file block_state.h </li> </ul> </li> <li>dir boss <ul> <li>file bar_color.h </li> <li>file bar_flag.h </li> <li>file bar_style.h </li> <li>file boss_bar.h </li> </ul> </li> <li>dir command <ul> <li>file block_command_sender.h </li> <li>file command.h </li> <li>file command_executor.h </li> <li>file command_map.h </li> <li>file command_sender.h </li> <li>file command_sender_wrapper.h </li> <li>file console_command_sender.h </li> <li>file plugin_command.h </li> </ul> </li> <li>dir damage <ul> <li>file damage_source.h </li> </ul> </li> <li>dir enchantments <ul> <li>file enchantment.h </li> </ul> </li> <li>dir event <ul> <li>file cancellable.h </li> <li>file event.h </li> <li>file event_handler.h </li> <li>file event_priority.h </li> <li>file handler_list.h </li> <li>dir actor <ul> <li>file actor_damage_event.h </li> <li>file actor_death_event.h </li> <li>file actor_event.h </li> <li>file actor_explode_event.h </li> <li>file actor_knockback_event.h </li> <li>file actor_remove_event.h </li> <li>file actor_spawn_event.h </li> <li>file actor_teleport_event.h </li> </ul> </li> <li>dir block <ul> <li>file block_break_event.h </li> <li>file block_cook_event.h </li> <li>file block_event.h </li> <li>file block_piston_event.h </li> <li>file block_piston_extend_event.h </li> <li>file block_piston_retract_event.h </li> <li>file block_place_event.h </li> <li>file leaves_decay_event.h </li> </ul> </li> <li>dir chunk <ul> <li>file chunk_event.h </li> <li>file chunk_load_event.h </li> <li>file chunk_unload_event.h </li> </ul> </li> <li>dir level <ul> <li>file dimension_event.h </li> <li>file level_event.h </li> </ul> </li> <li>dir player <ul> <li>file player_bed_enter_event.h </li> <li>file player_bed_leave_event.h </li> <li>file player_chat_event.h </li> <li>file player_command_event.h </li> <li>file player_death_event.h </li> <li>file player_drop_item_event.h </li> <li>file player_emote_event.h </li> <li>file player_event.h </li> <li>file player_game_mode_change_event.h </li> <li>file player_interact_actor_event.h </li> <li>file player_interact_event.h </li> <li>file player_item_consume_event.h </li> <li>file player_item_held_event.h </li> <li>file player_join_event.h </li> <li>file player_jump_event.h </li> <li>file player_kick_event.h </li> <li>file player_login_event.h </li> <li>file player_move_event.h </li> <li>file player_pickup_item_event.h </li> <li>file player_quit_event.h </li> <li>file player_respawn_event.h </li> <li>file player_skin_change_event.h </li> <li>file player_teleport_event.h </li> </ul> </li> <li>dir server <ul> <li>file broadcast_message_event.h </li> <li>file map_initialize_event.h </li> <li>file packet_receive_event.h </li> <li>file packet_send_event.h </li> <li>file plugin_disable_event.h </li> <li>file plugin_enable_event.h </li> <li>file script_message_event.h </li> <li>file server_command_event.h </li> <li>file server_event.h </li> <li>file server_list_ping_event.h </li> <li>file server_load_event.h </li> </ul> </li> <li>dir weather <ul> <li>file thunder_change_event.h </li> <li>file weather_change_event.h </li> <li>file weather_event.h </li> </ul> </li> </ul> </li> <li>dir form <ul> <li>file action_form.h </li> <li>file form.h </li> <li>dir controls <ul> <li>file button.h </li> <li>file divider.h </li> <li>file dropdown.h </li> <li>file header.h </li> <li>file label.h </li> <li>file slider.h </li> <li>file step_slider.h </li> <li>file text_input.h </li> <li>file toggle.h </li> </ul> </li> <li>file message_form.h </li> <li>file modal_form.h </li> </ul> </li> <li>dir inventory <ul> <li>file equipment_slot.h </li> <li>dir meta <ul> <li>file item_meta.h </li> <li>file map_meta.h </li> </ul> </li> <li>file inventory.h </li> <li>file item_factory.h </li> <li>file item_stack.h </li> <li>file item_type.h </li> <li>file player_inventory.h </li> <li>file recipe.h </li> </ul> </li> <li>dir lang <ul> <li>file language.h </li> <li>file translatable.h </li> </ul> </li> <li>dir level <ul> <li>file chunk.h </li> <li>file dimension.h </li> <li>file level.h </li> <li>file location.h </li> </ul> </li> <li>dir map <ul> <li>file map_canvas.h </li> <li>file map_cursor.h </li> <li>file map_renderer.h </li> <li>file map_view.h </li> </ul> </li> <li>dir permissions <ul> <li>file permissible.h </li> <li>file permission.h </li> <li>file permission_attachment.h </li> <li>file permission_attachment_info.h </li> <li>file permission_default.h </li> <li>file permission_level.h </li> </ul> </li> <li>dir plugin <ul> <li>file plugin.h </li> <li>file plugin_description.h </li> <li>file plugin_load_order.h </li> <li>file plugin_loader.h </li> <li>file plugin_manager.h </li> <li>file service.h </li> <li>file service_manager.h </li> <li>file service_priority.h </li> </ul> </li> <li>dir scheduler <ul> <li>file scheduler.h </li> <li>file task.h </li> </ul> </li> <li>dir scoreboard <ul> <li>file criteria.h </li> <li>file display_slot.h </li> <li>file objective.h </li> <li>file objective_sort_order.h </li> <li>file render_type.h </li> <li>file score.h </li> <li>file score_entry.h </li> <li>file scoreboard.h </li> </ul> </li> <li>dir util <ul> <li>file color.h </li> <li>file image.h </li> <li>file result.h </li> <li>file socket_address.h </li> <li>file uuid.h </li> <li>file vector.h </li> </ul> </li> <li>file logger.h </li> <li>file message.h </li> <li>file offline_player.h </li> <li>file player.h </li> <li>file registry.h </li> <li>file server.h </li> <li>file skin.h </li> <li>file variant.h </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cpp/namespaceendstone/","title":"Namespace endstone","text":"<p>Namespace List &gt; endstone</p> <p>Represents a button with text and an optional icon. </p>"},{"location":"reference/cpp/namespaceendstone/#namespaces","title":"Namespaces","text":"Type Name namespace core namespace detail"},{"location":"reference/cpp/namespaceendstone/#classes","title":"Classes","text":"Type Name class ActionForm Represents a form with buttons that let the player take action. class Actor Represents a base actor in the level. class ActorDamageEvent Called when an Actor is damaged. class ActorDeathEvent Called when an Actor dies. class ActorEvent &lt;typename ActorType&gt;Represents an Actor-related event. class ActorExplodeEvent Called when an actor explodes. class ActorKnockbackEvent Called when a living entity receives knockback. class ActorRemoveEvent Called when an Actor is removed. class ActorSpawnEvent Called when an Actor is spawned into a world. class ActorTeleportEvent Called when a non-player entity is teleported from one location to another. class BanEntry A single entry from a ban list. class BanList &lt;typename T&gt;Represents a ban list, containing bans. class Block Represents a block. class BlockBreakEvent Called when a block is broken by a player. class BlockCommandSender Represents a block command sender. class BlockCookEvent Called when an ItemStack is successfully cooked in a block. class BlockData Represents the data related to a live block. class BlockEvent Represents an Block-related event. class BlockPistonEvent Called when a piston block is triggered. class BlockPistonExtendEvent Called when a piston extends. class BlockPistonRetractEvent Called when a piston retracts. class BlockPlaceEvent Called when a block is placed by a player. class BlockState Represents a captured state of a block, which will not update automatically. class BossBar Represents a boss bar that is displayed to players. class BroadcastMessageEvent Event triggered for server broadcast messages such as fromServer::broadcast . class Button Represents a button with text and an optional icon. class Cancellable &lt;typename EventType&gt;A type characterizing events that may be cancelled by a plugin or the server. class Chunk Represents a chunk of blocks. class ChunkEvent Represents a Chunk related event. class ChunkLoadEvent Called when a chunk is loaded. class ChunkUnloadEvent Called when a chunk is unloaded. class Color Represents a color with red, green, blue, and alpha components. struct ColorFormat All supported color and format codes. class Colors class Command Represents a Command , which executes various tasks upon user input. class CommandExecutor Represents a class which contains a single method for executing commands. class CommandMap Represents a command map that manages all commands of the Server . class CommandSender Represents a command sender. class CommandSenderWrapper Represents a wrapper that forwards commands to the wrapped CommandSender and captures its output. class ConsoleCommandSender Represents a console command sender. class Criteria Represents a scoreboard criteria. class DamageSource Represents a source of damage. class Dimension Represents a dimension within a Level . class DimensionEvent Represents events within a level. class Divider Represents a divider. class Dropdown Represents a dropdown with a set of predefined options. class Enchantment class Event Represents an event. class EventHandler Represents a registered EventHandler which associates with aPlugin . class Form &lt;typename T&gt;Represents a generic form. class HandlerList A list of event handlers. Should be instantiated on a per-event basis. class Header Represents a header with a label. class ICancellable class Image Represents an RGBA image. class Inventory Interface to the various inventories. class IpBanEntry class IpBanList Represents a ban list, containing banned IP addresses. class Item Represents a base actor in the level. class ItemFactory class ItemMeta Represents the metadata of a generic item. class ItemStack Represents a stack of items. class ItemType Represents an item type. class Label Represents a text label. class Language Represents the interface for translating text into different languages. class LeavesDecayEvent Called when leaves are decaying naturally. class Level Represents a level, which may contain actors, chunks and blocks. class LevelEvent Represents events within a level. class Location Represents a 3-dimensional location in a dimension within a level. class Logger Logger class which can format and output varies levels of logs. class MapCanvas Represents a canvas for drawing to a map. class MapCursor Represents a cursor on a map. class MapInitializeEvent Called when a map is initialized. class MapMeta Represents the metadata for a map item. class MapRenderer Represents a renderer for a map. class MapView Represents a map item. class MessageForm Represents a form with two buttons. class Mob Represents a mobile entity (i.e. living entity), such as a monster or player. class ModalForm Represents a modal form with controls. class Objective Represents an objective on a scoreboard that can show scores specific to entries. class OfflinePlayer Represents a reference to a player identity and the data belonging to a player that is stored on the disk and can, thus, be retrieved without the player needing to be online. class PacketReceiveEvent Called when the server receives a packet from a connected client. class PacketSendEvent Called when the server sends a packet to a connected client. class Permissible Represents an object that may become a server operator and can be assigned permissions. class Permission Represents a unique permission that may be attached to a Permissible . class PermissionAttachment Holds information about a permission attachment on a Permissible object. class PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it. class Player Represents a player. class PlayerBanEntry class PlayerBanList Represents a ban list, containing banned players. class PlayerBedEnterEvent Called when a player is almost about to enter the bed. class PlayerBedLeaveEvent Called when a player is leaving a bed. class PlayerChatEvent Called when a player sends a chat message. class PlayerCommandEvent Called whenever a player runs a command. class PlayerDeathEvent Called when a Player dies. class PlayerDropItemEvent Called when a player drops an item from their inventory. class PlayerEmoteEvent Called when a player uses an emote. class PlayerEvent Represents a player related event. class PlayerGameModeChangeEvent Called when the GameMode of the player is changed. class PlayerInteractActorEvent Represents an event that is called when a player right-clicks an actor. class PlayerInteractEvent Represents an event that is called when a player right-clicks a block. class PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots. class PlayerItemConsumeEvent Called when a player is finishing consuming an item (food, potion, milk bucket). class PlayerItemHeldEvent Called when a player changes their currently held item. class PlayerJoinEvent Called when a player joins a server. class PlayerJumpEvent Called when a player jumps. class PlayerKickEvent Called when a player gets kicked from the server. class PlayerLoginEvent Called when a player attempts to login in. class PlayerMoveEvent Called when a player moves. class PlayerPickupItemEvent Called when a player picks an item up from the ground. class PlayerQuitEvent Called when a player leaves a server. class PlayerRespawnEvent Called when a player respawns. class PlayerSkinChangeEvent Called when a player changes their skin. class PlayerTeleportEvent Called when a player is teleported from one location to another. class Plugin Represents a Plugin . class PluginCommand Represents a Command belonging to aPlugin . class PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. class PluginDisableEvent Called when a plugin is disabled. class PluginEnableEvent Called when a plugin is enabled. class PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. class PluginManager Represents a plugin manager that handles all plugins from the Server . class Recipe Represents some type of crafting recipe. class Registry &lt;typename T&gt;Abstract registry interface for keyed objects. class Scheduler Represents a scheduler that executes various tasks. class Score Represents a score for an objective on a scoreboard. class Scoreboard Represents a scoreboard. class ScriptMessageEvent Called when a message is sent by <code>/scriptevent</code> command. class Server Represents a server implementation. class ServerCommandEvent Called when the console runs a command, early in the process. class ServerEvent Represents a Server-related event. class ServerListPingEvent Called when a server ping is coming in. class ServerLoadEvent Called when either the server startup or reload has completed. class Service Services represent a list of methods. class ServiceManager Represent a service manager that manages services and service providers. class Skin Represents a player skin. class Slider Represents a slider with a label. class SocketAddress Represents an IP Socket Address (hostname + port number). class StepSlider Represents a step slider with a set of predefined options. class Task Represents a task being executed by the scheduler. class TextInput Represents a text input field. class ThunderChangeEvent Called when the thunder state in a world is changing. class Toggle Represents a toggle button with a label. class Translatable Represents an object with a text representation that can be translated by the Minecraft client. class UUID Implementation of Universally Unique Identifier ( UUID ) class Vector Represents a 3-dimensional vector. class WeatherChangeEvent Called when the weather (rain) state in a world is changing. class WeatherEvent Represents a Weather-related event. struct overloaded &lt;Func&gt;Helper type for visitors."},{"location":"reference/cpp/namespaceendstone/#public-types","title":"Public Types","text":"Type Name enum BarColor enum BarFlag enum BarStyle enum BlockFace typedef std::unordered_map&lt; std::string, std::variant&lt; bool, std::string, int &gt; &gt; BlockStates enum DisplaySlot Locations for displaying objectives to the player. enum EquipmentSlot enum EventPriority Represents an event's priority in execution. enum EventResult enum GameMode Represents the various type of game modes that Players may have. typedef std::variant&lt; std::string, Translatable &gt; Message enum ObjectiveSortOrder Represents the sort order of objectives on a DisplaySlot. enum PermissionDefault Represents the possible default values for permissions. enum PermissionLevel typedef std::function&lt; void(const PermissionAttachment &amp;)&gt; PermissionRemovedExecutor enum PluginLoadOrder Represents the order in which a plugin should be initialized and enabled. enum std::uint8_t RenderType Controls the way in which an Objective is rendered on the client side. typedef nonstd::expected&lt; T, std::string &gt; Result typedef std::variant&lt; Player *, Actor *, std::string &gt; ScoreEntry enum ServicePriority Represents various priorities of a provider. typedef std::uint32_t TaskId"},{"location":"reference/cpp/namespaceendstone/#public-functions","title":"Public Functions","text":"Type Name std::size_t hash_value (UUID const &amp; u) noexcept bool operator!= (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&lt; (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&lt;= (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator== (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&gt; (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&gt;= (UUID const &amp; lhs, UUID const &amp; rhs) noexcept overloaded (Func...) Deduction guide. void swap (UUID &amp; lhs, UUID &amp; rhs) noexcept"},{"location":"reference/cpp/namespaceendstone/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/namespaceendstone/#enum-barcolor","title":"enum BarColor","text":"<pre><code>enum endstone::BarColor {\n    Pink = 0,\n    Blue = 1,\n    Red = 2,\n    Green = 3,\n    Yellow = 4,\n    Purple = 5,\n    RebeccaPurple = 6,\n    White = 7\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-barflag","title":"enum BarFlag","text":"<pre><code>enum endstone::BarFlag {\n    DarkenSky,\n    Count\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-barstyle","title":"enum BarStyle","text":"<pre><code>enum endstone::BarStyle {\n    Solid,\n    Segmented6,\n    Segmented10,\n    Segmented12,\n    Segmented20\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-blockface","title":"enum BlockFace","text":"<pre><code>enum endstone::BlockFace {\n    Down,\n    Up,\n    North,\n    South,\n    West,\n    East\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#typedef-blockstates","title":"typedef BlockStates","text":"<pre><code>using endstone::BlockStates = typedef std::unordered_map&lt;std::string, std::variant&lt;bool, std::string, int&gt; &gt;;\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-displayslot","title":"enum DisplaySlot","text":"<p>Locations for displaying objectives to the player. <pre><code>enum endstone::DisplaySlot {\n    BelowName,\n    PlayerList,\n    SideBar\n};\n</code></pre></p>"},{"location":"reference/cpp/namespaceendstone/#enum-equipmentslot","title":"enum EquipmentSlot","text":"<pre><code>enum endstone::EquipmentSlot {\n    Hand,\n    OffHand,\n    Feet,\n    Legs,\n    Chest,\n    Head,\n    Body\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-eventpriority","title":"enum EventPriority","text":"<p>Represents an event's priority in execution. <pre><code>enum endstone::EventPriority {\n    Lowest = 0,\n    Low = 1,\n    Normal = 2,\n    High = 3,\n    Highest = 4,\n    Monitor = 5\n};\n</code></pre></p> <p>Listeners with lower priority are called first will listeners with higher priority are called last. Listeners are called in following order: LOWEST -&gt; LOW -&gt; NORMAL -&gt; HIGH -&gt; HIGHEST -&gt; MONITOR </p>"},{"location":"reference/cpp/namespaceendstone/#enum-eventresult","title":"enum EventResult","text":"<pre><code>enum endstone::EventResult {\n    Deny,\n    Default,\n    Allow\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-gamemode","title":"enum GameMode","text":"<p>Represents the various type of game modes that Players may have. <pre><code>enum endstone::GameMode {\n    Survival = 0,\n    Creative = 1,\n    Adventure = 2,\n    Spectator = 3\n};\n</code></pre></p>"},{"location":"reference/cpp/namespaceendstone/#typedef-message","title":"typedef Message","text":"<pre><code>using endstone::Message = typedef std::variant&lt;std::string, Translatable&gt;;\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-objectivesortorder","title":"enum ObjectiveSortOrder","text":"<p>Represents the sort order of objectives on a DisplaySlot. <pre><code>enum endstone::ObjectiveSortOrder {\n    Ascending,\n    Descending\n};\n</code></pre></p>"},{"location":"reference/cpp/namespaceendstone/#enum-permissiondefault","title":"enum PermissionDefault","text":"<p>Represents the possible default values for permissions. <pre><code>enum endstone::PermissionDefault {\n    True,\n    False,\n    Operator,\n    NotOperator,\n    Console\n};\n</code></pre></p>"},{"location":"reference/cpp/namespaceendstone/#enum-permissionlevel","title":"enum PermissionLevel","text":"<pre><code>enum endstone::PermissionLevel {\n    Default = 0,\n    Operator = 1,\n    Console = 2\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#typedef-permissionremovedexecutor","title":"typedef PermissionRemovedExecutor","text":"<pre><code>using endstone::PermissionRemovedExecutor = typedef std::function&lt;void(const PermissionAttachment &amp;)&gt;;\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-pluginloadorder","title":"enum PluginLoadOrder","text":"<p>Represents the order in which a plugin should be initialized and enabled. <pre><code>enum endstone::PluginLoadOrder {\n    Startup,\n    PostWorld\n};\n</code></pre></p>"},{"location":"reference/cpp/namespaceendstone/#enum-rendertype","title":"enum RenderType","text":"<p>Controls the way in which an Objective is rendered on the client side. <pre><code>enum endstone::RenderType {\n    Integer,\n    Hearts\n};\n</code></pre></p>"},{"location":"reference/cpp/namespaceendstone/#typedef-result","title":"typedef Result","text":"<pre><code>using endstone::Result = typedef nonstd::expected&lt;T, std::string&gt;;\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#typedef-scoreentry","title":"typedef ScoreEntry","text":"<pre><code>using endstone::ScoreEntry = typedef std::variant&lt;Player *, Actor *, std::string&gt;;\n</code></pre> <p>An entry for a score. </p>"},{"location":"reference/cpp/namespaceendstone/#enum-servicepriority","title":"enum ServicePriority","text":"<p>Represents various priorities of a provider. <pre><code>enum endstone::ServicePriority {\n    Lowest,\n    Low,\n    Normal,\n    High,\n    Highest\n};\n</code></pre></p>"},{"location":"reference/cpp/namespaceendstone/#typedef-taskid","title":"typedef TaskId","text":"<pre><code>using endstone::TaskId = typedef std::uint32_t;\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/namespaceendstone/#function-hash_value","title":"function hash_value","text":"<pre><code>inline std::size_t endstone::hash_value (\n    UUID const &amp; u\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator","title":"function operator!=","text":"<pre><code>inline bool endstone::operator!= (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_1","title":"function operator&lt;","text":"<pre><code>inline bool endstone::operator&lt; (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_2","title":"function operator&lt;=","text":"<pre><code>inline bool endstone::operator&lt;= (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_3","title":"function operator==","text":"<pre><code>inline bool endstone::operator== (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_4","title":"function operator&gt;","text":"<pre><code>inline bool endstone::operator&gt; (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_5","title":"function operator&gt;=","text":"<pre><code>inline bool endstone::operator&gt;= (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-overloaded","title":"function overloaded","text":"<p>Deduction guide. <pre><code>template&lt;typename... Func&gt;\nendstone::overloaded (\n    Func...\n) \n</code></pre></p> <p>Template parameters:</p> <ul> <li><code>Func</code> Types of function objects. </li> </ul>"},{"location":"reference/cpp/namespaceendstone/#function-swap","title":"function swap","text":"<pre><code>inline void endstone::swap (\n    UUID &amp; lhs,\n    UUID &amp; rhs\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/actor/actor.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/","title":"Class endstone::ActionForm","text":"<p>ClassList &gt; endstone &gt; ActionForm</p> <p>Represents a form with buttons that let the player take action. </p> <ul> <li><code>#include &lt;endstone/form/action_form.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Form</p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#public-types","title":"Public Types","text":"Type Name typedef std::variant&lt; Button, Divider, Header, Label &gt; Control typedef std::function&lt; void(Player *, int)&gt; OnSubmitCallback"},{"location":"reference/cpp/classendstone_1_1ActionForm/#public-types-inherited-from-endstoneform","title":"Public Types inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name typedef std::function&lt; void(Player *)&gt; OnCloseCallback"},{"location":"reference/cpp/classendstone_1_1ActionForm/#public-functions","title":"Public Functions","text":"Type Name ActionForm () = default ActionForm &amp; addButton (const Message &amp; text, const std::optional&lt; std::string &gt; &amp; icon=std::nullopt, Button::OnClickCallback on_click={}) Adds a button to the form. ActionForm &amp; addDivider () Adds a divider to the form. ActionForm &amp; addHeader (const Message &amp; text) Adds a header to the form. ActionForm &amp; addLabel (const Message &amp; text) Adds a label to the form. Message getContent () constGet the content of the form. const std::vector&lt; Control &gt; &amp; getControls () constGet the controls of the action form. OnSubmitCallback getOnSubmit () constGets the on submit callback of the form. ActionForm &amp; setContent (Message text) Set the content of the form. ActionForm &amp; setControls (const std::vector&lt; Control &gt; &amp; controls) Set the controls of the action form. ActionForm &amp; setOnSubmit (OnSubmitCallback on_submit) Sets the on submit callback of the form."},{"location":"reference/cpp/classendstone_1_1ActionForm/#public-functions-inherited-from-endstoneform","title":"Public Functions inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name Form () = default OnCloseCallback getOnClose () constGets the on close callback of the form. Message getTitle () constGets the title of the form. T &amp; setOnClose (OnCloseCallback on_close) Sets the on close callback of the form. T &amp; setTitle (Message title) Sets the title of the form."},{"location":"reference/cpp/classendstone_1_1ActionForm/#protected-attributes-inherited-from-endstoneform","title":"Protected Attributes inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name OnCloseCallback on_close_ Message title_"},{"location":"reference/cpp/classendstone_1_1ActionForm/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActionForm/#typedef-control","title":"typedef Control","text":"<pre><code>using endstone::ActionForm::Control =  std::variant&lt;Button, Divider, Header, Label&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#typedef-onsubmitcallback","title":"typedef OnSubmitCallback","text":"<pre><code>using endstone::ActionForm::OnSubmitCallback =  std::function&lt;void(Player *, int)&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-actionform","title":"function ActionForm","text":"<pre><code>explicit endstone::ActionForm::ActionForm () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-addbutton","title":"function addButton","text":"<p>Adds a button to the form. <pre><code>inline ActionForm &amp; endstone::ActionForm::addButton (\n    const Message &amp; text,\n    const std::optional&lt; std::string &gt; &amp; icon=std::nullopt,\n    Button::OnClickCallback on_click={}\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text of the button </li> <li><code>icon</code> The path or URL to the icon image </li> <li><code>on_click</code> The on click callback of the button </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-adddivider","title":"function addDivider","text":"<p>Adds a divider to the form. <pre><code>inline ActionForm &amp; endstone::ActionForm::addDivider () \n</code></pre></p> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-addheader","title":"function addHeader","text":"<p>Adds a header to the form. <pre><code>inline ActionForm &amp; endstone::ActionForm::addHeader (\n    const Message &amp; text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text of the header </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-addlabel","title":"function addLabel","text":"<p>Adds a label to the form. <pre><code>inline ActionForm &amp; endstone::ActionForm::addLabel (\n    const Message &amp; text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text of the label </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-getcontent","title":"function getContent","text":"<p>Get the content of the form. <pre><code>inline Message endstone::ActionForm::getContent () const\n</code></pre></p> <p>Returns:</p> <p>The content of the form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-getcontrols","title":"function getControls","text":"<p>Get the controls of the action form. <pre><code>inline const std::vector&lt; Control &gt; &amp; endstone::ActionForm::getControls () const\n</code></pre></p> <p>Returns:</p> <p>A list of controls in the action form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-getonsubmit","title":"function getOnSubmit","text":"<p>Gets the on submit callback of the form. <pre><code>inline OnSubmitCallback endstone::ActionForm::getOnSubmit () const\n</code></pre></p> <p>Returns:</p> <p>The on submit callback of the form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-setcontent","title":"function setContent","text":"<p>Set the content of the form. <pre><code>inline ActionForm &amp; endstone::ActionForm::setContent (\n    Message text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to set as the content. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-setcontrols","title":"function setControls","text":"<p>Set the controls of the action form. <pre><code>inline ActionForm &amp; endstone::ActionForm::setControls (\n    const std::vector&lt; Control &gt; &amp; controls\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>controls</code> The list of controls to set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ActionForm/#function-setonsubmit","title":"function setOnSubmit","text":"<p>Sets the on submit callback of the form. <pre><code>inline ActionForm &amp; endstone::ActionForm::setOnSubmit (\n    OnSubmitCallback on_submit\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>on_submit</code> The callback to be set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/action_form.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Actor/","title":"Class endstone::Actor","text":"<p>ClassList &gt; endstone &gt; Actor</p> <p>Represents a base actor in the level. </p> <ul> <li><code>#include &lt;endstone/actor/actor.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::CommandSender</p> <p>Inherited by the following classes: endstone::Item,  endstone::Mob</p>"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions","title":"Public Functions","text":"Type Name virtual bool addScoreboardTag (std::string tag) const = 0Adds a tag to this actor. virtual Item * asItem () const = 0Gets an Actor asItem . virtual Mob * asMob () const = 0Gets an Actor asMob . virtual Dimension &amp; getDimension () const = 0 virtual int getHealth () const = 0Gets the entity's health from 0 to its max possible value, where 0 is dead. virtual std::int64_t getId () const = 0Returns a unique id for this actor. virtual Level &amp; getLevel () const = 0 virtual Location getLocation () const = 0 virtual int getMaxHealth () const = 0Gets the maximum health this entity has. virtual std::string getNameTag () const = 0Gets the current name tag of the actor. virtual std::uint64_t getRuntimeId () const = 0 virtual std::string getScoreTag () const = 0Gets the current score tag of the actor. virtual std::vector&lt; std::string &gt; getScoreboardTags () const = 0Returns a list of scoreboard tags for this actor. virtual std::string getType () const = 0Get the type of the actor. virtual Vector getVelocity () const = 0 virtual bool isDead () const = 0Returns true if this actor has been marked for removal. virtual bool isInLava () const = 0 virtual bool isInWater () const = 0 virtual bool isNameTagAlwaysVisible () const = 0Checks if the actor's name tag is always visible. virtual bool isNameTagVisible () const = 0Checks if the actor's name tag is currently visible. virtual bool isOnGround () const = 0 virtual bool isValid () const = 0 virtual void remove () = 0 virtual bool removeScoreboardTag (std::string tag) const = 0Removes a given tag from this actor. virtual Result&lt; void &gt; setHealth (int health) const = 0 virtual void setNameTag (std::string name) = 0Sets the name tag for the actor. virtual void setNameTagAlwaysVisible (bool visible) = 0Sets whether the actor's name tag should always be visible. virtual void setNameTagVisible (bool visible) = 0Sets if the actor's name tag is visible or not. virtual void setRotation (float yaw, float pitch) = 0 virtual void setScoreTag (std::string score) = 0Sets the score tag for the actor. virtual void teleport (Location location) = 0 virtual void teleport (Actor &amp; target) = 0"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Actor/#function-addscoreboardtag","title":"function addScoreboardTag","text":"<p>Adds a tag to this actor. <pre><code>virtual bool endstone::Actor::addScoreboardTag (\n    std::string tag\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tag</code> the tag to add </li> </ul> <p>Returns:</p> <p>true if the tag was successfully added, false if the tag already exists. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-asitem","title":"function asItem","text":"<p>Gets an Actor asItem . <pre><code>virtual Item * endstone::Actor::asItem () const = 0\n</code></pre></p> <p>Returns:</p> <p>Item, nullptr if not an Item </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-asmob","title":"function asMob","text":"<p>Gets an Actor asMob . <pre><code>virtual Mob * endstone::Actor::asMob () const = 0\n</code></pre></p> <p>Returns:</p> <p>Mob, nullptr if not an Mob </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getdimension","title":"function getDimension","text":"<pre><code>virtual Dimension &amp; endstone::Actor::getDimension () const = 0\n</code></pre> <p>Gets the current Dimension this actor resides in</p> <p>Returns:</p> <p>The current Dimension this actor resides in </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-gethealth","title":"function getHealth","text":"<p>Gets the entity's health from 0 to its max possible value, where 0 is dead. <pre><code>virtual int endstone::Actor::getHealth () const = 0\n</code></pre></p> <p>Returns:</p> <p>Health represented from 0 to max </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getid","title":"function getId","text":"<p>Returns a unique id for this actor. <pre><code>virtual std::int64_t endstone::Actor::getId () const = 0\n</code></pre></p> <p>Returns:</p> <p>Actor id </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getlevel","title":"function getLevel","text":"<pre><code>virtual Level &amp; endstone::Actor::getLevel () const = 0\n</code></pre> <p>Gets the current Level this actor resides in</p> <p>Returns:</p> <p>The current Level this actor resides in </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getlocation","title":"function getLocation","text":"<pre><code>virtual Location endstone::Actor::getLocation () const = 0\n</code></pre> <p>Gets the actor's current position</p> <p>Returns:</p> <p>a new copy of Location containing the position of this actor </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getmaxhealth","title":"function getMaxHealth","text":"<p>Gets the maximum health this entity has. <pre><code>virtual int endstone::Actor::getMaxHealth () const = 0\n</code></pre></p> <p>Returns:</p> <p>Maximum health </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getnametag","title":"function getNameTag","text":"<p>Gets the current name tag of the actor. <pre><code>virtual std::string endstone::Actor::getNameTag () const = 0\n</code></pre></p> <p>Returns:</p> <p>The name tag. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getruntimeid","title":"function getRuntimeId","text":"<pre><code>virtual std::uint64_t endstone::Actor::getRuntimeId () const = 0\n</code></pre> <p>Returns the runtime id for this actor</p> <p>Returns:</p> <p>Runtime id for this actor </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getscoretag","title":"function getScoreTag","text":"<p>Gets the current score tag of the actor. <pre><code>virtual std::string endstone::Actor::getScoreTag () const = 0\n</code></pre></p> <p>Returns:</p> <p>The score tag. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getscoreboardtags","title":"function getScoreboardTags","text":"<p>Returns a list of scoreboard tags for this actor. <pre><code>virtual std::vector&lt; std::string &gt; endstone::Actor::getScoreboardTags () const = 0\n</code></pre></p> <p>Returns:</p> <p>a list of scoreboard tags for this actor </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-gettype","title":"function getType","text":"<p>Get the type of the actor. <pre><code>virtual std::string endstone::Actor::getType () const = 0\n</code></pre></p> <p>This method returns the type of the actor as a string, for example, minecraft:pig.</p> <p>Returns:</p> <p>The type of the actor. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getvelocity","title":"function getVelocity","text":"<pre><code>virtual Vector endstone::Actor::getVelocity () const = 0\n</code></pre> <p>Gets this actor's current velocity</p> <p>Returns:</p> <p>Current traveling velocity of this actor </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isdead","title":"function isDead","text":"<p>Returns true if this actor has been marked for removal. <pre><code>virtual bool endstone::Actor::isDead () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if it is dead. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isinlava","title":"function isInLava","text":"<pre><code>virtual bool endstone::Actor::isInLava () const = 0\n</code></pre> <p>Returns true if the actor is in lava.</p> <p>Returns:</p> <p>True if the actor is in lava. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isinwater","title":"function isInWater","text":"<pre><code>virtual bool endstone::Actor::isInWater () const = 0\n</code></pre> <p>Returns true if the actor is in water.</p> <p>Returns:</p> <p>True if the actor is in water. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isnametagalwaysvisible","title":"function isNameTagAlwaysVisible","text":"<p>Checks if the actor's name tag is always visible. <pre><code>virtual bool endstone::Actor::isNameTagAlwaysVisible () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if the name tag is always visible, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isnametagvisible","title":"function isNameTagVisible","text":"<p>Checks if the actor's name tag is currently visible. <pre><code>virtual bool endstone::Actor::isNameTagVisible () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if the name tag is visible, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isonground","title":"function isOnGround","text":"<pre><code>virtual bool endstone::Actor::isOnGround () const = 0\n</code></pre> <p>Returns true if the actor is supported by a block.</p> <p>Returns:</p> <p>True if actor is on ground. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isvalid","title":"function isValid","text":"<pre><code>virtual bool endstone::Actor::isValid () const = 0\n</code></pre> <p>Returns false if the entity has died, been despawned for some other reason, or has not been added to the level.</p> <p>Returns:</p> <p>True if valid. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-remove","title":"function remove","text":"<pre><code>virtual void endstone::Actor::remove () = 0\n</code></pre> <p>Remove this actor from the level.</p> <p>If you are trying to remove a Player, use Player::kick instead. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-removescoreboardtag","title":"function removeScoreboardTag","text":"<p>Removes a given tag from this actor. <pre><code>virtual bool endstone::Actor::removeScoreboardTag (\n    std::string tag\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tag</code> the tag to remove </li> </ul> <p>Returns:</p> <p>true if the tag was successfully removed, false if the tag does not exist. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-sethealth","title":"function setHealth","text":"<pre><code>virtual Result&lt; void &gt; endstone::Actor::setHealth (\n    int health\n) const = 0\n</code></pre> <p>Sets the entity's health from 0 to its possible value, where 0 is dead.</p> <p>Parameters:</p> <ul> <li><code>health</code> New health represented from 0 to max </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-setnametag","title":"function setNameTag","text":"<p>Sets the name tag for the actor. <pre><code>virtual void endstone::Actor::setNameTag (\n    std::string name\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The new name tag to set. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-setnametagalwaysvisible","title":"function setNameTagAlwaysVisible","text":"<p>Sets whether the actor's name tag should always be visible. <pre><code>virtual void endstone::Actor::setNameTagAlwaysVisible (\n    bool visible\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>visible</code> True to make the name tag always visible, false to disable always visibility. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-setnametagvisible","title":"function setNameTagVisible","text":"<p>Sets if the actor's name tag is visible or not. <pre><code>virtual void endstone::Actor::setNameTagVisible (\n    bool visible\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>visible</code> True to make the name tag visible, false to hide it. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-setrotation","title":"function setRotation","text":"<pre><code>virtual void endstone::Actor::setRotation (\n    float yaw,\n    float pitch\n) = 0\n</code></pre> <p>Returns:</p> <p>Sets the actor's rotation. </p> <p>Note that if the actor is affected by AI, it may override this rotation.</p> <p>Parameters:</p> <ul> <li><code>yaw</code> Rotation around the up axis (Y axis) </li> <li><code>pitch</code> Rotation around the right axis (X axis) </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-setscoretag","title":"function setScoreTag","text":"<p>Sets the score tag for the actor. <pre><code>virtual void endstone::Actor::setScoreTag (\n    std::string score\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>score</code> The new score tag to set. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-teleport-12","title":"function teleport [\u00bd]","text":"<pre><code>virtual void endstone::Actor::teleport (\n    Location location\n) = 0\n</code></pre> <p>Returns:</p> <p>Teleports this actor to the given location.</p> <p>Parameters:</p> <ul> <li><code>location</code> New location to teleport this actor to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-teleport-22","title":"function teleport [2/2]","text":"<pre><code>virtual void endstone::Actor::teleport (\n    Actor &amp; target\n) = 0\n</code></pre> <p>Teleports this actor to the target Actor.</p> <p>Parameters:</p> <ul> <li><code>target</code> Actor to teleport this actor to </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/actor/actor.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/","title":"Class endstone::ActorDamageEvent","text":"<p>ClassList &gt; endstone &gt; ActorDamageEvent</p> <p>Called when an Actor is damaged.</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_damage_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ActorDamageEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#public-functions","title":"Public Functions","text":"Type Name ActorDamageEvent (Mob &amp; actor, std::unique_ptr&lt; DamageSource &gt; damage_source, const float damage)  float getDamage () constGets the raw amount of damage caused by the event. DamageSource &amp; getDamageSource () constGet the source of damage. virtual std::string getEventName () override const void setDamage (const float damage) Sets the raw amount of damage caused by the event."},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorDamageEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#function-actordamageevent","title":"function ActorDamageEvent","text":"<pre><code>inline endstone::ActorDamageEvent::ActorDamageEvent (\n    Mob &amp; actor,\n    std::unique_ptr&lt; DamageSource &gt; damage_source,\n    const float damage\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#function-getdamage","title":"function getDamage","text":"<p>Gets the raw amount of damage caused by the event. <pre><code>inline float endstone::ActorDamageEvent::getDamage () const\n</code></pre></p> <p>Returns:</p> <p>The raw amount of damage caused by the event </p>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#function-getdamagesource","title":"function getDamageSource","text":"<p>Get the source of damage. <pre><code>inline DamageSource &amp; endstone::ActorDamageEvent::getDamageSource () const\n</code></pre></p> <p>Returns:</p> <p>a DamageSource detailing the source of the damage. </p>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorDamageEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ActorDamageEvent/#function-setdamage","title":"function setDamage","text":"<p>Sets the raw amount of damage caused by the event. <pre><code>inline void endstone::ActorDamageEvent::setDamage (\n    const float damage\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>damage</code> The raw amount of damage caused by the event </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_damage_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/","title":"Class endstone::ActorDeathEvent","text":"<p>ClassList &gt; endstone &gt; ActorDeathEvent</p> <p>Called when an Actor dies.</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_death_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ActorEvent</p> <p>Inherited by the following classes: endstone::PlayerDeathEvent</p>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ActorDeathEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions","title":"Public Functions","text":"Type Name ActorDeathEvent (Mob &amp; actor, std::unique_ptr&lt; DamageSource &gt; damage_source)  DamageSource &amp; getDamageSource () constGets the source of damage which caused the death. virtual std::string getEventName () override const"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions-inherited-from-endstoneactorevent","title":"Public Functions inherited from endstone::ActorEvent","text":"<p>See endstone::ActorEvent</p> Type Name ActorEvent (ActorType &amp; actor)  ActorType &amp; getActor () constReturns the Actor involved in this event. ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorDeathEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#function-actordeathevent","title":"function ActorDeathEvent","text":"<pre><code>inline endstone::ActorDeathEvent::ActorDeathEvent (\n    Mob &amp; actor,\n    std::unique_ptr&lt; DamageSource &gt; damage_source\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#function-getdamagesource","title":"function getDamageSource","text":"<p>Gets the source of damage which caused the death. <pre><code>inline DamageSource &amp; endstone::ActorDeathEvent::getDamageSource () const\n</code></pre></p> <p>Returns:</p> <p>a DamageSource detailing the source of the damage for the death. </p>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorDeathEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_death_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/","title":"Class endstone::ActorEvent","text":"<p>template &lt;typename ActorType&gt;</p> <p>ClassList &gt; endstone &gt; ActorEvent</p> <p>Represents an Actor-related event. </p> <ul> <li><code>#include &lt;endstone/event/actor/actor_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#public-functions","title":"Public Functions","text":"Type Name ActorEvent (ActorType &amp; actor)  ActorType &amp; getActor () constReturns the Actor involved in this event. ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorEvent/#function-actorevent","title":"function ActorEvent","text":"<pre><code>inline explicit endstone::ActorEvent::ActorEvent (\n    ActorType &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#function-getactor","title":"function getActor","text":"<p>Returns the Actor involved in this event. <pre><code>inline ActorType &amp; endstone::ActorEvent::getActor () const\n</code></pre></p> <p>Returns:</p> <p>Actor which is involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#function-actorevent_1","title":"function ~ActorEvent","text":"<pre><code>endstone::ActorEvent::~ActorEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/","title":"Class endstone::ActorExplodeEvent","text":"<p>ClassList &gt; endstone &gt; ActorExplodeEvent</p> <p>Called when an actor explodes. </p> <ul> <li><code>#include &lt;endstone/event/actor/actor_explode_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ActorExplodeEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#public-functions","title":"Public Functions","text":"Type Name ActorExplodeEvent (Actor &amp; actor, Location location, BlockList blocks)  const BlockList &amp; getBlockList () constReturns the list of blocks that would have been removed or were removed from the explosion event. BlockList &amp; getBlockList () Returns the list of blocks that would have been removed or were removed from the explosion event. virtual std::string getEventName () override const const Location &amp; getLocation () constReturns the location where the explosion happened. ~ActorExplodeEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorExplodeEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#function-actorexplodeevent","title":"function ActorExplodeEvent","text":"<pre><code>inline explicit endstone::ActorExplodeEvent::ActorExplodeEvent (\n    Actor &amp; actor,\n    Location location,\n    BlockList blocks\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#function-getblocklist-12","title":"function getBlockList [\u00bd]","text":"<p>Returns the list of blocks that would have been removed or were removed from the explosion event. <pre><code>inline const BlockList &amp; endstone::ActorExplodeEvent::getBlockList () const\n</code></pre></p> <p>Returns:</p> <p>All blown-up blocks </p>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#function-getblocklist-22","title":"function getBlockList [2/2]","text":"<p>Returns the list of blocks that would have been removed or were removed from the explosion event. <pre><code>inline BlockList &amp; endstone::ActorExplodeEvent::getBlockList () \n</code></pre></p> <p>Returns:</p> <p>All blown-up blocks </p>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorExplodeEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#function-getlocation","title":"function getLocation","text":"<p>Returns the location where the explosion happened. <pre><code>inline const Location &amp; endstone::ActorExplodeEvent::getLocation () const\n</code></pre></p> <p>It is not possible to get this value from the Entity as the Entity no longer exists in the world.</p> <p>Returns:</p> <p>The location of the explosion </p>"},{"location":"reference/cpp/classendstone_1_1ActorExplodeEvent/#function-actorexplodeevent_1","title":"function ~ActorExplodeEvent","text":"<pre><code>endstone::ActorExplodeEvent::~ActorExplodeEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_explode_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/","title":"Class endstone::ActorKnockbackEvent","text":"<p>ClassList &gt; endstone &gt; ActorKnockbackEvent</p> <p>Called when a living entity receives knockback. </p> <ul> <li><code>#include &lt;endstone/event/actor/actor_knockback_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#public-functions","title":"Public Functions","text":"Type Name ActorKnockbackEvent (Mob &amp; mob, Actor * source, Vector knockback)  ENDSTONE_EVENT (ActorKnockbackEvent)  Vector getKnockback () const Actor * getSource () constGet the source actor that has caused knockback to the defender, if exists. void setKnockback (Vector knockback) Sets the knockback that will be applied to the entity."},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#function-actorknockbackevent","title":"function ActorKnockbackEvent","text":"<pre><code>inline explicit endstone::ActorKnockbackEvent::ActorKnockbackEvent (\n    Mob &amp; mob,\n    Actor * source,\n    Vector knockback\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::ActorKnockbackEvent::ENDSTONE_EVENT (\n    ActorKnockbackEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#function-getknockback","title":"function getKnockback","text":"<pre><code>inline Vector endstone::ActorKnockbackEvent::getKnockback () const\n</code></pre> <p>Gets the knockback that will be applied to the entity.</p> <p>Note: this method returns a copy, changes must be applied with setKnockback(Vector)</p> <p>Returns:</p> <p>the knockback </p>"},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#function-getsource","title":"function getSource","text":"<p>Get the source actor that has caused knockback to the defender, if exists. <pre><code>inline Actor * endstone::ActorKnockbackEvent::getSource () const\n</code></pre></p> <p>Returns:</p> <p>actor that caused knockback, or nullptr if the knockback is not caused by an actor. </p>"},{"location":"reference/cpp/classendstone_1_1ActorKnockbackEvent/#function-setknockback","title":"function setKnockback","text":"<p>Sets the knockback that will be applied to the entity. <pre><code>inline void endstone::ActorKnockbackEvent::setKnockback (\n    Vector knockback\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>knockback</code> the knockback to apply </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_knockback_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/","title":"Class endstone::ActorRemoveEvent","text":"<p>ClassList &gt; endstone &gt; ActorRemoveEvent</p> <p>Called when an Actor is removed.More...</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_remove_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ActorEvent</p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ActorRemoveEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions","title":"Public Functions","text":"Type Name ActorEvent (ActorType &amp; actor)  virtual std::string getEventName () override const"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions-inherited-from-endstoneactorevent","title":"Public Functions inherited from endstone::ActorEvent","text":"<p>See endstone::ActorEvent</p> Type Name ActorEvent (ActorType &amp; actor)  ActorType &amp; getActor () constReturns the Actor involved in this event. ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#detailed-description","title":"Detailed Description","text":"<p>This event should only be used for monitoring. Modifying the actor during or after this event leads to undefined behaviours. This event will not be called for Players. </p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorRemoveEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#function-actorevent","title":"function ActorEvent","text":"<pre><code>inline explicit endstone::ActorRemoveEvent::ActorEvent (\n    ActorType &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorRemoveEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_remove_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/","title":"Class endstone::ActorSpawnEvent","text":"<p>ClassList &gt; endstone &gt; ActorSpawnEvent</p> <p>Called when an Actor is spawned into a world.More...</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_spawn_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ActorSpawnEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions","title":"Public Functions","text":"Type Name ActorSpawnEvent (Actor &amp; actor)  virtual std::string getEventName () override const ~ActorSpawnEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#detailed-description","title":"Detailed Description","text":"<p>If an Actor Spawn event is cancelled, the actor will not spawn. </p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorSpawnEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#function-actorspawnevent","title":"function ActorSpawnEvent","text":"<pre><code>inline explicit endstone::ActorSpawnEvent::ActorSpawnEvent (\n    Actor &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorSpawnEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#function-actorspawnevent_1","title":"function ~ActorSpawnEvent","text":"<pre><code>endstone::ActorSpawnEvent::~ActorSpawnEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_spawn_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/","title":"Class endstone::ActorTeleportEvent","text":"<p>ClassList &gt; endstone &gt; ActorTeleportEvent</p> <p>Called when a non-player entity is teleported from one location to another. More...</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_teleport_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ActorTeleportEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#public-functions","title":"Public Functions","text":"Type Name ActorTeleportEvent (Actor &amp; actor, Location from, Location to)  virtual std::string getEventName () override const const Location &amp; getFrom () constGets the location that this actor moved from. const Location &amp; getTo () constGets the location that this actor moved to. void setFrom (const Location &amp; from) Sets the location that this actor moved from. void setTo (const Location &amp; to) Sets the location that this actor moved to. ~ActorTeleportEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#detailed-description","title":"Detailed Description","text":"<p>This may be as a result of natural causes (Enderman, Shulker), pathfinding (Wolf), or commands (/teleport). </p>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorTeleportEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#function-actorteleportevent","title":"function ActorTeleportEvent","text":"<pre><code>inline explicit endstone::ActorTeleportEvent::ActorTeleportEvent (\n    Actor &amp; actor,\n    Location from,\n    Location to\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorTeleportEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#function-getfrom","title":"function getFrom","text":"<p>Gets the location that this actor moved from. <pre><code>inline const Location &amp; endstone::ActorTeleportEvent::getFrom () const\n</code></pre></p> <p>Returns:</p> <p>Location this actor moved from </p>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#function-getto","title":"function getTo","text":"<p>Gets the location that this actor moved to. <pre><code>inline const Location &amp; endstone::ActorTeleportEvent::getTo () const\n</code></pre></p> <p>Returns:</p> <p>Location this actor moved to </p>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#function-setfrom","title":"function setFrom","text":"<p>Sets the location that this actor moved from. <pre><code>inline void endstone::ActorTeleportEvent::setFrom (\n    const Location &amp; from\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>from</code> New location this actor moved from </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#function-setto","title":"function setTo","text":"<p>Sets the location that this actor moved to. <pre><code>inline void endstone::ActorTeleportEvent::setTo (\n    const Location &amp; to\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>to</code> New Location this actor moved to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ActorTeleportEvent/#function-actorteleportevent_1","title":"function ~ActorTeleportEvent","text":"<pre><code>endstone::ActorTeleportEvent::~ActorTeleportEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_teleport_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/","title":"Class endstone::BanEntry","text":"<p>ClassList &gt; endstone &gt; BanEntry</p> <p>A single entry from a ban list. </p> <ul> <li><code>#include &lt;endstone/ban/ban_entry.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::IpBanEntry,  endstone::PlayerBanEntry</p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#public-types","title":"Public Types","text":"Type Name typedef std::chrono::system_clock::time_point Date"},{"location":"reference/cpp/classendstone_1_1BanEntry/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string DateFormat   = <code>\"%FT%T%Ez\"</code>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#public-functions","title":"Public Functions","text":"Type Name Date getCreated () constGets the date this ban entry was created. std::optional&lt; Date &gt; getExpiration () constGets the date this ban expires on, or std::nullopt for no defined end date. std::string getReason () constGets the reason for this ban. std::string getSource () constGets the source of this ban. void setCreated (Date created) Sets the date this ban entry was created. void setExpiration (std::optional&lt; Date &gt; expiration) Sets the date this ban expires on. std::nullopt values are considered \"infinite\" bans. void setReason (std::string reason) Sets the reason for this ban. void setSource (std::string source) Sets the source of this ban."},{"location":"reference/cpp/classendstone_1_1BanEntry/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BanEntry/#typedef-date","title":"typedef Date","text":"<pre><code>using endstone::BanEntry::Date =  std::chrono::system_clock::time_point;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BanEntry/#variable-dateformat","title":"variable DateFormat","text":"<pre><code>const std::string endstone::BanEntry::DateFormat;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-getcreated","title":"function getCreated","text":"<p>Gets the date this ban entry was created. <pre><code>inline Date endstone::BanEntry::getCreated () const\n</code></pre></p> <p>Returns:</p> <p>the creation date </p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-getexpiration","title":"function getExpiration","text":"<p>Gets the date this ban expires on, or std::nullopt for no defined end date. <pre><code>inline std::optional&lt; Date &gt; endstone::BanEntry::getExpiration () const\n</code></pre></p> <p>Returns:</p> <p>the expiration date </p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-getreason","title":"function getReason","text":"<p>Gets the reason for this ban. <pre><code>inline std::string endstone::BanEntry::getReason () const\n</code></pre></p> <p>Returns:</p> <p>the ban reason </p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-getsource","title":"function getSource","text":"<p>Gets the source of this ban. <pre><code>inline std::string endstone::BanEntry::getSource () const\n</code></pre></p> <p>Returns:</p> <p>the source of the ban </p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-setcreated","title":"function setCreated","text":"<p>Sets the date this ban entry was created. <pre><code>inline void endstone::BanEntry::setCreated (\n    Date created\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>created</code> the new created date </li> </ul> <p>See also: save() saving changes </p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-setexpiration","title":"function setExpiration","text":"<p>Sets the date this ban expires on. std::nullopt values are considered \"infinite\" bans. <pre><code>inline void endstone::BanEntry::setExpiration (\n    std::optional&lt; Date &gt; expiration\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>expiration</code> the new expiration date, or std::nullopt to indicate an infinite ban </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-setreason","title":"function setReason","text":"<p>Sets the reason for this ban. <pre><code>inline void endstone::BanEntry::setReason (\n    std::string reason\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>reason</code> the new reason, empty values assume the implementation default </li> </ul> <p>See also: save() saving changes </p>"},{"location":"reference/cpp/classendstone_1_1BanEntry/#function-setsource","title":"function setSource","text":"<p>Sets the source of this ban. <pre><code>inline void endstone::BanEntry::setSource (\n    std::string source\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>source</code> the new source </li> </ul> <p>See also: save() saving changes </p> <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ban_entry.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BanList/","title":"Class endstone::BanList","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; endstone &gt; BanList</p> <p>Represents a ban list, containing bans. More...</p> <ul> <li><code>#include &lt;endstone/ban/ban_list.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1BanList/#public-functions","title":"Public Functions","text":"Type Name virtual T &amp; addBan (std::string target, std::optional&lt; std::string &gt; reason, std::optional&lt; BanEntry::Date &gt; expires, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual T &amp; addBan (std::string target, std::optional&lt; std::string &gt; reason, std::chrono::seconds duration, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual const T * getBanEntry (std::string target) const = 0Gets a BanEntry by target. virtual T * getBanEntry (std::string target) = 0Gets a BanEntry by target. virtual std::vector&lt; const T * &gt; getEntries () const = 0Gets a vector containing pointers to every BanEntry in this list. virtual std::vector&lt; T * &gt; getEntries () = 0Gets a vector containing pointers to every BanEntry in this list. virtual bool isBanned (std::string target) const = 0Checks if a BanEntry exists for the target, indicating an active ban status. virtual void removeBan (std::string target) = 0Removes the specified target from this list, therefore indicating a \"not banned\" status. virtual ~BanList () = default"},{"location":"reference/cpp/classendstone_1_1BanList/#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>T</code> The ban target </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BanList/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BanList/#function-addban-12","title":"function addBan [\u00bd]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual T &amp; endstone::BanList::addBan (\n    std::string target,\n    std::optional&lt; std::string &gt; reason,\n    std::optional&lt; BanEntry::Date &gt; expires,\n    std::optional&lt; std::string &gt; source\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>target</code> The target of the ban. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>expires</code> The date for the ban's expiration (unban), or std::nullopt to imply forever. </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>T&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-addban-22","title":"function addBan [2/2]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual T &amp; endstone::BanList::addBan (\n    std::string target,\n    std::optional&lt; std::string &gt; reason,\n    std::chrono::seconds duration,\n    std::optional&lt; std::string &gt; source\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>target</code> The target of the ban. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>duration</code> The duration of the ban </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>T&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-getbanentry-12","title":"function getBanEntry [\u00bd]","text":"<p>Gets a BanEntry by target. <pre><code>virtual const T * endstone::BanList::getBanEntry (\n    std::string target\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>target</code> The entry parameter to search for. </li> </ul> <p>Returns:</p> <p>T* The corresponding entry, or nullptr if none found. </p>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-getbanentry-22","title":"function getBanEntry [2/2]","text":"<p>Gets a BanEntry by target. <pre><code>virtual T * endstone::BanList::getBanEntry (\n    std::string target\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>target</code> The entry parameter to search for. </li> </ul> <p>Returns:</p> <p>T* The corresponding entry, or nullptr if none found. </p>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-getentries-12","title":"function getEntries [\u00bd]","text":"<p>Gets a vector containing pointers to every BanEntry in this list. <pre><code>virtual std::vector&lt; const T * &gt; endstone::BanList::getEntries () const = 0\n</code></pre></p> <p>Returns:</p> <p>A vector containing pointers to every entry tracked by this list. </p>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-getentries-22","title":"function getEntries [2/2]","text":"<p>Gets a vector containing pointers to every BanEntry in this list. <pre><code>virtual std::vector&lt; T * &gt; endstone::BanList::getEntries () = 0\n</code></pre></p> <p>Returns:</p> <p>A vector containing pointers to every entry tracked by this list. </p>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-isbanned","title":"function isBanned","text":"<p>Checks if a BanEntry exists for the target, indicating an active ban status. <pre><code>virtual bool endstone::BanList::isBanned (\n    std::string target\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>target</code> The target to find. </li> </ul> <p>Returns:</p> <p>true If a BanEntry exists for the target, indicating an active ban status. </p> <p>Returns:</p> <p>false Otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-removeban","title":"function removeBan","text":"<p>Removes the specified target from this list, therefore indicating a \"not banned\" status. <pre><code>virtual void endstone::BanList::removeBan (\n    std::string target\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>target</code> The target to remove from this list. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BanList/#function-banlist","title":"function ~BanList","text":"<pre><code>virtual endstone::BanList::~BanList () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ban_list.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Block/","title":"Class endstone::Block","text":"<p>ClassList &gt; endstone &gt; Block</p> <p>Represents a block. More...</p> <ul> <li><code>#include &lt;endstone/block/block.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Block/#public-functions","title":"Public Functions","text":"Type Name virtual std::unique_ptr&lt; BlockState &gt; captureState () const = 0Captures the current state of this block. virtual std::unique_ptr&lt; Block &gt; clone () const = 0Creates a copy of the current block. virtual std::unique_ptr&lt; BlockData &gt; getData () const = 0Gets the complete block data for this block. virtual Dimension &amp; getDimension () const = 0Gets the dimension which contains this Block . virtual Location getLocation () const = 0Gets the Location of the block. virtual std::unique_ptr&lt; Block &gt; getRelative (int offset_x, int offset_y, int offset_z) = 0Gets the block at the given offsets. virtual std::unique_ptr&lt; Block &gt; getRelative (BlockFace face) = 0Gets the block at the given face. virtual std::unique_ptr&lt; Block &gt; getRelative (BlockFace face, int distance) = 0Gets the block at the given distance of the given face. virtual std::string getType () const = 0Get the type of the block. virtual int getX () const = 0Gets the x-coordinate of this block. virtual int getY () const = 0Gets the y-coordinate of this block. virtual int getZ () const = 0Gets the z-coordinate of this block. virtual Result&lt; void &gt; setData (const BlockData &amp; data) = 0Sets the complete data for this block. virtual Result&lt; void &gt; setData (const BlockData &amp; data, bool apply_physics) = 0Sets the complete data for this block. virtual Result&lt; void &gt; setType (std::string type) = 0Sets the type of this block. virtual Result&lt; void &gt; setType (std::string type, bool apply_physics) = 0Sets the type of this block. virtual ~Block () = default"},{"location":"reference/cpp/classendstone_1_1Block/#detailed-description","title":"Detailed Description","text":"<p>This is a live object, and only one Block may exist for any given location in a dimension. </p>"},{"location":"reference/cpp/classendstone_1_1Block/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Block/#function-capturestate","title":"function captureState","text":"<p>Captures the current state of this block. <pre><code>virtual std::unique_ptr&lt; BlockState &gt; endstone::Block::captureState () const = 0\n</code></pre></p> <p>The returned object will never be updated, and you are not guaranteed that (for example) a sign is still a sign after you capture its state.</p> <p>Returns:</p> <p>BlockState with the current state of this block. </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-clone","title":"function clone","text":"<p>Creates a copy of the current block. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Block::clone () const = 0\n</code></pre></p> <p>Returns:</p> <p>Block </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getdata","title":"function getData","text":"<p>Gets the complete block data for this block. <pre><code>virtual std::unique_ptr&lt; BlockData &gt; endstone::Block::getData () const = 0\n</code></pre></p> <p>Returns:</p> <p>block specific data </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getdimension","title":"function getDimension","text":"<p>Gets the dimension which contains this Block . <pre><code>virtual Dimension &amp; endstone::Block::getDimension () const = 0\n</code></pre></p> <p>Returns:</p> <p>Dimension containing this block </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getlocation","title":"function getLocation","text":"<p>Gets the Location of the block. <pre><code>virtual Location endstone::Block::getLocation () const = 0\n</code></pre></p> <p>Returns:</p> <p>Location of block </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getrelative-13","title":"function getRelative [\u2153]","text":"<p>Gets the block at the given offsets. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Block::getRelative (\n    int offset_x,\n    int offset_y,\n    int offset_z\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>offset_x</code> X-coordinate offset </li> <li><code>offset_y</code> Y-coordinate offset </li> <li><code>offset_z</code> Z-coordinate offset </li> </ul> <p>Returns:</p> <p>Block at the given offsets </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getrelative-23","title":"function getRelative [\u2154]","text":"<p>Gets the block at the given face. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Block::getRelative (\n    BlockFace face\n) = 0\n</code></pre></p> <p>This method is equal to getRelative(face, 1)</p> <p>Parameters:</p> <ul> <li><code>face</code> Face of this block to return </li> </ul> <p>Returns:</p> <p>Block at the given face </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getrelative-33","title":"function getRelative [3/3]","text":"<p>Gets the block at the given distance of the given face. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Block::getRelative (\n    BlockFace face,\n    int distance\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>face</code> Face of this block to return </li> <li><code>distance</code> Distance to get the block at </li> </ul> <p>Returns:</p> <p>Block at the given face </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-gettype","title":"function getType","text":"<p>Get the type of the block. <pre><code>virtual std::string endstone::Block::getType () const = 0\n</code></pre></p> <p>This method returns the type of the block as a string, for example, minecraft:acacia_stairs.</p> <p>Returns:</p> <p>The type of the block. </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getx","title":"function getX","text":"<p>Gets the x-coordinate of this block. <pre><code>virtual int endstone::Block::getX () const = 0\n</code></pre></p> <p>Returns:</p> <p>x-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-gety","title":"function getY","text":"<p>Gets the y-coordinate of this block. <pre><code>virtual int endstone::Block::getY () const = 0\n</code></pre></p> <p>Returns:</p> <p>x-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-getz","title":"function getZ","text":"<p>Gets the z-coordinate of this block. <pre><code>virtual int endstone::Block::getZ () const = 0\n</code></pre></p> <p>Returns:</p> <p>x-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1Block/#function-setdata-12","title":"function setData [\u00bd]","text":"<p>Sets the complete data for this block. <pre><code>virtual Result&lt; void &gt; endstone::Block::setData (\n    const BlockData &amp; data\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> new block specific data </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Block/#function-setdata-22","title":"function setData [2/2]","text":"<p>Sets the complete data for this block. <pre><code>virtual Result&lt; void &gt; endstone::Block::setData (\n    const BlockData &amp; data,\n    bool apply_physics\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> new block specific data </li> <li><code>apply_physics</code> False to cancel physics on the changed block. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Block/#function-settype-12","title":"function setType [\u00bd]","text":"<p>Sets the type of this block. <pre><code>virtual Result&lt; void &gt; endstone::Block::setType (\n    std::string type\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> Material to change this block to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Block/#function-settype-22","title":"function setType [2/2]","text":"<p>Sets the type of this block. <pre><code>virtual Result&lt; void &gt; endstone::Block::setType (\n    std::string type,\n    bool apply_physics\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> Material to change this block to </li> <li><code>apply_physics</code> False to cancel physics on the changed block. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Block/#function-block","title":"function ~Block","text":"<pre><code>virtual endstone::Block::~Block () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/","title":"Class endstone::BlockBreakEvent","text":"<p>ClassList &gt; endstone &gt; BlockBreakEvent</p> <p>Called when a block is broken by a player. More...</p> <ul> <li><code>#include &lt;endstone/event/block/block_break_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"BlockBreakEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#public-functions","title":"Public Functions","text":"Type Name BlockBreakEvent (std::unique_ptr&lt; Block &gt; block, Player &amp; player)  virtual std::string getEventName () override const Player &amp; getPlayer () constGets the Player that is breaking the block involved in this event. ~BlockBreakEvent () override"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#detailed-description","title":"Detailed Description","text":"<p>If a BlockBreakEvent is cancelled, the block will not break and experience will not drop. </p>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::BlockBreakEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#function-blockbreakevent","title":"function BlockBreakEvent","text":"<pre><code>inline explicit endstone::BlockBreakEvent::BlockBreakEvent (\n    std::unique_ptr&lt; Block &gt; block,\n    Player &amp; player\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::BlockBreakEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#function-getplayer","title":"function getPlayer","text":"<p>Gets the Player that is breaking the block involved in this event. <pre><code>inline Player &amp; endstone::BlockBreakEvent::getPlayer () const\n</code></pre></p> <p>Returns:</p> <p>The Player that is breaking the block involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1BlockBreakEvent/#function-blockbreakevent_1","title":"function ~BlockBreakEvent","text":"<pre><code>endstone::BlockBreakEvent::~BlockBreakEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_break_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockCommandSender/","title":"Class endstone::BlockCommandSender","text":"<p>ClassList &gt; endstone &gt; BlockCommandSender</p> <p>Represents a block command sender. </p> <ul> <li><code>#include &lt;endstone/command/block_command_sender.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::CommandSender</p>"},{"location":"reference/cpp/classendstone_1_1BlockCommandSender/#public-functions","title":"Public Functions","text":"Type Name virtual std::unique_ptr&lt; Block &gt; getBlock () const = 0Returns the block this command sender belongs to."},{"location":"reference/cpp/classendstone_1_1BlockCommandSender/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1BlockCommandSender/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1BlockCommandSender/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockCommandSender/#function-getblock","title":"function getBlock","text":"<p>Returns the block this command sender belongs to. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::BlockCommandSender::getBlock () const = 0\n</code></pre></p> <p>Returns:</p> <p>Block for the command sender </p> <p>The documentation for this class was generated from the following file <code>include/endstone/command/block_command_sender.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/","title":"Class endstone::BlockCookEvent","text":"<p>ClassList &gt; endstone &gt; BlockCookEvent</p> <p>Called when an ItemStack is successfully cooked in a block.</p> <ul> <li><code>#include &lt;endstone/event/block/block_cook_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#public-functions","title":"Public Functions","text":"Type Name BlockCookEvent (std::unique_ptr&lt; Block &gt; block, std::unique_ptr&lt; ItemStack &gt; source, std::unique_ptr&lt; ItemStack &gt; result)  ENDSTONE_EVENT (BlockCookEvent)  const ItemStack &amp; getResult () constGets the resultant ItemStack for this event. const ItemStack &amp; getSource () constGets the smelted ItemStack for this event. void setResult (std::unique_ptr&lt; ItemStack &gt; result) Sets the resultant ItemStack for this event."},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#function-blockcookevent","title":"function BlockCookEvent","text":"<pre><code>inline endstone::BlockCookEvent::BlockCookEvent (\n    std::unique_ptr&lt; Block &gt; block,\n    std::unique_ptr&lt; ItemStack &gt; source,\n    std::unique_ptr&lt; ItemStack &gt; result\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::BlockCookEvent::ENDSTONE_EVENT (\n    BlockCookEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#function-getresult","title":"function getResult","text":"<p>Gets the resultant ItemStack for this event. <pre><code>inline const ItemStack &amp; endstone::BlockCookEvent::getResult () const\n</code></pre></p> <p>Returns:</p> <p>smelting result ItemStack </p>"},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#function-getsource","title":"function getSource","text":"<p>Gets the smelted ItemStack for this event. <pre><code>inline const ItemStack &amp; endstone::BlockCookEvent::getSource () const\n</code></pre></p> <p>Returns:</p> <p>smelting source ItemStack </p>"},{"location":"reference/cpp/classendstone_1_1BlockCookEvent/#function-setresult","title":"function setResult","text":"<p>Sets the resultant ItemStack for this event. <pre><code>inline void endstone::BlockCookEvent::setResult (\n    std::unique_ptr&lt; ItemStack &gt; result\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>result</code> new result ItemStack </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_cook_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockData/","title":"Class endstone::BlockData","text":"<p>ClassList &gt; endstone &gt; BlockData</p> <p>Represents the data related to a live block. </p> <ul> <li><code>#include &lt;endstone/block/block_data.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1BlockData/#public-functions","title":"Public Functions","text":"Type Name virtual BlockStates getBlockStates () const = 0Gets the block states, which when passed into a method such as Server::createBlockData(type, block_states) will unambiguously recreate this instance. virtual std::uint32_t getRuntimeId () const = 0Get the runtime ID for this block. virtual std::string getType () const = 0Get the block type represented by this block data. virtual ~BlockData () = default"},{"location":"reference/cpp/classendstone_1_1BlockData/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockData/#function-getblockstates","title":"function getBlockStates","text":"<p>Gets the block states, which when passed into a method such as Server::createBlockData(type, block_states) will unambiguously recreate this instance. <pre><code>virtual BlockStates endstone::BlockData::getBlockStates () const = 0\n</code></pre></p> <p>Returns:</p> <p>the block states for this block </p>"},{"location":"reference/cpp/classendstone_1_1BlockData/#function-getruntimeid","title":"function getRuntimeId","text":"<p>Get the runtime ID for this block. <pre><code>virtual std::uint32_t endstone::BlockData::getRuntimeId () const = 0\n</code></pre></p> <p>Returns:</p> <p>the runtime id for this block </p>"},{"location":"reference/cpp/classendstone_1_1BlockData/#function-gettype","title":"function getType","text":"<p>Get the block type represented by this block data. <pre><code>virtual std::string endstone::BlockData::getType () const = 0\n</code></pre></p> <p>Returns:</p> <p>the block type </p>"},{"location":"reference/cpp/classendstone_1_1BlockData/#function-blockdata","title":"function ~BlockData","text":"<pre><code>virtual endstone::BlockData::~BlockData () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_data.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockEvent/","title":"Class endstone::BlockEvent","text":"<p>ClassList &gt; endstone &gt; BlockEvent</p> <p>Represents an Block-related event. </p> <ul> <li><code>#include &lt;endstone/event/block/block_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1BlockEvent/#public-functions","title":"Public Functions","text":"Type Name BlockEvent (std::unique_ptr&lt; Block &gt; block)  Block &amp; getBlock () constGets the block involved in this event. ~BlockEvent () override"},{"location":"reference/cpp/classendstone_1_1BlockEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1BlockEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockEvent/#function-blockevent","title":"function BlockEvent","text":"<pre><code>inline explicit endstone::BlockEvent::BlockEvent (\n    std::unique_ptr&lt; Block &gt; block\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockEvent/#function-getblock","title":"function getBlock","text":"<p>Gets the block involved in this event. <pre><code>inline Block &amp; endstone::BlockEvent::getBlock () const\n</code></pre></p> <p>Returns:</p> <p>The Block which block is involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1BlockEvent/#function-blockevent_1","title":"function ~BlockEvent","text":"<pre><code>endstone::BlockEvent::~BlockEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockPistonEvent/","title":"Class endstone::BlockPistonEvent","text":"<p>ClassList &gt; endstone &gt; BlockPistonEvent</p> <p>Called when a piston block is triggered. </p> <ul> <li><code>#include &lt;endstone/event/block/block_piston_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p> <p>Inherited by the following classes: endstone::BlockPistonExtendEvent,  endstone::BlockPistonRetractEvent</p>"},{"location":"reference/cpp/classendstone_1_1BlockPistonEvent/#public-functions","title":"Public Functions","text":"Type Name BlockPistonEvent (std::unique_ptr&lt; Block &gt; block, BlockFace direction)  BlockFace getDirection () constReturn the direction in which the piston will operate."},{"location":"reference/cpp/classendstone_1_1BlockPistonEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1BlockPistonEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1BlockPistonEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockPistonEvent/#function-blockpistonevent","title":"function BlockPistonEvent","text":"<pre><code>inline explicit endstone::BlockPistonEvent::BlockPistonEvent (\n    std::unique_ptr&lt; Block &gt; block,\n    BlockFace direction\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockPistonEvent/#function-getdirection","title":"function getDirection","text":"<p>Return the direction in which the piston will operate. <pre><code>inline BlockFace endstone::BlockPistonEvent::getDirection () const\n</code></pre></p> <p>Returns:</p> <p>direction of the piston </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_piston_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/","title":"Class endstone::BlockPistonExtendEvent","text":"<p>ClassList &gt; endstone &gt; BlockPistonExtendEvent</p> <p>Called when a piston extends. </p> <ul> <li><code>#include &lt;endstone/event/block/block_piston_extend_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::BlockPistonEvent</p>"},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/#public-functions","title":"Public Functions","text":"Type Name BlockPistonEvent (std::unique_ptr&lt; Block &gt; block, BlockFace direction)  ENDSTONE_EVENT (BlockPistonExtendEvent)"},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/#public-functions-inherited-from-endstoneblockpistonevent","title":"Public Functions inherited from endstone::BlockPistonEvent","text":"<p>See endstone::BlockPistonEvent</p> Type Name BlockPistonEvent (std::unique_ptr&lt; Block &gt; block, BlockFace direction)  BlockFace getDirection () constReturn the direction in which the piston will operate."},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/#function-blockpistonevent","title":"function BlockPistonEvent","text":"<pre><code>inline explicit endstone::BlockPistonExtendEvent::BlockPistonEvent (\n    std::unique_ptr&lt; Block &gt; block,\n    BlockFace direction\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockPistonExtendEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::BlockPistonExtendEvent::ENDSTONE_EVENT (\n    BlockPistonExtendEvent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_piston_extend_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/","title":"Class endstone::BlockPistonRetractEvent","text":"<p>ClassList &gt; endstone &gt; BlockPistonRetractEvent</p> <p>Called when a piston retracts. </p> <ul> <li><code>#include &lt;endstone/event/block/block_piston_retract_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::BlockPistonEvent</p>"},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/#public-functions","title":"Public Functions","text":"Type Name BlockPistonEvent (std::unique_ptr&lt; Block &gt; block, BlockFace direction)  ENDSTONE_EVENT (BlockPistonRetractEvent)"},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/#public-functions-inherited-from-endstoneblockpistonevent","title":"Public Functions inherited from endstone::BlockPistonEvent","text":"<p>See endstone::BlockPistonEvent</p> Type Name BlockPistonEvent (std::unique_ptr&lt; Block &gt; block, BlockFace direction)  BlockFace getDirection () constReturn the direction in which the piston will operate."},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/#function-blockpistonevent","title":"function BlockPistonEvent","text":"<pre><code>inline explicit endstone::BlockPistonRetractEvent::BlockPistonEvent (\n    std::unique_ptr&lt; Block &gt; block,\n    BlockFace direction\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockPistonRetractEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::BlockPistonRetractEvent::ENDSTONE_EVENT (\n    BlockPistonRetractEvent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_piston_retract_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/","title":"Class endstone::BlockPlaceEvent","text":"<p>ClassList &gt; endstone &gt; BlockPlaceEvent</p> <p>Called when a block is placed by a player. More...</p> <ul> <li><code>#include &lt;endstone/event/block/block_place_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"BlockPlaceEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#public-functions","title":"Public Functions","text":"Type Name BlockPlaceEvent (std::unique_ptr&lt; BlockState &gt; placed_block, std::unique_ptr&lt; Block &gt; replaced_block, std::unique_ptr&lt; Block &gt; placed_against, Player &amp; player)  Block &amp; getBlockAgainst () constGets the block that this block was placed against. BlockState &amp; getBlockPlacedState () constGets the BlockState for the block which was placed. Block &amp; getBlockReplaced () constGets the block which was replaced. virtual std::string getEventName () override const Player &amp; getPlayer () constGets the player who placed the block involved in this event. ~BlockPlaceEvent () override"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#detailed-description","title":"Detailed Description","text":"<p>If a BlockPlaceEvent is cancelled, the block will not be placed. </p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::BlockPlaceEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#function-blockplaceevent","title":"function BlockPlaceEvent","text":"<pre><code>inline explicit endstone::BlockPlaceEvent::BlockPlaceEvent (\n    std::unique_ptr&lt; BlockState &gt; placed_block,\n    std::unique_ptr&lt; Block &gt; replaced_block,\n    std::unique_ptr&lt; Block &gt; placed_against,\n    Player &amp; player\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#function-getblockagainst","title":"function getBlockAgainst","text":"<p>Gets the block that this block was placed against. <pre><code>inline Block &amp; endstone::BlockPlaceEvent::getBlockAgainst () const\n</code></pre></p> <p>Returns:</p> <p>Block the block that the new block was placed against </p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#function-getblockplacedstate","title":"function getBlockPlacedState","text":"<p>Gets the BlockState for the block which was placed. <pre><code>inline BlockState &amp; endstone::BlockPlaceEvent::getBlockPlacedState () const\n</code></pre></p> <p>Returns:</p> <p>The BlockState for the block which was placed. </p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#function-getblockreplaced","title":"function getBlockReplaced","text":"<p>Gets the block which was replaced. <pre><code>inline Block &amp; endstone::BlockPlaceEvent::getBlockReplaced () const\n</code></pre></p> <p>Returns:</p> <p>The Block which was replaced. </p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::BlockPlaceEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#function-getplayer","title":"function getPlayer","text":"<p>Gets the player who placed the block involved in this event. <pre><code>inline Player &amp; endstone::BlockPlaceEvent::getPlayer () const\n</code></pre></p> <p>Returns:</p> <p>The Player who placed the block involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1BlockPlaceEvent/#function-blockplaceevent_1","title":"function ~BlockPlaceEvent","text":"<pre><code>endstone::BlockPlaceEvent::~BlockPlaceEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_place_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BlockState/","title":"Class endstone::BlockState","text":"<p>ClassList &gt; endstone &gt; BlockState</p> <p>Represents a captured state of a block, which will not update automatically. More...</p> <ul> <li><code>#include &lt;endstone/block/block_state.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1BlockState/#public-functions","title":"Public Functions","text":"Type Name virtual std::unique_ptr&lt; Block &gt; getBlock () const = 0Gets the block represented by this block state. virtual std::unique_ptr&lt; BlockData &gt; getData () const = 0Gets the data for this block state. virtual Dimension &amp; getDimension () const = 0Gets the dimension which contains the block represented by this block state. virtual Location getLocation () const = 0Gets the location of this block state. virtual std::string getType () const = 0Gets the type of this block state. virtual int getX () const = 0Gets the x-coordinate of this block state. virtual int getY () const = 0Gets the y-coordinate of this block state. virtual int getZ () const = 0Gets the z-coordinate of this block state. virtual Result&lt; void &gt; setData (const BlockData &amp; data) = 0Sets the data for this block state. virtual Result&lt; void &gt; setType (std::string type) = 0Sets the type of this block state. virtual bool update () = 0Attempts to update the block represented by this state, setting it to yhe new values as defined by this state. virtual bool update (bool force) = 0Attempts to update the block represented by this state, setting it to the new values as defined by this state. virtual bool update (bool force, bool apply_physics) = 0Attempts to update the block represented by this state, setting it to the new values as defined by this state. virtual ~BlockState () = default"},{"location":"reference/cpp/classendstone_1_1BlockState/#detailed-description","title":"Detailed Description","text":"<p>Unlike Block, which only one object can exist per coordinate, BlockState can exist multiple times for any given Block. Note that another plugin may change the state of the block, and you will not know, or they may change the block to another type entirely, causing your BlockState to become invalid. </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BlockState/#function-getblock","title":"function getBlock","text":"<p>Gets the block represented by this block state. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::BlockState::getBlock () const = 0\n</code></pre></p> <p>Returns:</p> <p>the block represented by this block state </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-getdata","title":"function getData","text":"<p>Gets the data for this block state. <pre><code>virtual std::unique_ptr&lt; BlockData &gt; endstone::BlockState::getData () const = 0\n</code></pre></p> <p>Returns:</p> <p>block specific data </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-getdimension","title":"function getDimension","text":"<p>Gets the dimension which contains the block represented by this block state. <pre><code>virtual Dimension &amp; endstone::BlockState::getDimension () const = 0\n</code></pre></p> <p>Returns:</p> <p>the dimension containing the block represented by this block state </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-getlocation","title":"function getLocation","text":"<p>Gets the location of this block state. <pre><code>virtual Location endstone::BlockState::getLocation () const = 0\n</code></pre></p> <p>Returns:</p> <p>the location </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-gettype","title":"function getType","text":"<p>Gets the type of this block state. <pre><code>virtual std::string endstone::BlockState::getType () const = 0\n</code></pre></p> <p>Returns:</p> <p>block type </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-getx","title":"function getX","text":"<p>Gets the x-coordinate of this block state. <pre><code>virtual int endstone::BlockState::getX () const = 0\n</code></pre></p> <p>Returns:</p> <p>x-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-gety","title":"function getY","text":"<p>Gets the y-coordinate of this block state. <pre><code>virtual int endstone::BlockState::getY () const = 0\n</code></pre></p> <p>Returns:</p> <p>y-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-getz","title":"function getZ","text":"<p>Gets the z-coordinate of this block state. <pre><code>virtual int endstone::BlockState::getZ () const = 0\n</code></pre></p> <p>Returns:</p> <p>z-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-setdata","title":"function setData","text":"<p>Sets the data for this block state. <pre><code>virtual Result&lt; void &gt; endstone::BlockState::setData (\n    const BlockData &amp; data\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> New block specific data </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-settype","title":"function setType","text":"<p>Sets the type of this block state. <pre><code>virtual Result&lt; void &gt; endstone::BlockState::setType (\n    std::string type\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> Block type to change this block state to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-update-13","title":"function update [\u2153]","text":"<p>Attempts to update the block represented by this state, setting it to yhe new values as defined by this state. <pre><code>virtual bool endstone::BlockState::update () = 0\n</code></pre></p> <p>This has the same effect as calling update(false). That is to say, this will not modify the state of a block if it is no longer the same type as it was when this state was taken. It will return false in this eventuality.</p> <p>Returns:</p> <p>true if the update was successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-update-23","title":"function update [\u2154]","text":"<p>Attempts to update the block represented by this state, setting it to the new values as defined by this state. <pre><code>virtual bool endstone::BlockState::update (\n    bool force\n) = 0\n</code></pre></p> <p>This has the same effect as calling update(force, true). That is to say, this will trigger a physics update to surrounding blocks.</p> <p>Parameters:</p> <ul> <li><code>force</code> true to forcefully set the state </li> </ul> <p>Returns:</p> <p>true if the update was successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-update-33","title":"function update [3/3]","text":"<p>Attempts to update the block represented by this state, setting it to the new values as defined by this state. <pre><code>virtual bool endstone::BlockState::update (\n    bool force,\n    bool apply_physics\n) = 0\n</code></pre></p> <p>Unless force is true, this will not modify the state of a block if it is no longer the same type as it was when this state was taken. It will return false in this eventuality. </p> <p>If force is true, it will set the type of the block to match the new state, set the state data and then return true. </p> <p>If apply_physics is true, it will trigger a physics update on surrounding blocks which could cause them to update or disappear.</p> <p>Parameters:</p> <ul> <li><code>force</code> true to forcefully set the state </li> <li><code>apply_physics</code> false to cancel updating physics on surrounding blocks </li> </ul> <p>Returns:</p> <p>true if the update was successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1BlockState/#function-blockstate","title":"function ~BlockState","text":"<pre><code>virtual endstone::BlockState::~BlockState () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_state.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BossBar/","title":"Class endstone::BossBar","text":"<p>ClassList &gt; endstone &gt; BossBar</p> <p>Represents a boss bar that is displayed to players. </p> <ul> <li><code>#include &lt;endstone/boss/boss_bar.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#public-functions","title":"Public Functions","text":"Type Name virtual void addFlag (BarFlag flag) = 0Add an optional flag to this boss bar. virtual void addPlayer (Player &amp; player) = 0Adds the player to this boss bar causing it to display on their screen. virtual BarColor getColor () const = 0Returns the color of this boss bar. virtual std::vector&lt; Player * &gt; getPlayers () const = 0Returns all players viewing this boss bar. virtual float getProgress () const = 0Returns the progress of the bar between 0.0 and 1.0. virtual BarStyle getStyle () const = 0Returns the style of this boss bar. virtual std::string getTitle () const = 0Returns the title of this boss bar. virtual bool hasFlag (BarFlag flag) const = 0Returns whether this boss bar has the passed flag set. virtual bool isVisible () const = 0Return if the boss bar is displayed to attached players. virtual void removeAll () = 0Removes all players from this boss bar. virtual void removeFlag (BarFlag flag) = 0Remove an existing flag on this boss bar. virtual void removePlayer (Player &amp; player) = 0Removes the player from this boss bar causing it to be removed from their screen. virtual void setColor (BarColor color) = 0Sets the color of this boss bar. virtual Result&lt; void &gt; setProgress (float progress) = 0Sets the progress of the bar. Values should be between 0.0 (empty) and 1.0 (full) virtual void setStyle (BarStyle style) = 0Sets the bar style of this boss bar. virtual void setTitle (std::string title) = 0Sets the title of this boss bar. virtual void setVisible (bool visible) = 0Set if the boss bar is displayed to attached players. virtual ~BossBar () = default"},{"location":"reference/cpp/classendstone_1_1BossBar/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BossBar/#function-addflag","title":"function addFlag","text":"<p>Add an optional flag to this boss bar. <pre><code>virtual void endstone::BossBar::addFlag (\n    BarFlag flag\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>flag</code> an optional flag to set on the boss bar. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-addplayer","title":"function addPlayer","text":"<p>Adds the player to this boss bar causing it to display on their screen. <pre><code>virtual void endstone::BossBar::addPlayer (\n    Player &amp; player\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>player</code> the player to add </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-getcolor","title":"function getColor","text":"<p>Returns the color of this boss bar. <pre><code>virtual BarColor endstone::BossBar::getColor () const = 0\n</code></pre></p> <p>Returns:</p> <p>the color of the bar </p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-getplayers","title":"function getPlayers","text":"<p>Returns all players viewing this boss bar. <pre><code>virtual std::vector&lt; Player * &gt; endstone::BossBar::getPlayers () const = 0\n</code></pre></p> <p>Returns:</p> <p>a list of players </p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-getprogress","title":"function getProgress","text":"<p>Returns the progress of the bar between 0.0 and 1.0. <pre><code>virtual float endstone::BossBar::getProgress () const = 0\n</code></pre></p> <p>Returns:</p> <p>the progress of the bar </p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-getstyle","title":"function getStyle","text":"<p>Returns the style of this boss bar. <pre><code>virtual BarStyle endstone::BossBar::getStyle () const = 0\n</code></pre></p> <p>Returns:</p> <p>the style of the bar. </p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-gettitle","title":"function getTitle","text":"<p>Returns the title of this boss bar. <pre><code>virtual std::string endstone::BossBar::getTitle () const = 0\n</code></pre></p> <p>Returns:</p> <p>the title of the bar </p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-hasflag","title":"function hasFlag","text":"<p>Returns whether this boss bar has the passed flag set. <pre><code>virtual bool endstone::BossBar::hasFlag (\n    BarFlag flag\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>flag</code> the flag to check. </li> </ul> <p>Returns:</p> <p>whether it has the flag. </p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-isvisible","title":"function isVisible","text":"<p>Return if the boss bar is displayed to attached players. <pre><code>virtual bool endstone::BossBar::isVisible () const = 0\n</code></pre></p> <p>Returns:</p> <p>visible status </p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-removeall","title":"function removeAll","text":"<p>Removes all players from this boss bar. <pre><code>virtual void endstone::BossBar::removeAll () = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-removeflag","title":"function removeFlag","text":"<p>Remove an existing flag on this boss bar. <pre><code>virtual void endstone::BossBar::removeFlag (\n    BarFlag flag\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>flag</code> the existing flag to remove. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-removeplayer","title":"function removePlayer","text":"<p>Removes the player from this boss bar causing it to be removed from their screen. <pre><code>virtual void endstone::BossBar::removePlayer (\n    Player &amp; player\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>player</code> the player to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-setcolor","title":"function setColor","text":"<p>Sets the color of this boss bar. <pre><code>virtual void endstone::BossBar::setColor (\n    BarColor color\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>color</code> the color of the bar </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-setprogress","title":"function setProgress","text":"<p>Sets the progress of the bar. Values should be between 0.0 (empty) and 1.0 (full) <pre><code>virtual Result&lt; void &gt; endstone::BossBar::setProgress (\n    float progress\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>progress</code> the progress of the bar </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-setstyle","title":"function setStyle","text":"<p>Sets the bar style of this boss bar. <pre><code>virtual void endstone::BossBar::setStyle (\n    BarStyle style\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>style</code> the style of the bar. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-settitle","title":"function setTitle","text":"<p>Sets the title of this boss bar. <pre><code>virtual void endstone::BossBar::setTitle (\n    std::string title\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> the title of the bar </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-setvisible","title":"function setVisible","text":"<p>Set if the boss bar is displayed to attached players. <pre><code>virtual void endstone::BossBar::setVisible (\n    bool visible\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>visible</code> visible status </li> </ul>"},{"location":"reference/cpp/classendstone_1_1BossBar/#function-bossbar","title":"function ~BossBar","text":"<pre><code>virtual endstone::BossBar::~BossBar () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/boss/boss_bar.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/","title":"Class endstone::BroadcastMessageEvent","text":"<p>ClassList &gt; endstone &gt; BroadcastMessageEvent</p> <p>Event triggered for server broadcast messages such as fromServer::broadcast .More...</p> <ul> <li><code>#include &lt;endstone/event/server/broadcast_message_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"BroadcastMessageEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions","title":"Public Functions","text":"Type Name BroadcastMessageEvent (bool async, Message message, std::unordered_set&lt; const CommandSender * &gt; recipients)  virtual std::string getEventName () override const const Message &amp; getMessage () const const std::unordered_set&lt; const CommandSender * &gt; &amp; getRecipients () const void setMessage (Message message)"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#detailed-description","title":"Detailed Description","text":"<p>This event should be async if fired from an async thread. </p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::BroadcastMessageEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-broadcastmessageevent","title":"function BroadcastMessageEvent","text":"<pre><code>inline endstone::BroadcastMessageEvent::BroadcastMessageEvent (\n    bool async,\n    Message message,\n    std::unordered_set&lt; const CommandSender * &gt; recipients\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::BroadcastMessageEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-getmessage","title":"function getMessage","text":"<pre><code>inline const Message &amp; endstone::BroadcastMessageEvent::getMessage () const\n</code></pre> <p>Get the message to broadcast.</p> <p>Returns:</p> <p>Message to broadcast </p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-getrecipients","title":"function getRecipients","text":"<pre><code>inline const std::unordered_set&lt; const CommandSender * &gt; &amp; endstone::BroadcastMessageEvent::getRecipients () const\n</code></pre> <p>Gets a set of recipients that this broadcast message will be displayed to.</p> <p>Returns:</p> <p>All CommandSenders who will see this broadcast message </p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-setmessage","title":"function setMessage","text":"<pre><code>inline void endstone::BroadcastMessageEvent::setMessage (\n    Message message\n) \n</code></pre> <p>Set the message to broadcast.</p> <p>Parameters:</p> <ul> <li><code>message</code> New message to broadcast </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/broadcast_message_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Button/","title":"Class endstone::Button","text":"<p>ClassList &gt; endstone &gt; Button</p> <p>Represents a button with text and an optional icon. </p> <ul> <li><code>#include &lt;endstone/form/controls/button.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Button/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; void(Player *)&gt; OnClickCallback"},{"location":"reference/cpp/classendstone_1_1Button/#public-functions","title":"Public Functions","text":"Type Name Button () = default Button (Message text, std::optional&lt; std::string &gt; icon=std::nullopt, OnClickCallback on_click={})  std::optional&lt; std::string &gt; getIcon () constGet the icon of the button. OnClickCallback getOnClick () constGets the on click callback of the button. Message getText () constGets the text of the button. Button &amp; setIcon (std::string icon) Sets the icon for the button. Button &amp; setOnClick (OnClickCallback on_click) Sets the on click callback of the button. Button &amp; setText (Message text) Sets the text of the button."},{"location":"reference/cpp/classendstone_1_1Button/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Button/#typedef-onclickcallback","title":"typedef OnClickCallback","text":"<pre><code>using endstone::Button::OnClickCallback =  std::function&lt;void(Player *)&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Button/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Button/#function-button-12","title":"function Button [\u00bd]","text":"<pre><code>endstone::Button::Button () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Button/#function-button-22","title":"function Button [2/2]","text":"<pre><code>inline explicit endstone::Button::Button (\n    Message text,\n    std::optional&lt; std::string &gt; icon=std::nullopt,\n    OnClickCallback on_click={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Button/#function-geticon","title":"function getIcon","text":"<p>Get the icon of the button. <pre><code>inline std::optional&lt; std::string &gt; endstone::Button::getIcon () const\n</code></pre></p> <p>Returns:</p> <p>The path or URL to the icon file </p>"},{"location":"reference/cpp/classendstone_1_1Button/#function-getonclick","title":"function getOnClick","text":"<p>Gets the on click callback of the button. <pre><code>inline OnClickCallback endstone::Button::getOnClick () const\n</code></pre></p> <p>Returns:</p> <p>The on click callback of the button. </p>"},{"location":"reference/cpp/classendstone_1_1Button/#function-gettext","title":"function getText","text":"<p>Gets the text of the button. <pre><code>inline Message endstone::Button::getText () const\n</code></pre></p> <p>Returns:</p> <p>The text. </p>"},{"location":"reference/cpp/classendstone_1_1Button/#function-seticon","title":"function setIcon","text":"<p>Sets the icon for the button. <pre><code>inline Button &amp; endstone::Button::setIcon (\n    std::string icon\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>icon</code> The path or URL to the icon file. </li> </ul> <p>Returns:</p> <p>A reference to the current button. </p>"},{"location":"reference/cpp/classendstone_1_1Button/#function-setonclick","title":"function setOnClick","text":"<p>Sets the on click callback of the button. <pre><code>inline Button &amp; endstone::Button::setOnClick (\n    OnClickCallback on_click\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>on_click</code> The callback to be set. </li> </ul> <p>Returns:</p> <p>A reference to the current button. </p>"},{"location":"reference/cpp/classendstone_1_1Button/#function-settext","title":"function setText","text":"<p>Sets the text of the button. <pre><code>inline Button &amp; endstone::Button::setText (\n    Message text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The new text for the button. </li> </ul> <p>Returns:</p> <p>A reference to the current button. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/button.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Cancellable/","title":"Class endstone::Cancellable","text":"<p>template &lt;typename EventType&gt;</p> <p>ClassList &gt; endstone &gt; Cancellable</p> <p>A type characterizing events that may be cancelled by a plugin or the server. </p> <ul> <li><code>#include &lt;endstone/event/cancellable.h&gt;</code></li> </ul> <p>Inherits the following classes: EventType,  endstone::ICancellable</p>"},{"location":"reference/cpp/classendstone_1_1Cancellable/#public-functions","title":"Public Functions","text":"Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1Cancellable/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1Cancellable/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Cancellable/#function-cancel","title":"function cancel","text":"<p>Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. <pre><code>inline virtual void endstone::Cancellable::cancel () \n</code></pre></p> <p>Implements endstone::ICancellable::cancel</p>"},{"location":"reference/cpp/classendstone_1_1Cancellable/#function-iscancelled","title":"function isCancelled","text":"<p>Gets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. <pre><code>inline virtual bool endstone::Cancellable::isCancelled () override const\n</code></pre></p> <p>Returns:</p> <p>true if this event is cancelled </p> <p>Implements endstone::ICancellable::isCancelled</p>"},{"location":"reference/cpp/classendstone_1_1Cancellable/#function-setcancelled","title":"function setCancelled","text":"<p>Sets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. <pre><code>inline virtual void endstone::Cancellable::setCancelled (\n    bool cancel\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>cancel</code> true if you wish to cancel this event </li> </ul> <p>Implements endstone::ICancellable::setCancelled</p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/cancellable.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Chunk/","title":"Class endstone::Chunk","text":"<p>ClassList &gt; endstone &gt; Chunk</p> <p>Represents a chunk of blocks. </p> <ul> <li><code>#include &lt;endstone/level/chunk.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Chunk/#public-functions","title":"Public Functions","text":"Type Name virtual Dimension &amp; getDimension () const = 0Gets the dimension containing this chunk. virtual Level &amp; getLevel () const = 0Gets the level containing this chunk. virtual int getX () const = 0Gets the X-coordinate of this chunk. virtual int getZ () const = 0Gets the Z-coordinate of this chunk. virtual ~Chunk () = default"},{"location":"reference/cpp/classendstone_1_1Chunk/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Chunk/#function-getdimension","title":"function getDimension","text":"<p>Gets the dimension containing this chunk. <pre><code>virtual Dimension &amp; endstone::Chunk::getDimension () const = 0\n</code></pre></p> <p>Returns:</p> <p>Parent Dimension </p>"},{"location":"reference/cpp/classendstone_1_1Chunk/#function-getlevel","title":"function getLevel","text":"<p>Gets the level containing this chunk. <pre><code>virtual Level &amp; endstone::Chunk::getLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>Parent Level </p>"},{"location":"reference/cpp/classendstone_1_1Chunk/#function-getx","title":"function getX","text":"<p>Gets the X-coordinate of this chunk. <pre><code>virtual int endstone::Chunk::getX () const = 0\n</code></pre></p> <p>Returns:</p> <p>X-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1Chunk/#function-getz","title":"function getZ","text":"<p>Gets the Z-coordinate of this chunk. <pre><code>virtual int endstone::Chunk::getZ () const = 0\n</code></pre></p> <p>Returns:</p> <p>Z-coordinate </p>"},{"location":"reference/cpp/classendstone_1_1Chunk/#function-chunk","title":"function ~Chunk","text":"<pre><code>virtual endstone::Chunk::~Chunk () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/chunk.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ChunkEvent/","title":"Class endstone::ChunkEvent","text":"<p>ClassList &gt; endstone &gt; ChunkEvent</p> <p>Represents a Chunk related event.</p> <ul> <li><code>#include &lt;endstone/event/chunk/chunk_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::DimensionEvent</p> <p>Inherited by the following classes: endstone::ChunkLoadEvent,  endstone::ChunkUnloadEvent</p>"},{"location":"reference/cpp/classendstone_1_1ChunkEvent/#public-functions","title":"Public Functions","text":"Type Name ChunkEvent (Chunk &amp; chunk)  Chunk &amp; getChunk () const"},{"location":"reference/cpp/classendstone_1_1ChunkEvent/#public-functions-inherited-from-endstonedimensionevent","title":"Public Functions inherited from endstone::DimensionEvent","text":"<p>See endstone::DimensionEvent</p> Type Name DimensionEvent (Dimension &amp; dimension)  Dimension &amp; getDimension () const"},{"location":"reference/cpp/classendstone_1_1ChunkEvent/#public-functions-inherited-from-endstonelevelevent","title":"Public Functions inherited from endstone::LevelEvent","text":"<p>See endstone::LevelEvent</p> Type Name LevelEvent (Level &amp; level)  Level &amp; getLevel () const"},{"location":"reference/cpp/classendstone_1_1ChunkEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ChunkEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ChunkEvent/#function-chunkevent","title":"function ChunkEvent","text":"<pre><code>inline explicit endstone::ChunkEvent::ChunkEvent (\n    Chunk &amp; chunk\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ChunkEvent/#function-getchunk","title":"function getChunk","text":"<pre><code>inline Chunk &amp; endstone::ChunkEvent::getChunk () const\n</code></pre> <p>Gets the chunk being loaded/unloaded</p> <p>Returns:</p> <p>Chunk that triggered this event </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/chunk/chunk_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/","title":"Class endstone::ChunkLoadEvent","text":"<p>ClassList &gt; endstone &gt; ChunkLoadEvent</p> <p>Called when a chunk is loaded. </p> <ul> <li><code>#include &lt;endstone/event/chunk/chunk_load_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ChunkEvent</p>"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#public-functions","title":"Public Functions","text":"Type Name ChunkLoadEvent (Chunk &amp; chunk)  ENDSTONE_EVENT (ChunkLoadEvent)  ~ChunkLoadEvent () override"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#public-functions-inherited-from-endstonechunkevent","title":"Public Functions inherited from endstone::ChunkEvent","text":"<p>See endstone::ChunkEvent</p> Type Name ChunkEvent (Chunk &amp; chunk)  Chunk &amp; getChunk () const"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#public-functions-inherited-from-endstonedimensionevent","title":"Public Functions inherited from endstone::DimensionEvent","text":"<p>See endstone::DimensionEvent</p> Type Name DimensionEvent (Dimension &amp; dimension)  Dimension &amp; getDimension () const"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#public-functions-inherited-from-endstonelevelevent","title":"Public Functions inherited from endstone::LevelEvent","text":"<p>See endstone::LevelEvent</p> Type Name LevelEvent (Level &amp; level)  Level &amp; getLevel () const"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#function-chunkloadevent","title":"function ChunkLoadEvent","text":"<pre><code>inline explicit endstone::ChunkLoadEvent::ChunkLoadEvent (\n    Chunk &amp; chunk\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::ChunkLoadEvent::ENDSTONE_EVENT (\n    ChunkLoadEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ChunkLoadEvent/#function-chunkloadevent_1","title":"function ~ChunkLoadEvent","text":"<pre><code>endstone::ChunkLoadEvent::~ChunkLoadEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/chunk/chunk_load_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/","title":"Class endstone::ChunkUnloadEvent","text":"<p>ClassList &gt; endstone &gt; ChunkUnloadEvent</p> <p>Called when a chunk is unloaded. </p> <ul> <li><code>#include &lt;endstone/event/chunk/chunk_unload_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ChunkEvent</p>"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#public-functions","title":"Public Functions","text":"Type Name ChunkUnloadEvent (Chunk &amp; chunk)  ENDSTONE_EVENT (ChunkUnloadEvent)  ~ChunkUnloadEvent () override"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#public-functions-inherited-from-endstonechunkevent","title":"Public Functions inherited from endstone::ChunkEvent","text":"<p>See endstone::ChunkEvent</p> Type Name ChunkEvent (Chunk &amp; chunk)  Chunk &amp; getChunk () const"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#public-functions-inherited-from-endstonedimensionevent","title":"Public Functions inherited from endstone::DimensionEvent","text":"<p>See endstone::DimensionEvent</p> Type Name DimensionEvent (Dimension &amp; dimension)  Dimension &amp; getDimension () const"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#public-functions-inherited-from-endstonelevelevent","title":"Public Functions inherited from endstone::LevelEvent","text":"<p>See endstone::LevelEvent</p> Type Name LevelEvent (Level &amp; level)  Level &amp; getLevel () const"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#function-chunkunloadevent","title":"function ChunkUnloadEvent","text":"<pre><code>inline explicit endstone::ChunkUnloadEvent::ChunkUnloadEvent (\n    Chunk &amp; chunk\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::ChunkUnloadEvent::ENDSTONE_EVENT (\n    ChunkUnloadEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ChunkUnloadEvent/#function-chunkunloadevent_1","title":"function ~ChunkUnloadEvent","text":"<pre><code>endstone::ChunkUnloadEvent::~ChunkUnloadEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/chunk/chunk_unload_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Color/","title":"Class endstone::Color","text":"<p>ClassList &gt; endstone &gt; Color</p> <p>Represents a color with red, green, blue, and alpha components. </p> <ul> <li><code>#include &lt;endstone/util/color.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Color/#public-static-attributes","title":"Public Static Attributes","text":"Type Name constexpr int BIT_MASK   = <code>0xff</code> constexpr int DEFAULT_ALPHA   = <code>255</code>"},{"location":"reference/cpp/classendstone_1_1Color/#public-functions","title":"Public Functions","text":"Type Name constexpr Color (const std::uint8_t red, const std::uint8_t green, const std::uint8_t blue, const std::uint8_t alpha=DEFAULT_ALPHA)  int asABGR () constGets the color as an ABGR integer. int asBGR () constGets the color as an BGR integer. int asRGB () constGets the color as an RGB integer. int asRGBA () constGets the color as an RGBA integer. int getAlpha () constGets the alpha component of the color. int getBlue () constGets the blue component of the color. int getGreen () constGets the green component of the color. int getRed () constGets the red component of the color. bool operator!= (const Color &amp; other) const bool operator== (const Color &amp; other) const Result&lt; Color &gt; setAlpha (const int alpha) constCreates a new Color object with specified component. Result&lt; Color &gt; setBlue (const int blue) constCreates a new Color object with specified component. Result&lt; Color &gt; setGreen (const int green) constCreates a new Color object with specified component. Result&lt; Color &gt; setRed (const int red) constCreates a new Color object with specified component."},{"location":"reference/cpp/classendstone_1_1Color/#public-static-functions","title":"Public Static Functions","text":"Type Name Result&lt; Color &gt; fromABGR (const int abgr) Creates a new color object from an integer that contains the alpha, blue, green, and red bytes. Result&lt; Color &gt; fromBGR (const int blue, const int green, const int red) Creates a new Color object from a blue, green, and red. Result&lt; Color &gt; fromBGR (const int bgr)  Result&lt; Color &gt; fromRGB (const int red, const int green, const int blue) Creates a new Color object from a red, green, and blue. Result&lt; Color &gt; fromRGB (const int rgb) Creates a new color object from an integer that contains the red, green, and blue bytes in the lowest order 24 bits. Result&lt; Color &gt; fromRGBA (int red, int green, int blue, int alpha) Creates a new Color object from a red, green, blue, and alpha. Result&lt; Color &gt; fromRGBA (const int rgba) Creates a new color object from an integer that contains the red, green, blue, and alpha bytes."},{"location":"reference/cpp/classendstone_1_1Color/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Color/#variable-bit_mask","title":"variable BIT_MASK","text":"<pre><code>constexpr int endstone::Color::BIT_MASK;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Color/#variable-default_alpha","title":"variable DEFAULT_ALPHA","text":"<pre><code>constexpr int endstone::Color::DEFAULT_ALPHA;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Color/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Color/#function-color","title":"function Color","text":"<pre><code>inline constexpr endstone::Color::Color (\n    const std::uint8_t red,\n    const std::uint8_t green,\n    const std::uint8_t blue,\n    const std::uint8_t alpha=DEFAULT_ALPHA\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Color/#function-asabgr","title":"function asABGR","text":"<p>Gets the color as an ABGR integer. <pre><code>inline int endstone::Color::asABGR () const\n</code></pre></p> <p>Returns:</p> <p>An integer representation of this color, as 0xAABBGGRR </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-asbgr","title":"function asBGR","text":"<p>Gets the color as an BGR integer. <pre><code>inline int endstone::Color::asBGR () const\n</code></pre></p> <p>Returns:</p> <p>An integer representation of this color, as 0xBBGGRR </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-asrgb","title":"function asRGB","text":"<p>Gets the color as an RGB integer. <pre><code>inline int endstone::Color::asRGB () const\n</code></pre></p> <p>Returns:</p> <p>An integer representation of this color, as 0xRRGGBB </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-asrgba","title":"function asRGBA","text":"<p>Gets the color as an RGBA integer. <pre><code>inline int endstone::Color::asRGBA () const\n</code></pre></p> <p>Returns:</p> <p>An integer representation of this color, as 0xRRGGBBAA </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-getalpha","title":"function getAlpha","text":"<p>Gets the alpha component of the color. <pre><code>inline int endstone::Color::getAlpha () const\n</code></pre></p> <p>Returns:</p> <p>The alpha component (0\u2013255) of the color. </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-getblue","title":"function getBlue","text":"<p>Gets the blue component of the color. <pre><code>inline int endstone::Color::getBlue () const\n</code></pre></p> <p>Returns:</p> <p>The blue component (0\u2013255) of the color. </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-getgreen","title":"function getGreen","text":"<p>Gets the green component of the color. <pre><code>inline int endstone::Color::getGreen () const\n</code></pre></p> <p>Returns:</p> <p>The green component (0\u2013255) of the color. </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-getred","title":"function getRed","text":"<p>Gets the red component of the color. <pre><code>inline int endstone::Color::getRed () const\n</code></pre></p> <p>Returns:</p> <p>The red component (0\u2013255) of the color. </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-operator","title":"function operator!=","text":"<pre><code>inline bool endstone::Color::operator!= (\n    const Color &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Color/#function-operator_1","title":"function operator==","text":"<pre><code>inline bool endstone::Color::operator== (\n    const Color &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Color/#function-setalpha","title":"function setAlpha","text":"<p>Creates a new Color object with specified component. <pre><code>inline Result&lt; Color &gt; endstone::Color::setAlpha (\n    const int alpha\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>alpha</code> the alpha component, from 0 to 255</li> </ul> <p>Returns:</p> <p>a new color object with the alpha component </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-setblue","title":"function setBlue","text":"<p>Creates a new Color object with specified component. <pre><code>inline Result&lt; Color &gt; endstone::Color::setBlue (\n    const int blue\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>blue</code> the blue component, from 0 to 255</li> </ul> <p>Returns:</p> <p>a new color object with the blue component </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-setgreen","title":"function setGreen","text":"<p>Creates a new Color object with specified component. <pre><code>inline Result&lt; Color &gt; endstone::Color::setGreen (\n    const int green\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>green</code> the green component, from 0 to 255</li> </ul> <p>Returns:</p> <p>a new color object with the green component </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-setred","title":"function setRed","text":"<p>Creates a new Color object with specified component. <pre><code>inline Result&lt; Color &gt; endstone::Color::setRed (\n    const int red\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>red</code> the red component, from 0 to 255</li> </ul> <p>Returns:</p> <p>a new color object with the red component </p>"},{"location":"reference/cpp/classendstone_1_1Color/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Color/#function-fromabgr","title":"function fromABGR","text":"<p>Creates a new color object from an integer that contains the alpha, blue, green, and red bytes. <pre><code>static inline Result&lt; Color &gt; endstone::Color::fromABGR (\n    const int abgr\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>abgr</code> the integer storing the alpha, blue, green, and red values</li> </ul> <p>Returns:</p> <p>a new color object for specified values </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-frombgr-12","title":"function fromBGR [\u00bd]","text":"<p>Creates a new Color object from a blue, green, and red. <pre><code>static inline Result&lt; Color &gt; endstone::Color::fromBGR (\n    const int blue,\n    const int green,\n    const int red\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>blue</code> integer from 0-255 </li> <li><code>green</code> integer from 0-255 </li> <li><code>red</code> integer from 0-255</li> </ul> <p>Returns:</p> <p>a new Color object for the red, green, blue </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-frombgr-22","title":"function fromBGR [2/2]","text":"<pre><code>static inline Result&lt; Color &gt; endstone::Color::fromBGR (\n    const int bgr\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Color/#function-fromrgb-12","title":"function fromRGB [\u00bd]","text":"<p>Creates a new Color object from a red, green, and blue. <pre><code>static inline Result&lt; Color &gt; endstone::Color::fromRGB (\n    const int red,\n    const int green,\n    const int blue\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>red</code> integer from 0-255 </li> <li><code>green</code> integer from 0-255 </li> <li><code>blue</code> integer from 0-255</li> </ul> <p>Returns:</p> <p>a new Color object for the red, green, blue </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-fromrgb-22","title":"function fromRGB [2/2]","text":"<p>Creates a new color object from an integer that contains the red, green, and blue bytes in the lowest order 24 bits. <pre><code>static inline Result&lt; Color &gt; endstone::Color::fromRGB (\n    const int rgb\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rgb</code> the integer storing the red, green, and blue values</li> </ul> <p>Returns:</p> <p>a new color object for specified values </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-fromrgba-12","title":"function fromRGBA [\u00bd]","text":"<p>Creates a new Color object from a red, green, blue, and alpha. <pre><code>static inline Result&lt; Color &gt; endstone::Color::fromRGBA (\n    int red,\n    int green,\n    int blue,\n    int alpha\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>red</code> integer from 0-255 </li> <li><code>green</code> integer from 0-255 </li> <li><code>blue</code> integer from 0-255 </li> <li><code>alpha</code> integer from 0-255</li> </ul> <p>Returns:</p> <p>a new Color object for the red, green, blue, alpha </p>"},{"location":"reference/cpp/classendstone_1_1Color/#function-fromrgba-22","title":"function fromRGBA [2/2]","text":"<p>Creates a new color object from an integer that contains the red, green, blue, and alpha bytes. <pre><code>static inline Result&lt; Color &gt; endstone::Color::fromRGBA (\n    const int rgba\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>rgba</code> the integer storing the red, green, blue, and alpha values</li> </ul> <p>Returns:</p> <p>a new color object for specified values </p> <p>The documentation for this class was generated from the following file <code>include/endstone/util/color.h</code></p>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/","title":"Struct endstone::ColorFormat","text":"<p>ClassList &gt; endstone &gt; ColorFormat</p> <p>All supported color and format codes. </p> <ul> <li><code>#include &lt;endstone/color_format.h&gt;</code></li> </ul>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string Aqua   = <code>Escape + 'b'</code> const std::string Black   = <code>Escape + '0'</code> const std::string Blue   = <code>Escape + '9'</code> const std::string Bold   = <code>Escape + 'l'</code> const std::string DarkAqua   = <code>Escape + '3'</code> const std::string DarkBlue   = <code>Escape + '1'</code> const std::string DarkGray   = <code>Escape + '8'</code> const std::string DarkGreen   = <code>Escape + '2'</code> const std::string DarkPurple   = <code>Escape + '5'</code> const std::string DarkRed   = <code>Escape + '4'</code> const std::string Escape   = <code>\"\u00a7\"</code> const std::string Gold   = <code>Escape + '6'</code> const std::string Gray   = <code>Escape + '7'</code> const std::string Green   = <code>Escape + 'a'</code> const std::string Italic   = <code>Escape + 'o'</code> const std::string LightPurple   = <code>Escape + 'd'</code> const std::string MaterialAmethyst   = <code>Escape + 'u'</code> const std::string MaterialCopper   = <code>Escape + 'n'</code> const std::string MaterialDiamond   = <code>Escape + 's'</code> const std::string MaterialEmerald   = <code>Escape + 'q'</code> const std::string MaterialGold   = <code>Escape + 'p'</code> const std::string MaterialIron   = <code>Escape + 'i'</code> const std::string MaterialLapis   = <code>Escape + 't'</code> const std::string MaterialNetherite   = <code>Escape + 'j'</code> const std::string MaterialQuartz   = <code>Escape + 'h'</code> const std::string MaterialRedstone   = <code>Escape + 'm'</code> const std::string MaterialResin   = <code>Escape + 'v'</code> const std::string MinecoinGold   = <code>Escape + 'g'</code> const std::string Obfuscated   = <code>Escape + 'k'</code> const std::string Red   = <code>Escape + 'c'</code> const std::string Reset   = <code>Escape + 'r'</code> const std::string White   = <code>Escape + 'f'</code> const std::string Yellow   = <code>Escape + 'e'</code>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-aqua","title":"variable Aqua","text":"<pre><code>const std::string endstone::ColorFormat::Aqua;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-black","title":"variable Black","text":"<pre><code>const std::string endstone::ColorFormat::Black;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-blue","title":"variable Blue","text":"<pre><code>const std::string endstone::ColorFormat::Blue;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-bold","title":"variable Bold","text":"<pre><code>const std::string endstone::ColorFormat::Bold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkaqua","title":"variable DarkAqua","text":"<pre><code>const std::string endstone::ColorFormat::DarkAqua;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkblue","title":"variable DarkBlue","text":"<pre><code>const std::string endstone::ColorFormat::DarkBlue;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkgray","title":"variable DarkGray","text":"<pre><code>const std::string endstone::ColorFormat::DarkGray;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkgreen","title":"variable DarkGreen","text":"<pre><code>const std::string endstone::ColorFormat::DarkGreen;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkpurple","title":"variable DarkPurple","text":"<pre><code>const std::string endstone::ColorFormat::DarkPurple;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkred","title":"variable DarkRed","text":"<pre><code>const std::string endstone::ColorFormat::DarkRed;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-escape","title":"variable Escape","text":"<pre><code>const std::string endstone::ColorFormat::Escape;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-gold","title":"variable Gold","text":"<pre><code>const std::string endstone::ColorFormat::Gold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-gray","title":"variable Gray","text":"<pre><code>const std::string endstone::ColorFormat::Gray;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-green","title":"variable Green","text":"<pre><code>const std::string endstone::ColorFormat::Green;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-italic","title":"variable Italic","text":"<pre><code>const std::string endstone::ColorFormat::Italic;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-lightpurple","title":"variable LightPurple","text":"<pre><code>const std::string endstone::ColorFormat::LightPurple;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialamethyst","title":"variable MaterialAmethyst","text":"<pre><code>const std::string endstone::ColorFormat::MaterialAmethyst;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialcopper","title":"variable MaterialCopper","text":"<pre><code>const std::string endstone::ColorFormat::MaterialCopper;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialdiamond","title":"variable MaterialDiamond","text":"<pre><code>const std::string endstone::ColorFormat::MaterialDiamond;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialemerald","title":"variable MaterialEmerald","text":"<pre><code>const std::string endstone::ColorFormat::MaterialEmerald;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialgold","title":"variable MaterialGold","text":"<pre><code>const std::string endstone::ColorFormat::MaterialGold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialiron","title":"variable MaterialIron","text":"<pre><code>const std::string endstone::ColorFormat::MaterialIron;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materiallapis","title":"variable MaterialLapis","text":"<pre><code>const std::string endstone::ColorFormat::MaterialLapis;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialnetherite","title":"variable MaterialNetherite","text":"<pre><code>const std::string endstone::ColorFormat::MaterialNetherite;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialquartz","title":"variable MaterialQuartz","text":"<pre><code>const std::string endstone::ColorFormat::MaterialQuartz;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialredstone","title":"variable MaterialRedstone","text":"<pre><code>const std::string endstone::ColorFormat::MaterialRedstone;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialresin","title":"variable MaterialResin","text":"<pre><code>const std::string endstone::ColorFormat::MaterialResin;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-minecoingold","title":"variable MinecoinGold","text":"<pre><code>const std::string endstone::ColorFormat::MinecoinGold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-obfuscated","title":"variable Obfuscated","text":"<pre><code>const std::string endstone::ColorFormat::Obfuscated;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-red","title":"variable Red","text":"<pre><code>const std::string endstone::ColorFormat::Red;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-reset","title":"variable Reset","text":"<pre><code>const std::string endstone::ColorFormat::Reset;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-white","title":"variable White","text":"<pre><code>const std::string endstone::ColorFormat::White;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-yellow","title":"variable Yellow","text":"<pre><code>const std::string endstone::ColorFormat::Yellow;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/color_format.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Colors/","title":"Class endstone::Colors","text":"<p>ClassList &gt; endstone &gt; Colors</p>"},{"location":"reference/cpp/classendstone_1_1Colors/#public-static-attributes","title":"Public Static Attributes","text":"Type Name constexpr auto BLACK   = <code>[**Color**](classendstone_1_1Color.md)(Color::DEFAULT\\_ALPHA, 0, 0, 0)</code> constexpr auto WHITE   = <code>[**Color**](classendstone_1_1Color.md)(Color::DEFAULT\\_ALPHA, 255, 255, 255)</code>"},{"location":"reference/cpp/classendstone_1_1Colors/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Colors/#variable-black","title":"variable BLACK","text":"<pre><code>constexpr auto endstone::Colors::BLACK;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Colors/#variable-white","title":"variable WHITE","text":"<pre><code>constexpr auto endstone::Colors::WHITE;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/color.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Command/","title":"Class endstone::Command","text":"<p>ClassList &gt; endstone &gt; Command</p> <p>Represents a Command , which executes various tasks upon user input.</p> <ul> <li><code>#include &lt;endstone/command/command.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::PluginCommand</p>"},{"location":"reference/cpp/classendstone_1_1Command/#public-functions","title":"Public Functions","text":"Type Name Command (std::string name, std::string description=\"\", std::vector&lt; std::string &gt; usages={}, std::vector&lt; std::string &gt; aliases={}, std::vector&lt; std::string &gt; permissions={})  virtual PluginCommand * asPluginCommand () const virtual bool execute (CommandSender &amp; sender, const std::vector&lt; std::string &gt; &amp; args) const std::vector&lt; std::string &gt; getAliases () const std::string getDescription () const std::string getName () const std::vector&lt; std::string &gt; getPermissions () const std::vector&lt; std::string &gt; getUsages () const bool isRegistered () const bool registerTo (const CommandMap &amp; command_map)  void setAliases (Alias... aliases)  void setDescription (std::string description)  void setName (std::string name)  void setPermissions (Permission... permissions)  void setUsages (Usage... usages)  bool testPermission (const CommandSender &amp; target) const bool testPermissionSilently (const CommandSender &amp; target) const bool unregisterFrom (const CommandMap &amp; command_map)  virtual ~Command () = default"},{"location":"reference/cpp/classendstone_1_1Command/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Command/#function-command","title":"function Command","text":"<pre><code>inline explicit endstone::Command::Command (\n    std::string name,\n    std::string description=\"\",\n    std::vector&lt; std::string &gt; usages={},\n    std::vector&lt; std::string &gt; aliases={},\n    std::vector&lt; std::string &gt; permissions={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Command/#function-asplugincommand","title":"function asPluginCommand","text":"<pre><code>inline virtual PluginCommand * endstone::Command::asPluginCommand () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Command/#function-execute","title":"function execute","text":"<pre><code>inline virtual bool endstone::Command::execute (\n    CommandSender &amp; sender,\n    const std::vector&lt; std::string &gt; &amp; args\n) const\n</code></pre> <p>Executes the command, returning its success</p> <p>Parameters:</p> <ul> <li><code>sender</code> Source of the command </li> <li><code>args</code> Arguments passed to the command </li> </ul> <p>Returns:</p> <p>true if the execution was successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getaliases","title":"function getAliases","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::Command::getAliases () const\n</code></pre> <p>Returns a list of aliases of this command</p> <p>Returns:</p> <p>List of aliases </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getdescription","title":"function getDescription","text":"<pre><code>inline std::string endstone::Command::getDescription () const\n</code></pre> <p>Gets a brief description of this command</p> <p>Returns:</p> <p>Description of this command </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getname","title":"function getName","text":"<pre><code>inline std::string endstone::Command::getName () const\n</code></pre> <p>Returns the name of this command</p> <p>Returns:</p> <p>Name of this command </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getpermissions","title":"function getPermissions","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::Command::getPermissions () const\n</code></pre> <p>Gets the permissions required by users to be able to perform this command</p> <p>Returns:</p> <p>List of permission names, or empty if none </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getusages","title":"function getUsages","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::Command::getUsages () const\n</code></pre> <p>Returns a list of usages of this command</p> <p>Returns:</p> <p>List of usages </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-isregistered","title":"function isRegistered","text":"<pre><code>inline bool endstone::Command::isRegistered () const\n</code></pre> <p>Returns the current registered state of this command</p> <p>Returns:</p> <p>true if this command is currently registered false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-registerto","title":"function registerTo","text":"<pre><code>inline bool endstone::Command::registerTo (\n    const CommandMap &amp; command_map\n) \n</code></pre> <p>Registers this command to a CommandMap.</p> <p>Parameters:</p> <ul> <li><code>command_map</code> the CommandMap to register to </li> </ul> <p>Returns:</p> <p>true if the registration was successful, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setaliases","title":"function setAliases","text":"<pre><code>template&lt;typename... Alias&gt;\ninline void endstone::Command::setAliases (\n    Alias... aliases\n) \n</code></pre> <p>Sets the list of aliases to request on registration for this command.</p> <p>Parameters:</p> <ul> <li><code>aliases</code> aliases to register to this command </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setdescription","title":"function setDescription","text":"<pre><code>inline void endstone::Command::setDescription (\n    std::string description\n) \n</code></pre> <p>Sets a brief description of this command.</p> <p>Parameters:</p> <ul> <li><code>description</code> new command description </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setname","title":"function setName","text":"<pre><code>inline void endstone::Command::setName (\n    std::string name\n) \n</code></pre> <p>Sets the name of this command.</p> <p>May only be used before registering the command.</p> <p>Parameters:</p> <ul> <li><code>name</code> New command name </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setpermissions","title":"function setPermissions","text":"<pre><code>template&lt;typename... Permission&gt;\ninline void endstone::Command::setPermissions (\n    Permission... permissions\n) \n</code></pre> <p>Sets the permissions required by users to be able to perform this command</p> <p>Parameters:</p> <ul> <li><code>permissions</code> List of permission names </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setusages","title":"function setUsages","text":"<pre><code>template&lt;typename... Usage&gt;\ninline void endstone::Command::setUsages (\n    Usage... usages\n) \n</code></pre> <p>Sets the usages of this command</p> <p>Parameters:</p> <ul> <li><code>usages</code> List of usages </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-testpermission","title":"function testPermission","text":"<pre><code>inline bool endstone::Command::testPermission (\n    const CommandSender &amp; target\n) const\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command. If they do not have permission, they will be informed that they cannot do this.</p> <p>Parameters:</p> <ul> <li><code>target</code> User to test </li> </ul> <p>Returns:</p> <p>true if they can use it, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-testpermissionsilently","title":"function testPermissionSilently","text":"<pre><code>inline bool endstone::Command::testPermissionSilently (\n    const CommandSender &amp; target\n) const\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command. No error is sent to the sender.</p> <p>Parameters:</p> <ul> <li><code>target</code> User to test </li> </ul> <p>Returns:</p> <p>true if they can use it, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-unregisterfrom","title":"function unregisterFrom","text":"<pre><code>inline bool endstone::Command::unregisterFrom (\n    const CommandMap &amp; command_map\n) \n</code></pre> <p>Unregisters this command from a CommandMap</p> <p>Parameters:</p> <ul> <li><code>command_map</code> the CommandMap to unregister from </li> </ul> <p>Returns:</p> <p>true if the unregistration was successful, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-command_1","title":"function ~Command","text":"<pre><code>virtual endstone::Command::~Command () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command.h</code></p>"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/","title":"Class endstone::CommandExecutor","text":"<p>ClassList &gt; endstone &gt; CommandExecutor</p> <p>Represents a class which contains a single method for executing commands. </p> <ul> <li><code>#include &lt;endstone/command/command_executor.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::Plugin</p>"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#public-functions","title":"Public Functions","text":"Type Name virtual bool onCommand (CommandSender &amp; sender, const Command &amp; command, const std::vector&lt; std::string &gt; &amp; args)  virtual ~CommandExecutor () = default"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#function-oncommand","title":"function onCommand","text":"<pre><code>inline virtual bool endstone::CommandExecutor::onCommand (\n    CommandSender &amp; sender,\n    const Command &amp; command,\n    const std::vector&lt; std::string &gt; &amp; args\n) \n</code></pre> <p>Executes the given command, returning its success.</p> <p>Parameters:</p> <ul> <li><code>sender</code> Source of the command </li> <li><code>command</code> Command which was executed </li> <li><code>args</code> Passed command arguments </li> </ul> <p>Returns:</p> <p>true if the execution is successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#function-commandexecutor","title":"function ~CommandExecutor","text":"<pre><code>virtual endstone::CommandExecutor::~CommandExecutor () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_executor.h</code></p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/","title":"Class endstone::CommandMap","text":"<p>ClassList &gt; endstone &gt; CommandMap</p> <p>Represents a command map that manages all commands of the Server .</p> <ul> <li><code>#include &lt;endstone/command/command_map.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#public-functions","title":"Public Functions","text":"Type Name CommandMap () = default CommandMap (const CommandMap &amp;) = delete CommandMap (CommandMap &amp;&amp;) = default virtual void clearCommands () = 0 virtual bool dispatch (CommandSender &amp; sender, std::string command_line) const = 0Looks for the requested command and executes it if found. virtual std::shared_ptr&lt; Command &gt; getCommand (std::string name) const = 0 CommandMap &amp; operator= (const CommandMap &amp;) = delete CommandMap &amp; operator= (CommandMap &amp;&amp;) = default virtual bool registerCommand (std::shared_ptr&lt; Command &gt; command) = 0 virtual ~CommandMap () = default"},{"location":"reference/cpp/classendstone_1_1CommandMap/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap-13","title":"function CommandMap [\u2153]","text":"<pre><code>endstone::CommandMap::CommandMap () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap-23","title":"function CommandMap [\u2154]","text":"<pre><code>endstone::CommandMap::CommandMap (\n    const CommandMap &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap-33","title":"function CommandMap [3/3]","text":"<pre><code>endstone::CommandMap::CommandMap (\n    CommandMap &amp;&amp;\n) = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-clearcommands","title":"function clearCommands","text":"<pre><code>virtual void endstone::CommandMap::clearCommands () = 0\n</code></pre> <p>Clears all registered commands. </p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-dispatch","title":"function dispatch","text":"<p>Looks for the requested command and executes it if found. <pre><code>virtual bool endstone::CommandMap::dispatch (\n    CommandSender &amp; sender,\n    std::string command_line\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>sender</code> The command's sender </li> <li><code>command_line</code> command + arguments. Example: \"/test abc 123\" </li> </ul> <p>Returns:</p> <p>true if execution is successful, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-getcommand","title":"function getCommand","text":"<pre><code>virtual std::shared_ptr&lt; Command &gt; endstone::CommandMap::getCommand (\n    std::string name\n) const = 0\n</code></pre> <p>Gets the command registered to the specified name</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the command to retrieve </li> </ul> <p>Returns:</p> <p>Command with the specified name or nullptr if a command with that label doesn't exist </p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-operator","title":"function operator=","text":"<pre><code>CommandMap &amp; endstone::CommandMap::operator= (\n    const CommandMap &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-operator_1","title":"function operator=","text":"<pre><code>CommandMap &amp; endstone::CommandMap::operator= (\n    CommandMap &amp;&amp;\n) = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-registercommand","title":"function registerCommand","text":"<pre><code>virtual bool endstone::CommandMap::registerCommand (\n    std::shared_ptr&lt; Command &gt; command\n) = 0\n</code></pre> <p>Registers a command.</p> <p>Parameters:</p> <ul> <li><code>command</code> the command to register </li> </ul> <p>Returns:</p> <p>true on success, false if a command with the same name is already registered </p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap","title":"function ~CommandMap","text":"<pre><code>virtual endstone::CommandMap::~CommandMap () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_map.h</code></p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/","title":"Class endstone::CommandSender","text":"<p>ClassList &gt; endstone &gt; CommandSender</p> <p>Represents a command sender. </p> <ul> <li><code>#include &lt;endstone/command/command_sender.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Permissible</p> <p>Inherited by the following classes: endstone::Actor,  endstone::BlockCommandSender,  endstone::CommandSenderWrapper,  endstone::ConsoleCommandSender</p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#public-functions","title":"Public Functions","text":"Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1CommandSender/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1CommandSender/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-asactor","title":"function asActor","text":"<p>Gets a CommandSender asActor . <pre><code>virtual Actor * endstone::CommandSender::asActor () const = 0\n</code></pre></p> <p>Returns:</p> <p>Actor, nullptr if not an Actor </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-asblock","title":"function asBlock","text":"<p>Gets a CommandSender asBlockCommandSender . <pre><code>virtual BlockCommandSender * endstone::CommandSender::asBlock () const = 0\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a BlockCommandSender </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-ascommandsender","title":"function asCommandSender","text":"<p>Casts a Permissible asCommandSender . <pre><code>inline virtual CommandSender * endstone::CommandSender::asCommandSender () override const\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a CommandSender </p> <p>Implements endstone::Permissible::asCommandSender</p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-asconsole","title":"function asConsole","text":"<p>Gets a CommandSender asConsoleCommandSender . <pre><code>virtual ConsoleCommandSender * endstone::CommandSender::asConsole () const = 0\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a ConsoleCommandSender </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-asplayer","title":"function asPlayer","text":"<p>Gets a CommandSender asPlayer . <pre><code>virtual Player * endstone::CommandSender::asPlayer () const = 0\n</code></pre></p> <p>Returns:</p> <p>Player, nullptr if not a Player </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-getname","title":"function getName","text":"<p>Gets the name of this command sender. <pre><code>virtual std::string endstone::CommandSender::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>Name of the sender </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-getserver","title":"function getServer","text":"<p>Returns the server instance that this command is running on. <pre><code>virtual Server &amp; endstone::CommandSender::getServer () const = 0\n</code></pre></p> <p>Returns:</p> <p>Server instance </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-senderrormessage-12","title":"function sendErrorMessage [\u00bd]","text":"<p>Sends this sender a error message. <pre><code>virtual void endstone::CommandSender::sendErrorMessage (\n    const Message &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Error message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-senderrormessage-22","title":"function sendErrorMessage [2/2]","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::CommandSender::sendErrorMessage (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-sendmessage-12","title":"function sendMessage [\u00bd]","text":"<p>Sends this sender a message. <pre><code>virtual void endstone::CommandSender::sendMessage (\n    const Message &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-sendmessage-22","title":"function sendMessage [2/2]","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::CommandSender::sendMessage (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_sender.h</code></p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/","title":"Class endstone::CommandSenderWrapper","text":"<p>ClassList &gt; endstone &gt; CommandSenderWrapper</p> <p>Represents a wrapper that forwards commands to the wrapped CommandSender and captures its output.</p> <ul> <li><code>#include &lt;endstone/command/command_sender_wrapper.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::CommandSender</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; void(const Message &amp;)&gt; Callback"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#public-functions","title":"Public Functions","text":"Type Name CommandSenderWrapper (CommandSender &amp; sender, Callback on_message={}, Callback on_error={})  virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) overrideAdds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) overrideAdds a new empty PermissionAttachment to this object. virtual Actor * asActor () override constGets a CommandSender asActor . virtual BlockCommandSender * asBlock () override constGets a CommandSender asBlockCommandSender . virtual ConsoleCommandSender * asConsole () override constGets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () override constGets a CommandSender asPlayer . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () override constGets a set containing all the permissions currently in effect by this object. virtual std::string getName () override constGets the name of this command sender. virtual PermissionLevel getPermissionLevel () override constGets the permission level of this object. virtual Server &amp; getServer () override constReturns the server instance that this command is running on. virtual bool hasPermission (std::string name) override constGets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) override constGets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) override constChecks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) override constChecks if this object contains an override for the specified Permission . virtual void recalculatePermissions () overrideRecalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) overrideRemoves the given PermissionAttachment from this object. virtual void sendErrorMessage (const Message &amp; message) override constSends this sender a error message. virtual void sendMessage (const Message &amp; message) override constSends this sender a message."},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#typedef-callback","title":"typedef Callback","text":"<pre><code>using endstone::CommandSenderWrapper::Callback =  std::function&lt;void(const Message &amp;)&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-commandsenderwrapper","title":"function CommandSenderWrapper","text":"<pre><code>inline explicit endstone::CommandSenderWrapper::CommandSenderWrapper (\n    CommandSender &amp; sender,\n    Callback on_message={},\n    Callback on_error={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-addattachment-12","title":"function addAttachment [\u00bd]","text":"<p>Adds a new PermissionAttachment with a single permission by name and value. <pre><code>inline virtual PermissionAttachment * endstone::CommandSenderWrapper::addAttachment (\n    Plugin &amp; plugin,\n    const std::string &amp; name,\n    bool value\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin responsible for this attachment, may not be null or disabled </li> <li><code>name</code> Name of the permission to attach </li> <li><code>value</code> Value of the permission </li> </ul> <p>Returns:</p> <p>The PermissionAttachment that was just created </p> <p>Implements endstone::Permissible::addAttachment</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-addattachment-22","title":"function addAttachment [2/2]","text":"<p>Adds a new empty PermissionAttachment to this object. <pre><code>inline virtual PermissionAttachment * endstone::CommandSenderWrapper::addAttachment (\n    Plugin &amp; plugin\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin responsible for this attachment, may not be null or disabled </li> </ul> <p>Returns:</p> <p>The PermissionAttachment that was just created </p> <p>Implements endstone::Permissible::addAttachment</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-asactor","title":"function asActor","text":"<p>Gets a CommandSender asActor . <pre><code>inline virtual Actor * endstone::CommandSenderWrapper::asActor () override const\n</code></pre></p> <p>Returns:</p> <p>Actor, nullptr if not an Actor </p> <p>Implements endstone::CommandSender::asActor</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-asblock","title":"function asBlock","text":"<p>Gets a CommandSender asBlockCommandSender . <pre><code>inline virtual BlockCommandSender * endstone::CommandSenderWrapper::asBlock () override const\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a BlockCommandSender </p> <p>Implements endstone::CommandSender::asBlock</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-asconsole","title":"function asConsole","text":"<p>Gets a CommandSender asConsoleCommandSender . <pre><code>inline virtual ConsoleCommandSender * endstone::CommandSenderWrapper::asConsole () override const\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a ConsoleCommandSender </p> <p>Implements endstone::CommandSender::asConsole</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-asplayer","title":"function asPlayer","text":"<p>Gets a CommandSender asPlayer . <pre><code>inline virtual Player * endstone::CommandSenderWrapper::asPlayer () override const\n</code></pre></p> <p>Returns:</p> <p>Player, nullptr if not a Player </p> <p>Implements endstone::CommandSender::asPlayer</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-geteffectivepermissions","title":"function getEffectivePermissions","text":"<p>Gets a set containing all the permissions currently in effect by this object. <pre><code>inline virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; endstone::CommandSenderWrapper::getEffectivePermissions () override const\n</code></pre></p> <p>Returns:</p> <p>Set of currently effective permissions </p> <p>Implements endstone::Permissible::getEffectivePermissions</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-getname","title":"function getName","text":"<p>Gets the name of this command sender. <pre><code>inline virtual std::string endstone::CommandSenderWrapper::getName () override const\n</code></pre></p> <p>Returns:</p> <p>Name of the sender </p> <p>Implements endstone::CommandSender::getName</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-getpermissionlevel","title":"function getPermissionLevel","text":"<p>Gets the permission level of this object. <pre><code>inline virtual PermissionLevel endstone::CommandSenderWrapper::getPermissionLevel () override const\n</code></pre></p> <p>Returns:</p> <p>The permission level </p> <p>Implements endstone::Permissible::getPermissionLevel</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-getserver","title":"function getServer","text":"<p>Returns the server instance that this command is running on. <pre><code>inline virtual Server &amp; endstone::CommandSenderWrapper::getServer () override const\n</code></pre></p> <p>Returns:</p> <p>Server instance </p> <p>Implements endstone::CommandSender::getServer</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-haspermission-12","title":"function hasPermission [\u00bd]","text":"<p>Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. <pre><code>inline virtual bool endstone::CommandSenderWrapper::hasPermission (\n    std::string name\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>Value of the permission </p> <p>Implements endstone::Permissible::hasPermission</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-haspermission-22","title":"function hasPermission [2/2]","text":"<p>Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. <pre><code>inline virtual bool endstone::CommandSenderWrapper::hasPermission (\n    const Permission &amp; perm\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to get </li> </ul> <p>Returns:</p> <p>Value of the permission </p> <p>Implements endstone::Permissible::hasPermission</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-ispermissionset-12","title":"function isPermissionSet [\u00bd]","text":"<p>Checks if this object contains an override for the specified permission, by fully qualified name. <pre><code>inline virtual bool endstone::CommandSenderWrapper::isPermissionSet (\n    std::string name\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>true if the permission is set, otherwise false </p> <p>Implements endstone::Permissible::isPermissionSet</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-ispermissionset-22","title":"function isPermissionSet [2/2]","text":"<p>Checks if this object contains an override for the specified Permission . <pre><code>inline virtual bool endstone::CommandSenderWrapper::isPermissionSet (\n    const Permission &amp; perm\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to check </li> </ul> <p>Returns:</p> <p>true if the permission is set, otherwise false </p> <p>Implements endstone::Permissible::isPermissionSet</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-recalculatepermissions","title":"function recalculatePermissions","text":"<p>Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. <pre><code>inline virtual void endstone::CommandSenderWrapper::recalculatePermissions () override\n</code></pre></p> <p>Implements endstone::Permissible::recalculatePermissions</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-removeattachment","title":"function removeAttachment","text":"<p>Removes the given PermissionAttachment from this object. <pre><code>inline virtual Result&lt; void &gt; endstone::CommandSenderWrapper::removeAttachment (\n    PermissionAttachment &amp; attachment\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>attachment</code> Attachment to remove </li> </ul> <p>Returns:</p> <p>true if the specified attachment was removed successfully, false when it isn't part of this object </p> <p>Implements endstone::Permissible::removeAttachment</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-senderrormessage","title":"function sendErrorMessage","text":"<p>Sends this sender a error message. <pre><code>inline virtual void endstone::CommandSenderWrapper::sendErrorMessage (\n    const Message &amp; message\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Error message to be displayed </li> </ul> <p>Implements endstone::CommandSender::sendErrorMessage</p>"},{"location":"reference/cpp/classendstone_1_1CommandSenderWrapper/#function-sendmessage","title":"function sendMessage","text":"<p>Sends this sender a message. <pre><code>inline virtual void endstone::CommandSenderWrapper::sendMessage (\n    const Message &amp; message\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul> <p>Implements endstone::CommandSender::sendMessage</p> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_sender_wrapper.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ConsoleCommandSender/","title":"Class endstone::ConsoleCommandSender","text":"<p>ClassList &gt; endstone &gt; ConsoleCommandSender</p> <p>Represents a console command sender. </p> <ul> <li><code>#include &lt;endstone/command/console_command_sender.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::CommandSender</p>"},{"location":"reference/cpp/classendstone_1_1ConsoleCommandSender/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1ConsoleCommandSender/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default <p>The documentation for this class was generated from the following file <code>include/endstone/command/console_command_sender.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Criteria/","title":"Class endstone::Criteria","text":"<p>ClassList &gt; endstone &gt; Criteria</p> <p>Represents a scoreboard criteria. </p> <ul> <li><code>#include &lt;endstone/scoreboard/criteria.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Criteria/#public-types","title":"Public Types","text":"Type Name enum Type"},{"location":"reference/cpp/classendstone_1_1Criteria/#public-functions","title":"Public Functions","text":"Type Name virtual RenderType getDefaultRenderType () const = 0 virtual std::string getName () const = 0Get the name of this criteria (its unique id). virtual bool isReadOnly () const = 0Get whether or not this criteria is read only. If read only, scoreboards with this criteria cannot have their scores changed. virtual ~Criteria () = default"},{"location":"reference/cpp/classendstone_1_1Criteria/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Criteria/#enum-type","title":"enum Type","text":"<pre><code>enum endstone::Criteria::Type {\n    Dummy\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Criteria/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Criteria/#function-getdefaultrendertype","title":"function getDefaultRenderType","text":"<pre><code>virtual RenderType endstone::Criteria::getDefaultRenderType () const = 0\n</code></pre> <p>Get the RenderType used by default for this criteria.</p> <p>Returns:</p> <p>the default render type </p>"},{"location":"reference/cpp/classendstone_1_1Criteria/#function-getname","title":"function getName","text":"<p>Get the name of this criteria (its unique id). <pre><code>virtual std::string endstone::Criteria::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>the name </p>"},{"location":"reference/cpp/classendstone_1_1Criteria/#function-isreadonly","title":"function isReadOnly","text":"<p>Get whether or not this criteria is read only. If read only, scoreboards with this criteria cannot have their scores changed. <pre><code>virtual bool endstone::Criteria::isReadOnly () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if read only, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Criteria/#function-criteria","title":"function ~Criteria","text":"<pre><code>virtual endstone::Criteria::~Criteria () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/criteria.h</code></p>"},{"location":"reference/cpp/classendstone_1_1DamageSource/","title":"Class endstone::DamageSource","text":"<p>ClassList &gt; endstone &gt; DamageSource</p> <p>Represents a source of damage. </p> <ul> <li><code>#include &lt;endstone/damage/damage_source.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1DamageSource/#public-functions","title":"Public Functions","text":"Type Name virtual Actor * getActor () const = 0Get the actor that caused the damage to occur. virtual Actor * getDamagingActor () const = 0Get the actor that directly caused the damage. virtual std::string_view getType () const = 0Get the damage type. virtual bool isIndirect () const = 0Get if this damage is indirect. virtual ~DamageSource () = default"},{"location":"reference/cpp/classendstone_1_1DamageSource/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1DamageSource/#function-getactor","title":"function getActor","text":"<p>Get the actor that caused the damage to occur. <pre><code>virtual Actor * endstone::DamageSource::getActor () const = 0\n</code></pre></p> <p>Not to be confused with DamageSource::getDamagingActor(), the returned actor is the actor to which the damage is ultimately attributed if the receiver is killed. If, for example, the receiver was damaged by a projectile, the shooter/thrower would be returned.</p> <p>Returns:</p> <p>an Actor or null </p>"},{"location":"reference/cpp/classendstone_1_1DamageSource/#function-getdamagingactor","title":"function getDamagingActor","text":"<p>Get the actor that directly caused the damage. <pre><code>virtual Actor * endstone::DamageSource::getDamagingActor () const = 0\n</code></pre></p> <p>Not to be confused with DamageSource::getActor(), the returned actor is the actor that actually inflicted the damage. If, for example, the receiver was damaged by a projectile, the projectile would be returned.</p> <p>Returns:</p> <p>an Actor or null </p>"},{"location":"reference/cpp/classendstone_1_1DamageSource/#function-gettype","title":"function getType","text":"<p>Get the damage type. <pre><code>virtual std::string_view endstone::DamageSource::getType () const = 0\n</code></pre></p> <p>Returns:</p> <p>the damage type </p>"},{"location":"reference/cpp/classendstone_1_1DamageSource/#function-isindirect","title":"function isIndirect","text":"<p>Get if this damage is indirect. <pre><code>virtual bool endstone::DamageSource::isIndirect () const = 0\n</code></pre></p> <p>Damage is considered indirect if DamageSource::getActor() is not equal to DamageSource::getDamagingActor(). This will be the case, for example, if a skeleton shot an arrow or a player threw a potion.</p> <p>Returns:</p> <p>true if is indirect, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1DamageSource/#function-damagesource","title":"function ~DamageSource","text":"<pre><code>virtual endstone::DamageSource::~DamageSource () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/damage/damage_source.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Dimension/","title":"Class endstone::Dimension","text":"<p>ClassList &gt; endstone &gt; Dimension</p> <p>Represents a dimension within a Level .</p> <ul> <li><code>#include &lt;endstone/level/dimension.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Dimension/#public-types","title":"Public Types","text":"Type Name enum Type Represents various dimension types."},{"location":"reference/cpp/classendstone_1_1Dimension/#public-functions","title":"Public Functions","text":"Type Name virtual Item &amp; dropItem (Location location, ItemStack &amp; item) = 0Drops an item at the specified Location . virtual std::vector&lt; Actor * &gt; getActors () const = 0Get a list of all actors in this dimension. virtual std::unique_ptr&lt; Block &gt; getBlockAt (int x, int y, int z) const = 0Gets the Block at the given coordinates. virtual std::unique_ptr&lt; Block &gt; getBlockAt (Location location) const = 0Gets the Block at the givenLocation . virtual std::unique_ptr&lt; Block &gt; getHighestBlockAt (int x, int z) const = 0Gets the highest non-empty (impassable) block at the given coordinates. virtual std::unique_ptr&lt; Block &gt; getHighestBlockAt (Location location) const = 0Gets the highest non-empty (impassable) block at the given Location . virtual int getHighestBlockYAt (int x, int z) const = 0Gets the highest non-empty (impassable) coordinate at the given coordinates. virtual Level &amp; getLevel () const = 0Gets the level to which this dimension belongs. virtual std::vector&lt; std::unique_ptr&lt; Chunk &gt; &gt; getLoadedChunks () = 0Gets a list of all loaded Chunks. virtual std::string getName () const = 0Gets the name of this dimension. virtual Type getType () const = 0Gets the type of this dimension. virtual Actor * spawnActor (Location location, std::string type) = 0Creates an actor at the given Location . virtual ~Dimension () = default"},{"location":"reference/cpp/classendstone_1_1Dimension/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Dimension/#enum-type","title":"enum Type","text":"<p>Represents various dimension types. <pre><code>enum endstone::Dimension::Type {\n    Overworld = 0,\n    Nether = 1,\n    TheEnd = 2,\n    Custom = 999\n};\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Dimension/#function-dropitem","title":"function dropItem","text":"<p>Drops an item at the specified Location . <pre><code>virtual Item &amp; endstone::Dimension::dropItem (\n    Location location,\n    ItemStack &amp; item\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>location</code> Location to drop the item </li> <li><code>item</code> ItemStack to drop</li> </ul> <p>Returns:</p> <p>Item entity created as a result of this method </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getactors","title":"function getActors","text":"<p>Get a list of all actors in this dimension. <pre><code>virtual std::vector&lt; Actor * &gt; endstone::Dimension::getActors () const = 0\n</code></pre></p> <p>Returns:</p> <p>A List of all actors currently residing in this dimension </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getblockat-12","title":"function getBlockAt [\u00bd]","text":"<p>Gets the Block at the given coordinates. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Dimension::getBlockAt (\n    int x,\n    int y,\n    int z\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> X-coordinate of the block </li> <li><code>y</code> Y-coordinate of the block </li> <li><code>z</code> Z-coordinate of the block </li> </ul> <p>Returns:</p> <p>Block at the given coordinates </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getblockat-22","title":"function getBlockAt [2/2]","text":"<p>Gets the Block at the givenLocation . <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Dimension::getBlockAt (\n    Location location\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>location</code> Location of the block </li> </ul> <p>Returns:</p> <p>Block at the given coordinates </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-gethighestblockat-12","title":"function getHighestBlockAt [\u00bd]","text":"<p>Gets the highest non-empty (impassable) block at the given coordinates. <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Dimension::getHighestBlockAt (\n    int x,\n    int z\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> X-coordinate of the block </li> <li><code>z</code> Z-coordinate of the block </li> </ul> <p>Returns:</p> <p>Highest non-empty block </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-gethighestblockat-22","title":"function getHighestBlockAt [2/2]","text":"<p>Gets the highest non-empty (impassable) block at the given Location . <pre><code>virtual std::unique_ptr&lt; Block &gt; endstone::Dimension::getHighestBlockAt (\n    Location location\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>location</code> Coordinates to get the highest block </li> </ul> <p>Returns:</p> <p>Highest non-empty block </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-gethighestblockyat","title":"function getHighestBlockYAt","text":"<p>Gets the highest non-empty (impassable) coordinate at the given coordinates. <pre><code>virtual int endstone::Dimension::getHighestBlockYAt (\n    int x,\n    int z\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> X-coordinate of the blocks </li> <li><code>z</code> Z-coordinate of the blocks </li> </ul> <p>Returns:</p> <p>Y-coordinate of the highest non-empty block </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getlevel","title":"function getLevel","text":"<p>Gets the level to which this dimension belongs. <pre><code>virtual Level &amp; endstone::Dimension::getLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>Level containing this dimension. </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getloadedchunks","title":"function getLoadedChunks","text":"<p>Gets a list of all loaded Chunks. <pre><code>virtual std::vector&lt; std::unique_ptr&lt; Chunk &gt; &gt; endstone::Dimension::getLoadedChunks () = 0\n</code></pre></p> <p>Returns:</p> <p>All loaded chunks </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getname","title":"function getName","text":"<p>Gets the name of this dimension. <pre><code>virtual std::string endstone::Dimension::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>Name of this dimension </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-gettype","title":"function getType","text":"<p>Gets the type of this dimension. <pre><code>virtual Type endstone::Dimension::getType () const = 0\n</code></pre></p> <p>Returns:</p> <p>Type of this dimension </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-spawnactor","title":"function spawnActor","text":"<p>Creates an actor at the given Location . <pre><code>virtual Actor * endstone::Dimension::spawnActor (\n    Location location,\n    std::string type\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>location</code> The location to spawn the actor </li> <li><code>type</code> The actor to spawn </li> </ul> <p>Returns:</p> <p>Resulting Actor of this method </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-dimension","title":"function ~Dimension","text":"<pre><code>virtual endstone::Dimension::~Dimension () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/dimension.h</code></p>"},{"location":"reference/cpp/classendstone_1_1DimensionEvent/","title":"Class endstone::DimensionEvent","text":"<p>ClassList &gt; endstone &gt; DimensionEvent</p> <p>Represents events within a level. </p> <ul> <li><code>#include &lt;endstone/event/level/dimension_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::LevelEvent</p> <p>Inherited by the following classes: endstone::ChunkEvent</p>"},{"location":"reference/cpp/classendstone_1_1DimensionEvent/#public-functions","title":"Public Functions","text":"Type Name DimensionEvent (Dimension &amp; dimension)  Dimension &amp; getDimension () const"},{"location":"reference/cpp/classendstone_1_1DimensionEvent/#public-functions-inherited-from-endstonelevelevent","title":"Public Functions inherited from endstone::LevelEvent","text":"<p>See endstone::LevelEvent</p> Type Name LevelEvent (Level &amp; level)  Level &amp; getLevel () const"},{"location":"reference/cpp/classendstone_1_1DimensionEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1DimensionEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1DimensionEvent/#function-dimensionevent","title":"function DimensionEvent","text":"<pre><code>inline explicit endstone::DimensionEvent::DimensionEvent (\n    Dimension &amp; dimension\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1DimensionEvent/#function-getdimension","title":"function getDimension","text":"<pre><code>inline Dimension &amp; endstone::DimensionEvent::getDimension () const\n</code></pre> <p>Gets the dimension primarily involved with this event</p> <p>Returns:</p> <p>Dimension which caused this event </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/level/dimension_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Divider/","title":"Class endstone::Divider","text":"<p>ClassList &gt; endstone &gt; Divider</p> <p>Represents a divider. </p> <ul> <li><code>#include &lt;endstone/form/controls/divider.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Divider/#public-functions","title":"Public Functions","text":"Type Name Divider () = default"},{"location":"reference/cpp/classendstone_1_1Divider/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Divider/#function-divider","title":"function Divider","text":"<pre><code>endstone::Divider::Divider () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/divider.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/","title":"Class endstone::Dropdown","text":"<p>ClassList &gt; endstone &gt; Dropdown</p> <p>Represents a dropdown with a set of predefined options. </p> <ul> <li><code>#include &lt;endstone/form/controls/dropdown.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::StepSlider</p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#public-functions","title":"Public Functions","text":"Type Name Dropdown () = default Dropdown (Message label, std::vector&lt; std::string &gt; options, std::optional&lt; int &gt; default_index=std::nullopt)  Dropdown &amp; addOption (const std::string &amp; option) Adds a new option to the dropdown. std::optional&lt; int &gt; getDefaultIndex () constGets the default index of the dropdown. Message getLabel () constGets the label of the dropdown. std::vector&lt; std::string &gt; getOptions () constGets the options of the dropdown. Dropdown &amp; setDefaultIndex (std::optional&lt; int &gt; default_index) Sets the default index of the dropdown. Dropdown &amp; setLabel (Message label) Sets the label of the dropdown. Dropdown &amp; setOptions (std::vector&lt; std::string &gt; options) Sets the options of the dropdown."},{"location":"reference/cpp/classendstone_1_1Dropdown/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-dropdown-12","title":"function Dropdown [\u00bd]","text":"<pre><code>endstone::Dropdown::Dropdown () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-dropdown-22","title":"function Dropdown [2/2]","text":"<pre><code>inline explicit endstone::Dropdown::Dropdown (\n    Message label,\n    std::vector&lt; std::string &gt; options,\n    std::optional&lt; int &gt; default_index=std::nullopt\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-addoption","title":"function addOption","text":"<p>Adds a new option to the dropdown. <pre><code>inline Dropdown &amp; endstone::Dropdown::addOption (\n    const std::string &amp; option\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>option</code> The new option for the dropdown. </li> </ul> <p>Returns:</p> <p>A reference to the dropdown itself. </p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-getdefaultindex","title":"function getDefaultIndex","text":"<p>Gets the default index of the dropdown. <pre><code>inline std::optional&lt; int &gt; endstone::Dropdown::getDefaultIndex () const\n</code></pre></p> <p>Returns:</p> <p>The default index of the dropdown. </p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-getlabel","title":"function getLabel","text":"<p>Gets the label of the dropdown. <pre><code>inline Message endstone::Dropdown::getLabel () const\n</code></pre></p> <p>Returns:</p> <p>The label of the dropdown. </p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-getoptions","title":"function getOptions","text":"<p>Gets the options of the dropdown. <pre><code>inline std::vector&lt; std::string &gt; endstone::Dropdown::getOptions () const\n</code></pre></p> <p>Returns:</p> <p>The options of the dropdown. </p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-setdefaultindex","title":"function setDefaultIndex","text":"<p>Sets the default index of the dropdown. <pre><code>inline Dropdown &amp; endstone::Dropdown::setDefaultIndex (\n    std::optional&lt; int &gt; default_index\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>default_index</code> The new default index for the dropdown. </li> </ul> <p>Returns:</p> <p>A reference to the dropdown itself. </p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-setlabel","title":"function setLabel","text":"<p>Sets the label of the dropdown. <pre><code>inline Dropdown &amp; endstone::Dropdown::setLabel (\n    Message label\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>label</code> The new label for the dropdown. </li> </ul> <p>Returns:</p> <p>A reference to the dropdown itself. </p>"},{"location":"reference/cpp/classendstone_1_1Dropdown/#function-setoptions","title":"function setOptions","text":"<p>Sets the options of the dropdown. <pre><code>inline Dropdown &amp; endstone::Dropdown::setOptions (\n    std::vector&lt; std::string &gt; options\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>options</code> The new options for the dropdown. </li> </ul> <p>Returns:</p> <p>A reference to the dropdown itself. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/dropdown.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/","title":"Class endstone::Enchantment","text":"<p>ClassList &gt; endstone &gt; Enchantment</p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#public-functions","title":"Public Functions","text":"Type Name virtual bool canEnchantItem (const ItemStack &amp; item) const = 0Checks if this Enchantment may be applied to the givenItemStack . virtual bool conflictsWith (const Enchantment &amp; other) const = 0Check if this enchantment conflicts with another enchantment. virtual std::string getId () const = 0Return the identifier for this enchantment. virtual int getMaxLevel () const = 0Gets the maximum level that this Enchantment may become. virtual int getStartLevel () const = 0Gets the level that this Enchantment should start at (also known as minimum level). virtual std::string getTranslationKey () const = 0Get the translation key, suitable for use in a translation component. virtual ~Enchantment () = default"},{"location":"reference/cpp/classendstone_1_1Enchantment/#public-static-functions","title":"Public Static Functions","text":"Type Name const Enchantment * get (const std::string &amp; name) Attempts to get the Enchantment with the given name."},{"location":"reference/cpp/classendstone_1_1Enchantment/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-canenchantitem","title":"function canEnchantItem","text":"<p>Checks if this Enchantment may be applied to the givenItemStack . <pre><code>virtual bool endstone::Enchantment::canEnchantItem (\n    const ItemStack &amp; item\n) const = 0\n</code></pre></p> <p>This does not check if it conflicts with any enchantments already applied to the item.</p> <p>Parameters:</p> <ul> <li><code>item</code> Item to test </li> </ul> <p>Returns:</p> <p>True if the enchantment may be applied, otherwise False </p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-conflictswith","title":"function conflictsWith","text":"<p>Check if this enchantment conflicts with another enchantment. <pre><code>virtual bool endstone::Enchantment::conflictsWith (\n    const Enchantment &amp; other\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>other</code> The enchantment to check against </li> </ul> <p>Returns:</p> <p>True if there is a conflict. </p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-getid","title":"function getId","text":"<p>Return the identifier for this enchantment. <pre><code>virtual std::string endstone::Enchantment::getId () const = 0\n</code></pre></p> <p>Returns:</p> <p>this enchantment's id </p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-getmaxlevel","title":"function getMaxLevel","text":"<p>Gets the maximum level that this Enchantment may become. <pre><code>virtual int endstone::Enchantment::getMaxLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>Maximum level of the Enchantment </p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-getstartlevel","title":"function getStartLevel","text":"<p>Gets the level that this Enchantment should start at (also known as minimum level). <pre><code>virtual int endstone::Enchantment::getStartLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>Starting level of the Enchantment </p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-gettranslationkey","title":"function getTranslationKey","text":"<p>Get the translation key, suitable for use in a translation component. <pre><code>virtual std::string endstone::Enchantment::getTranslationKey () const = 0\n</code></pre></p> <p>Returns:</p> <p>the translation key </p>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-enchantment","title":"function ~Enchantment","text":"<pre><code>virtual endstone::Enchantment::~Enchantment () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Enchantment/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Enchantment/#function-get","title":"function get","text":"<p>Attempts to get the Enchantment with the given name. <pre><code>static inline const Enchantment * endstone::Enchantment::get (\n    const std::string &amp; name\n) \n</code></pre></p> <p>Note:</p> <p>This is a normal lookup, names must be the precise name.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the Enchantment to get</li> </ul> <p>Returns:</p> <p>ItemType if found, or nullptr </p> <p>The documentation for this class was generated from the following file <code>include/endstone/enchantments/enchantment.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Event/","title":"Class endstone::Event","text":"<p>ClassList &gt; endstone &gt; Event</p> <p>Represents an event. </p> <ul> <li><code>#include &lt;endstone/event/event.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::ActorEvent,  endstone::ActorEvent,  endstone::ActorEvent,  endstone::BlockEvent,  endstone::LevelEvent,  endstone::PlayerEvent,  endstone::ServerEvent,  endstone::WeatherEvent</p>"},{"location":"reference/cpp/classendstone_1_1Event/#public-functions","title":"Public Functions","text":"Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1Event/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Event/#function-event-12","title":"function Event [\u00bd]","text":"<pre><code>inline explicit endstone::Event::Event (\n    bool async=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Event/#function-event-22","title":"function Event [2/2]","text":"<pre><code>endstone::Event::Event (\n    const Event &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Event/#function-geteventname","title":"function getEventName","text":"<pre><code>virtual std::string endstone::Event::getEventName () const = 0\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p>"},{"location":"reference/cpp/classendstone_1_1Event/#function-isasynchronous","title":"function isAsynchronous","text":"<pre><code>inline bool endstone::Event::isAsynchronous () const\n</code></pre> <p>Any custom event that should not by synchronized with other events must use the specific constructor.</p> <p>Returns:</p> <p>false by default, true if the event fires asynchronously </p>"},{"location":"reference/cpp/classendstone_1_1Event/#function-operator","title":"function operator=","text":"<pre><code>Event &amp; endstone::Event::operator= (\n    const Event &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Event/#function-event","title":"function ~Event","text":"<pre><code>virtual endstone::Event::~Event () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/","title":"Class endstone::EventHandler","text":"<p>ClassList &gt; endstone &gt; EventHandler</p> <p>Represents a registered EventHandler which associates with aPlugin .</p> <ul> <li><code>#include &lt;endstone/event/event_handler.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#public-functions","title":"Public Functions","text":"Type Name EventHandler (std::string event, std::function&lt; void(Event &amp;)&gt; executor, EventPriority priority, Plugin &amp; plugin, bool ignore_cancelled)  void callEvent (Event &amp; event) const std::string getEventType () const Plugin &amp; getPlugin () const EventPriority getPriority () const bool isIgnoreCancelled () const"},{"location":"reference/cpp/classendstone_1_1EventHandler/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-eventhandler","title":"function EventHandler","text":"<pre><code>inline endstone::EventHandler::EventHandler (\n    std::string event,\n    std::function&lt; void( Event &amp;)&gt; executor,\n    EventPriority priority,\n    Plugin &amp; plugin,\n    bool ignore_cancelled\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-callevent","title":"function callEvent","text":"<pre><code>inline void endstone::EventHandler::callEvent (\n    Event &amp; event\n) const\n</code></pre> <p>Calls the event executor</p> <p>Parameters:</p> <ul> <li><code>event</code> The event </li> </ul>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-geteventtype","title":"function getEventType","text":"<pre><code>inline std::string endstone::EventHandler::getEventType () const\n</code></pre> <p>Gets the event type for this registration</p> <p>Returns:</p> <p>Registered event type </p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::EventHandler::getPlugin () const\n</code></pre> <p>Gets the plugin for this registration</p> <p>Returns:</p> <p>Registered Plugin </p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-getpriority","title":"function getPriority","text":"<pre><code>inline EventPriority endstone::EventHandler::getPriority () const\n</code></pre> <p>Gets the priority for this registration</p> <p>Returns:</p> <p>Registered Priority </p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-isignorecancelled","title":"function isIgnoreCancelled","text":"<pre><code>inline bool endstone::EventHandler::isIgnoreCancelled () const\n</code></pre> <p>Whether this listener accepts cancelled events</p> <p>Returns:</p> <p>True when ignoring cancelled events </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/event_handler.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Form/","title":"Class endstone::Form","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; endstone &gt; Form</p> <p>Represents a generic form. More...</p> <ul> <li><code>#include &lt;endstone/form/form.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Form/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; void(Player *)&gt; OnCloseCallback"},{"location":"reference/cpp/classendstone_1_1Form/#public-functions","title":"Public Functions","text":"Type Name Form () = default OnCloseCallback getOnClose () constGets the on close callback of the form. Message getTitle () constGets the title of the form. T &amp; setOnClose (OnCloseCallback on_close) Sets the on close callback of the form. T &amp; setTitle (Message title) Sets the title of the form."},{"location":"reference/cpp/classendstone_1_1Form/#protected-attributes","title":"Protected Attributes","text":"Type Name OnCloseCallback on_close_ Message title_"},{"location":"reference/cpp/classendstone_1_1Form/#detailed-description","title":"Detailed Description","text":"<p>The Form class provides a base abstraction for different types of forms. It supports three types of forms: Action, Message, and Modal. Each form has a title, which can be a string or a translatable object. </p>"},{"location":"reference/cpp/classendstone_1_1Form/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Form/#typedef-onclosecallback","title":"typedef OnCloseCallback","text":"<pre><code>using endstone::Form&lt; T &gt;::OnCloseCallback =  std::function&lt;void(Player *)&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Form/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Form/#function-form","title":"function Form","text":"<pre><code>explicit endstone::Form::Form () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Form/#function-getonclose","title":"function getOnClose","text":"<p>Gets the on close callback of the form. <pre><code>inline OnCloseCallback endstone::Form::getOnClose () const\n</code></pre></p> <p>Returns:</p> <p>The on close callback of the form. </p>"},{"location":"reference/cpp/classendstone_1_1Form/#function-gettitle","title":"function getTitle","text":"<p>Gets the title of the form. <pre><code>inline Message endstone::Form::getTitle () const\n</code></pre></p> <p>Returns:</p> <p>The title of the form. </p>"},{"location":"reference/cpp/classendstone_1_1Form/#function-setonclose","title":"function setOnClose","text":"<p>Sets the on close callback of the form. <pre><code>inline T &amp; endstone::Form::setOnClose (\n    OnCloseCallback on_close\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>on_close</code> The callback to be set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1Form/#function-settitle","title":"function setTitle","text":"<p>Sets the title of the form. <pre><code>inline T &amp; endstone::Form::setTitle (\n    Message title\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> The title of the form to be set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1Form/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Form/#variable-on_close_","title":"variable on_close_","text":"<pre><code>OnCloseCallback endstone::Form&lt; T &gt;::on_close_;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Form/#variable-title_","title":"variable title_","text":"<pre><code>Message endstone::Form&lt; T &gt;::title_;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/form/form.h</code></p>"},{"location":"reference/cpp/classendstone_1_1HandlerList/","title":"Class endstone::HandlerList","text":"<p>ClassList &gt; endstone &gt; HandlerList</p> <p>A list of event handlers. Should be instantiated on a per-event basis. </p> <ul> <li><code>#include &lt;endstone/event/handler_list.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#public-functions","title":"Public Functions","text":"Type Name HandlerList (std::string event)  std::vector&lt; EventHandler * &gt; getHandlers () const EventHandler * registerHandler (std::unique_ptr&lt; EventHandler &gt; handler)  void unregister (const EventHandler &amp; handler)  void unregister (const Plugin &amp; plugin)"},{"location":"reference/cpp/classendstone_1_1HandlerList/#protected-functions","title":"Protected Functions","text":"Type Name void bake () const"},{"location":"reference/cpp/classendstone_1_1HandlerList/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-handlerlist","title":"function HandlerList","text":"<pre><code>inline explicit endstone::HandlerList::HandlerList (\n    std::string event\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-gethandlers","title":"function getHandlers","text":"<pre><code>inline std::vector&lt; EventHandler * &gt; endstone::HandlerList::getHandlers () const\n</code></pre> <p>Get the baked registered handlers associated with this handler list</p> <p>Returns:</p> <p>the array of registered handlers </p>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-registerhandler","title":"function registerHandler","text":"<pre><code>inline EventHandler * endstone::HandlerList::registerHandler (\n    std::unique_ptr&lt; EventHandler &gt; handler\n) \n</code></pre> <p>Register a new handler</p> <p>Parameters:</p> <ul> <li><code>handler</code> Event handler to register </li> </ul> <p>Returns:</p> <p>the pointer to the registered handler </p>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-unregister-12","title":"function unregister [\u00bd]","text":"<pre><code>inline void endstone::HandlerList::unregister (\n    const EventHandler &amp; handler\n) \n</code></pre> <p>Remove a handler from a specific order slot</p> <p>Parameters:</p> <ul> <li><code>handler</code> Event handler to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-unregister-22","title":"function unregister [2/2]","text":"<pre><code>inline void endstone::HandlerList::unregister (\n    const Plugin &amp; plugin\n) \n</code></pre> <p>Remove a specific plugin's handlers from this handler</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-bake","title":"function bake","text":"<pre><code>inline void endstone::HandlerList::bake () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/handler_list.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Header/","title":"Class endstone::Header","text":"<p>ClassList &gt; endstone &gt; Header</p> <p>Represents a header with a label. </p> <ul> <li><code>#include &lt;endstone/form/controls/header.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Header/#public-functions","title":"Public Functions","text":"Type Name Header () = default Header (Message label)  Message getLabel () constGets the label of the header. Header &amp; setLabel (Message label) Sets the label of the header."},{"location":"reference/cpp/classendstone_1_1Header/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Header/#function-header-12","title":"function Header [\u00bd]","text":"<pre><code>endstone::Header::Header () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Header/#function-header-22","title":"function Header [2/2]","text":"<pre><code>inline explicit endstone::Header::Header (\n    Message label\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Header/#function-getlabel","title":"function getLabel","text":"<p>Gets the label of the header. <pre><code>inline Message endstone::Header::getLabel () const\n</code></pre></p> <p>Returns:</p> <p>The label of the header. </p>"},{"location":"reference/cpp/classendstone_1_1Header/#function-setlabel","title":"function setLabel","text":"<p>Sets the label of the header. <pre><code>inline Header &amp; endstone::Header::setLabel (\n    Message label\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>label</code> The new label for the header. </li> </ul> <p>Returns:</p> <p>A reference to the current header. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/header.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ICancellable/","title":"Class endstone::ICancellable","text":"<p>ClassList &gt; endstone &gt; ICancellable</p> <p>Inherited by the following classes: endstone::Cancellable,  endstone::Cancellable,  endstone::Cancellable,  endstone::Cancellable,  endstone::Cancellable,  endstone::Cancellable,  endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ICancellable/#public-functions","title":"Public Functions","text":"Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ICancellable/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ICancellable/#function-cancel","title":"function cancel","text":"<pre><code>virtual void endstone::ICancellable::cancel () = 0\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ICancellable/#function-iscancelled","title":"function isCancelled","text":"<pre><code>virtual bool endstone::ICancellable::isCancelled () const = 0\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ICancellable/#function-setcancelled","title":"function setCancelled","text":"<pre><code>virtual void endstone::ICancellable::setCancelled (\n    bool cancel\n) = 0\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ICancellable/#function-icancellable","title":"function ~ICancellable","text":"<pre><code>virtual endstone::ICancellable::~ICancellable () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/cancellable.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Image/","title":"Class endstone::Image","text":"<p>ClassList &gt; endstone &gt; Image</p> <p>Represents an RGBA image. More...</p> <ul> <li><code>#include &lt;endstone/util/image.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Image/#public-types","title":"Public Types","text":"Type Name enum Type"},{"location":"reference/cpp/classendstone_1_1Image/#public-functions","title":"Public Functions","text":"Type Name Image (const Type type, const int width, const int height) Create an empty image (all pixels transparent black). Image (Type type, int width, int height, const T &amp; data)  Color getColor (const int x, const int y) constGet the color of a pixel. std::string_view getData () constGets the raw pixel buffer (row-major, H x W x D). int getDepth () constGet the image depth. int getHeight () constGet the image height. int getWidth () constGet the image width. void setColor (const int x, const int y, const Color color) Set the color of a pixel."},{"location":"reference/cpp/classendstone_1_1Image/#public-static-functions","title":"Public Static Functions","text":"Type Name Result&lt; Image &gt; fromArray (Type type, const int width, const int height, const std::vector&lt; unsigned char &gt; &amp; array) Creates an image from the pixel data in a byte array. Result&lt; Image &gt; fromBuffer (Type type, const int width, const int height, std::string_view buffer) Creates an image from the pixel data in a byte buffer."},{"location":"reference/cpp/classendstone_1_1Image/#detailed-description","title":"Detailed Description","text":"<p>Each pixel is four bytes: R, G, B, A, in row-major order. </p>"},{"location":"reference/cpp/classendstone_1_1Image/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Image/#enum-type","title":"enum Type","text":"<pre><code>enum endstone::Image::Type {\n    Invalid = 0,\n    Grayscale = 1,\n    RGB = 3,\n    RGBA = 4\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Image/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Image/#function-image-12","title":"function Image [\u00bd]","text":"<p>Create an empty image (all pixels transparent black). <pre><code>inline explicit endstone::Image::Image (\n    const Type type,\n    const int width,\n    const int height\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> Image type </li> <li><code>width</code> Image width in pixels </li> <li><code>height</code> Image height in pixels </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Image/#function-image-22","title":"function Image [2/2]","text":"<pre><code>template&lt;typename T&gt;\ninline endstone::Image::Image (\n    Type type,\n    int width,\n    int height,\n    const T &amp; data\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Image/#function-getcolor","title":"function getColor","text":"<p>Get the color of a pixel. <pre><code>inline Color endstone::Image::getColor (\n    const int x,\n    const int y\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> X coordinate (0 \u2264 x &lt; width) </li> <li><code>y</code> Y coordinate (0 \u2264 y &lt; height)</li> </ul> <p>Returns:</p> <p>Color at (x, y) </p>"},{"location":"reference/cpp/classendstone_1_1Image/#function-getdata","title":"function getData","text":"<p>Gets the raw pixel buffer (row-major, H x W x D). <pre><code>inline std::string_view endstone::Image::getData () const\n</code></pre></p> <p>Returns:</p> <p>The underlying image data buffer </p>"},{"location":"reference/cpp/classendstone_1_1Image/#function-getdepth","title":"function getDepth","text":"<p>Get the image depth. <pre><code>inline int endstone::Image::getDepth () const\n</code></pre></p> <p>Returns:</p> <p>Image depth </p>"},{"location":"reference/cpp/classendstone_1_1Image/#function-getheight","title":"function getHeight","text":"<p>Get the image height. <pre><code>inline int endstone::Image::getHeight () const\n</code></pre></p> <p>Returns:</p> <p>Image height in pixels </p>"},{"location":"reference/cpp/classendstone_1_1Image/#function-getwidth","title":"function getWidth","text":"<p>Get the image width. <pre><code>inline int endstone::Image::getWidth () const\n</code></pre></p> <p>Returns:</p> <p>Image width in pixels </p>"},{"location":"reference/cpp/classendstone_1_1Image/#function-setcolor","title":"function setColor","text":"<p>Set the color of a pixel. <pre><code>inline void endstone::Image::setColor (\n    const int x,\n    const int y,\n    const Color color\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> X coordinate (0 \u2264 x &lt; width) </li> <li><code>y</code> Y coordinate (0 \u2264 y &lt; height) </li> <li><code>color</code> New color for the pixel </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Image/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Image/#function-fromarray","title":"function fromArray","text":"<p>Creates an image from the pixel data in a byte array. <pre><code>static inline Result&lt; Image &gt; endstone::Image::fromArray (\n    Type type,\n    const int width,\n    const int height,\n    const std::vector&lt; unsigned char &gt; &amp; array\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> Image type </li> <li><code>width</code> Image width in pixels </li> <li><code>height</code> Image height in pixels </li> <li><code>array</code> </li> </ul> <p>Returns:</p> <p>The image on success, or an error on failure. </p>"},{"location":"reference/cpp/classendstone_1_1Image/#function-frombuffer","title":"function fromBuffer","text":"<p>Creates an image from the pixel data in a byte buffer. <pre><code>static inline Result&lt; Image &gt; endstone::Image::fromBuffer (\n    Type type,\n    const int width,\n    const int height,\n    std::string_view buffer\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> Image type </li> <li><code>width</code> Image width in pixels </li> <li><code>height</code> Image height in pixels </li> <li><code>buffer</code> </li> </ul> <p>Returns:</p> <p>The image on success, or an error on failure. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/util/image.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Inventory/","title":"Class endstone::Inventory","text":"<p>ClassList &gt; endstone &gt; Inventory</p> <p>Interface to the various inventories. </p> <ul> <li><code>#include &lt;endstone/inventory/inventory.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::PlayerInventory</p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#public-functions","title":"Public Functions","text":"Type Name virtual std::unordered_map&lt; int, ItemStack * &gt; addItem (std::vector&lt; ItemStack * &gt; items) = 0Stores the given ItemStacks in the inventory. std::unordered_map&lt; int, ItemStack * &gt; addItem (Args &amp;&amp;... items) Stores the given ItemStacks in the inventory. virtual std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; all (const std::string &amp; type) const = 0Finds all slots in the inventory containing any ItemStacks with the given ItemType . virtual std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; all (const ItemStack &amp; item) const = 0Finds all slots in the inventory containing any ItemStacks with the given ItemStack . virtual void clear (int index) = 0Clears out a particular slot in the index. virtual void clear () = 0Clears out the whole Inventory . virtual bool contains (const std::string &amp; type) const = 0Checks if the inventory contains any ItemStacks with the given ItemType . virtual bool contains (const ItemStack &amp; item) const = 0Checks if the inventory contains any ItemStacks with the given ItemStack . virtual bool contains (const ItemStack &amp; item, int amount) const = 0Checks if the inventory contains at least the minimum amount specified of exactly matching ItemStacks. virtual bool containsAtLeast (const std::string &amp; type, int amount) const = 0Checks if the inventory contains any ItemStacks with the given ItemType , adding to at least the minimum amount specified. virtual bool containsAtLeast (const ItemStack &amp; item, int amount) const = 0Checks if the inventory contains ItemStacks matching the given ItemStack whose amounts sum to at least the minimum amount specified. virtual int first (const std::string &amp; type) const = 0Finds the first slot in the inventory containing an ItemStack with the givenItemType . virtual int first (const ItemStack &amp; item) const = 0Returns the first slot in the inventory containing an ItemStack with the given stack. virtual int firstEmpty () const = 0Returns the first empty Slot. virtual std::vector&lt; std::unique_ptr&lt; ItemStack &gt; &gt; getContents () const = 0Returns all ItemStacks from the inventory. virtual std::unique_ptr&lt; ItemStack &gt; getItem (int index) const = 0Returns the ItemStack found in the slot at the given index. virtual int getMaxStackSize () const = 0Returns the maximum stack size for an ItemStack in this inventory. virtual int getSize () const = 0Returns the size of the inventory. virtual bool isEmpty () const = 0Check whether this inventory is empty. An inventory is considered to be empty if there are no ItemStacks in any slot of this inventory. virtual void remove (const std::string &amp; type) = 0Removes all stacks in the inventory matching the given ItemType . virtual void remove (const ItemStack &amp; item) = 0Removes all stacks in the inventory matching the given stack. virtual std::unordered_map&lt; int, ItemStack * &gt; removeItem (std::vector&lt; ItemStack * &gt; items) = 0Removes the given ItemStacks from the inventory. std::unordered_map&lt; int, ItemStack * &gt; removeItem (Args &amp;&amp;... items) Removes the given ItemStacks from the inventory. virtual Result&lt; void &gt; setContents (std::vector&lt; const ItemStack * &gt; items) = 0Completely replaces the inventory's contents. Removes all existing contents and replaces it with the ItemStacks given in the array. virtual void setItem (int index, const ItemStack * item) = 0Stores the ItemStack at the given index of the inventory. virtual ~Inventory () = default"},{"location":"reference/cpp/classendstone_1_1Inventory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Inventory/#function-additem-12","title":"function addItem [\u00bd]","text":"<p>Stores the given ItemStacks in the inventory. <pre><code>virtual std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::addItem (\n    std::vector&lt; ItemStack * &gt; items\n) = 0\n</code></pre></p> <p>Note:</p> <p>This will try to fill existing stacks and empty slots as well as it can.</p> <p>Note:</p> <p>The returned map contains what it couldn't store, where the key is the index, and the value is the ItemStack. If all items are stored, it will return an empty map.</p> <p>Parameters:</p> <ul> <li><code>items</code> The ItemStacks to add</li> </ul> <p>Returns:</p> <p>A map containing items that couldn't be added. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-additem-22","title":"function addItem [2/2]","text":"<p>Stores the given ItemStacks in the inventory. <pre><code>template&lt;typename... Args, typename&gt;\ninline std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::addItem (\n    Args &amp;&amp;... items\n) \n</code></pre></p> <p>Note:</p> <p>This will try to fill existing stacks and empty slots as well as it can.</p> <p>Note:</p> <p>The returned map contains what it couldn't store, where the key is the index, and the value is the ItemStack. If all items are stored, it will return an empty map.</p> <p>Parameters:</p> <ul> <li><code>items</code> The ItemStacks to add</li> </ul> <p>Returns:</p> <p>A map containing items that couldn't be added. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-all-12","title":"function all [\u00bd]","text":"<p>Finds all slots in the inventory containing any ItemStacks with the given ItemType . <pre><code>virtual std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; endstone::Inventory::all (\n    const std::string &amp; type\n) const = 0\n</code></pre></p> <p>The returned map contains entries where, the key is the slot index, and the value is the ItemStack in that slot. If no matching ItemStack is found, an empty map is returned.</p> <p>Parameters:</p> <ul> <li><code>type</code> The ItemType to match against</li> </ul> <p>Returns:</p> <p>A map from slot indexes to item at index </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-all-22","title":"function all [2/2]","text":"<p>Finds all slots in the inventory containing any ItemStacks with the given ItemStack . <pre><code>virtual std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; endstone::Inventory::all (\n    const ItemStack &amp; item\n) const = 0\n</code></pre></p> <p>Note:</p> <p>This will only match slots if both the type and the amount of the stack match</p> <p>The returned map contains entries where, the key is the slot index, and the value is the ItemStack in that slot. If no matching ItemStack is found, an empty map is returned.</p> <p>Parameters:</p> <ul> <li><code>item</code> The ItemStack to match against</li> </ul> <p>Returns:</p> <p>A map from slot indexes to item at index </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-clear-12","title":"function clear [\u00bd]","text":"<p>Clears out a particular slot in the index. <pre><code>virtual void endstone::Inventory::clear (\n    int index\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>index</code> The index to empty. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-clear-22","title":"function clear [2/2]","text":"<p>Clears out the whole Inventory . <pre><code>virtual void endstone::Inventory::clear () = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-contains-13","title":"function contains [\u2153]","text":"<p>Checks if the inventory contains any ItemStacks with the given ItemType . <pre><code>virtual bool endstone::Inventory::contains (\n    const std::string &amp; type\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> The item type to check for</li> </ul> <p>Returns:</p> <p>true if an ItemStack is found with the given ItemType </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-contains-23","title":"function contains [\u2154]","text":"<p>Checks if the inventory contains any ItemStacks with the given ItemStack . <pre><code>virtual bool endstone::Inventory::contains (\n    const ItemStack &amp; item\n) const = 0\n</code></pre></p> <p>Note:</p> <p>This will only return true if both the type and the amount of the stack match.</p> <p>Parameters:</p> <ul> <li><code>item</code> The ItemStack to match against </li> </ul> <p>Returns:</p> <p>true if any exactly matching ItemStacks were found, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-contains-33","title":"function contains [3/3]","text":"<p>Checks if the inventory contains at least the minimum amount specified of exactly matching ItemStacks. <pre><code>virtual bool endstone::Inventory::contains (\n    const ItemStack &amp; item,\n    int amount\n) const = 0\n</code></pre></p> <p>Note:</p> <p>An ItemStack only counts if both the type and the amount of the stack match.</p> <p>Parameters:</p> <ul> <li><code>item</code> the ItemStack to match against </li> <li><code>amount</code> how many identical stacks to check for</li> </ul> <p>Returns:</p> <p>true if amount less than 1 or if amount of exactly matching ItemStacks were found, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-containsatleast-12","title":"function containsAtLeast [\u00bd]","text":"<p>Checks if the inventory contains any ItemStacks with the given ItemType , adding to at least the minimum amount specified. <pre><code>virtual bool endstone::Inventory::containsAtLeast (\n    const std::string &amp; type,\n    int amount\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> The ItemType to check for </li> <li><code>amount</code> The minimum amount</li> </ul> <p>Returns:</p> <p>true if amount is less than 1, true if enough ItemStacks were found to add to the given amount </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-containsatleast-22","title":"function containsAtLeast [2/2]","text":"<p>Checks if the inventory contains ItemStacks matching the given ItemStack whose amounts sum to at least the minimum amount specified. <pre><code>virtual bool endstone::Inventory::containsAtLeast (\n    const ItemStack &amp; item,\n    int amount\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>item</code> the ItemStack to match against </li> <li><code>amount</code> the minimum amount</li> </ul> <p>Returns:</p> <p>true if amount less than 1 or enough ItemStacks were found to add to the given amount, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-first-12","title":"function first [\u00bd]","text":"<p>Finds the first slot in the inventory containing an ItemStack with the givenItemType . <pre><code>virtual int endstone::Inventory::first (\n    const std::string &amp; type\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> The ItemType to look for</li> </ul> <p>Returns:</p> <p>The slot index of the given ItemType or -1 if not found </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-first-22","title":"function first [2/2]","text":"<p>Returns the first slot in the inventory containing an ItemStack with the given stack. <pre><code>virtual int endstone::Inventory::first (\n    const ItemStack &amp; item\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>item</code> The ItemStack to match against</li> </ul> <p>Returns:</p> <p>The slot index of the given ItemStack or -1 if not found </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-firstempty","title":"function firstEmpty","text":"<p>Returns the first empty Slot. <pre><code>virtual int endstone::Inventory::firstEmpty () const = 0\n</code></pre></p> <p>Returns:</p> <p>The first empty Slot found, or -1 if no empty slots. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-getcontents","title":"function getContents","text":"<p>Returns all ItemStacks from the inventory. <pre><code>virtual std::vector&lt; std::unique_ptr&lt; ItemStack &gt; &gt; endstone::Inventory::getContents () const = 0\n</code></pre></p> <p>Returns:</p> <p>An array of ItemStacks from the inventory. Individual items may be null. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-getitem","title":"function getItem","text":"<p>Returns the ItemStack found in the slot at the given index. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::Inventory::getItem (\n    int index\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>index</code> The index of the Slot's ItemStack to return</li> </ul> <p>Returns:</p> <p>The ItemStack in the slot </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-getmaxstacksize","title":"function getMaxStackSize","text":"<p>Returns the maximum stack size for an ItemStack in this inventory. <pre><code>virtual int endstone::Inventory::getMaxStackSize () const = 0\n</code></pre></p> <p>Returns:</p> <p>The maximum size for an ItemStack in this inventory. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-getsize","title":"function getSize","text":"<p>Returns the size of the inventory. <pre><code>virtual int endstone::Inventory::getSize () const = 0\n</code></pre></p> <p>Returns:</p> <p>The size of the inventory </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-isempty","title":"function isEmpty","text":"<p>Check whether this inventory is empty. An inventory is considered to be empty if there are no ItemStacks in any slot of this inventory. <pre><code>virtual bool endstone::Inventory::isEmpty () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if empty, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-remove-12","title":"function remove [\u00bd]","text":"<p>Removes all stacks in the inventory matching the given ItemType . <pre><code>virtual void endstone::Inventory::remove (\n    const std::string &amp; type\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> The ItemType to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-remove-22","title":"function remove [2/2]","text":"<p>Removes all stacks in the inventory matching the given stack. <pre><code>virtual void endstone::Inventory::remove (\n    const ItemStack &amp; item\n) = 0\n</code></pre></p> <p>Note:</p> <p>This will only match a slot if both the type and the amount of the stack match</p> <p>Parameters:</p> <ul> <li><code>item</code> The ItemStack to match against </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-removeitem-12","title":"function removeItem [\u00bd]","text":"<p>Removes the given ItemStacks from the inventory. <pre><code>virtual std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::removeItem (\n    std::vector&lt; ItemStack * &gt; items\n) = 0\n</code></pre></p> <p>Note:</p> <p>It will try to remove 'as much as possible' from the types and amounts you give as arguments.</p> <p>Note:</p> <p>The returned HashMap contains what it couldn't remove, where the key is the index, and the value is the ItemStack. If all the given ItemStacks are removed, it will return an empty map.</p> <p>Parameters:</p> <ul> <li><code>items</code> The ItemStacks to remove</li> </ul> <p>Returns:</p> <p>A map containing items that couldn't be removed. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-removeitem-22","title":"function removeItem [2/2]","text":"<p>Removes the given ItemStacks from the inventory. <pre><code>template&lt;typename... Args, typename&gt;\ninline std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::removeItem (\n    Args &amp;&amp;... items\n) \n</code></pre></p> <p>Note:</p> <p>It will try to remove 'as much as possible' from the types and amounts you give as arguments.</p> <p>Note:</p> <p>The returned HashMap contains what it couldn't remove, where the key is the index, and the value is the ItemStack. If all the given ItemStacks are removed, it will return an empty map.</p> <p>Parameters:</p> <ul> <li><code>items</code> The ItemStacks to remove </li> </ul> <p>Returns:</p> <p>A map containing items that couldn't be removed. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-setcontents","title":"function setContents","text":"<p>Completely replaces the inventory's contents. Removes all existing contents and replaces it with the ItemStacks given in the array. <pre><code>virtual Result&lt; void &gt; endstone::Inventory::setContents (\n    std::vector&lt; const ItemStack * &gt; items\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>items</code> A complete replacement for the contents; the length must be less than or equal to getSize(). </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-setitem","title":"function setItem","text":"<p>Stores the ItemStack at the given index of the inventory. <pre><code>virtual void endstone::Inventory::setItem (\n    int index,\n    const ItemStack * item\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>index</code> The index where to put the ItemStack </li> <li><code>item</code> The ItemStack to set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-inventory","title":"function ~Inventory","text":"<pre><code>virtual endstone::Inventory::~Inventory () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/inventory.h</code></p>"},{"location":"reference/cpp/classendstone_1_1IpBanEntry/","title":"Class endstone::IpBanEntry","text":"<p>ClassList &gt; endstone &gt; IpBanEntry</p> <p>Inherits the following classes: endstone::BanEntry</p>"},{"location":"reference/cpp/classendstone_1_1IpBanEntry/#public-types-inherited-from-endstonebanentry","title":"Public Types inherited from endstone::BanEntry","text":"<p>See endstone::BanEntry</p> Type Name typedef std::chrono::system_clock::time_point Date"},{"location":"reference/cpp/classendstone_1_1IpBanEntry/#public-static-attributes-inherited-from-endstonebanentry","title":"Public Static Attributes inherited from endstone::BanEntry","text":"<p>See endstone::BanEntry</p> Type Name const std::string DateFormat   = <code>\"%FT%T%Ez\"</code>"},{"location":"reference/cpp/classendstone_1_1IpBanEntry/#public-functions","title":"Public Functions","text":"Type Name IpBanEntry (std::string address)  std::string getAddress () constGets the banned IP address."},{"location":"reference/cpp/classendstone_1_1IpBanEntry/#public-functions-inherited-from-endstonebanentry","title":"Public Functions inherited from endstone::BanEntry","text":"<p>See endstone::BanEntry</p> Type Name Date getCreated () constGets the date this ban entry was created. std::optional&lt; Date &gt; getExpiration () constGets the date this ban expires on, or std::nullopt for no defined end date. std::string getReason () constGets the reason for this ban. std::string getSource () constGets the source of this ban. void setCreated (Date created) Sets the date this ban entry was created. void setExpiration (std::optional&lt; Date &gt; expiration) Sets the date this ban expires on. std::nullopt values are considered \"infinite\" bans. void setReason (std::string reason) Sets the reason for this ban. void setSource (std::string source) Sets the source of this ban."},{"location":"reference/cpp/classendstone_1_1IpBanEntry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1IpBanEntry/#function-ipbanentry","title":"function IpBanEntry","text":"<pre><code>inline explicit endstone::IpBanEntry::IpBanEntry (\n    std::string address\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1IpBanEntry/#function-getaddress","title":"function getAddress","text":"<p>Gets the banned IP address. <pre><code>inline std::string endstone::IpBanEntry::getAddress () const\n</code></pre></p> <p>Returns:</p> <p>the IP address </p> <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ip_ban_entry.h</code></p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/","title":"Class endstone::IpBanList","text":"<p>ClassList &gt; endstone &gt; IpBanList</p> <p>Represents a ban list, containing banned IP addresses. </p> <ul> <li><code>#include &lt;endstone/ban/ip_ban_list.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::BanList</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#public-functions","title":"Public Functions","text":"Type Name virtual IpBanEntry &amp; addBan (std::string address, std::optional&lt; std::string &gt; reason, std::optional&lt; BanEntry::Date &gt; expires, std::optional&lt; std::string &gt; source) override = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual IpBanEntry &amp; addBan (std::string address, std::optional&lt; std::string &gt; reason, std::chrono::seconds duration, std::optional&lt; std::string &gt; source) override = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual const IpBanEntry * getBanEntry (std::string address) override const = 0Gets a BanEntry by IP address. virtual IpBanEntry * getBanEntry (std::string address) override = 0Gets a BanEntry by IP address. virtual std::vector&lt; const IpBanEntry * &gt; getEntries () override const = 0Gets a vector containing pointers to every BanEntry in this list. virtual std::vector&lt; IpBanEntry * &gt; getEntries () override = 0Gets a vector containing pointers to every BanEntry in this list. virtual bool isBanned (std::string address) override const = 0Checks if a BanEntry exists for the target, indicating an active ban status. virtual void removeBan (std::string address) override = 0Removes the specified IP address from this list, therefore indicating a \"not banned\" status. ~IpBanList () override"},{"location":"reference/cpp/classendstone_1_1IpBanList/#public-functions-inherited-from-endstonebanlist","title":"Public Functions inherited from endstone::BanList","text":"<p>See endstone::BanList</p> Type Name virtual T &amp; addBan (std::string target, std::optional&lt; std::string &gt; reason, std::optional&lt; BanEntry::Date &gt; expires, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual T &amp; addBan (std::string target, std::optional&lt; std::string &gt; reason, std::chrono::seconds duration, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual const T * getBanEntry (std::string target) const = 0Gets a BanEntry by target. virtual T * getBanEntry (std::string target) = 0Gets a BanEntry by target. virtual std::vector&lt; const T * &gt; getEntries () const = 0Gets a vector containing pointers to every BanEntry in this list. virtual std::vector&lt; T * &gt; getEntries () = 0Gets a vector containing pointers to every BanEntry in this list. virtual bool isBanned (std::string target) const = 0Checks if a BanEntry exists for the target, indicating an active ban status. virtual void removeBan (std::string target) = 0Removes the specified target from this list, therefore indicating a \"not banned\" status. virtual ~BanList () = default"},{"location":"reference/cpp/classendstone_1_1IpBanList/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-addban-12","title":"function addBan [\u00bd]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual IpBanEntry &amp; endstone::IpBanList::addBan (\n    std::string address,\n    std::optional&lt; std::string &gt; reason,\n    std::optional&lt; BanEntry::Date &gt; expires,\n    std::optional&lt; std::string &gt; source\n) override = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>address</code> The IP address of the target. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>expires</code> The date for the ban's expiration (unban), or std::nullopt to imply forever. </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>IpBanEntry&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p> <p>Implements endstone::BanList::addBan</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-addban-22","title":"function addBan [2/2]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual IpBanEntry &amp; endstone::IpBanList::addBan (\n    std::string address,\n    std::optional&lt; std::string &gt; reason,\n    std::chrono::seconds duration,\n    std::optional&lt; std::string &gt; source\n) override = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>address</code> The IP address of the target. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>duration</code> The duration of the ban </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>IpBanEntry&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p> <p>Implements endstone::BanList::addBan</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-getbanentry-12","title":"function getBanEntry [\u00bd]","text":"<p>Gets a BanEntry by IP address. <pre><code>virtual const IpBanEntry * endstone::IpBanList::getBanEntry (\n    std::string address\n) override const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>address</code> The IP address to search for. </li> </ul> <p>Returns:</p> <p>IpBanEntry* The corresponding entry, or nullptr if none found. </p> <p>Implements endstone::BanList::getBanEntry</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-getbanentry-22","title":"function getBanEntry [2/2]","text":"<p>Gets a BanEntry by IP address. <pre><code>virtual IpBanEntry * endstone::IpBanList::getBanEntry (\n    std::string address\n) override = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>address</code> The IP address to search for. </li> </ul> <p>Returns:</p> <p>IpBanEntry* The corresponding entry, or nullptr if none found. </p> <p>Implements endstone::BanList::getBanEntry</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-getentries-12","title":"function getEntries [\u00bd]","text":"<p>Gets a vector containing pointers to every BanEntry in this list. <pre><code>virtual std::vector&lt; const IpBanEntry * &gt; endstone::IpBanList::getEntries () override const = 0\n</code></pre></p> <p>Returns:</p> <p>A vector containing pointers to every entry tracked by this list. </p> <p>Implements endstone::BanList::getEntries</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-getentries-22","title":"function getEntries [2/2]","text":"<p>Gets a vector containing pointers to every BanEntry in this list. <pre><code>virtual std::vector&lt; IpBanEntry * &gt; endstone::IpBanList::getEntries () override = 0\n</code></pre></p> <p>Returns:</p> <p>A vector containing pointers to every entry tracked by this list. </p> <p>Implements endstone::BanList::getEntries</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-isbanned","title":"function isBanned","text":"<p>Checks if a BanEntry exists for the target, indicating an active ban status. <pre><code>virtual bool endstone::IpBanList::isBanned (\n    std::string address\n) override const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>address</code> The IP address to find. </li> </ul> <p>Returns:</p> <p>true If a BanEntry exists for the target, indicating an active ban status. </p> <p>Returns:</p> <p>false Otherwise. </p> <p>Implements endstone::BanList::isBanned</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-removeban","title":"function removeBan","text":"<p>Removes the specified IP address from this list, therefore indicating a \"not banned\" status. <pre><code>virtual void endstone::IpBanList::removeBan (\n    std::string address\n) override = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>address</code> The IP address to remove from this list. </li> </ul> <p>Implements endstone::BanList::removeBan</p>"},{"location":"reference/cpp/classendstone_1_1IpBanList/#function-ipbanlist","title":"function ~IpBanList","text":"<pre><code>endstone::IpBanList::~IpBanList () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ip_ban_list.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Item/","title":"Class endstone::Item","text":"<p>ClassList &gt; endstone &gt; Item</p> <p>Represents a base actor in the level. </p> <ul> <li><code>#include &lt;endstone/actor/item.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Actor</p>"},{"location":"reference/cpp/classendstone_1_1Item/#public-functions","title":"Public Functions","text":"Type Name virtual std::unique_ptr&lt; ItemStack &gt; getItemStack () const = 0Gets the item stack associated with this item drop. virtual int getPickupDelay () const = 0Gets the delay before this Item is available to be picked up by players. virtual std::optional&lt; std::int64_t &gt; getThrower () const = 0Get the thrower of this item. virtual bool isUnlimitedLifetime () const = 0Gets if this Item lives forever. virtual void setItemStack (const ItemStack &amp; stack) = 0Sets the item stack associated with this item drop. virtual void setPickupDelay (int delay) = 0Sets the delay before this Item is available to be picked up by players. virtual void setThrower (std::optional&lt; std::int64_t &gt; thrower) = 0Set the thrower of this item. virtual void setUnlimitedLifetime (bool unlimited) = 0Sets if this Item should live forever."},{"location":"reference/cpp/classendstone_1_1Item/#public-functions-inherited-from-endstoneactor","title":"Public Functions inherited from endstone::Actor","text":"<p>See endstone::Actor</p> Type Name virtual bool addScoreboardTag (std::string tag) const = 0Adds a tag to this actor. virtual Item * asItem () const = 0Gets an Actor asItem . virtual Mob * asMob () const = 0Gets an Actor asMob . virtual Dimension &amp; getDimension () const = 0 virtual int getHealth () const = 0Gets the entity's health from 0 to its max possible value, where 0 is dead. virtual std::int64_t getId () const = 0Returns a unique id for this actor. virtual Level &amp; getLevel () const = 0 virtual Location getLocation () const = 0 virtual int getMaxHealth () const = 0Gets the maximum health this entity has. virtual std::string getNameTag () const = 0Gets the current name tag of the actor. virtual std::uint64_t getRuntimeId () const = 0 virtual std::string getScoreTag () const = 0Gets the current score tag of the actor. virtual std::vector&lt; std::string &gt; getScoreboardTags () const = 0Returns a list of scoreboard tags for this actor. virtual std::string getType () const = 0Get the type of the actor. virtual Vector getVelocity () const = 0 virtual bool isDead () const = 0Returns true if this actor has been marked for removal. virtual bool isInLava () const = 0 virtual bool isInWater () const = 0 virtual bool isNameTagAlwaysVisible () const = 0Checks if the actor's name tag is always visible. virtual bool isNameTagVisible () const = 0Checks if the actor's name tag is currently visible. virtual bool isOnGround () const = 0 virtual bool isValid () const = 0 virtual void remove () = 0 virtual bool removeScoreboardTag (std::string tag) const = 0Removes a given tag from this actor. virtual Result&lt; void &gt; setHealth (int health) const = 0 virtual void setNameTag (std::string name) = 0Sets the name tag for the actor. virtual void setNameTagAlwaysVisible (bool visible) = 0Sets whether the actor's name tag should always be visible. virtual void setNameTagVisible (bool visible) = 0Sets if the actor's name tag is visible or not. virtual void setRotation (float yaw, float pitch) = 0 virtual void setScoreTag (std::string score) = 0Sets the score tag for the actor. virtual void teleport (Location location) = 0 virtual void teleport (Actor &amp; target) = 0"},{"location":"reference/cpp/classendstone_1_1Item/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1Item/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Item/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Item/#function-getitemstack","title":"function getItemStack","text":"<p>Gets the item stack associated with this item drop. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::Item::getItemStack () const = 0\n</code></pre></p> <p>Returns:</p> <p>An item stack. </p>"},{"location":"reference/cpp/classendstone_1_1Item/#function-getpickupdelay","title":"function getPickupDelay","text":"<p>Gets the delay before this Item is available to be picked up by players. <pre><code>virtual int endstone::Item::getPickupDelay () const = 0\n</code></pre></p> <p>Returns:</p> <p>Remaining delay </p>"},{"location":"reference/cpp/classendstone_1_1Item/#function-getthrower","title":"function getThrower","text":"<p>Get the thrower of this item. <pre><code>virtual std::optional&lt; std::int64_t &gt; endstone::Item::getThrower () const = 0\n</code></pre></p> <p>Note:</p> <p>The thrower is the entity which dropped the item.</p> <p>Returns:</p> <p>unique id of thrower </p>"},{"location":"reference/cpp/classendstone_1_1Item/#function-isunlimitedlifetime","title":"function isUnlimitedLifetime","text":"<p>Gets if this Item lives forever. <pre><code>virtual bool endstone::Item::isUnlimitedLifetime () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if the lifetime is unlimited </p>"},{"location":"reference/cpp/classendstone_1_1Item/#function-setitemstack","title":"function setItemStack","text":"<p>Sets the item stack associated with this item drop. <pre><code>virtual void endstone::Item::setItemStack (\n    const ItemStack &amp; stack\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>stack</code> An item stack. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Item/#function-setpickupdelay","title":"function setPickupDelay","text":"<p>Sets the delay before this Item is available to be picked up by players. <pre><code>virtual void endstone::Item::setPickupDelay (\n    int delay\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>delay</code> New delay </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Item/#function-setthrower","title":"function setThrower","text":"<p>Set the thrower of this item. <pre><code>virtual void endstone::Item::setThrower (\n    std::optional&lt; std::int64_t &gt; thrower\n) = 0\n</code></pre></p> <p>Note:</p> <p>The thrower is the entity which dropped the item.</p> <p>Parameters:</p> <ul> <li><code>thrower</code> unique id of thrower </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Item/#function-setunlimitedlifetime","title":"function setUnlimitedLifetime","text":"<p>Sets if this Item should live forever. <pre><code>virtual void endstone::Item::setUnlimitedLifetime (\n    bool unlimited\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>unlimited</code> true if the lifetime is unlimited </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/actor/item.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ItemFactory/","title":"Class endstone::ItemFactory","text":"<p>ClassList &gt; endstone &gt; ItemFactory</p>"},{"location":"reference/cpp/classendstone_1_1ItemFactory/#public-functions","title":"Public Functions","text":"Type Name virtual std::unique_ptr&lt; ItemMeta &gt; asMetaFor (const ItemMeta * meta, const std::string &amp; type) const = 0Returns an appropriate item meta for the specified item type. virtual bool equals (const ItemMeta * meta1, const ItemMeta * meta2) const = 0This method is used to compare two ItemMeta objects. virtual std::unique_ptr&lt; ItemMeta &gt; getItemMeta (const std::string &amp; type) const = 0This creates a new item meta for the item type. virtual bool isApplicable (const ItemMeta * meta, const std::string &amp; type) const = 0This method checks the item meta to confirm that it is applicable (no data lost if applied) to the specified ItemStack . virtual ~ItemFactory () = default"},{"location":"reference/cpp/classendstone_1_1ItemFactory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemFactory/#function-asmetafor","title":"function asMetaFor","text":"<p>Returns an appropriate item meta for the specified item type. <pre><code>virtual std::unique_ptr&lt; ItemMeta &gt; endstone::ItemFactory::asMetaFor (\n    const ItemMeta * meta,\n    const std::string &amp; type\n) const = 0\n</code></pre></p> <p>The item meta returned will always be a valid meta for a given ItemStack of the specified item type. It may be a more or less specific meta, and could also be the same meta or meta type as the parameter. The item meta returned will also always be the most appropriate meta.</p> <p>Parameters:</p> <ul> <li><code>meta</code> the meta to convert </li> <li><code>type</code> the item type to convert the meta for </li> </ul> <p>Returns:</p> <p>An appropriate item meta for the specified item type. </p>"},{"location":"reference/cpp/classendstone_1_1ItemFactory/#function-equals","title":"function equals","text":"<p>This method is used to compare two ItemMeta objects. <pre><code>virtual bool endstone::ItemFactory::equals (\n    const ItemMeta * meta1,\n    const ItemMeta * meta2\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>meta1</code> First meta to compare, and may be null to indicate no data </li> <li><code>meta2</code> Second meta to compare, and may be null to indicate no data </li> </ul> <p>Returns:</p> <p>false if one of the meta has data the other does not, otherwise true </p>"},{"location":"reference/cpp/classendstone_1_1ItemFactory/#function-getitemmeta","title":"function getItemMeta","text":"<p>This creates a new item meta for the item type. <pre><code>virtual std::unique_ptr&lt; ItemMeta &gt; endstone::ItemFactory::getItemMeta (\n    const std::string &amp; type\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> The item type to consider as base for the meta </li> </ul> <p>Returns:</p> <p>a new ItemMeta that could be applied to an item stack of the specified item type </p>"},{"location":"reference/cpp/classendstone_1_1ItemFactory/#function-isapplicable","title":"function isApplicable","text":"<p>This method checks the item meta to confirm that it is applicable (no data lost if applied) to the specified ItemStack . <pre><code>virtual bool endstone::ItemFactory::isApplicable (\n    const ItemMeta * meta,\n    const std::string &amp; type\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>meta</code> Meta to check </li> <li><code>type</code> The item type that meta will be applied to </li> </ul> <p>Returns:</p> <p>true if the meta can be applied without losing data, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1ItemFactory/#function-itemfactory","title":"function ~ItemFactory","text":"<pre><code>virtual endstone::ItemFactory::~ItemFactory () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_factory.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/","title":"Class endstone::ItemMeta","text":"<p>ClassList &gt; endstone &gt; ItemMeta</p> <p>Represents the metadata of a generic item. </p> <ul> <li><code>#include &lt;endstone/inventory/meta/item_meta.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::MapMeta</p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#public-types","title":"Public Types","text":"Type Name enum Type"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#public-functions","title":"Public Functions","text":"Type Name ItemMeta (const ItemMeta * meta)  bool addEnchant (const std::string &amp; id, int level, bool force=false) Adds the specified enchantment to this item meta. T * as ()  const T * as () const virtual std::unique_ptr&lt; ItemMeta &gt; clone () constCreates a clone of the current metadata. int getDamage () constGets the damage. std::string getDisplayName () constGets the display name that is set. int getEnchantLevel (const std::string &amp; id) constChecks for the level of the specified enchantment. std::unordered_map&lt; std::string, int &gt; getEnchants () constReturns a copy the enchantments in this ItemMeta . std::vector&lt; std::string &gt; getLore () constGets the lore that is set. int getRepairCost () constGets the repair penalty. virtual Type getType () constGets the type of this item meta. bool hasDamage () constChecks to see if this item has damage. bool hasDisplayName () constChecks for existence of a display name. bool hasEnchant (const std::string &amp; id) constChecks for existence of the specified enchantment. bool hasEnchants () constChecks for the existence of any enchantments. bool hasLore () constChecks for existence of lore. bool hasRepairCost () constChecks to see if this has a repair penalty. virtual bool isEmpty () constChecks if the item metadata is empty. bool isUnbreakable () constReturn if the unbreakable tag is true. An unbreakable item will not lose durability. bool removeEnchant (const std::string &amp; id) Removes the specified enchantment from this item meta. void removeEnchants () Removes all enchantments from this item meta. void setDamage (int damage) Sets the damage. void setDisplayName (std::optional&lt; std::string &gt; name) Sets the display name. void setLore (std::optional&lt; std::vector&lt; std::string &gt; &gt; lore) Sets the lore for this item or removes lore when given std::nullopt. void setRepairCost (int cost) Sets the repair penalty. void setUnbreakable (bool unbreakable) Sets the unbreakable tag. An unbreakable item will not lose durability. virtual ~ItemMeta () = default"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemMeta/#enum-type","title":"enum Type","text":"<pre><code>enum endstone::ItemMeta::Type {\n    Item,\n    Map\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-itemmeta","title":"function ItemMeta","text":"<pre><code>inline explicit endstone::ItemMeta::ItemMeta (\n    const ItemMeta * meta\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-addenchant","title":"function addEnchant","text":"<p>Adds the specified enchantment to this item meta. <pre><code>inline bool endstone::ItemMeta::addEnchant (\n    const std::string &amp; id,\n    int level,\n    bool force=false\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> Enchantment id to add </li> <li><code>level</code> Level for the enchantment </li> <li><code>force</code> this indicates the enchantment should be applied, ignoring the level limit </li> </ul> <p>Returns:</p> <p>true if the item meta changed as a result of this call, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-as-12","title":"function as [\u00bd]","text":"<pre><code>template&lt;typename T&gt;\ninline T * endstone::ItemMeta::as () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-as-22","title":"function as [2/2]","text":"<pre><code>template&lt;typename T&gt;\ninline const T * endstone::ItemMeta::as () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-clone","title":"function clone","text":"<p>Creates a clone of the current metadata. <pre><code>inline virtual std::unique_ptr&lt; ItemMeta &gt; endstone::ItemMeta::clone () const\n</code></pre></p> <p>Returns:</p> <p>A copy of the metadata containing the same state as the original. </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-getdamage","title":"function getDamage","text":"<p>Gets the damage. <pre><code>inline int endstone::ItemMeta::getDamage () const\n</code></pre></p> <p>Returns:</p> <p>the damage </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-getdisplayname","title":"function getDisplayName","text":"<p>Gets the display name that is set. <pre><code>inline std::string endstone::ItemMeta::getDisplayName () const\n</code></pre></p> <p>Returns:</p> <p>the display name that is set </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-getenchantlevel","title":"function getEnchantLevel","text":"<p>Checks for the level of the specified enchantment. <pre><code>inline int endstone::ItemMeta::getEnchantLevel (\n    const std::string &amp; id\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> enchantment id to check </li> </ul> <p>Returns:</p> <p>The level that the specified enchantment has, or 0 if none </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-getenchants","title":"function getEnchants","text":"<p>Returns a copy the enchantments in this ItemMeta . <pre><code>inline std::unordered_map&lt; std::string, int &gt; endstone::ItemMeta::getEnchants () const\n</code></pre></p> <p>Returns an empty map if none.</p> <p>Returns:</p> <p>An immutable copy of the enchantments </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-getlore","title":"function getLore","text":"<p>Gets the lore that is set. <pre><code>inline std::vector&lt; std::string &gt; endstone::ItemMeta::getLore () const\n</code></pre></p> <p>Returns:</p> <p>a list of lore that is set </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-getrepaircost","title":"function getRepairCost","text":"<p>Gets the repair penalty. <pre><code>inline int endstone::ItemMeta::getRepairCost () const\n</code></pre></p> <p>Returns:</p> <p>the repair penalty </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-gettype","title":"function getType","text":"<p>Gets the type of this item meta. <pre><code>inline virtual Type endstone::ItemMeta::getType () const\n</code></pre></p> <p>Returns:</p> <p>type of this item meta </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-hasdamage","title":"function hasDamage","text":"<p>Checks to see if this item has damage. <pre><code>inline bool endstone::ItemMeta::hasDamage () const\n</code></pre></p> <p>Returns:</p> <p>true if this has damage </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-hasdisplayname","title":"function hasDisplayName","text":"<p>Checks for existence of a display name. <pre><code>inline bool endstone::ItemMeta::hasDisplayName () const\n</code></pre></p> <p>Returns:</p> <p>true if this has a display name </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-hasenchant","title":"function hasEnchant","text":"<p>Checks for existence of the specified enchantment. <pre><code>inline bool endstone::ItemMeta::hasEnchant (\n    const std::string &amp; id\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> enchantment id to check </li> </ul> <p>Returns:</p> <p>true if this enchantment exists for this meta </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-hasenchants","title":"function hasEnchants","text":"<p>Checks for the existence of any enchantments. <pre><code>inline bool endstone::ItemMeta::hasEnchants () const\n</code></pre></p> <p>Returns:</p> <p>true if an enchantment exists on this meta </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-haslore","title":"function hasLore","text":"<p>Checks for existence of lore. <pre><code>inline bool endstone::ItemMeta::hasLore () const\n</code></pre></p> <p>Returns:</p> <p>true if this has lore </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-hasrepaircost","title":"function hasRepairCost","text":"<p>Checks to see if this has a repair penalty. <pre><code>inline bool endstone::ItemMeta::hasRepairCost () const\n</code></pre></p> <p>Returns:</p> <p>true if this has a repair penalty </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-isempty","title":"function isEmpty","text":"<p>Checks if the item metadata is empty. <pre><code>inline virtual bool endstone::ItemMeta::isEmpty () const\n</code></pre></p> <p>Returns:</p> <p>true if the metadata is empty, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-isunbreakable","title":"function isUnbreakable","text":"<p>Return if the unbreakable tag is true. An unbreakable item will not lose durability. <pre><code>inline bool endstone::ItemMeta::isUnbreakable () const\n</code></pre></p> <p>Returns:</p> <p>true if the unbreakable tag is true </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-removeenchant","title":"function removeEnchant","text":"<p>Removes the specified enchantment from this item meta. <pre><code>inline bool endstone::ItemMeta::removeEnchant (\n    const std::string &amp; id\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> Enchantment id to remove </li> </ul> <p>Returns:</p> <p>true if the item meta changed as a result of this call, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-removeenchants","title":"function removeEnchants","text":"<p>Removes all enchantments from this item meta. <pre><code>inline void endstone::ItemMeta::removeEnchants () \n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-setdamage","title":"function setDamage","text":"<p>Sets the damage. <pre><code>inline void endstone::ItemMeta::setDamage (\n    int damage\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>damage</code> item damage </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-setdisplayname","title":"function setDisplayName","text":"<p>Sets the display name. <pre><code>inline void endstone::ItemMeta::setDisplayName (\n    std::optional&lt; std::string &gt; name\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name to set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-setlore","title":"function setLore","text":"<p>Sets the lore for this item or removes lore when given std::nullopt. <pre><code>inline void endstone::ItemMeta::setLore (\n    std::optional&lt; std::vector&lt; std::string &gt; &gt; lore\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>lore</code> the lore that will be set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-setrepaircost","title":"function setRepairCost","text":"<p>Sets the repair penalty. <pre><code>inline void endstone::ItemMeta::setRepairCost (\n    int cost\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>cost</code> repair penalty </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-setunbreakable","title":"function setUnbreakable","text":"<p>Sets the unbreakable tag. An unbreakable item will not lose durability. <pre><code>inline void endstone::ItemMeta::setUnbreakable (\n    bool unbreakable\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>unbreakable</code> true if set unbreakable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemMeta/#function-itemmeta_1","title":"function ~ItemMeta","text":"<pre><code>virtual endstone::ItemMeta::~ItemMeta () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/meta/item_meta.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/","title":"Class endstone::ItemStack","text":"<p>ClassList &gt; endstone &gt; ItemStack</p> <p>Represents a stack of items. </p> <ul> <li><code>#include &lt;endstone/inventory/item_stack.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#public-functions","title":"Public Functions","text":"Type Name ItemStack (const ItemStack &amp; stack)  virtual std::unique_ptr&lt; ItemStack &gt; clone () const virtual int getAmount () constGets the amount of items in this stack. virtual int getData () constGets the data for this stack of items. virtual std::unique_ptr&lt; ItemMeta &gt; getItemMeta () constGets a copy of this ItemStack 'sItemMeta . virtual int getMaxStackSize () constGet the maximum stack size for this item. virtual std::string getTranslationKey () constGet the translation key, suitable for use in a translation component. virtual std::string getType () constGets the type of this item. virtual bool hasItemMeta () constChecks to see if any metadata has been defined. virtual bool isSimilar (const ItemStack &amp; other) constChecks if the two stacks are equal, but does not consider stack size (amount). bool operator!= (const ItemStack &amp; other) const bool operator== (const ItemStack &amp; other) const virtual Result&lt; void &gt; setAmount (const int amount) Sets the amount of items in this stack. virtual void setData (const int data) Sets the data for this stack of items. virtual bool setItemMeta (ItemMeta * meta) Set the ItemMeta of thisItemStack . virtual Result&lt; void &gt; setType (const std::string &amp; type) Sets the type of this item. virtual ~ItemStack () = default"},{"location":"reference/cpp/classendstone_1_1ItemStack/#public-static-functions","title":"Public Static Functions","text":"Type Name Result&lt; ItemStack &gt; create (const ItemType &amp; type, const int amount=1, const int data=0)  Result&lt; ItemStack &gt; create (const std::string &amp; type, const int amount=1, const int data=0)"},{"location":"reference/cpp/classendstone_1_1ItemStack/#protected-functions","title":"Protected Functions","text":"Type Name virtual bool isEndstoneItemStack () const"},{"location":"reference/cpp/classendstone_1_1ItemStack/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-itemstack-22","title":"function ItemStack [2/2]","text":"<pre><code>inline endstone::ItemStack::ItemStack (\n    const ItemStack &amp; stack\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-clone","title":"function clone","text":"<pre><code>inline virtual std::unique_ptr&lt; ItemStack &gt; endstone::ItemStack::clone () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-getamount","title":"function getAmount","text":"<p>Gets the amount of items in this stack. <pre><code>inline virtual int endstone::ItemStack::getAmount () const\n</code></pre></p> <p>Returns:</p> <p>Amount of items in this stack </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-getdata","title":"function getData","text":"<p>Gets the data for this stack of items. <pre><code>inline virtual int endstone::ItemStack::getData () const\n</code></pre></p> <p>Returns:</p> <p>Data for this item </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-getitemmeta","title":"function getItemMeta","text":"<p>Gets a copy of this ItemStack 'sItemMeta . <pre><code>inline virtual std::unique_ptr&lt; ItemMeta &gt; endstone::ItemStack::getItemMeta () const\n</code></pre></p> <p>Returns:</p> <p>a copy of the current ItemStack's ItemMeta </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-getmaxstacksize","title":"function getMaxStackSize","text":"<p>Get the maximum stack size for this item. <pre><code>inline virtual int endstone::ItemStack::getMaxStackSize () const\n</code></pre></p> <p>Returns:</p> <p>The maximum you can stack this item to. </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-gettranslationkey","title":"function getTranslationKey","text":"<p>Get the translation key, suitable for use in a translation component. <pre><code>inline virtual std::string endstone::ItemStack::getTranslationKey () const\n</code></pre></p> <p>Returns:</p> <p>the translation key </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-gettype","title":"function getType","text":"<p>Gets the type of this item. <pre><code>inline virtual std::string endstone::ItemStack::getType () const\n</code></pre></p> <p>Returns:</p> <p>Type of the items in this stack </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-hasitemmeta","title":"function hasItemMeta","text":"<p>Checks to see if any metadata has been defined. <pre><code>inline virtual bool endstone::ItemStack::hasItemMeta () const\n</code></pre></p> <p>Returns:</p> <p>Returns true if some metadata has been set for this item </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-issimilar","title":"function isSimilar","text":"<p>Checks if the two stacks are equal, but does not consider stack size (amount). <pre><code>inline virtual bool endstone::ItemStack::isSimilar (\n    const ItemStack &amp; other\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>other</code> the item stack to compare to </li> </ul> <p>Returns:</p> <p>true if the two stacks are equal, ignoring the amount </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-operator","title":"function operator!=","text":"<pre><code>inline bool endstone::ItemStack::operator!= (\n    const ItemStack &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-operator_1","title":"function operator==","text":"<pre><code>inline bool endstone::ItemStack::operator== (\n    const ItemStack &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-setamount","title":"function setAmount","text":"<p>Sets the amount of items in this stack. <pre><code>inline virtual Result&lt; void &gt; endstone::ItemStack::setAmount (\n    const int amount\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>amount</code> New amount of items in this stack </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-setdata","title":"function setData","text":"<p>Sets the data for this stack of items. <pre><code>inline virtual void endstone::ItemStack::setData (\n    const int data\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> New data for this item </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-setitemmeta","title":"function setItemMeta","text":"<p>Set the ItemMeta of thisItemStack . <pre><code>inline virtual bool endstone::ItemStack::setItemMeta (\n    ItemMeta * meta\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>meta</code> new ItemMeta, or null to indicate meta data be cleared. </li> </ul> <p>Returns:</p> <p>True if successfully applied ItemMeta </p>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-settype","title":"function setType","text":"<p>Sets the type of this item. <pre><code>inline virtual Result&lt; void &gt; endstone::ItemStack::setType (\n    const std::string &amp; type\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> New type to set the items in this stack to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-itemstack","title":"function ~ItemStack","text":"<pre><code>virtual endstone::ItemStack::~ItemStack () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-create-12","title":"function create [\u00bd]","text":"<pre><code>static inline Result&lt; ItemStack &gt; endstone::ItemStack::create (\n    const ItemType &amp; type,\n    const int amount=1,\n    const int data=0\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-create-22","title":"function create [2/2]","text":"<pre><code>static inline Result&lt; ItemStack &gt; endstone::ItemStack::create (\n    const std::string &amp; type,\n    const int amount=1,\n    const int data=0\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemStack/#function-isendstoneitemstack","title":"function isEndstoneItemStack","text":"<pre><code>inline virtual bool endstone::ItemStack::isEndstoneItemStack () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemStack/#friends-documentation","title":"Friends Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemStack/#friend-endstoneitemstack","title":"friend EndstoneItemStack","text":"<pre><code>class endstone::ItemStack::EndstoneItemStack (\n    core::EndstoneItemStack\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_stack.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ItemType/","title":"Class endstone::ItemType","text":"<p>ClassList &gt; endstone &gt; ItemType</p> <p>Represents an item type. </p> <ul> <li><code>#include &lt;endstone/inventory/item_type.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1ItemType/#public-functions","title":"Public Functions","text":"Type Name virtual std::string getId () const = 0Return the identifier of this item type. virtual int getMaxDurability () const = 0Gets the maximum durability of this item type. virtual int getMaxStackSize () const = 0Gets the maximum amount of this item type that can be held in a stack. virtual std::string getTranslationKey () const = 0Get the translation key, suitable for use in a translation component. virtual std::string getTranslationKey (int data) const = 0Get the translation key, suitable for use in a translation component. bool operator!= (const std::string_view other) const bool operator!= (const ItemType &amp; other) const bool operator== (const std::string_view other) const bool operator== (const ItemType &amp; other) const virtual ~ItemType () = default"},{"location":"reference/cpp/classendstone_1_1ItemType/#public-static-functions","title":"Public Static Functions","text":"Type Name const ItemType * get (const std::string &amp; name) Attempts to get the ItemType with the given name."},{"location":"reference/cpp/classendstone_1_1ItemType/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemType/#function-getid","title":"function getId","text":"<p>Return the identifier of this item type. <pre><code>virtual std::string endstone::ItemType::getId () const = 0\n</code></pre></p> <p>Returns:</p> <p>this item's identifier </p>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-getmaxdurability","title":"function getMaxDurability","text":"<p>Gets the maximum durability of this item type. <pre><code>virtual int endstone::ItemType::getMaxDurability () const = 0\n</code></pre></p> <p>Returns:</p> <p>Maximum durability for this item type </p>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-getmaxstacksize","title":"function getMaxStackSize","text":"<p>Gets the maximum amount of this item type that can be held in a stack. <pre><code>virtual int endstone::ItemType::getMaxStackSize () const = 0\n</code></pre></p> <p>Returns:</p> <p>Maximum stack size for this item type </p>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-gettranslationkey-12","title":"function getTranslationKey [\u00bd]","text":"<p>Get the translation key, suitable for use in a translation component. <pre><code>virtual std::string endstone::ItemType::getTranslationKey () const = 0\n</code></pre></p> <p>Returns:</p> <p>the translation key </p>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-gettranslationkey-22","title":"function getTranslationKey [2/2]","text":"<p>Get the translation key, suitable for use in a translation component. <pre><code>virtual std::string endstone::ItemType::getTranslationKey (\n    int data\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> Data for this item type</li> </ul> <p>Returns:</p> <p>the translation key </p>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-operator","title":"function operator!=","text":"<pre><code>inline bool endstone::ItemType::operator!= (\n    const std::string_view other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-operator_1","title":"function operator!=","text":"<pre><code>inline bool endstone::ItemType::operator!= (\n    const ItemType &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-operator_2","title":"function operator==","text":"<pre><code>inline bool endstone::ItemType::operator== (\n    const std::string_view other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-operator_3","title":"function operator==","text":"<pre><code>inline bool endstone::ItemType::operator== (\n    const ItemType &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemType/#function-itemtype","title":"function ~ItemType","text":"<pre><code>virtual endstone::ItemType::~ItemType () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ItemType/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ItemType/#function-get","title":"function get","text":"<p>Attempts to get the ItemType with the given name. <pre><code>static inline const ItemType * endstone::ItemType::get (\n    const std::string &amp; name\n) \n</code></pre></p> <p>Note:</p> <p>This is a normal lookup, names must be the precise name.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the ItemType to get</li> </ul> <p>Returns:</p> <p>ItemType if found, or nullptr </p> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_type.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Label/","title":"Class endstone::Label","text":"<p>ClassList &gt; endstone &gt; Label</p> <p>Represents a text label. </p> <ul> <li><code>#include &lt;endstone/form/controls/label.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Label/#public-functions","title":"Public Functions","text":"Type Name Label () = default Label (Message text)  Message getText () constGets the text of the label. Label &amp; setText (Message text) Sets the text of the label."},{"location":"reference/cpp/classendstone_1_1Label/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Label/#function-label-12","title":"function Label [\u00bd]","text":"<pre><code>endstone::Label::Label () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Label/#function-label-22","title":"function Label [2/2]","text":"<pre><code>inline explicit endstone::Label::Label (\n    Message text\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Label/#function-gettext","title":"function getText","text":"<p>Gets the text of the label. <pre><code>inline Message endstone::Label::getText () const\n</code></pre></p> <p>Returns:</p> <p>The text of the label. </p>"},{"location":"reference/cpp/classendstone_1_1Label/#function-settext","title":"function setText","text":"<p>Sets the text of the label. <pre><code>inline Label &amp; endstone::Label::setText (\n    Message text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The new text for the label. </li> </ul> <p>Returns:</p> <p>A reference to the current label. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/label.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Language/","title":"Class endstone::Language","text":"<p>ClassList &gt; endstone &gt; Language</p> <p>Represents the interface for translating text into different languages. </p> <ul> <li><code>#include &lt;endstone/lang/language.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Language/#public-functions","title":"Public Functions","text":"Type Name virtual std::string getLocale () const = 0Gets the current locale. virtual std::string translate (std::string text) const = 0Translates a given text into the current locale. virtual std::string translate (std::string text, std::string locale) const = 0Translates a given text into a specific locale. virtual std::string translate (std::string text, std::vector&lt; std::string &gt; params) const = 0Translates a given text using a set of parameters for the current locale. virtual std::string translate (std::string text, std::vector&lt; std::string &gt; params, std::string locale) const = 0Translates a given text using a set of parameters for a specific locale. virtual std::string translate (Translatable translatable) const = 0Translates a Translatable object into the current locale. virtual std::string translate (Translatable translatable, std::string locale) const = 0Translates a Translatable object into a specific locale. virtual ~Language () = default"},{"location":"reference/cpp/classendstone_1_1Language/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Language/#function-getlocale","title":"function getLocale","text":"<p>Gets the current locale. <pre><code>virtual std::string endstone::Language::getLocale () const = 0\n</code></pre></p> <p>Returns:</p> <p>A string representing the current locale (e.g., \"en_US\"). </p>"},{"location":"reference/cpp/classendstone_1_1Language/#function-translate-16","title":"function translate [\u2159]","text":"<p>Translates a given text into the current locale. <pre><code>virtual std::string endstone::Language::translate (\n    std::string text\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to be translated. </li> </ul> <p>Returns:</p> <p>The translated text in the current locale. </p>"},{"location":"reference/cpp/classendstone_1_1Language/#function-translate-26","title":"function translate [2/6]","text":"<p>Translates a given text into a specific locale. <pre><code>virtual std::string endstone::Language::translate (\n    std::string text,\n    std::string locale\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to be translated. </li> <li><code>locale</code> The locale identifier for the desired translation (e.g., \"en_US\"). </li> </ul> <p>Returns:</p> <p>The translated text in the specified locale. </p>"},{"location":"reference/cpp/classendstone_1_1Language/#function-translate-36","title":"function translate [3/6]","text":"<p>Translates a given text using a set of parameters for the current locale. <pre><code>virtual std::string endstone::Language::translate (\n    std::string text,\n    std::vector&lt; std::string &gt; params\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to be translated. </li> <li><code>params</code> A list of parameters to be used in the translation. </li> </ul> <p>Returns:</p> <p>The translated text in the current locale, with parameters applied. </p>"},{"location":"reference/cpp/classendstone_1_1Language/#function-translate-46","title":"function translate [4/6]","text":"<p>Translates a given text using a set of parameters for a specific locale. <pre><code>virtual std::string endstone::Language::translate (\n    std::string text,\n    std::vector&lt; std::string &gt; params,\n    std::string locale\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to be translated. </li> <li><code>params</code> A list of parameters to be used in the translation. </li> <li><code>locale</code> The locale identifier for the desired translation (e.g., \"en_US\"). </li> </ul> <p>Returns:</p> <p>The translated text in the specified locale, with parameters applied. </p>"},{"location":"reference/cpp/classendstone_1_1Language/#function-translate-56","title":"function translate [\u215a]","text":"<p>Translates a Translatable object into the current locale. <pre><code>virtual std::string endstone::Language::translate (\n    Translatable translatable\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>translatable</code> A Translatable object containing text and parameters. </li> </ul> <p>Returns:</p> <p>The translated text in the current locale. </p>"},{"location":"reference/cpp/classendstone_1_1Language/#function-translate-66","title":"function translate [6/6]","text":"<p>Translates a Translatable object into a specific locale. <pre><code>virtual std::string endstone::Language::translate (\n    Translatable translatable,\n    std::string locale\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>translatable</code> A Translatable object containing text and parameters. </li> <li><code>locale</code> The locale identifier for the desired translation (e.g., \"en_US\"). </li> </ul> <p>Returns:</p> <p>The translated text in the specified locale. </p>"},{"location":"reference/cpp/classendstone_1_1Language/#function-language","title":"function ~Language","text":"<pre><code>virtual endstone::Language::~Language () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/lang/language.h</code></p>"},{"location":"reference/cpp/classendstone_1_1LeavesDecayEvent/","title":"Class endstone::LeavesDecayEvent","text":"<p>ClassList &gt; endstone &gt; LeavesDecayEvent</p> <p>Called when leaves are decaying naturally. More...</p> <ul> <li><code>#include &lt;endstone/event/block/leaves_decay_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1LeavesDecayEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (LeavesDecayEvent)"},{"location":"reference/cpp/classendstone_1_1LeavesDecayEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1LeavesDecayEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1LeavesDecayEvent/#detailed-description","title":"Detailed Description","text":"<p>Note:</p> <p>If a Leaves Decay event is cancelled, the leaves will not decay. </p>"},{"location":"reference/cpp/classendstone_1_1LeavesDecayEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1LeavesDecayEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::LeavesDecayEvent::ENDSTONE_EVENT (\n    LeavesDecayEvent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/leaves_decay_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Level/","title":"Class endstone::Level","text":"<p>ClassList &gt; endstone &gt; Level</p> <p>Represents a level, which may contain actors, chunks and blocks. </p> <ul> <li><code>#include &lt;endstone/level/level.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Level/#public-functions","title":"Public Functions","text":"Type Name virtual std::vector&lt; Actor * &gt; getActors () const = 0Get a list of all actors in this level. virtual Dimension * getDimension (std::string name) const = 0Gets the dimension with the given name. virtual std::vector&lt; Dimension * &gt; getDimensions () const = 0Gets a list of all dimensions within this level. virtual std::string getName () const = 0Gets the unique name of this level. virtual std::int64_t getSeed () const = 0Gets the Seed for this level. virtual int getTime () const = 0Gets the relative in-game time of this level. virtual void setTime (int time) = 0Sets the relative in-game time on the server. virtual ~Level () = default"},{"location":"reference/cpp/classendstone_1_1Level/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Level/#function-getactors","title":"function getActors","text":"<p>Get a list of all actors in this level. <pre><code>virtual std::vector&lt; Actor * &gt; endstone::Level::getActors () const = 0\n</code></pre></p> <p>Returns:</p> <p>A List of all actors currently residing in this level </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-getdimension","title":"function getDimension","text":"<p>Gets the dimension with the given name. <pre><code>virtual Dimension * endstone::Level::getDimension (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the dimension to retrieve. For example, \"overworld\", \"nether\" or \"the_end\".</li> </ul> <p>Returns:</p> <p>The Dimension with the given name, or nullptr if none exists </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-getdimensions","title":"function getDimensions","text":"<p>Gets a list of all dimensions within this level. <pre><code>virtual std::vector&lt; Dimension * &gt; endstone::Level::getDimensions () const = 0\n</code></pre></p> <p>Returns:</p> <p>a list of dimensions </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-getname","title":"function getName","text":"<p>Gets the unique name of this level. <pre><code>virtual std::string endstone::Level::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>Name of this level </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-getseed","title":"function getSeed","text":"<p>Gets the Seed for this level. <pre><code>virtual std::int64_t endstone::Level::getSeed () const = 0\n</code></pre></p> <p>Returns:</p> <p>This level's Seed </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-gettime","title":"function getTime","text":"<p>Gets the relative in-game time of this level. <pre><code>virtual int endstone::Level::getTime () const = 0\n</code></pre></p> <p>Returns:</p> <p>The current relative time </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-settime","title":"function setTime","text":"<p>Sets the relative in-game time on the server. <pre><code>virtual void endstone::Level::setTime (\n    int time\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>time</code> The new relative time to set the in-game time to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Level/#function-level","title":"function ~Level","text":"<pre><code>virtual endstone::Level::~Level () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/level.h</code></p>"},{"location":"reference/cpp/classendstone_1_1LevelEvent/","title":"Class endstone::LevelEvent","text":"<p>ClassList &gt; endstone &gt; LevelEvent</p> <p>Represents events within a level. </p> <ul> <li><code>#include &lt;endstone/event/level/level_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::DimensionEvent</p>"},{"location":"reference/cpp/classendstone_1_1LevelEvent/#public-functions","title":"Public Functions","text":"Type Name LevelEvent (Level &amp; level)  Level &amp; getLevel () const"},{"location":"reference/cpp/classendstone_1_1LevelEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1LevelEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1LevelEvent/#function-levelevent","title":"function LevelEvent","text":"<pre><code>inline explicit endstone::LevelEvent::LevelEvent (\n    Level &amp; level\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1LevelEvent/#function-getlevel","title":"function getLevel","text":"<pre><code>inline Level &amp; endstone::LevelEvent::getLevel () const\n</code></pre> <p>Gets the level primarily involved with this event</p> <p>Returns:</p> <p>Level which caused this event </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/level/level_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Location/","title":"Class endstone::Location","text":"<p>ClassList &gt; endstone &gt; Location</p> <p>Represents a 3-dimensional location in a dimension within a level. </p> <ul> <li><code>#include &lt;endstone/level/location.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Vector</p>"},{"location":"reference/cpp/classendstone_1_1Location/#public-functions","title":"Public Functions","text":"Type Name Location (T x, T y, T z, const float pitch=0.0, const float yaw=0.0)  Location (T x, T y, T z, Dimension &amp; dimension)  Location (T x, T y, T z, const float pitch, Dimension &amp; dimension)  Location (T x, T y, T z, const float pitch, const float yaw, Dimension &amp; dimension)  int getBlockX () constGets the floored value of the X component, indicating the block that this location is contained with. int getBlockY () constGets the floored value of the Y component, indicating the block that this location is contained with. int getBlockZ () constGets the floored value of the Z component, indicating the block that this location is contained with. Dimension * getDimension () constGets the dimension that this position resides in. Vector getDirection () constGets a unit-vector pointing in the direction that this Location is facing. float getPitch () constGets the pitch of this location, measured in degrees. float getYaw () constGets the yaw of this location, measured in degrees. void setDimension (Dimension &amp; dimension) Sets the dimension that this position resides in. void setPitch (float pitch) Sets the pitch of this location, measured in degrees. void setYaw (float yaw) Sets the yaw of this location, measured in degrees."},{"location":"reference/cpp/classendstone_1_1Location/#public-functions-inherited-from-endstonevector","title":"Public Functions inherited from endstone::Vector","text":"<p>See endstone::Vector</p> Type Name constexpr Vector () = defaultConstruct the vector with all components as 0. constexpr Vector (T x, T y, T z) Construct the vector with provided components. float distance (const Vector &amp; other) const constexpr float distanceSquared (const Vector &amp; other) const constexpr float getX () constGets the X component. constexpr float getY () constGets the Y component. constexpr float getZ () constGets the Z component. float length () constGets the magnitude of the vector, defined as sqrt(x<sup>2+y</sup>2+z^2). constexpr float lengthSquared () constGets the magnitude of the vector squared. Vector &amp; normalize ()  constexpr Vector operator* (const Vector &amp; other) const Vector operator* (float scalar) const Vector &amp; operator*= (const Vector &amp; other)  constexpr Vector operator+ (const Vector &amp; other) const Vector operator+ (float scalar) const Vector &amp; operator+= (const Vector &amp; other)  constexpr Vector operator- (const Vector &amp; other) const Vector operator- (float scalar) const Vector &amp; operator-= (const Vector &amp; other)  constexpr Vector operator/ (const Vector &amp; other) const Vector operator/ (float scalar) const Vector &amp; operator/= (const Vector &amp; other)  constexpr bool operator== (const Vector &amp; other) const constexpr void setX (float x) Set the X component. constexpr void setY (float y) Set the Y component. constexpr void setZ (float z) Set the Z component."},{"location":"reference/cpp/classendstone_1_1Location/#protected-attributes-inherited-from-endstonevector","title":"Protected Attributes inherited from endstone::Vector","text":"<p>See endstone::Vector</p> Type Name float x_   = <code>0.0</code> float y_   = <code>0.0</code> float z_   = <code>0.0</code>"},{"location":"reference/cpp/classendstone_1_1Location/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Location/#function-location-14","title":"function Location [\u00bc]","text":"<pre><code>template&lt;typename T, typename&gt;\ninline endstone::Location::Location (\n    T x,\n    T y,\n    T z,\n    const float pitch=0.0,\n    const float yaw=0.0\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Location/#function-location-24","title":"function Location [2/4]","text":"<pre><code>template&lt;typename T, typename&gt;\ninline endstone::Location::Location (\n    T x,\n    T y,\n    T z,\n    Dimension &amp; dimension\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Location/#function-location-34","title":"function Location [\u00be]","text":"<pre><code>template&lt;typename T, typename&gt;\ninline endstone::Location::Location (\n    T x,\n    T y,\n    T z,\n    const float pitch,\n    Dimension &amp; dimension\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Location/#function-location-44","title":"function Location [4/4]","text":"<pre><code>template&lt;typename T, typename&gt;\ninline endstone::Location::Location (\n    T x,\n    T y,\n    T z,\n    const float pitch,\n    const float yaw,\n    Dimension &amp; dimension\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getblockx","title":"function getBlockX","text":"<p>Gets the floored value of the X component, indicating the block that this location is contained with. <pre><code>inline int endstone::Location::getBlockX () const\n</code></pre></p> <p>Returns:</p> <p>block X </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getblocky","title":"function getBlockY","text":"<p>Gets the floored value of the Y component, indicating the block that this location is contained with. <pre><code>inline int endstone::Location::getBlockY () const\n</code></pre></p> <p>Returns:</p> <p>block Y </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getblockz","title":"function getBlockZ","text":"<p>Gets the floored value of the Z component, indicating the block that this location is contained with. <pre><code>inline int endstone::Location::getBlockZ () const\n</code></pre></p> <p>Returns:</p> <p>block Z </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getdimension","title":"function getDimension","text":"<p>Gets the dimension that this position resides in. <pre><code>inline Dimension * endstone::Location::getDimension () const\n</code></pre></p> <p>Returns:</p> <p>Dimension that contains this position, or nullptr if the dimension is not set. </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getdirection","title":"function getDirection","text":"<p>Gets a unit-vector pointing in the direction that this Location is facing. <pre><code>inline Vector endstone::Location::getDirection () const\n</code></pre></p> <p>Returns:</p> <p>a vector pointing the direction of this location's pitch and yaw </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getpitch","title":"function getPitch","text":"<p>Gets the pitch of this location, measured in degrees. <pre><code>inline float endstone::Location::getPitch () const\n</code></pre></p> <p>Returns:</p> <p>the incline's pitch </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getyaw","title":"function getYaw","text":"<p>Gets the yaw of this location, measured in degrees. <pre><code>inline float endstone::Location::getYaw () const\n</code></pre></p> <p>Returns:</p> <p>the rotation's yaw </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-setdimension","title":"function setDimension","text":"<p>Sets the dimension that this position resides in. <pre><code>inline void endstone::Location::setDimension (\n    Dimension &amp; dimension\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>dimension</code> New dimension that this position resides in </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Location/#function-setpitch","title":"function setPitch","text":"<p>Sets the pitch of this location, measured in degrees. <pre><code>inline void endstone::Location::setPitch (\n    float pitch\n) \n</code></pre></p> <ul> <li>A pitch of 0 represents level forward facing.</li> <li>A pitch of 90 represents downward facing, or negative y direction.</li> <li>A pitch of -90 represents upward facing, or positive y direction.</li> </ul> <p>Increasing pitch values the equivalent of looking down.</p> <p>Parameters:</p> <ul> <li><code>pitch</code> new incline's pitch </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Location/#function-setyaw","title":"function setYaw","text":"<p>Sets the yaw of this location, measured in degrees. <pre><code>inline void endstone::Location::setYaw (\n    float yaw\n) \n</code></pre></p> <ul> <li>A yaw of 0 or 360 represents the positive z direction.</li> <li>A yaw of 180 represents the negative z direction.</li> <li>A yaw of 90 represents the negative x direction.</li> <li>A yaw of 270 represents the positive x direction.</li> </ul> <p>Increasing yaw values are the equivalent of turning to your right-facing, increasing the scale of the next respective axis, and decreasing the scale of the previous axis.</p> <p>Parameters:</p> <ul> <li><code>yaw</code> new rotation's yaw </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/level/location.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Logger/","title":"Class endstone::Logger","text":"<p>ClassList &gt; endstone &gt; Logger</p> <p>Logger class which can format and output varies levels of logs.</p> <ul> <li><code>#include &lt;endstone/logger.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Logger/#public-types","title":"Public Types","text":"Type Name enum std::uint8_t Level Specifies the log level."},{"location":"reference/cpp/classendstone_1_1Logger/#public-functions","title":"Public Functions","text":"Type Name Logger () = default void critical (const std::string_view message) const void critical (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const void debug (const std::string_view message) const void debug (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const void error (const std::string_view message) const void error (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual std::string_view getName () const = 0Get the name of this Logger instance. void info (const std::string_view message) const void info (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual bool isEnabledFor (Level level) const = 0Check if the Logger instance is enabled for the given logLevel . virtual void log (Level level, std::string_view message) const = 0Log a message at the given level. void log (Level level, const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void setLevel (Level level) = 0Set the logging level for this Logger instance. void trace (const std::string_view message) const void trace (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const void warning (const std::string_view message) const void warning (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual ~Logger () = default"},{"location":"reference/cpp/classendstone_1_1Logger/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Logger/#enum-level","title":"enum Level","text":"<p>Specifies the log level. <pre><code>enum endstone::Logger::Level {\n    Trace = 0,\n    Debug = 1,\n    Info = 2,\n    Warning = 3,\n    Error = 4,\n    Critical = 5,\n    Off = 6\n};\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Logger/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Logger/#function-logger","title":"function Logger","text":"<pre><code>endstone::Logger::Logger () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-critical-12","title":"function critical [\u00bd]","text":"<pre><code>inline void endstone::Logger::critical (\n    const std::string_view message\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-critical-22","title":"function critical [2/2]","text":"<pre><code>template&lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int &gt;&gt;\ninline void endstone::Logger::critical (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-debug-12","title":"function debug [\u00bd]","text":"<pre><code>inline void endstone::Logger::debug (\n    const std::string_view message\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-debug-22","title":"function debug [2/2]","text":"<pre><code>template&lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int &gt;&gt;\ninline void endstone::Logger::debug (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-error-12","title":"function error [\u00bd]","text":"<pre><code>inline void endstone::Logger::error (\n    const std::string_view message\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-error-22","title":"function error [2/2]","text":"<pre><code>template&lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int &gt;&gt;\ninline void endstone::Logger::error (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-getname","title":"function getName","text":"<p>Get the name of this Logger instance. <pre><code>virtual std::string_view endstone::Logger::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>The name of this Logger instance. </p>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-info-12","title":"function info [\u00bd]","text":"<pre><code>inline void endstone::Logger::info (\n    const std::string_view message\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-info-22","title":"function info [2/2]","text":"<pre><code>template&lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int &gt;&gt;\ninline void endstone::Logger::info (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-isenabledfor","title":"function isEnabledFor","text":"<p>Check if the Logger instance is enabled for the given logLevel . <pre><code>virtual bool endstone::Logger::isEnabledFor (\n    Level level\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> The log level to check </li> </ul> <p>Returns:</p> <p>true if the logger is enabled for the Level, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-log-12","title":"function log [\u00bd]","text":"<p>Log a message at the given level. <pre><code>virtual void endstone::Logger::log (\n    Level level,\n    std::string_view message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> The level at which the message should be logged. </li> <li><code>message</code> The message to log. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-log-22","title":"function log [2/2]","text":"<pre><code>template&lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int &gt;&gt;\ninline void endstone::Logger::log (\n    Level level,\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-setlevel","title":"function setLevel","text":"<p>Set the logging level for this Logger instance. <pre><code>virtual void endstone::Logger::setLevel (\n    Level level\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> The desired log level </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-trace-12","title":"function trace [\u00bd]","text":"<pre><code>inline void endstone::Logger::trace (\n    const std::string_view message\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-trace-22","title":"function trace [2/2]","text":"<pre><code>template&lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int &gt;&gt;\ninline void endstone::Logger::trace (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-warning-12","title":"function warning [\u00bd]","text":"<pre><code>inline void endstone::Logger::warning (\n    const std::string_view message\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-warning-22","title":"function warning [2/2]","text":"<pre><code>template&lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int &gt;&gt;\ninline void endstone::Logger::warning (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-logger_1","title":"function ~Logger","text":"<pre><code>virtual endstone::Logger::~Logger () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/logger.h</code></p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/","title":"Class endstone::MapCanvas","text":"<p>ClassList &gt; endstone &gt; MapCanvas</p> <p>Represents a canvas for drawing to a map. More...</p> <ul> <li><code>#include &lt;endstone/map/map_canvas.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#public-functions","title":"Public Functions","text":"Type Name virtual void drawImage (int x, int y, const Image &amp; image) = 0Draw an image to the map. The image will be clipped if necessary. virtual std::uint32_t getBasePixel (int x, int y) const = 0Get a pixel from the layers below this canvas. virtual Result&lt; Color &gt; getBasePixelColor (int x, int y) const = 0Get a pixel from the layers below this canvas. virtual std::vector&lt; MapCursor &gt; getCursors () const = 0Get the cursors associated with this canvas. virtual MapView &amp; getMapView () const = 0Get the map this canvas is attached to. virtual std::uint32_t getPixel (int x, int y) const = 0Get a pixel from the canvas. virtual Result&lt; Color &gt; getPixelColor (int x, int y) const = 0Get a pixel from the canvas. virtual void setCursors (const std::vector&lt; MapCursor &gt; &amp; cursors) = 0Set the cursors associated with this canvas. virtual void setPixel (int x, int y, std::uint32_t color) = 0Draw a pixel to the canvas. virtual void setPixelColor (int x, int y, Color color) = 0Draw a pixel to the canvas. virtual ~MapCanvas () = default"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#detailed-description","title":"Detailed Description","text":"<p>Note:</p> <p>Each canvas is associated with a specific MapRenderer and represents that renderer's layer on the map. </p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-drawimage","title":"function drawImage","text":"<p>Draw an image to the map. The image will be clipped if necessary. <pre><code>virtual void endstone::MapCanvas::drawImage (\n    int x,\n    int y,\n    const Image &amp; image\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate of the image. </li> <li><code>y</code> The y coordinate of the image. </li> <li><code>image</code> The Image to draw. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-getbasepixel","title":"function getBasePixel","text":"<p>Get a pixel from the layers below this canvas. <pre><code>virtual std::uint32_t endstone::MapCanvas::getBasePixel (\n    int x,\n    int y\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate, from 0 to 127. </li> <li><code>y</code> The y coordinate, from 0 to 127. </li> </ul> <p>Returns:</p> <p>The color. </p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-getbasepixelcolor","title":"function getBasePixelColor","text":"<p>Get a pixel from the layers below this canvas. <pre><code>virtual Result&lt; Color &gt; endstone::MapCanvas::getBasePixelColor (\n    int x,\n    int y\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate, from 0 to 127. </li> <li><code>y</code> The y coordinate, from 0 to 127.</li> </ul> <p>Returns:</p> <p>The color </p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-getcursors","title":"function getCursors","text":"<p>Get the cursors associated with this canvas. <pre><code>virtual std::vector&lt; MapCursor &gt; endstone::MapCanvas::getCursors () const = 0\n</code></pre></p> <p>Returns:</p> <p>The MapCursorCollection associated with this canvas. </p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-getmapview","title":"function getMapView","text":"<p>Get the map this canvas is attached to. <pre><code>virtual MapView &amp; endstone::MapCanvas::getMapView () const = 0\n</code></pre></p> <p>Returns:</p> <p>The MapView this canvas is attached to. </p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-getpixel","title":"function getPixel","text":"<p>Get a pixel from the canvas. <pre><code>virtual std::uint32_t endstone::MapCanvas::getPixel (\n    int x,\n    int y\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate, from 0 to 127. </li> <li><code>y</code> The y coordinate, from 0 to 127. </li> </ul> <p>Returns:</p> <p>The color. </p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-getpixelcolor","title":"function getPixelColor","text":"<p>Get a pixel from the canvas. <pre><code>virtual Result&lt; Color &gt; endstone::MapCanvas::getPixelColor (\n    int x,\n    int y\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate, from 0 to 127. </li> <li><code>y</code> The y coordinate, from 0 to 127.</li> </ul> <p>Returns:</p> <p>The color </p>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-setcursors","title":"function setCursors","text":"<p>Set the cursors associated with this canvas. <pre><code>virtual void endstone::MapCanvas::setCursors (\n    const std::vector&lt; MapCursor &gt; &amp; cursors\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>cursors</code> The MapCursorCollection to associate with this canvas. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-setpixel","title":"function setPixel","text":"<p>Draw a pixel to the canvas. <pre><code>virtual void endstone::MapCanvas::setPixel (\n    int x,\n    int y,\n    std::uint32_t color\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate, from 0 to 127. </li> <li><code>y</code> The y coordinate, from 0 to 127. </li> <li><code>color</code> The color. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-setpixelcolor","title":"function setPixelColor","text":"<p>Draw a pixel to the canvas. <pre><code>virtual void endstone::MapCanvas::setPixelColor (\n    int x,\n    int y,\n    Color color\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate, from 0 to 127. </li> <li><code>y</code> The y coordinate, from 0 to 127. </li> <li><code>color</code> The color </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCanvas/#function-mapcanvas","title":"function ~MapCanvas","text":"<pre><code>virtual endstone::MapCanvas::~MapCanvas () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_canvas.h</code></p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/","title":"Class endstone::MapCursor","text":"<p>ClassList &gt; endstone &gt; MapCursor</p> <p>Represents a cursor on a map. </p> <ul> <li><code>#include &lt;endstone/map/map_cursor.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#public-types","title":"Public Types","text":"Type Name enum Type Represents the standard types of map cursors."},{"location":"reference/cpp/classendstone_1_1MapCursor/#public-functions","title":"Public Functions","text":"Type Name MapCursor (std::int8_t x, std::int8_t y, std::int8_t direction, Type type, bool visible, std::string caption=\"\") Initialize the map cursor. std::string getCaption () constGets the caption on this cursor. std::int8_t getDirection () constGet the direction of this cursor. Type getType () constGet the type of this cursor. std::int8_t getX () constGet the X position of this cursor. std::int8_t getY () constGet the Y position of this cursor. bool isVisible () constGet the visibility status of this cursor. void setCaption (std::string caption) Sets the caption on this cursor. Result&lt; void &gt; setDirection (std::int8_t direction) Set the direction of this cursor. void setType (Type type) Set the type of this cursor. void setVisible (bool visible)  void setX (const std::int8_t x) Set the X position of this cursor. void setY (const std::int8_t y) Set the Y position of this cursor."},{"location":"reference/cpp/classendstone_1_1MapCursor/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapCursor/#enum-type","title":"enum Type","text":"<p>Represents the standard types of map cursors. <pre><code>enum endstone::MapCursor::Type {\n    Player = 0,\n    Frame = 1,\n    RedMarker = 2,\n    BlueMarker = 3,\n    TargetX = 4,\n    TargetPoint = 5,\n    PlayerOffMap = 6,\n    SignMarker = 7,\n    PinkMarker = 8,\n    OrangeMarker = 9,\n    YellowMarker = 10,\n    CyanMarker = 11,\n    GreenPoint = 12,\n    PlayerOffLimits = 13,\n    Mansion = 14,\n    Monument = 15,\n    VillageDesert = 17,\n    VillagePlains = 18,\n    VillageSavanna = 19,\n    VillageSnowy = 20,\n    VillageTaiga = 21,\n    JungleTemple = 22,\n    SwampHut = 23,\n    TrialChambers = 24\n};\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-mapcursor","title":"function MapCursor","text":"<p>Initialize the map cursor. <pre><code>inline endstone::MapCursor::MapCursor (\n    std::int8_t x,\n    std::int8_t y,\n    std::int8_t direction,\n    Type type,\n    bool visible,\n    std::string caption=\"\"\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The x coordinate, from -128 to 127. </li> <li><code>y</code> The y coordinate, from -128 to 127. </li> <li><code>direction</code> The facing of the cursor, from 0 to 15. </li> <li><code>type</code> The type (color/style) of the map cursor. </li> <li><code>visible</code> Whether the cursor is visible by default. </li> <li><code>caption</code> cursor caption </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-getcaption","title":"function getCaption","text":"<p>Gets the caption on this cursor. <pre><code>inline std::string endstone::MapCursor::getCaption () const\n</code></pre></p> <p>Returns:</p> <p>caption </p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-getdirection","title":"function getDirection","text":"<p>Get the direction of this cursor. <pre><code>inline std::int8_t endstone::MapCursor::getDirection () const\n</code></pre></p> <p>Returns:</p> <p>The facing of the cursor, from 0 to 15. </p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-gettype","title":"function getType","text":"<p>Get the type of this cursor. <pre><code>inline Type endstone::MapCursor::getType () const\n</code></pre></p> <p>Returns:</p> <p>The type (color/style) of the map cursor. </p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-getx","title":"function getX","text":"<p>Get the X position of this cursor. <pre><code>inline std::int8_t endstone::MapCursor::getX () const\n</code></pre></p> <p>Returns:</p> <p>The X coordinate. </p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-gety","title":"function getY","text":"<p>Get the Y position of this cursor. <pre><code>inline std::int8_t endstone::MapCursor::getY () const\n</code></pre></p> <p>Returns:</p> <p>The Y coordinate. </p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-isvisible","title":"function isVisible","text":"<p>Get the visibility status of this cursor. <pre><code>inline bool endstone::MapCursor::isVisible () const\n</code></pre></p> <p>Returns:</p> <p>True if visible, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-setcaption","title":"function setCaption","text":"<p>Sets the caption on this cursor. <pre><code>inline void endstone::MapCursor::setCaption (\n    std::string caption\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>caption</code> new caption </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-setdirection","title":"function setDirection","text":"<p>Set the direction of this cursor. <pre><code>inline Result&lt; void &gt; endstone::MapCursor::setDirection (\n    std::int8_t direction\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>direction</code> The facing of the cursor, from 0 to 15. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-settype","title":"function setType","text":"<p>Set the type of this cursor. <pre><code>inline void endstone::MapCursor::setType (\n    Type type\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> The type (color/style) of the map cursor. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-setvisible","title":"function setVisible","text":"<pre><code>inline void endstone::MapCursor::setVisible (\n    bool visible\n) \n</code></pre> <p>Set the visibility status of this cursor.</p> <p>Parameters:</p> <ul> <li><code>visible</code> True if visible. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-setx","title":"function setX","text":"<p>Set the X position of this cursor. <pre><code>inline void endstone::MapCursor::setX (\n    const std::int8_t x\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The X coordinate. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapCursor/#function-sety","title":"function setY","text":"<p>Set the Y position of this cursor. <pre><code>inline void endstone::MapCursor::setY (\n    const std::int8_t y\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>y</code> The Y coordinate. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_cursor.h</code></p>"},{"location":"reference/cpp/classendstone_1_1MapInitializeEvent/","title":"Class endstone::MapInitializeEvent","text":"<p>ClassList &gt; endstone &gt; MapInitializeEvent</p> <p>Called when a map is initialized. </p> <ul> <li><code>#include &lt;endstone/event/server/map_initialize_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1MapInitializeEvent/#public-functions","title":"Public Functions","text":"Type Name MapInitializeEvent (MapView &amp; map)  MapView &amp; getMap () constGets the map initialized in this event."},{"location":"reference/cpp/classendstone_1_1MapInitializeEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1MapInitializeEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1MapInitializeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapInitializeEvent/#function-mapinitializeevent","title":"function MapInitializeEvent","text":"<pre><code>inline explicit endstone::MapInitializeEvent::MapInitializeEvent (\n    MapView &amp; map\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1MapInitializeEvent/#function-getmap","title":"function getMap","text":"<p>Gets the map initialized in this event. <pre><code>inline MapView &amp; endstone::MapInitializeEvent::getMap () const\n</code></pre></p> <p>Returns:</p> <p>Map for this event </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/map_initialize_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/","title":"Class endstone::MapMeta","text":"<p>ClassList &gt; endstone &gt; MapMeta</p> <p>Represents the metadata for a map item. </p> <ul> <li><code>#include &lt;endstone/inventory/meta/map_meta.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ItemMeta</p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#public-types-inherited-from-endstoneitemmeta","title":"Public Types inherited from endstone::ItemMeta","text":"<p>See endstone::ItemMeta</p> Type Name enum Type"},{"location":"reference/cpp/classendstone_1_1MapMeta/#public-static-attributes","title":"Public Static Attributes","text":"Type Name constexpr auto TYPE   = <code>Type::Map</code>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#public-functions","title":"Public Functions","text":"Type Name MapMeta (const ItemMeta * meta)  virtual std::unique_ptr&lt; ItemMeta &gt; clone () override constCreates a clone of the current metadata. std::int64_t getMapId () constGets the map ID that is set. This is used to determine what map is displayed. MapView * getMapView () constGets the map view associated with this map item. virtual Type getType () override constGets the type of this item meta. bool hasMapId () constChecks for existence of a map ID number. bool hasMapView () constChecks for existence of an associated map. virtual bool isEmpty () override constChecks if the item metadata is empty. void setMapId (std::int64_t id) Sets the map ID. This is used to determine what map is displayed. void setMapView (const MapView * map) Sets the associated map. This is used to determine what map is displayed."},{"location":"reference/cpp/classendstone_1_1MapMeta/#public-functions-inherited-from-endstoneitemmeta","title":"Public Functions inherited from endstone::ItemMeta","text":"<p>See endstone::ItemMeta</p> Type Name ItemMeta (const ItemMeta * meta)  bool addEnchant (const std::string &amp; id, int level, bool force=false) Adds the specified enchantment to this item meta. T * as ()  const T * as () const virtual std::unique_ptr&lt; ItemMeta &gt; clone () constCreates a clone of the current metadata. int getDamage () constGets the damage. std::string getDisplayName () constGets the display name that is set. int getEnchantLevel (const std::string &amp; id) constChecks for the level of the specified enchantment. std::unordered_map&lt; std::string, int &gt; getEnchants () constReturns a copy the enchantments in this ItemMeta . std::vector&lt; std::string &gt; getLore () constGets the lore that is set. int getRepairCost () constGets the repair penalty. virtual Type getType () constGets the type of this item meta. bool hasDamage () constChecks to see if this item has damage. bool hasDisplayName () constChecks for existence of a display name. bool hasEnchant (const std::string &amp; id) constChecks for existence of the specified enchantment. bool hasEnchants () constChecks for the existence of any enchantments. bool hasLore () constChecks for existence of lore. bool hasRepairCost () constChecks to see if this has a repair penalty. virtual bool isEmpty () constChecks if the item metadata is empty. bool isUnbreakable () constReturn if the unbreakable tag is true. An unbreakable item will not lose durability. bool removeEnchant (const std::string &amp; id) Removes the specified enchantment from this item meta. void removeEnchants () Removes all enchantments from this item meta. void setDamage (int damage) Sets the damage. void setDisplayName (std::optional&lt; std::string &gt; name) Sets the display name. void setLore (std::optional&lt; std::vector&lt; std::string &gt; &gt; lore) Sets the lore for this item or removes lore when given std::nullopt. void setRepairCost (int cost) Sets the repair penalty. void setUnbreakable (bool unbreakable) Sets the unbreakable tag. An unbreakable item will not lose durability. virtual ~ItemMeta () = default"},{"location":"reference/cpp/classendstone_1_1MapMeta/#protected-functions","title":"Protected Functions","text":"Type Name bool isMapEmpty () const"},{"location":"reference/cpp/classendstone_1_1MapMeta/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapMeta/#variable-type","title":"variable TYPE","text":"<pre><code>constexpr auto endstone::MapMeta::TYPE;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-mapmeta","title":"function MapMeta","text":"<pre><code>inline explicit endstone::MapMeta::MapMeta (\n    const ItemMeta * meta\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-clone","title":"function clone","text":"<p>Creates a clone of the current metadata. <pre><code>inline virtual std::unique_ptr&lt; ItemMeta &gt; endstone::MapMeta::clone () override const\n</code></pre></p> <p>Returns:</p> <p>A copy of the metadata containing the same state as the original. </p> <p>Implements endstone::ItemMeta::clone</p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-getmapid","title":"function getMapId","text":"<p>Gets the map ID that is set. This is used to determine what map is displayed. <pre><code>inline std::int64_t endstone::MapMeta::getMapId () const\n</code></pre></p> <p>Returns:</p> <p>the map ID that is set </p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-getmapview","title":"function getMapView","text":"<p>Gets the map view associated with this map item. <pre><code>inline MapView * endstone::MapMeta::getMapView () const\n</code></pre></p> <p>Note:</p> <p>Plugins should check that hasMapView() returns true before calling this method.</p> <p>Returns:</p> <p>the map view, or nullptr if the item hasMapView(), but this map does not exist on the server </p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-gettype","title":"function getType","text":"<p>Gets the type of this item meta. <pre><code>inline virtual Type endstone::MapMeta::getType () override const\n</code></pre></p> <p>Returns:</p> <p>type of this item meta </p> <p>Implements endstone::ItemMeta::getType</p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-hasmapid","title":"function hasMapId","text":"<p>Checks for existence of a map ID number. <pre><code>inline bool endstone::MapMeta::hasMapId () const\n</code></pre></p> <p>Returns:</p> <p>true if this has a map ID number. </p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-hasmapview","title":"function hasMapView","text":"<p>Checks for existence of an associated map. <pre><code>inline bool endstone::MapMeta::hasMapView () const\n</code></pre></p> <p>Returns:</p> <p>true if this item has an associated map </p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-isempty","title":"function isEmpty","text":"<p>Checks if the item metadata is empty. <pre><code>inline virtual bool endstone::MapMeta::isEmpty () override const\n</code></pre></p> <p>Returns:</p> <p>true if the metadata is empty, false otherwise. </p> <p>Implements endstone::ItemMeta::isEmpty</p>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-setmapid","title":"function setMapId","text":"<p>Sets the map ID. This is used to determine what map is displayed. <pre><code>inline void endstone::MapMeta::setMapId (\n    std::int64_t id\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> the map id to set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-setmapview","title":"function setMapView","text":"<p>Sets the associated map. This is used to determine what map is displayed. <pre><code>inline void endstone::MapMeta::setMapView (\n    const MapView * map\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>map</code> the map to set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapMeta/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapMeta/#function-ismapempty","title":"function isMapEmpty","text":"<pre><code>inline bool endstone::MapMeta::isMapEmpty () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/meta/map_meta.h</code></p>"},{"location":"reference/cpp/classendstone_1_1MapRenderer/","title":"Class endstone::MapRenderer","text":"<p>ClassList &gt; endstone &gt; MapRenderer</p> <p>Represents a renderer for a map. </p> <ul> <li><code>#include &lt;endstone/map/map_renderer.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapRenderer/#public-functions","title":"Public Functions","text":"Type Name MapRenderer (const bool is_contextual=false) Initialize the map renderer base with the given contextual status. virtual void initialize (MapView &amp; map) Initialize this MapRenderer for the given map. bool isContextual () constGet whether the renderer is contextual, i.e. has different canvases for different players. virtual void render (MapView &amp; map, MapCanvas &amp; canvas, Player &amp; player) = 0Render to the given map. virtual ~MapRenderer () = default"},{"location":"reference/cpp/classendstone_1_1MapRenderer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapRenderer/#function-maprenderer","title":"function MapRenderer","text":"<p>Initialize the map renderer base with the given contextual status. <pre><code>inline explicit endstone::MapRenderer::MapRenderer (\n    const bool is_contextual=false\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>is_contextual</code> Whether the renderer is contextual. See isContextual(). </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapRenderer/#function-initialize","title":"function initialize","text":"<p>Initialize this MapRenderer for the given map. <pre><code>inline virtual void endstone::MapRenderer::initialize (\n    MapView &amp; map\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>map</code> The MapView being initialized. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapRenderer/#function-iscontextual","title":"function isContextual","text":"<p>Get whether the renderer is contextual, i.e. has different canvases for different players. <pre><code>inline bool endstone::MapRenderer::isContextual () const\n</code></pre></p> <p>Returns:</p> <p>true if contextual, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1MapRenderer/#function-render","title":"function render","text":"<p>Render to the given map. <pre><code>virtual void endstone::MapRenderer::render (\n    MapView &amp; map,\n    MapCanvas &amp; canvas,\n    Player &amp; player\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>map</code> The MapView being rendered to. </li> <li><code>canvas</code> The canvas to use for rendering. </li> <li><code>player</code> The player who triggered the rendering. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapRenderer/#function-maprenderer_1","title":"function ~MapRenderer","text":"<pre><code>virtual endstone::MapRenderer::~MapRenderer () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1MapRenderer/#friends-documentation","title":"Friends Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapRenderer/#friend-endstonemapview","title":"friend EndstoneMapView","text":"<pre><code>class endstone::MapRenderer::EndstoneMapView (\n    core::EndstoneMapView\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_renderer.h</code></p>"},{"location":"reference/cpp/classendstone_1_1MapView/","title":"Class endstone::MapView","text":"<p>ClassList &gt; endstone &gt; MapView</p> <p>Represents a map item. </p> <ul> <li><code>#include &lt;endstone/map/map_view.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#public-types","title":"Public Types","text":"Type Name enum uint8_t Scale An enum representing all possible scales a map can be set to."},{"location":"reference/cpp/classendstone_1_1MapView/#public-functions","title":"Public Functions","text":"Type Name virtual void addRenderer (std::shared_ptr&lt; MapRenderer &gt; renderer) = 0Add a renderer to this map. virtual int getCenterX () const = 0Get the center X position of this map. virtual int getCenterZ () const = 0Get the center Z position of this map. virtual Dimension * getDimension () const = 0Get the dimension that this map is associated with. virtual std::int64_t getId () const = 0Get the ID of this map item for use with MapMeta . virtual std::vector&lt; std::shared_ptr&lt; MapRenderer &gt; &gt; getRenderers () const = 0Get a list of MapRenderers currently in effect. virtual Scale getScale () const = 0Get the scale of this map. virtual bool isLocked () const = 0Gets whether the map is locked or not. A locked map may not be explored further. virtual bool isUnlimitedTracking () const = 0Whether the map will show a smaller position cursor (true), or no position cursor (false) when cursor is outside of map's range. virtual bool isVirtual () const = 0Check whether this map is virtual. virtual bool removeRenderer (const std::shared_ptr&lt; MapRenderer &gt; &amp; renderer) = 0Remove a renderer from this map. virtual void setCenterX (int x) = 0Set the center X position of this map. virtual void setCenterZ (int z) = 0Set the center Z position of this map. virtual void setDimension (const Dimension &amp; dimension) = 0Set the dimension that this map is associated with. virtual void setLocked (bool locked) = 0Sets whether the map is locked or not. A locked map may not be explored further. virtual void setScale (Scale scale) = 0Set the scale of this map. virtual void setUnlimitedTracking (bool unlimited) = 0Whether the map will show a smaller position cursor (true), or no position cursor (false) when cursor is outside of map's range. virtual ~MapView () = default"},{"location":"reference/cpp/classendstone_1_1MapView/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapView/#enum-scale","title":"enum Scale","text":"<p>An enum representing all possible scales a map can be set to. <pre><code>enum endstone::MapView::Scale {\n    Closest = 0,\n    Close = 1,\n    Normal = 2,\n    Far = 3,\n    Farthest = 4\n};\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1MapView/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MapView/#function-addrenderer","title":"function addRenderer","text":"<p>Add a renderer to this map. <pre><code>virtual void endstone::MapView::addRenderer (\n    std::shared_ptr&lt; MapRenderer &gt; renderer\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>renderer</code> The MapRenderer to add. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-getcenterx","title":"function getCenterX","text":"<p>Get the center X position of this map. <pre><code>virtual int endstone::MapView::getCenterX () const = 0\n</code></pre></p> <p>Returns:</p> <p>The center X position. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-getcenterz","title":"function getCenterZ","text":"<p>Get the center Z position of this map. <pre><code>virtual int endstone::MapView::getCenterZ () const = 0\n</code></pre></p> <p>Returns:</p> <p>The center Z position. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-getdimension","title":"function getDimension","text":"<p>Get the dimension that this map is associated with. <pre><code>virtual Dimension * endstone::MapView::getDimension () const = 0\n</code></pre></p> <p>Returns:</p> <p>Pointer to the World this map is associated with, or nullptr. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-getid","title":"function getId","text":"<p>Get the ID of this map item for use with MapMeta . <pre><code>virtual std::int64_t endstone::MapView::getId () const = 0\n</code></pre></p> <p>Returns:</p> <p>The unique ID of the map. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-getrenderers","title":"function getRenderers","text":"<p>Get a list of MapRenderers currently in effect. <pre><code>virtual std::vector&lt; std::shared_ptr&lt; MapRenderer &gt; &gt; endstone::MapView::getRenderers () const = 0\n</code></pre></p> <p>Returns:</p> <p>A list of references to each MapRenderer. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-getscale","title":"function getScale","text":"<p>Get the scale of this map. <pre><code>virtual Scale endstone::MapView::getScale () const = 0\n</code></pre></p> <p>Returns:</p> <p>The scale of the map. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-islocked","title":"function isLocked","text":"<p>Gets whether the map is locked or not. A locked map may not be explored further. <pre><code>virtual bool endstone::MapView::isLocked () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if the map is locked. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-isunlimitedtracking","title":"function isUnlimitedTracking","text":"<p>Whether the map will show a smaller position cursor (true), or no position cursor (false) when cursor is outside of map's range. <pre><code>virtual bool endstone::MapView::isUnlimitedTracking () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if unlimited tracking is enabled. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-isvirtual","title":"function isVirtual","text":"<p>Check whether this map is virtual. <pre><code>virtual bool endstone::MapView::isVirtual () const = 0\n</code></pre></p> <p>A map is virtual if its lowermost MapRenderer is plugin-provided.</p> <p>Returns:</p> <p>True if the map is virtual. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-removerenderer","title":"function removeRenderer","text":"<p>Remove a renderer from this map. <pre><code>virtual bool endstone::MapView::removeRenderer (\n    const std::shared_ptr&lt; MapRenderer &gt; &amp; renderer\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>renderer</code> The MapRenderer to remove.</li> </ul> <p>Returns:</p> <p>True if the renderer was successfully removed. </p>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-setcenterx","title":"function setCenterX","text":"<p>Set the center X position of this map. <pre><code>virtual void endstone::MapView::setCenterX (\n    int x\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The center X position. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-setcenterz","title":"function setCenterZ","text":"<p>Set the center Z position of this map. <pre><code>virtual void endstone::MapView::setCenterZ (\n    int z\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>z</code> The center Z position. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-setdimension","title":"function setDimension","text":"<p>Set the dimension that this map is associated with. <pre><code>virtual void endstone::MapView::setDimension (\n    const Dimension &amp; dimension\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>dimension</code> The Dimension to associate this map with. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-setlocked","title":"function setLocked","text":"<p>Sets whether the map is locked or not. A locked map may not be explored further. <pre><code>virtual void endstone::MapView::setLocked (\n    bool locked\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>locked</code> True to lock the map. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-setscale","title":"function setScale","text":"<p>Set the scale of this map. <pre><code>virtual void endstone::MapView::setScale (\n    Scale scale\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>scale</code> The scale to set. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-setunlimitedtracking","title":"function setUnlimitedTracking","text":"<p>Whether the map will show a smaller position cursor (true), or no position cursor (false) when cursor is outside of map's range. <pre><code>virtual void endstone::MapView::setUnlimitedTracking (\n    bool unlimited\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>unlimited</code> True to enable unlimited tracking. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1MapView/#function-mapview","title":"function ~MapView","text":"<pre><code>virtual endstone::MapView::~MapView () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_view.h</code></p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/","title":"Class endstone::MessageForm","text":"<p>ClassList &gt; endstone &gt; MessageForm</p> <p>Represents a form with two buttons. </p> <ul> <li><code>#include &lt;endstone/form/message_form.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Form</p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; void(Player *, int)&gt; OnSubmitCallback"},{"location":"reference/cpp/classendstone_1_1MessageForm/#public-types-inherited-from-endstoneform","title":"Public Types inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name typedef std::function&lt; void(Player *)&gt; OnCloseCallback"},{"location":"reference/cpp/classendstone_1_1MessageForm/#public-functions","title":"Public Functions","text":"Type Name Message getButton1 () constGet the text of button1. Message getButton2 () constGet the text of button2. Message getContent () constGet the content of the form. OnSubmitCallback getOnSubmit () constGets the on submit callback of the form. MessageForm &amp; setButton1 (Message text) Set the text of button1. MessageForm &amp; setButton2 (Message text) Set the text of button2. MessageForm &amp; setContent (Message text) Set the content of the form. MessageForm &amp; setOnSubmit (OnSubmitCallback on_submit) Sets the on submit callback of the form."},{"location":"reference/cpp/classendstone_1_1MessageForm/#public-functions-inherited-from-endstoneform","title":"Public Functions inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name Form () = default OnCloseCallback getOnClose () constGets the on close callback of the form. Message getTitle () constGets the title of the form. T &amp; setOnClose (OnCloseCallback on_close) Sets the on close callback of the form. T &amp; setTitle (Message title) Sets the title of the form."},{"location":"reference/cpp/classendstone_1_1MessageForm/#protected-attributes-inherited-from-endstoneform","title":"Protected Attributes inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name OnCloseCallback on_close_ Message title_"},{"location":"reference/cpp/classendstone_1_1MessageForm/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MessageForm/#typedef-onsubmitcallback","title":"typedef OnSubmitCallback","text":"<pre><code>using endstone::MessageForm::OnSubmitCallback =  std::function&lt;void(Player *, int)&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-getbutton1","title":"function getButton1","text":"<p>Get the text of button1. <pre><code>inline Message endstone::MessageForm::getButton1 () const\n</code></pre></p> <p>Returns:</p> <p>The text of button1. </p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-getbutton2","title":"function getButton2","text":"<p>Get the text of button2. <pre><code>inline Message endstone::MessageForm::getButton2 () const\n</code></pre></p> <p>Returns:</p> <p>The text of button2. </p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-getcontent","title":"function getContent","text":"<p>Get the content of the form. <pre><code>inline Message endstone::MessageForm::getContent () const\n</code></pre></p> <p>Returns:</p> <p>The content of the form. </p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-getonsubmit","title":"function getOnSubmit","text":"<p>Gets the on submit callback of the form. <pre><code>inline OnSubmitCallback endstone::MessageForm::getOnSubmit () const\n</code></pre></p> <p>Returns:</p> <p>The on submit callback of the form. </p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-setbutton1","title":"function setButton1","text":"<p>Set the text of button1. <pre><code>inline MessageForm &amp; endstone::MessageForm::setButton1 (\n    Message text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to set as the button1 text. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-setbutton2","title":"function setButton2","text":"<p>Set the text of button2. <pre><code>inline MessageForm &amp; endstone::MessageForm::setButton2 (\n    Message text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to set as the button2 text. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-setcontent","title":"function setContent","text":"<p>Set the content of the form. <pre><code>inline MessageForm &amp; endstone::MessageForm::setContent (\n    Message text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The text to set as the content. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1MessageForm/#function-setonsubmit","title":"function setOnSubmit","text":"<p>Sets the on submit callback of the form. <pre><code>inline MessageForm &amp; endstone::MessageForm::setOnSubmit (\n    OnSubmitCallback on_submit\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>on_submit</code> The callback to be set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/message_form.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Mob/","title":"Class endstone::Mob","text":"<p>ClassList &gt; endstone &gt; Mob</p> <p>Represents a mobile entity (i.e. living entity), such as a monster or player. </p> <ul> <li><code>#include &lt;endstone/actor/mob.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Actor</p> <p>Inherited by the following classes: endstone::Player</p>"},{"location":"reference/cpp/classendstone_1_1Mob/#public-functions","title":"Public Functions","text":"Type Name virtual bool isGliding () const = 0Checks to see if an actor is gliding, such as using an Elytra."},{"location":"reference/cpp/classendstone_1_1Mob/#public-functions-inherited-from-endstoneactor","title":"Public Functions inherited from endstone::Actor","text":"<p>See endstone::Actor</p> Type Name virtual bool addScoreboardTag (std::string tag) const = 0Adds a tag to this actor. virtual Item * asItem () const = 0Gets an Actor asItem . virtual Mob * asMob () const = 0Gets an Actor asMob . virtual Dimension &amp; getDimension () const = 0 virtual int getHealth () const = 0Gets the entity's health from 0 to its max possible value, where 0 is dead. virtual std::int64_t getId () const = 0Returns a unique id for this actor. virtual Level &amp; getLevel () const = 0 virtual Location getLocation () const = 0 virtual int getMaxHealth () const = 0Gets the maximum health this entity has. virtual std::string getNameTag () const = 0Gets the current name tag of the actor. virtual std::uint64_t getRuntimeId () const = 0 virtual std::string getScoreTag () const = 0Gets the current score tag of the actor. virtual std::vector&lt; std::string &gt; getScoreboardTags () const = 0Returns a list of scoreboard tags for this actor. virtual std::string getType () const = 0Get the type of the actor. virtual Vector getVelocity () const = 0 virtual bool isDead () const = 0Returns true if this actor has been marked for removal. virtual bool isInLava () const = 0 virtual bool isInWater () const = 0 virtual bool isNameTagAlwaysVisible () const = 0Checks if the actor's name tag is always visible. virtual bool isNameTagVisible () const = 0Checks if the actor's name tag is currently visible. virtual bool isOnGround () const = 0 virtual bool isValid () const = 0 virtual void remove () = 0 virtual bool removeScoreboardTag (std::string tag) const = 0Removes a given tag from this actor. virtual Result&lt; void &gt; setHealth (int health) const = 0 virtual void setNameTag (std::string name) = 0Sets the name tag for the actor. virtual void setNameTagAlwaysVisible (bool visible) = 0Sets whether the actor's name tag should always be visible. virtual void setNameTagVisible (bool visible) = 0Sets if the actor's name tag is visible or not. virtual void setRotation (float yaw, float pitch) = 0 virtual void setScoreTag (std::string score) = 0Sets the score tag for the actor. virtual void teleport (Location location) = 0 virtual void teleport (Actor &amp; target) = 0"},{"location":"reference/cpp/classendstone_1_1Mob/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1Mob/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Mob/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Mob/#function-isgliding","title":"function isGliding","text":"<p>Checks to see if an actor is gliding, such as using an Elytra. <pre><code>virtual bool endstone::Mob::isGliding () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if this actor is gliding. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/actor/mob.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/","title":"Class endstone::ModalForm","text":"<p>ClassList &gt; endstone &gt; ModalForm</p> <p>Represents a modal form with controls. </p> <ul> <li><code>#include &lt;endstone/form/modal_form.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Form</p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#public-types","title":"Public Types","text":"Type Name typedef std::variant&lt; Dropdown, Label, Slider, StepSlider, TextInput, Toggle, Divider, Header &gt; Control typedef std::function&lt; void(Player *, std::string)&gt; OnSubmitCallback"},{"location":"reference/cpp/classendstone_1_1ModalForm/#public-types-inherited-from-endstoneform","title":"Public Types inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name typedef std::function&lt; void(Player *)&gt; OnCloseCallback"},{"location":"reference/cpp/classendstone_1_1ModalForm/#public-functions","title":"Public Functions","text":"Type Name ModalForm &amp; addControl (const Control &amp; control) Adds a control to the form. std::vector&lt; Control &gt; getControls () constGets the controls of the modal form. std::optional&lt; std::string &gt; getIcon () constGet the icon of the form. OnSubmitCallback getOnSubmit () constGets the on submit callback of the form. std::optional&lt; Message &gt; getSubmitButton () constGets the submit button text of the form. ModalForm &amp; setControls (std::vector&lt; Control &gt; controls) Sets the controls of the modal form. ModalForm &amp; setIcon (std::optional&lt; std::string &gt; icon) Sets the icon of the form. ModalForm &amp; setOnSubmit (OnSubmitCallback on_submit) Sets the on submit callback of the form. ModalForm &amp; setSubmitButton (std::optional&lt; Message &gt; text) Sets the submit button text of the form."},{"location":"reference/cpp/classendstone_1_1ModalForm/#public-functions-inherited-from-endstoneform","title":"Public Functions inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name Form () = default OnCloseCallback getOnClose () constGets the on close callback of the form. Message getTitle () constGets the title of the form. T &amp; setOnClose (OnCloseCallback on_close) Sets the on close callback of the form. T &amp; setTitle (Message title) Sets the title of the form."},{"location":"reference/cpp/classendstone_1_1ModalForm/#protected-attributes-inherited-from-endstoneform","title":"Protected Attributes inherited from endstone::Form","text":"<p>See endstone::Form</p> Type Name OnCloseCallback on_close_ Message title_"},{"location":"reference/cpp/classendstone_1_1ModalForm/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ModalForm/#typedef-control","title":"typedef Control","text":"<pre><code>using endstone::ModalForm::Control =  std::variant&lt;Dropdown, Label, Slider, StepSlider, TextInput, Toggle, Divider, Header&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#typedef-onsubmitcallback","title":"typedef OnSubmitCallback","text":"<pre><code>using endstone::ModalForm::OnSubmitCallback =  std::function&lt;void(Player *, std::string)&gt;;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-addcontrol","title":"function addControl","text":"<p>Adds a control to the form. <pre><code>inline ModalForm &amp; endstone::ModalForm::addControl (\n    const Control &amp; control\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>control</code> The control to add to the form. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-getcontrols","title":"function getControls","text":"<p>Gets the controls of the modal form. <pre><code>inline std::vector&lt; Control &gt; endstone::ModalForm::getControls () const\n</code></pre></p> <p>Returns:</p> <p>A list of controls in the modal form. </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-geticon","title":"function getIcon","text":"<p>Get the icon of the form. <pre><code>inline std::optional&lt; std::string &gt; endstone::ModalForm::getIcon () const\n</code></pre></p> <p>Returns:</p> <p>The path or URL to the icon file </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-getonsubmit","title":"function getOnSubmit","text":"<p>Gets the on submit callback of the form. <pre><code>inline OnSubmitCallback endstone::ModalForm::getOnSubmit () const\n</code></pre></p> <p>Returns:</p> <p>The on submit callback of the form. </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-getsubmitbutton","title":"function getSubmitButton","text":"<p>Gets the submit button text of the form. <pre><code>inline std::optional&lt; Message &gt; endstone::ModalForm::getSubmitButton () const\n</code></pre></p> <p>Returns:</p> <p>The submit button text of the form. </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-setcontrols","title":"function setControls","text":"<p>Sets the controls of the modal form. <pre><code>inline ModalForm &amp; endstone::ModalForm::setControls (\n    std::vector&lt; Control &gt; controls\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>controls</code> The list of controls to set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-seticon","title":"function setIcon","text":"<p>Sets the icon of the form. <pre><code>inline ModalForm &amp; endstone::ModalForm::setIcon (\n    std::optional&lt; std::string &gt; icon\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>icon</code> The path or URL to the icon file. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-setonsubmit","title":"function setOnSubmit","text":"<p>Sets the on submit callback of the form. <pre><code>inline ModalForm &amp; endstone::ModalForm::setOnSubmit (\n    OnSubmitCallback on_submit\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>on_submit</code> The callback to be set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p>"},{"location":"reference/cpp/classendstone_1_1ModalForm/#function-setsubmitbutton","title":"function setSubmitButton","text":"<p>Sets the submit button text of the form. <pre><code>inline ModalForm &amp; endstone::ModalForm::setSubmitButton (\n    std::optional&lt; Message &gt; text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The submit button text to set. </li> </ul> <p>Returns:</p> <p>A reference to the current form. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/modal_form.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Objective/","title":"Class endstone::Objective","text":"<p>ClassList &gt; endstone &gt; Objective</p> <p>Represents an objective on a scoreboard that can show scores specific to entries. </p> <ul> <li><code>#include &lt;endstone/scoreboard/objective.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Objective/#public-functions","title":"Public Functions","text":"Type Name virtual Result&lt; const Criteria * &gt; getCriteria () const = 0Gets the criteria this objective tracks. virtual Result&lt; std::string &gt; getDisplayName () const = 0Gets the name displayed to players for this objective. virtual Result&lt; DisplaySlot &gt; getDisplaySlot () const = 0Gets the display slot this objective is displayed at. virtual Result&lt; std::string &gt; getName () const = 0Gets the name of this Objective . virtual Result&lt; RenderType &gt; getRenderType () const = 0 virtual Result&lt; std::unique_ptr&lt; Score &gt; &gt; getScore (ScoreEntry entry) const = 0Sets manner in which this objective will be rendered. virtual Scoreboard &amp; getScoreboard () const = 0Gets the scoreboard to which this objective is attached. virtual Result&lt; ObjectiveSortOrder &gt; getSortOrder () const = 0Gets the sort order for this objective. virtual Result&lt; bool &gt; isDisplayed () const = 0Gets if the objective is currently displayed in a slot. virtual Result&lt; bool &gt; isModifiable () const = 0Gets if the objective's scores can be modified directly by a plugin. virtual bool operator!= (const Objective &amp; other) const = 0 virtual bool operator== (const Objective &amp; other) const = 0 virtual Result&lt; void &gt; setDisplay (std::optional&lt; DisplaySlot &gt; slot, ObjectiveSortOrder order) = 0Sets the display slot and sort order for this objective. This will remove it from any other display slot. virtual Result&lt; void &gt; setDisplayName (std::string display_name) = 0Sets the name displayed to players for this objective. virtual Result&lt; void &gt; setDisplaySlot (std::optional&lt; DisplaySlot &gt; slot) = 0Sets the display slot for this objective. This will remove it from any other display slot. virtual Result&lt; void &gt; setSortOrder (ObjectiveSortOrder order) = 0Sets the sort order for this objective. virtual Result&lt; void &gt; unregister () const = 0Unregisters this objective from the associated Scoreboard . virtual ~Objective () = default"},{"location":"reference/cpp/classendstone_1_1Objective/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Objective/#function-getcriteria","title":"function getCriteria","text":"<p>Gets the criteria this objective tracks. <pre><code>virtual Result&lt; const Criteria * &gt; endstone::Objective::getCriteria () const = 0\n</code></pre></p> <p>Returns:</p> <p>this objective's criteria. </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-getdisplayname","title":"function getDisplayName","text":"<p>Gets the name displayed to players for this objective. <pre><code>virtual Result&lt; std::string &gt; endstone::Objective::getDisplayName () const = 0\n</code></pre></p> <p>Returns:</p> <p>this objective's display name </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-getdisplayslot","title":"function getDisplaySlot","text":"<p>Gets the display slot this objective is displayed at. <pre><code>virtual Result&lt; DisplaySlot &gt; endstone::Objective::getDisplaySlot () const = 0\n</code></pre></p> <p>Returns:</p> <p>the display slot for this objective </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-getname","title":"function getName","text":"<p>Gets the name of this Objective . <pre><code>virtual Result&lt; std::string &gt; endstone::Objective::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>this objective's name </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-getrendertype","title":"function getRenderType","text":"<pre><code>virtual Result&lt; RenderType &gt; endstone::Objective::getRenderType () const = 0\n</code></pre> <p>Gets manner in which this objective will be rendered.</p> <p>Returns:</p> <p>the render type </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-getscore","title":"function getScore","text":"<p>Sets manner in which this objective will be rendered. <pre><code>virtual Result&lt; std::unique_ptr&lt; Score &gt; &gt; endstone::Objective::getScore (\n    ScoreEntry entry\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>render_type</code> new render type</li> </ul> <p>Gets an entry's Score for this objective.</p> <p>Parameters:</p> <ul> <li><code>entry</code> Entry for the Score </li> </ul> <p>Returns:</p> <p>Score tracking the Objective and entry specified </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-getscoreboard","title":"function getScoreboard","text":"<p>Gets the scoreboard to which this objective is attached. <pre><code>virtual Scoreboard &amp; endstone::Objective::getScoreboard () const = 0\n</code></pre></p> <p>Returns:</p> <p>Owning scoreboard </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-getsortorder","title":"function getSortOrder","text":"<p>Gets the sort order for this objective. <pre><code>virtual Result&lt; ObjectiveSortOrder &gt; endstone::Objective::getSortOrder () const = 0\n</code></pre></p> <p>Returns:</p> <p>The sort order for this objective. </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-isdisplayed","title":"function isDisplayed","text":"<p>Gets if the objective is currently displayed in a slot. <pre><code>virtual Result&lt; bool &gt; endstone::Objective::isDisplayed () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if the objective is displayed </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-ismodifiable","title":"function isModifiable","text":"<p>Gets if the objective's scores can be modified directly by a plugin. <pre><code>virtual Result&lt; bool &gt; endstone::Objective::isModifiable () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if scores are modifiable </p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-operator","title":"function operator!=","text":"<pre><code>virtual bool endstone::Objective::operator!= (\n    const Objective &amp; other\n) const = 0\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-operator_1","title":"function operator==","text":"<pre><code>virtual bool endstone::Objective::operator== (\n    const Objective &amp; other\n) const = 0\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-setdisplay","title":"function setDisplay","text":"<p>Sets the display slot and sort order for this objective. This will remove it from any other display slot. <pre><code>virtual Result&lt; void &gt; endstone::Objective::setDisplay (\n    std::optional&lt; DisplaySlot &gt; slot,\n    ObjectiveSortOrder order\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>slot</code> The display slot where this objective should be displayed. </li> <li><code>order</code> The sort order for this objective in the display slot. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-setdisplayname","title":"function setDisplayName","text":"<p>Sets the name displayed to players for this objective. <pre><code>virtual Result&lt; void &gt; endstone::Objective::setDisplayName (\n    std::string display_name\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>display_name</code> Display name to set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-setdisplayslot","title":"function setDisplaySlot","text":"<p>Sets the display slot for this objective. This will remove it from any other display slot. <pre><code>virtual Result&lt; void &gt; endstone::Objective::setDisplaySlot (\n    std::optional&lt; DisplaySlot &gt; slot\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>slot</code> The display slot where this objective should be displayed. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-setsortorder","title":"function setSortOrder","text":"<p>Sets the sort order for this objective. <pre><code>virtual Result&lt; void &gt; endstone::Objective::setSortOrder (\n    ObjectiveSortOrder order\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>order</code> The sort order for this objective in the display slot. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-unregister","title":"function unregister","text":"<p>Unregisters this objective from the associated Scoreboard . <pre><code>virtual Result&lt; void &gt; endstone::Objective::unregister () const = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Objective/#function-objective","title":"function ~Objective","text":"<pre><code>virtual endstone::Objective::~Objective () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/objective.h</code></p>"},{"location":"reference/cpp/classendstone_1_1OfflinePlayer/","title":"Class endstone::OfflinePlayer","text":"<p>ClassList &gt; endstone &gt; OfflinePlayer</p> <p>Represents a reference to a player identity and the data belonging to a player that is stored on the disk and can, thus, be retrieved without the player needing to be online. </p> <ul> <li><code>#include &lt;endstone/offline_player.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::Player</p>"},{"location":"reference/cpp/classendstone_1_1OfflinePlayer/#public-functions","title":"Public Functions","text":"Type Name virtual std::string getName () const = 0Returns the name of this player. virtual UUID getUniqueId () const = 0Returns the UUID of this player. virtual ~OfflinePlayer () = default"},{"location":"reference/cpp/classendstone_1_1OfflinePlayer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1OfflinePlayer/#function-getname","title":"function getName","text":"<p>Returns the name of this player. <pre><code>virtual std::string endstone::OfflinePlayer::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>Player name or null if we have not seen a name for this player yet </p>"},{"location":"reference/cpp/classendstone_1_1OfflinePlayer/#function-getuniqueid","title":"function getUniqueId","text":"<p>Returns the UUID of this player. <pre><code>virtual UUID endstone::OfflinePlayer::getUniqueId () const = 0\n</code></pre></p> <p>Returns:</p> <p>Player UUID </p>"},{"location":"reference/cpp/classendstone_1_1OfflinePlayer/#function-offlineplayer","title":"function ~OfflinePlayer","text":"<pre><code>virtual endstone::OfflinePlayer::~OfflinePlayer () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/offline_player.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/","title":"Class endstone::PacketReceiveEvent","text":"<p>ClassList &gt; endstone &gt; PacketReceiveEvent</p> <p>Called when the server receives a packet from a connected client. </p> <ul> <li><code>#include &lt;endstone/event/server/packet_receive_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PacketReceiveEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#public-functions","title":"Public Functions","text":"Type Name PacketReceiveEvent (Player * player, const int packet_id, std::string_view payload, SocketAddress address, const int sub_client_id)  SocketAddress getAddress () constGets the network address to which this packet is being sent. virtual std::string getEventName () override const int getPacketId () constGets the ID of the packet. std::string_view getPayload () constGets the raw packet data excluding the header. Player * getPlayer () constReturns the player involved in this event. int getSubClientId () constGets the SubClient ID. void setPayload (std::string_view payload) Sets the raw packet data excluding the header."},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PacketReceiveEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-packetreceiveevent","title":"function PacketReceiveEvent","text":"<pre><code>inline endstone::PacketReceiveEvent::PacketReceiveEvent (\n    Player * player,\n    const int packet_id,\n    std::string_view payload,\n    SocketAddress address,\n    const int sub_client_id\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-getaddress","title":"function getAddress","text":"<p>Gets the network address to which this packet is being sent. <pre><code>inline SocketAddress endstone::PacketReceiveEvent::getAddress () const\n</code></pre></p> <p>Returns:</p> <p>The SocketAddress of the destination client. </p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PacketReceiveEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-getpacketid","title":"function getPacketId","text":"<p>Gets the ID of the packet. <pre><code>inline int endstone::PacketReceiveEvent::getPacketId () const\n</code></pre></p> <p>Returns:</p> <p>The packet ID. </p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-getpayload","title":"function getPayload","text":"<p>Gets the raw packet data excluding the header. <pre><code>inline std::string_view endstone::PacketReceiveEvent::getPayload () const\n</code></pre></p> <p>Returns:</p> <p>The packet payload data. </p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-getplayer","title":"function getPlayer","text":"<p>Returns the player involved in this event. <pre><code>inline Player * endstone::PacketReceiveEvent::getPlayer () const\n</code></pre></p> <p>Note:</p> <p>This may return nullptr if the packet is sent before the player completes the login process.</p> <p>Returns:</p> <p>Player who is involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-getsubclientid","title":"function getSubClientId","text":"<p>Gets the SubClient ID. <pre><code>inline int endstone::PacketReceiveEvent::getSubClientId () const\n</code></pre></p> <p>Note:</p> <p>Range is 0 to 3 (0 = primary client; 1-3 = split-screen clients).</p> <p>Returns:</p> <p>The SubClient ID. </p>"},{"location":"reference/cpp/classendstone_1_1PacketReceiveEvent/#function-setpayload","title":"function setPayload","text":"<p>Sets the raw packet data excluding the header. <pre><code>inline void endstone::PacketReceiveEvent::setPayload (\n    std::string_view payload\n) \n</code></pre></p> <p>Returns:</p> <p>The packet payload data. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/packet_receive_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/","title":"Class endstone::PacketSendEvent","text":"<p>ClassList &gt; endstone &gt; PacketSendEvent</p> <p>Called when the server sends a packet to a connected client. </p> <ul> <li><code>#include &lt;endstone/event/server/packet_send_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PacketSendEvent)  PacketSendEvent (Player * player, const int packet_id, std::string_view payload, SocketAddress address, const int sub_client_id)  SocketAddress getAddress () constGets the network address to which this packet is being sent. int getPacketId () constGets the ID of the packet. std::string_view getPayload () constGets the raw packet data excluding the header. Player * getPlayer () constReturns the player involved in this event. int getSubClientId () constGets the SubClient ID. void setPayload (std::string_view payload) Sets the raw packet data excluding the header."},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PacketSendEvent::ENDSTONE_EVENT (\n    PacketSendEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-packetsendevent","title":"function PacketSendEvent","text":"<pre><code>inline endstone::PacketSendEvent::PacketSendEvent (\n    Player * player,\n    const int packet_id,\n    std::string_view payload,\n    SocketAddress address,\n    const int sub_client_id\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-getaddress","title":"function getAddress","text":"<p>Gets the network address to which this packet is being sent. <pre><code>inline SocketAddress endstone::PacketSendEvent::getAddress () const\n</code></pre></p> <p>Returns:</p> <p>The SocketAddress of the destination client. </p>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-getpacketid","title":"function getPacketId","text":"<p>Gets the ID of the packet. <pre><code>inline int endstone::PacketSendEvent::getPacketId () const\n</code></pre></p> <p>Returns:</p> <p>The packet ID. </p>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-getpayload","title":"function getPayload","text":"<p>Gets the raw packet data excluding the header. <pre><code>inline std::string_view endstone::PacketSendEvent::getPayload () const\n</code></pre></p> <p>Returns:</p> <p>The packet payload data. </p>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-getplayer","title":"function getPlayer","text":"<p>Returns the player involved in this event. <pre><code>inline Player * endstone::PacketSendEvent::getPlayer () const\n</code></pre></p> <p>Note:</p> <p>This may return nullptr if the packet is sent before the player completes the login process.</p> <p>Returns:</p> <p>Player who is involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-getsubclientid","title":"function getSubClientId","text":"<p>Gets the SubClient ID. <pre><code>inline int endstone::PacketSendEvent::getSubClientId () const\n</code></pre></p> <p>Note:</p> <p>Range is 0 to 3 (0 = primary client; 1-3 = split-screen clients).</p> <p>Returns:</p> <p>The SubClient ID. </p>"},{"location":"reference/cpp/classendstone_1_1PacketSendEvent/#function-setpayload","title":"function setPayload","text":"<p>Sets the raw packet data excluding the header. <pre><code>inline void endstone::PacketSendEvent::setPayload (\n    std::string_view payload\n) \n</code></pre></p> <p>Returns:</p> <p>The packet payload data. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/packet_send_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Permissible/","title":"Class endstone::Permissible","text":"<p>ClassList &gt; endstone &gt; Permissible</p> <p>Represents an object that may become a server operator and can be assigned permissions. </p> <ul> <li><code>#include &lt;endstone/permissions/permissible.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::CommandSender</p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#public-functions","title":"Public Functions","text":"Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Permissible/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Permissible/#function-addattachment-12","title":"function addAttachment [\u00bd]","text":"<p>Adds a new PermissionAttachment with a single permission by name and value. <pre><code>virtual PermissionAttachment * endstone::Permissible::addAttachment (\n    Plugin &amp; plugin,\n    const std::string &amp; name,\n    bool value\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin responsible for this attachment, may not be null or disabled </li> <li><code>name</code> Name of the permission to attach </li> <li><code>value</code> Value of the permission </li> </ul> <p>Returns:</p> <p>The PermissionAttachment that was just created </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-addattachment-22","title":"function addAttachment [2/2]","text":"<p>Adds a new empty PermissionAttachment to this object. <pre><code>virtual PermissionAttachment * endstone::Permissible::addAttachment (\n    Plugin &amp; plugin\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin responsible for this attachment, may not be null or disabled </li> </ul> <p>Returns:</p> <p>The PermissionAttachment that was just created </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-ascommandsender","title":"function asCommandSender","text":"<p>Casts a Permissible asCommandSender . <pre><code>virtual CommandSender * endstone::Permissible::asCommandSender () const = 0\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a CommandSender </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-geteffectivepermissions","title":"function getEffectivePermissions","text":"<p>Gets a set containing all the permissions currently in effect by this object. <pre><code>virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; endstone::Permissible::getEffectivePermissions () const = 0\n</code></pre></p> <p>Returns:</p> <p>Set of currently effective permissions </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-getpermissionlevel","title":"function getPermissionLevel","text":"<p>Gets the permission level of this object. <pre><code>virtual PermissionLevel endstone::Permissible::getPermissionLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>The permission level </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-haspermission-12","title":"function hasPermission [\u00bd]","text":"<p>Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. <pre><code>virtual bool endstone::Permissible::hasPermission (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>Value of the permission </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-haspermission-22","title":"function hasPermission [2/2]","text":"<p>Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. <pre><code>virtual bool endstone::Permissible::hasPermission (\n    const Permission &amp; perm\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to get </li> </ul> <p>Returns:</p> <p>Value of the permission </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-ispermissionset-12","title":"function isPermissionSet [\u00bd]","text":"<p>Checks if this object contains an override for the specified permission, by fully qualified name. <pre><code>virtual bool endstone::Permissible::isPermissionSet (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>true if the permission is set, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-ispermissionset-22","title":"function isPermissionSet [2/2]","text":"<p>Checks if this object contains an override for the specified Permission . <pre><code>virtual bool endstone::Permissible::isPermissionSet (\n    const Permission &amp; perm\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to check </li> </ul> <p>Returns:</p> <p>true if the permission is set, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-recalculatepermissions","title":"function recalculatePermissions","text":"<p>Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. <pre><code>virtual void endstone::Permissible::recalculatePermissions () = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-removeattachment","title":"function removeAttachment","text":"<p>Removes the given PermissionAttachment from this object. <pre><code>virtual Result&lt; void &gt; endstone::Permissible::removeAttachment (\n    PermissionAttachment &amp; attachment\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>attachment</code> Attachment to remove </li> </ul> <p>Returns:</p> <p>true if the specified attachment was removed successfully, false when it isn't part of this object </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-permissible","title":"function ~Permissible","text":"<pre><code>virtual endstone::Permissible::~Permissible () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permissible.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Permission/","title":"Class endstone::Permission","text":"<p>ClassList &gt; endstone &gt; Permission</p> <p>Represents a unique permission that may be attached to a Permissible .</p> <ul> <li><code>#include &lt;endstone/permissions/permission.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Permission/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const PermissionDefault DefaultPermission   = <code>PermissionDefault::Operator</code>"},{"location":"reference/cpp/classendstone_1_1Permission/#public-functions","title":"Public Functions","text":"Type Name Permission (std::string name, std::string description=\"\", PermissionDefault default_value=DefaultPermission, std::unordered_map&lt; std::string, bool &gt; children={})  Permission * addParent (std::string name, bool value)  void addParent (Permission &amp; perm, bool value) const std::unordered_map&lt; std::string, bool &gt; &amp; getChildren ()  PermissionDefault getDefault () const std::string getDescription () const std::string getName () const std::unordered_set&lt; Permissible * &gt; getPermissibles () const void init (PluginManager &amp; plugin_manager)  void recalculatePermissibles ()  void setDefault (PermissionDefault value)  void setDescription (std::string value)"},{"location":"reference/cpp/classendstone_1_1Permission/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Permission/#variable-defaultpermission","title":"variable DefaultPermission","text":"<pre><code>const PermissionDefault endstone::Permission::DefaultPermission;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Permission/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Permission/#function-permission","title":"function Permission","text":"<pre><code>inline explicit endstone::Permission::Permission (\n    std::string name,\n    std::string description=\"\",\n    PermissionDefault default_value=DefaultPermission,\n    std::unordered_map&lt; std::string, bool &gt; children={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-addparent-12","title":"function addParent [\u00bd]","text":"<pre><code>inline Permission * endstone::Permission::addParent (\n    std::string name,\n    bool value\n) \n</code></pre> <p>Adds this permission to the specified parent permission.</p> <p>If the parent permission does not exist, it will be created and registered.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the parent permission </li> <li><code>value</code> The value to set this permission to </li> </ul> <p>Returns:</p> <p>Parent permission it created or loaded </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-addparent-22","title":"function addParent [2/2]","text":"<pre><code>inline void endstone::Permission::addParent (\n    Permission &amp; perm,\n    bool value\n) const\n</code></pre> <p>Adds this permission to the specified parent permission.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Parent permission to register with </li> <li><code>value</code> The value to set this permission to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getchildren","title":"function getChildren","text":"<pre><code>inline std::unordered_map&lt; std::string, bool &gt; &amp; endstone::Permission::getChildren () \n</code></pre> <p>Gets the children of this permission. If you change this map in any form, you must call recalculatePermissibles() to recalculate all Permissibles</p> <p>Returns:</p> <p>Permission children </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getdefault","title":"function getDefault","text":"<pre><code>inline PermissionDefault endstone::Permission::getDefault () const\n</code></pre> <p>Gets the default value of this permission.</p> <p>Returns:</p> <p>Default value of this permission. </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getdescription","title":"function getDescription","text":"<pre><code>inline std::string endstone::Permission::getDescription () const\n</code></pre> <p>Gets a brief description of this permission, may be empty</p> <p>Returns:</p> <p>Brief description of this permission </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getname","title":"function getName","text":"<pre><code>inline std::string endstone::Permission::getName () const\n</code></pre> <p>Returns the unique fully qualified name of this Permission</p> <p>Returns:</p> <p>Fully qualified name </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getpermissibles","title":"function getPermissibles","text":"<pre><code>inline std::unordered_set&lt; Permissible * &gt; endstone::Permission::getPermissibles () const\n</code></pre> <p>Gets a set containing every Permissible that has this permission. This set cannot be modified.</p> <p>Returns:</p> <p>Set containing permissibles with this permission </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-init","title":"function init","text":"<pre><code>inline void endstone::Permission::init (\n    PluginManager &amp; plugin_manager\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-recalculatepermissibles","title":"function recalculatePermissibles","text":"<pre><code>inline void endstone::Permission::recalculatePermissibles () \n</code></pre> <p>Recalculates all Permissibles that contain this permission.</p> <p>This should be called after modifying the children, and is automatically called after modifying the default value </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-setdefault","title":"function setDefault","text":"<pre><code>inline void endstone::Permission::setDefault (\n    PermissionDefault value\n) \n</code></pre> <p>Sets the default value of this permission.</p> <p>This will not be saved to disk, and is a temporary operation until the server reloads permissions. Changing this default will cause all Permissibles that contain this permission to recalculate their permissions</p> <p>Parameters:</p> <ul> <li><code>value</code> The new default to set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-setdescription","title":"function setDescription","text":"<pre><code>inline void endstone::Permission::setDescription (\n    std::string value\n) \n</code></pre> <p>Sets the description of this permission.</p> <p>This will not be saved to disk, and is a temporary operation until the server reloads permissions.</p> <p>Parameters:</p> <ul> <li><code>value</code> The new description to set </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/","title":"Class endstone::PermissionAttachment","text":"<p>ClassList &gt; endstone &gt; PermissionAttachment</p> <p>Holds information about a permission attachment on a Permissible object.</p> <ul> <li><code>#include &lt;endstone/permissions/permission_attachment.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#public-functions","title":"Public Functions","text":"Type Name PermissionAttachment (Plugin &amp; plugin, Permissible &amp; permissible)  Permissible &amp; getPermissible () const std::unordered_map&lt; std::string, bool &gt; getPermissions () const Plugin &amp; getPlugin () const PermissionRemovedExecutor getRemovalCallback () const bool remove ()  void setPermission (std::string name, bool value)  void setPermission (Permission &amp; perm, bool value)  void setRemovalCallback (PermissionRemovedExecutor ex)  void unsetPermission (std::string name)  void unsetPermission (Permission &amp; perm)"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-permissionattachment","title":"function PermissionAttachment","text":"<pre><code>inline endstone::PermissionAttachment::PermissionAttachment (\n    Plugin &amp; plugin,\n    Permissible &amp; permissible\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getpermissible","title":"function getPermissible","text":"<pre><code>inline Permissible &amp; endstone::PermissionAttachment::getPermissible () const\n</code></pre> <p>Gets the Permissible that this is attached to</p> <p>Returns:</p> <p>Permissible containing this attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getpermissions","title":"function getPermissions","text":"<pre><code>inline std::unordered_map&lt; std::string, bool &gt; endstone::PermissionAttachment::getPermissions () const\n</code></pre> <p>Gets a copy of all set permissions and values contained within this attachment. This map may be modified but will not affect the attachment, as it is a copy.</p> <p>Returns:</p> <p>Copy of all permissions and values expressed by this attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PermissionAttachment::getPlugin () const\n</code></pre> <p>Gets the plugin responsible for this attachment</p> <p>Returns:</p> <p>Plugin responsible for this permission attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getremovalcallback","title":"function getRemovalCallback","text":"<pre><code>inline PermissionRemovedExecutor endstone::PermissionAttachment::getRemovalCallback () const\n</code></pre> <p>Gets the class that was previously set to be called when this attachment was removed from a Permissible. May be empty.</p> <p>Returns:</p> <p>Executor to be called when this is removed </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-remove","title":"function remove","text":"<pre><code>inline bool endstone::PermissionAttachment::remove () \n</code></pre> <p>Removes this attachment from its registered Permissible</p> <p>Returns:</p> <p>true if the permissible was removed successfully, false if it did not exist </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-setpermission-12","title":"function setPermission [\u00bd]","text":"<pre><code>inline void endstone::PermissionAttachment::setPermission (\n    std::string name,\n    bool value\n) \n</code></pre> <p>Sets a permission to the given value, by its fully qualified name</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> <li><code>value</code> New value of the permission </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-setpermission-22","title":"function setPermission [2/2]","text":"<pre><code>inline void endstone::PermissionAttachment::setPermission (\n    Permission &amp; perm,\n    bool value\n) \n</code></pre> <p>Sets a permission to the given value</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to set </li> <li><code>value</code> New value of the permission </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-setremovalcallback","title":"function setRemovalCallback","text":"<pre><code>inline void endstone::PermissionAttachment::setRemovalCallback (\n    PermissionRemovedExecutor ex\n) \n</code></pre> <p>Sets an executor to be called for when this attachment is removed from a Permissible. May be empty.</p> <p>Parameters:</p> <ul> <li><code>ex</code> Executor to be called when this is removed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-unsetpermission-12","title":"function unsetPermission [\u00bd]","text":"<pre><code>inline void endstone::PermissionAttachment::unsetPermission (\n    std::string name\n) \n</code></pre> <p>Removes the specified permission from this attachment. If the permission does not exist in this attachment, nothing will happen.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-unsetpermission-22","title":"function unsetPermission [2/2]","text":"<pre><code>inline void endstone::PermissionAttachment::unsetPermission (\n    Permission &amp; perm\n) \n</code></pre> <p>Removes the specified permission from this attachment. If the permission does not exist in this attachment, nothing will happen.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to remove </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/","title":"Class endstone::PermissionAttachmentInfo","text":"<p>ClassList &gt; endstone &gt; PermissionAttachmentInfo</p> <p>Holds information on a permission and which PermissionAttachment provides it.</p> <ul> <li><code>#include &lt;endstone/permissions/permission_attachment_info.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#public-functions","title":"Public Functions","text":"Type Name PermissionAttachmentInfo (Permissible &amp; permissible, std::string permission, PermissionAttachment * attachment, bool value)  PermissionAttachment * getAttachment () const Permissible &amp; getPermissible () const std::string getPermission () const bool getValue () const"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-permissionattachmentinfo","title":"function PermissionAttachmentInfo","text":"<pre><code>inline endstone::PermissionAttachmentInfo::PermissionAttachmentInfo (\n    Permissible &amp; permissible,\n    std::string permission,\n    PermissionAttachment * attachment,\n    bool value\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getattachment","title":"function getAttachment","text":"<pre><code>inline PermissionAttachment * endstone::PermissionAttachmentInfo::getAttachment () const\n</code></pre> <p>Gets the attachment providing this permission. This may be null for default permissions (usually parent permissions).</p> <p>Returns:</p> <p>Attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getpermissible","title":"function getPermissible","text":"<pre><code>inline Permissible &amp; endstone::PermissionAttachmentInfo::getPermissible () const\n</code></pre> <p>Gets the permissible this is attached to</p> <p>Returns:</p> <p>Permissible this permission is for </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getpermission","title":"function getPermission","text":"<pre><code>inline std::string endstone::PermissionAttachmentInfo::getPermission () const\n</code></pre> <p>Gets the permission being set</p> <p>Returns:</p> <p>Name of the permission </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getvalue","title":"function getValue","text":"<pre><code>inline bool endstone::PermissionAttachmentInfo::getValue () const\n</code></pre> <p>Gets the value of this permission</p> <p>Returns:</p> <p>Value of the permission </p> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment_info.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Player/","title":"Class endstone::Player","text":"<p>ClassList &gt; endstone &gt; Player</p> <p>Represents a player. </p> <ul> <li><code>#include &lt;endstone/player.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Mob,  endstone::OfflinePlayer</p>"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions","title":"Public Functions","text":"Type Name virtual void closeForm () = 0Closes the forms that are currently open for the player. virtual SocketAddress getAddress () const = 0Gets the socket address of this player. virtual bool getAllowFlight () const = 0Determines if the Player is allowed to fly via jump key double-tap. virtual std::string getDeviceId () const = 0Gets the player's current device id. virtual std::string getDeviceOS () const = 0Gets the player's current device's operation system (OS). virtual Inventory &amp; getEnderChest () const = 0Get the player's EnderChest inventory. virtual int getExpLevel () const = 0Gets the players current experience level. virtual float getExpProgress () const = 0Gets the players current experience progress towards the next level. virtual float getFlySpeed () const = 0Gets the current allowed speed that a client can fly. virtual GameMode getGameMode () const = 0Gets this player's current GameMode. virtual std::string getGameVersion () const = 0Gets the player's current game version. virtual PlayerInventory &amp; getInventory () const = 0Get the player's inventory. virtual std::string getLocale () const = 0Gets the player's current locale. virtual std::string getName () override const = 0Returns the name of this player. virtual std::chrono::milliseconds getPing () const = 0Gets the player's average ping. virtual Scoreboard &amp; getScoreboard () const = 0Gets the Scoreboard displayed to this player. virtual Skin getSkin () const = 0Gets the player's skin. virtual int getTotalExp () const = 0Gets the players total experience points. virtual float getWalkSpeed () const = 0Gets the current allowed speed that a client can walk. virtual std::string getXuid () const = 0Returns the Xbox User ID (XUID) of this player. virtual void giveExp (int amount) = 0Gives the player the amount of experience specified. virtual void giveExpLevels (int amount) = 0Gives the player the amount of experience levels specified. virtual bool isFlying () const = 0Checks to see if this player is currently flying or not. virtual bool isOp () const = 0Checks if this player is a server operator. virtual bool isSneaking () const = 0Returns if the player is in sneak mode. virtual bool isSprinting () const = 0Gets whether the player is sprinting or not. virtual void kick (std::string message) const = 0Kicks player with custom kick message. virtual bool performCommand (std::string command) const = 0Makes the player perform the given command. virtual void playSound (Location location, std::string sound, float volume, float pitch) = 0Play a sound for a player at the location. virtual void resetTitle () const = 0Resets the title displayed to the player. This will clear the displayed title / subtitle and reset timings to their default values. virtual void sendForm (FormVariant form) = 0Sends a form to the player. virtual void sendPacket (int packet_id, std::string_view payload) const = 0Sends a packet to the player. virtual void sendPopup (std::string message) const = 0Sends this player a popup message. virtual void sendTip (std::string message) const = 0Sends this player a tip message. virtual void sendTitle (std::string title, std::string subtitle) const = 0Sends a title and a subtitle message to the player. If they are empty strings, the display will be updated as such. The titles will be displayed with the default timings. virtual void sendTitle (std::string title, std::string subtitle, int fade_in, int stay, int fade_out) const = 0Sends a title and a subtitle message to the player. If they are empty strings, the display will be updated as such. virtual void sendToast (std::string title, std::string content) const = 0Sends this player a toast notification. virtual void setAllowFlight (bool flight) = 0Sets if the Player is allowed to fly via jump key double-tap. virtual Result&lt; void &gt; setExpLevel (int level) = 0Sets the players current experience level. virtual Result&lt; void &gt; setExpProgress (float progress) = 0Sets the players current experience progress towards the next level. virtual void setFlySpeed (float value) const = 0 virtual Result&lt; void &gt; setFlying (bool value) = 0Makes this player start or stop flying. virtual void setGameMode (GameMode mode) = 0Sets this player's current GameMode. virtual void setOp (bool value) = 0Sets the operator status of this player. virtual void setScoreboard (Scoreboard &amp; scoreboard) = 0 virtual void setSneaking (bool sneak) = 0Sets the sneak mode of the player. virtual void setSprinting (bool sprinting) = 0Sets whether the player is sprinting or not. virtual void setWalkSpeed (float value) const = 0 virtual void spawnParticle (std::string name, Location location) const = 0Spawns the particle at the target location. virtual void spawnParticle (std::string name, float x, float y, float z) const = 0Spawns the particle at the target location. virtual void spawnParticle (std::string name, Location location, std::optional&lt; std::string &gt; molang_variables_json) const = 0Spawns the particle at the target location. virtual void spawnParticle (std::string name, float x, float y, float z, std::optional&lt; std::string &gt; molang_variables_json) const = 0Spawns the particle at the target location. virtual void stopAllSounds () = 0Stop all sounds from playing. virtual void stopSound (std::string sound) = 0Stop the specified sound from playing. virtual void transfer (std::string host, int port) const = 0Transfers the player to another server. virtual void updateCommands () const = 0Send the list of commands to the client."},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstonemob","title":"Public Functions inherited from endstone::Mob","text":"<p>See endstone::Mob</p> Type Name virtual bool isGliding () const = 0Checks to see if an actor is gliding, such as using an Elytra."},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstoneactor","title":"Public Functions inherited from endstone::Actor","text":"<p>See endstone::Actor</p> Type Name virtual bool addScoreboardTag (std::string tag) const = 0Adds a tag to this actor. virtual Item * asItem () const = 0Gets an Actor asItem . virtual Mob * asMob () const = 0Gets an Actor asMob . virtual Dimension &amp; getDimension () const = 0 virtual int getHealth () const = 0Gets the entity's health from 0 to its max possible value, where 0 is dead. virtual std::int64_t getId () const = 0Returns a unique id for this actor. virtual Level &amp; getLevel () const = 0 virtual Location getLocation () const = 0 virtual int getMaxHealth () const = 0Gets the maximum health this entity has. virtual std::string getNameTag () const = 0Gets the current name tag of the actor. virtual std::uint64_t getRuntimeId () const = 0 virtual std::string getScoreTag () const = 0Gets the current score tag of the actor. virtual std::vector&lt; std::string &gt; getScoreboardTags () const = 0Returns a list of scoreboard tags for this actor. virtual std::string getType () const = 0Get the type of the actor. virtual Vector getVelocity () const = 0 virtual bool isDead () const = 0Returns true if this actor has been marked for removal. virtual bool isInLava () const = 0 virtual bool isInWater () const = 0 virtual bool isNameTagAlwaysVisible () const = 0Checks if the actor's name tag is always visible. virtual bool isNameTagVisible () const = 0Checks if the actor's name tag is currently visible. virtual bool isOnGround () const = 0 virtual bool isValid () const = 0 virtual void remove () = 0 virtual bool removeScoreboardTag (std::string tag) const = 0Removes a given tag from this actor. virtual Result&lt; void &gt; setHealth (int health) const = 0 virtual void setNameTag (std::string name) = 0Sets the name tag for the actor. virtual void setNameTagAlwaysVisible (bool visible) = 0Sets whether the actor's name tag should always be visible. virtual void setNameTagVisible (bool visible) = 0Sets if the actor's name tag is visible or not. virtual void setRotation (float yaw, float pitch) = 0 virtual void setScoreTag (std::string score) = 0Sets the score tag for the actor. virtual void teleport (Location location) = 0 virtual void teleport (Actor &amp; target) = 0"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name virtual Actor * asActor () const = 0Gets a CommandSender asActor . virtual BlockCommandSender * asBlock () const = 0Gets a CommandSender asBlockCommandSender . virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual ConsoleCommandSender * asConsole () const = 0Gets a CommandSender asConsoleCommandSender . virtual Player * asPlayer () const = 0Gets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const Message &amp; message) const = 0Sends this sender a error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const Message &amp; message) const = 0Sends this sender a message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0Adds a new PermissionAttachment with a single permission by name and value. virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0Adds a new empty PermissionAttachment to this object. virtual CommandSender * asCommandSender () const = 0Casts a Permissible asCommandSender . virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0Gets a set containing all the permissions currently in effect by this object. virtual PermissionLevel getPermissionLevel () const = 0Gets the permission level of this object. virtual bool hasPermission (std::string name) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool hasPermission (const Permission &amp; perm) const = 0Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned. virtual bool isPermissionSet (std::string name) const = 0Checks if this object contains an override for the specified permission, by fully qualified name. virtual bool isPermissionSet (const Permission &amp; perm) const = 0Checks if this object contains an override for the specified Permission . virtual void recalculatePermissions () = 0Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. virtual Result&lt; void &gt; removeAttachment (PermissionAttachment &amp; attachment) = 0Removes the given PermissionAttachment from this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstoneofflineplayer","title":"Public Functions inherited from endstone::OfflinePlayer","text":"<p>See endstone::OfflinePlayer</p> Type Name virtual std::string getName () const = 0Returns the name of this player. virtual UUID getUniqueId () const = 0Returns the UUID of this player. virtual ~OfflinePlayer () = default"},{"location":"reference/cpp/classendstone_1_1Player/#protected-types","title":"Protected Types","text":"Type Name typedef std::variant&lt; MessageForm, ActionForm, ModalForm &gt; FormVariant"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Player/#function-closeform","title":"function closeForm","text":"<p>Closes the forms that are currently open for the player. <pre><code>virtual void endstone::Player::closeForm () = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getaddress","title":"function getAddress","text":"<p>Gets the socket address of this player. <pre><code>virtual SocketAddress endstone::Player::getAddress () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's socket address </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getallowflight","title":"function getAllowFlight","text":"<p>Determines if the Player is allowed to fly via jump key double-tap. <pre><code>virtual bool endstone::Player::getAllowFlight () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if the player is allowed to fly. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getdeviceid","title":"function getDeviceId","text":"<p>Gets the player's current device id. <pre><code>virtual std::string endstone::Player::getDeviceId () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's device id </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getdeviceos","title":"function getDeviceOS","text":"<p>Gets the player's current device's operation system (OS). <pre><code>virtual std::string endstone::Player::getDeviceOS () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's device OS </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getenderchest","title":"function getEnderChest","text":"<p>Get the player's EnderChest inventory. <pre><code>virtual Inventory &amp; endstone::Player::getEnderChest () const = 0\n</code></pre></p> <p>Returns:</p> <p>The EnderChest of the player </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getexplevel","title":"function getExpLevel","text":"<p>Gets the players current experience level. <pre><code>virtual int endstone::Player::getExpLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>Current experience level </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getexpprogress","title":"function getExpProgress","text":"<p>Gets the players current experience progress towards the next level. <pre><code>virtual float endstone::Player::getExpProgress () const = 0\n</code></pre></p> <p>This is a percentage value. 0.0 is \"no progress\" and 1.0 is \"next level\".</p> <p>Returns:</p> <p>Current experience points </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getflyspeed","title":"function getFlySpeed","text":"<p>Gets the current allowed speed that a client can fly. <pre><code>virtual float endstone::Player::getFlySpeed () const = 0\n</code></pre></p> <p>Returns:</p> <p>The current allowed speed, default is 0.05. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getgamemode","title":"function getGameMode","text":"<p>Gets this player's current GameMode. <pre><code>virtual GameMode endstone::Player::getGameMode () const = 0\n</code></pre></p> <p>Returns:</p> <p>Current game mode </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getgameversion","title":"function getGameVersion","text":"<p>Gets the player's current game version. <pre><code>virtual std::string endstone::Player::getGameVersion () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's game version </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getinventory","title":"function getInventory","text":"<p>Get the player's inventory. <pre><code>virtual PlayerInventory &amp; endstone::Player::getInventory () const = 0\n</code></pre></p> <p>Returns:</p> <p>The inventory of the player, this also contains the armor slots. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getlocale","title":"function getLocale","text":"<p>Gets the player's current locale. <pre><code>virtual std::string endstone::Player::getLocale () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's locale </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getname","title":"function getName","text":"<p>Returns the name of this player. <pre><code>virtual std::string endstone::Player::getName () override const = 0\n</code></pre></p> <p>Returns:</p> <p>Player name or null if we have not seen a name for this player yet </p> <p>Implements endstone::CommandSender::getName</p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getping","title":"function getPing","text":"<p>Gets the player's average ping. <pre><code>virtual std::chrono::milliseconds endstone::Player::getPing () const = 0\n</code></pre></p> <p>Returns:</p> <p>player ping </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getscoreboard","title":"function getScoreboard","text":"<p>Gets the Scoreboard displayed to this player. <pre><code>virtual Scoreboard &amp; endstone::Player::getScoreboard () const = 0\n</code></pre></p> <p>Returns:</p> <p>The current scoreboard seen by this player </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getskin","title":"function getSkin","text":"<p>Gets the player's skin. <pre><code>virtual Skin endstone::Player::getSkin () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's skin </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-gettotalexp","title":"function getTotalExp","text":"<p>Gets the players total experience points. <pre><code>virtual int endstone::Player::getTotalExp () const = 0\n</code></pre></p> <p>This refers to the total amount of experience the player has collected over time and is not currently displayed to the client.</p> <p>Returns:</p> <p>Current total experience points </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getwalkspeed","title":"function getWalkSpeed","text":"<p>Gets the current allowed speed that a client can walk. <pre><code>virtual float endstone::Player::getWalkSpeed () const = 0\n</code></pre></p> <p>Returns:</p> <p>The current allowed speed, default is 0.10. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getxuid","title":"function getXuid","text":"<p>Returns the Xbox User ID (XUID) of this player. <pre><code>virtual std::string endstone::Player::getXuid () const = 0\n</code></pre></p> <p>Returns:</p> <p>Player XUID </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-giveexp","title":"function giveExp","text":"<p>Gives the player the amount of experience specified. <pre><code>virtual void endstone::Player::giveExp (\n    int amount\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>amount</code> Exp amount to give </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-giveexplevels","title":"function giveExpLevels","text":"<p>Gives the player the amount of experience levels specified. <pre><code>virtual void endstone::Player::giveExpLevels (\n    int amount\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>amount</code> amount of experience levels to give or take </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-isflying","title":"function isFlying","text":"<p>Checks to see if this player is currently flying or not. <pre><code>virtual bool endstone::Player::isFlying () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if the player is flying, else false. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-isop","title":"function isOp","text":"<p>Checks if this player is a server operator. <pre><code>virtual bool endstone::Player::isOp () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if this is an operator, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-issneaking","title":"function isSneaking","text":"<p>Returns if the player is in sneak mode. <pre><code>virtual bool endstone::Player::isSneaking () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if player is in sneak mode </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-issprinting","title":"function isSprinting","text":"<p>Gets whether the player is sprinting or not. <pre><code>virtual bool endstone::Player::isSprinting () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if player is sprinting. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-kick","title":"function kick","text":"<p>Kicks player with custom kick message. <pre><code>virtual void endstone::Player::kick (\n    std::string message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> kick message </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-performcommand","title":"function performCommand","text":"<p>Makes the player perform the given command. <pre><code>virtual bool endstone::Player::performCommand (\n    std::string command\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>command</code> Command to perform </li> </ul> <p>Returns:</p> <p>true if the command was successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-playsound","title":"function playSound","text":"<p>Play a sound for a player at the location. <pre><code>virtual void endstone::Player::playSound (\n    Location location,\n    std::string sound,\n    float volume,\n    float pitch\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>location</code> The location to play the sound </li> <li><code>sound</code> The internal sound name to play </li> <li><code>volume</code> The volume of the sound </li> <li><code>pitch</code> The pitch of the sound </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-resettitle","title":"function resetTitle","text":"<p>Resets the title displayed to the player. This will clear the displayed title / subtitle and reset timings to their default values. <pre><code>virtual void endstone::Player::resetTitle () const = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendform","title":"function sendForm","text":"<p>Sends a form to the player. <pre><code>virtual void endstone::Player::sendForm (\n    FormVariant form\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>form</code> The form to send </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendpacket","title":"function sendPacket","text":"<p>Sends a packet to the player. <pre><code>virtual void endstone::Player::sendPacket (\n    int packet_id,\n    std::string_view payload\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>packet_id</code> The packet ID to be sent. </li> <li><code>payload</code> The payload of the packet to be transmitted. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendpopup","title":"function sendPopup","text":"<p>Sends this player a popup message. <pre><code>virtual void endstone::Player::sendPopup (\n    std::string message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendtip","title":"function sendTip","text":"<p>Sends this player a tip message. <pre><code>virtual void endstone::Player::sendTip (\n    std::string message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendtitle-12","title":"function sendTitle [\u00bd]","text":"<p>Sends a title and a subtitle message to the player. If they are empty strings, the display will be updated as such. The titles will be displayed with the default timings. <pre><code>virtual void endstone::Player::sendTitle (\n    std::string title,\n    std::string subtitle\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> Title text </li> <li><code>subtitle</code> Subtitle text </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendtitle-22","title":"function sendTitle [2/2]","text":"<p>Sends a title and a subtitle message to the player. If they are empty strings, the display will be updated as such. <pre><code>virtual void endstone::Player::sendTitle (\n    std::string title,\n    std::string subtitle,\n    int fade_in,\n    int stay,\n    int fade_out\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> Title text </li> <li><code>subtitle</code> Subtitle text </li> <li><code>fade_in</code> time in ticks for titles to fade in. Defaults to 10. </li> <li><code>stay</code> time in ticks for titles to stay. Defaults to 70. </li> <li><code>fade_out</code> time in ticks for titles to fade out. Defaults to 20. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendtoast","title":"function sendToast","text":"<p>Sends this player a toast notification. <pre><code>virtual void endstone::Player::sendToast (\n    std::string title,\n    std::string content\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> The title of the toast notification. </li> <li><code>content</code> The content of the toast notification. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setallowflight","title":"function setAllowFlight","text":"<p>Sets if the Player is allowed to fly via jump key double-tap. <pre><code>virtual void endstone::Player::setAllowFlight (\n    bool flight\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>flight</code> If flight should be allowed. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setexplevel","title":"function setExpLevel","text":"<p>Sets the players current experience level. <pre><code>virtual Result&lt; void &gt; endstone::Player::setExpLevel (\n    int level\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> New experience level </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setexpprogress","title":"function setExpProgress","text":"<p>Sets the players current experience progress towards the next level. <pre><code>virtual Result&lt; void &gt; endstone::Player::setExpProgress (\n    float progress\n) = 0\n</code></pre></p> <p>This is a percentage value. 0.0 is \"no progress\" and 1.0 is \"next level\".</p> <p>Parameters:</p> <ul> <li><code>progress</code> New experience progress </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setflyspeed","title":"function setFlySpeed","text":"<pre><code>virtual void endstone::Player::setFlySpeed (\n    float value\n) const = 0\n</code></pre> <p>Sets the speed at which a client will fly.</p> <p>Parameters:</p> <ul> <li><code>value</code> The new speed. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setflying","title":"function setFlying","text":"<p>Makes this player start or stop flying. <pre><code>virtual Result&lt; void &gt; endstone::Player::setFlying (\n    bool value\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>value</code> True to fly. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setgamemode","title":"function setGameMode","text":"<p>Sets this player's current GameMode. <pre><code>virtual void endstone::Player::setGameMode (\n    GameMode mode\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>mode</code> New game mode </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setop","title":"function setOp","text":"<p>Sets the operator status of this player. <pre><code>virtual void endstone::Player::setOp (\n    bool value\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>value</code> New operator value </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setscoreboard","title":"function setScoreboard","text":"<pre><code>virtual void endstone::Player::setScoreboard (\n    Scoreboard &amp; scoreboard\n) = 0\n</code></pre> <p>@breif Sets the player's visible Scoreboard.</p> <p>Parameters:</p> <ul> <li><code>scoreboard</code> New Scoreboard for the player </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setsneaking","title":"function setSneaking","text":"<p>Sets the sneak mode of the player. <pre><code>virtual void endstone::Player::setSneaking (\n    bool sneak\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>sneak</code> true if player should appear sneaking </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setsprinting","title":"function setSprinting","text":"<p>Sets whether the player is sprinting or not. <pre><code>virtual void endstone::Player::setSprinting (\n    bool sprinting\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>sprinting</code> true if the player should be sprinting </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setwalkspeed","title":"function setWalkSpeed","text":"<pre><code>virtual void endstone::Player::setWalkSpeed (\n    float value\n) const = 0\n</code></pre> <p>Sets the speed at which a client will walk.</p> <p>Parameters:</p> <ul> <li><code>value</code> The new speed. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-spawnparticle-14","title":"function spawnParticle [\u00bc]","text":"<p>Spawns the particle at the target location. <pre><code>virtual void endstone::Player::spawnParticle (\n    std::string name,\n    Location location\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the particle effect to spawn </li> <li><code>location</code> the location to spawn at </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-spawnparticle-24","title":"function spawnParticle [2/4]","text":"<p>Spawns the particle at the target location. <pre><code>virtual void endstone::Player::spawnParticle (\n    std::string name,\n    float x,\n    float y,\n    float z\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the particle effect to spawn </li> <li><code>x</code> the position on the x axis to spawn at </li> <li><code>y</code> the position on the y axis to spawn at </li> <li><code>z</code> the position on the z axis to spawn at </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-spawnparticle-34","title":"function spawnParticle [\u00be]","text":"<p>Spawns the particle at the target location. <pre><code>virtual void endstone::Player::spawnParticle (\n    std::string name,\n    Location location,\n    std::optional&lt; std::string &gt; molang_variables_json\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the particle effect to spawn </li> <li><code>location</code> the location to spawn at </li> <li><code>molang_variables_json</code> the customizable molang variables that can be adjusted for this particle, in json </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-spawnparticle-44","title":"function spawnParticle [4/4]","text":"<p>Spawns the particle at the target location. <pre><code>virtual void endstone::Player::spawnParticle (\n    std::string name,\n    float x,\n    float y,\n    float z,\n    std::optional&lt; std::string &gt; molang_variables_json\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the particle effect to spawn </li> <li><code>x</code> the position on the x axis to spawn at </li> <li><code>y</code> the position on the y axis to spawn at </li> <li><code>z</code> the position on the z axis to spawn at </li> <li><code>molang_variables_json</code> the customizable molang variables that can be adjusted for this particle, in json </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-stopallsounds","title":"function stopAllSounds","text":"<p>Stop all sounds from playing. <pre><code>virtual void endstone::Player::stopAllSounds () = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-stopsound","title":"function stopSound","text":"<p>Stop the specified sound from playing. <pre><code>virtual void endstone::Player::stopSound (\n    std::string sound\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>sound</code> the sound to stop </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-transfer","title":"function transfer","text":"<p>Transfers the player to another server. <pre><code>virtual void endstone::Player::transfer (\n    std::string host,\n    int port\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>host</code> Server address to transfer the player to. </li> <li><code>port</code> Server port to transfer the player to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-updatecommands","title":"function updateCommands","text":"<p>Send the list of commands to the client. <pre><code>virtual void endstone::Player::updateCommands () const = 0\n</code></pre></p> <p>Generally useful to ensure the client has a complete list of commands after permission changes are done. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#protected-types-documentation","title":"Protected Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Player/#typedef-formvariant","title":"typedef FormVariant","text":"<pre><code>using endstone::Player::FormVariant =  std::variant&lt;MessageForm, ActionForm, ModalForm&gt;;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/player.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/","title":"Class endstone::PlayerBanEntry","text":"<p>ClassList &gt; endstone &gt; PlayerBanEntry</p> <p>Inherits the following classes: endstone::BanEntry</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#public-types-inherited-from-endstonebanentry","title":"Public Types inherited from endstone::BanEntry","text":"<p>See endstone::BanEntry</p> Type Name typedef std::chrono::system_clock::time_point Date"},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#public-static-attributes-inherited-from-endstonebanentry","title":"Public Static Attributes inherited from endstone::BanEntry","text":"<p>See endstone::BanEntry</p> Type Name const std::string DateFormat   = <code>\"%FT%T%Ez\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#public-functions","title":"Public Functions","text":"Type Name PlayerBanEntry (std::string name, std::optional&lt; UUID &gt; uuid=std::nullopt, std::optional&lt; std::string &gt; xuid=std::nullopt)  std::string getName () constGets the banned player's name. std::optional&lt; UUID &gt; getUniqueId () constGets the banned player's unique id. std::optional&lt; std::string &gt; getXuid () constGets the banned player's xbox user id (xuid)."},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#public-functions-inherited-from-endstonebanentry","title":"Public Functions inherited from endstone::BanEntry","text":"<p>See endstone::BanEntry</p> Type Name Date getCreated () constGets the date this ban entry was created. std::optional&lt; Date &gt; getExpiration () constGets the date this ban expires on, or std::nullopt for no defined end date. std::string getReason () constGets the reason for this ban. std::string getSource () constGets the source of this ban. void setCreated (Date created) Sets the date this ban entry was created. void setExpiration (std::optional&lt; Date &gt; expiration) Sets the date this ban expires on. std::nullopt values are considered \"infinite\" bans. void setReason (std::string reason) Sets the reason for this ban. void setSource (std::string source) Sets the source of this ban."},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#function-playerbanentry","title":"function PlayerBanEntry","text":"<pre><code>inline explicit endstone::PlayerBanEntry::PlayerBanEntry (\n    std::string name,\n    std::optional&lt; UUID &gt; uuid=std::nullopt,\n    std::optional&lt; std::string &gt; xuid=std::nullopt\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#function-getname","title":"function getName","text":"<p>Gets the banned player's name. <pre><code>inline std::string endstone::PlayerBanEntry::getName () const\n</code></pre></p> <p>Returns:</p> <p>the player name </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#function-getuniqueid","title":"function getUniqueId","text":"<p>Gets the banned player's unique id. <pre><code>inline std::optional&lt; UUID &gt; endstone::PlayerBanEntry::getUniqueId () const\n</code></pre></p> <p>Returns:</p> <p>the player's unique id, or std::nullopt if not available </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanEntry/#function-getxuid","title":"function getXuid","text":"<p>Gets the banned player's xbox user id (xuid). <pre><code>inline std::optional&lt; std::string &gt; endstone::PlayerBanEntry::getXuid () const\n</code></pre></p> <p>Returns:</p> <p>the player's xbox user id (xuid), or std::nullopt if not available </p> <p>The documentation for this class was generated from the following file <code>include/endstone/ban/player_ban_entry.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/","title":"Class endstone::PlayerBanList","text":"<p>ClassList &gt; endstone &gt; PlayerBanList</p> <p>Represents a ban list, containing banned players. </p> <ul> <li><code>#include &lt;endstone/ban/player_ban_list.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::BanList</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#public-functions","title":"Public Functions","text":"Type Name virtual PlayerBanEntry &amp; addBan (std::string name, std::optional&lt; std::string &gt; reason, std::optional&lt; BanEntry::Date &gt; expires, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual PlayerBanEntry &amp; addBan (std::string name, std::optional&lt; UUID &gt; uuid, std::optional&lt; std::string &gt; xuid, std::optional&lt; std::string &gt; reason, std::optional&lt; BanEntry::Date &gt; expires, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual PlayerBanEntry &amp; addBan (std::string name, std::optional&lt; std::string &gt; reason, std::chrono::seconds duration, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual PlayerBanEntry &amp; addBan (std::string name, std::optional&lt; UUID &gt; uuid, std::optional&lt; std::string &gt; xuid, std::optional&lt; std::string &gt; reason, std::chrono::seconds duration, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual const PlayerBanEntry * getBanEntry (std::string name) const = 0Gets a BanEntry by player name. virtual PlayerBanEntry * getBanEntry (std::string name) = 0Gets a BanEntry by player name. virtual const PlayerBanEntry * getBanEntry (std::string name, std::optional&lt; UUID &gt; uuid, std::optional&lt; std::string &gt; xuid) const = 0Gets a BanEntry by player name,UUID , or XUID. virtual PlayerBanEntry * getBanEntry (std::string name, std::optional&lt; UUID &gt; uuid, std::optional&lt; std::string &gt; xuid) = 0Gets a BanEntry by player name,UUID , or XUID. virtual std::vector&lt; const PlayerBanEntry * &gt; getEntries () const = 0Gets a vector containing pointers to every BanEntry in this list. virtual std::vector&lt; PlayerBanEntry * &gt; getEntries () = 0Gets a vector containing pointers to every BanEntry in this list. virtual bool isBanned (std::string name) const = 0Checks if a BanEntry exists for the target, indicating an active ban status. virtual bool isBanned (std::string name, std::optional&lt; UUID &gt; uuid, std::optional&lt; std::string &gt; xuid) const = 0Checks if a BanEntry exists for the target, indicating an active ban status. virtual void removeBan (std::string name) = 0Removes the specified player from this list, therefore indicating a \"not banned\" status. virtual void removeBan (std::string name, std::optional&lt; UUID &gt; uuid, std::optional&lt; std::string &gt; xuid) = 0Removes the specified player from this list, therefore indicating a \"not banned\" status. virtual ~PlayerBanList () = default"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#public-functions-inherited-from-endstonebanlist","title":"Public Functions inherited from endstone::BanList","text":"<p>See endstone::BanList</p> Type Name virtual T &amp; addBan (std::string target, std::optional&lt; std::string &gt; reason, std::optional&lt; BanEntry::Date &gt; expires, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual T &amp; addBan (std::string target, std::optional&lt; std::string &gt; reason, std::chrono::seconds duration, std::optional&lt; std::string &gt; source) = 0Adds a ban to this list. If a previous ban exists, this will update the previous entry. virtual const T * getBanEntry (std::string target) const = 0Gets a BanEntry by target. virtual T * getBanEntry (std::string target) = 0Gets a BanEntry by target. virtual std::vector&lt; const T * &gt; getEntries () const = 0Gets a vector containing pointers to every BanEntry in this list. virtual std::vector&lt; T * &gt; getEntries () = 0Gets a vector containing pointers to every BanEntry in this list. virtual bool isBanned (std::string target) const = 0Checks if a BanEntry exists for the target, indicating an active ban status. virtual void removeBan (std::string target) = 0Removes the specified target from this list, therefore indicating a \"not banned\" status. virtual ~BanList () = default"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-addban-14","title":"function addBan [\u00bc]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual PlayerBanEntry &amp; endstone::PlayerBanList::addBan (\n    std::string name,\n    std::optional&lt; std::string &gt; reason,\n    std::optional&lt; BanEntry::Date &gt; expires,\n    std::optional&lt; std::string &gt; source\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The name of the target. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>expires</code> The date for the ban's expiration (unban), or std::nullopt to imply forever. </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p> <p>Implements endstone::BanList::addBan</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-addban-24","title":"function addBan [2/4]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual PlayerBanEntry &amp; endstone::PlayerBanList::addBan (\n    std::string name,\n    std::optional&lt; UUID &gt; uuid,\n    std::optional&lt; std::string &gt; xuid,\n    std::optional&lt; std::string &gt; reason,\n    std::optional&lt; BanEntry::Date &gt; expires,\n    std::optional&lt; std::string &gt; source\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The name of the target. </li> <li><code>uuid</code> The UUID of the target, std::nullopt if not used. </li> <li><code>xuid</code> The XUID of the target, std::nullopt if not used. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>expires</code> The date for the ban's expiration (unban), or std::nullopt to imply forever. </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-addban-34","title":"function addBan [\u00be]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual PlayerBanEntry &amp; endstone::PlayerBanList::addBan (\n    std::string name,\n    std::optional&lt; std::string &gt; reason,\n    std::chrono::seconds duration,\n    std::optional&lt; std::string &gt; source\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The name of the target. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>duration</code> The duration of the ban </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p> <p>Implements endstone::BanList::addBan</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-addban-44","title":"function addBan [4/4]","text":"<p>Adds a ban to this list. If a previous ban exists, this will update the previous entry. <pre><code>virtual PlayerBanEntry &amp; endstone::PlayerBanList::addBan (\n    std::string name,\n    std::optional&lt; UUID &gt; uuid,\n    std::optional&lt; std::string &gt; xuid,\n    std::optional&lt; std::string &gt; reason,\n    std::chrono::seconds duration,\n    std::optional&lt; std::string &gt; source\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The name of the target. </li> <li><code>uuid</code> The UUID of the target, std::nullopt if not used. </li> <li><code>xuid</code> The XUID of the target, std::nullopt if not used. </li> <li><code>reason</code> The reason for the ban, std::nullopt indicates implementation default. </li> <li><code>duration</code> The duration of the ban </li> <li><code>source</code> The source of the ban, std::nullopt indicates implementation default. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry&amp; The entry for the newly created ban, or the entry for the (updated) previous ban. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-getbanentry-14","title":"function getBanEntry [\u00bc]","text":"<p>Gets a BanEntry by player name. <pre><code>virtual const PlayerBanEntry * endstone::PlayerBanList::getBanEntry (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to search for. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry* The corresponding entry, or nullptr if none found. </p> <p>Implements endstone::BanList::getBanEntry</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-getbanentry-24","title":"function getBanEntry [2/4]","text":"<p>Gets a BanEntry by player name. <pre><code>virtual PlayerBanEntry * endstone::PlayerBanList::getBanEntry (\n    std::string name\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to search for. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry* The corresponding entry, or nullptr if none found. </p> <p>Implements endstone::BanList::getBanEntry</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-getbanentry-34","title":"function getBanEntry [\u00be]","text":"<p>Gets a BanEntry by player name,UUID , or XUID. <pre><code>virtual const PlayerBanEntry * endstone::PlayerBanList::getBanEntry (\n    std::string name,\n    std::optional&lt; UUID &gt; uuid,\n    std::optional&lt; std::string &gt; xuid\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to search for. </li> <li><code>uuid</code> The UUID of the player to search for, std::nullopt if not used. </li> <li><code>xuid</code> The XUID of the player to search for, std::nullopt if not used. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry* The corresponding entry, or nullptr if none found. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-getbanentry-44","title":"function getBanEntry [4/4]","text":"<p>Gets a BanEntry by player name,UUID , or XUID. <pre><code>virtual PlayerBanEntry * endstone::PlayerBanList::getBanEntry (\n    std::string name,\n    std::optional&lt; UUID &gt; uuid,\n    std::optional&lt; std::string &gt; xuid\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to search for. </li> <li><code>uuid</code> The UUID of the player to search for, std::nullopt if not used. </li> <li><code>xuid</code> The XUID of the player to search for, std::nullopt if not used. </li> </ul> <p>Returns:</p> <p>PlayerBanEntry* The corresponding entry, or nullptr if none found. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-getentries-12","title":"function getEntries [\u00bd]","text":"<p>Gets a vector containing pointers to every BanEntry in this list. <pre><code>virtual std::vector&lt; const PlayerBanEntry * &gt; endstone::PlayerBanList::getEntries () const = 0\n</code></pre></p> <p>Returns:</p> <p>A vector containing pointers to every entry tracked by this list. </p> <p>Implements endstone::BanList::getEntries</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-getentries-22","title":"function getEntries [2/2]","text":"<p>Gets a vector containing pointers to every BanEntry in this list. <pre><code>virtual std::vector&lt; PlayerBanEntry * &gt; endstone::PlayerBanList::getEntries () = 0\n</code></pre></p> <p>Returns:</p> <p>A vector containing pointers to every entry tracked by this list. </p> <p>Implements endstone::BanList::getEntries</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-isbanned-12","title":"function isBanned [\u00bd]","text":"<p>Checks if a BanEntry exists for the target, indicating an active ban status. <pre><code>virtual bool endstone::PlayerBanList::isBanned (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to find. </li> </ul> <p>Returns:</p> <p>true If a BanEntry exists for the target, indicating an active ban status. </p> <p>Returns:</p> <p>false Otherwise. </p> <p>Implements endstone::BanList::isBanned</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-isbanned-22","title":"function isBanned [2/2]","text":"<p>Checks if a BanEntry exists for the target, indicating an active ban status. <pre><code>virtual bool endstone::PlayerBanList::isBanned (\n    std::string name,\n    std::optional&lt; UUID &gt; uuid,\n    std::optional&lt; std::string &gt; xuid\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to find. </li> <li><code>uuid</code> The UUID of the target, std::nullopt if not used. </li> <li><code>xuid</code> The XUID of the target, std::nullopt if not used. </li> </ul> <p>Returns:</p> <p>true If a BanEntry exists for the target, indicating an active ban status. </p> <p>Returns:</p> <p>false Otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-removeban-12","title":"function removeBan [\u00bd]","text":"<p>Removes the specified player from this list, therefore indicating a \"not banned\" status. <pre><code>virtual void endstone::PlayerBanList::removeBan (\n    std::string name\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to remove from this list. </li> </ul> <p>Implements endstone::BanList::removeBan</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-removeban-22","title":"function removeBan [2/2]","text":"<p>Removes the specified player from this list, therefore indicating a \"not banned\" status. <pre><code>virtual void endstone::PlayerBanList::removeBan (\n    std::string name,\n    std::optional&lt; UUID &gt; uuid,\n    std::optional&lt; std::string &gt; xuid\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The player name to remove from this list. </li> <li><code>uuid</code> The unique id of the player, std::nullopt if not used. </li> <li><code>xuid</code> The xbox user id (xuid) of the player, std::nullopt if not used. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerBanList/#function-playerbanlist","title":"function ~PlayerBanList","text":"<pre><code>virtual endstone::PlayerBanList::~PlayerBanList () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/ban/player_ban_list.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerBedEnterEvent/","title":"Class endstone::PlayerBedEnterEvent","text":"<p>ClassList &gt; endstone &gt; PlayerBedEnterEvent</p> <p>Called when a player is almost about to enter the bed. </p> <ul> <li><code>#include &lt;endstone/event/player/player_bed_enter_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBedEnterEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerBedEnterEvent (Player &amp; player, Block &amp; bed)  Block &amp; getBed () constReturns the bed block involved in this event."},{"location":"reference/cpp/classendstone_1_1PlayerBedEnterEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerBedEnterEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerBedEnterEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerBedEnterEvent/#function-playerbedenterevent","title":"function PlayerBedEnterEvent","text":"<pre><code>inline explicit endstone::PlayerBedEnterEvent::PlayerBedEnterEvent (\n    Player &amp; player,\n    Block &amp; bed\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerBedEnterEvent/#function-getbed","title":"function getBed","text":"<p>Returns the bed block involved in this event. <pre><code>inline Block &amp; endstone::PlayerBedEnterEvent::getBed () const\n</code></pre></p> <p>Returns:</p> <p>The bed block involved in this event. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_bed_enter_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/","title":"Class endstone::PlayerBedLeaveEvent","text":"<p>ClassList &gt; endstone &gt; PlayerBedLeaveEvent</p> <p>Called when a player is leaving a bed. </p> <ul> <li><code>#include &lt;endstone/event/player/player_bed_leave_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerBedLeaveEvent (Player &amp; player, Block &amp; bed)  Block &amp; getBed () constReturns the bed block involved in this event. ~PlayerBedLeaveEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#protected-attributes-inherited-from-endstoneplayerevent","title":"Protected Attributes inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name std::reference_wrapper&lt; Player &gt; player_"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#function-playerbedleaveevent","title":"function PlayerBedLeaveEvent","text":"<pre><code>inline explicit endstone::PlayerBedLeaveEvent::PlayerBedLeaveEvent (\n    Player &amp; player,\n    Block &amp; bed\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#function-getbed","title":"function getBed","text":"<p>Returns the bed block involved in this event. <pre><code>inline Block &amp; endstone::PlayerBedLeaveEvent::getBed () const\n</code></pre></p> <p>Returns:</p> <p>The bed block involved in this event. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerBedLeaveEvent/#function-playerbedleaveevent_1","title":"function ~PlayerBedLeaveEvent","text":"<pre><code>endstone::PlayerBedLeaveEvent::~PlayerBedLeaveEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_bed_leave_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/","title":"Class endstone::PlayerChatEvent","text":"<p>ClassList &gt; endstone &gt; PlayerChatEvent</p> <p>Called when a player sends a chat message. </p> <ul> <li><code>#include &lt;endstone/event/player/player_chat_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerChatEvent)  PlayerChatEvent (Player &amp; player, std::string message, std::optional&lt; std::vector&lt; Player * &gt; &gt; recipients, std::string format=\"&lt;{0}&gt; {1}\")  std::string getFormat () constGets the format to use to display this chat message. std::string getMessage () constGets the message that the player is attempting to send. std::vector&lt; Player * &gt; getRecipients () constGets a set of recipients that this chat message will be displayed to. void setFormat (std::string format) Sets the format to use to display this chat message. void setMessage (std::string message) Sets the message that the player will send. void setPlayer (Player &amp; player) Sets the player that this message will display as."},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerChatEvent::ENDSTONE_EVENT (\n    PlayerChatEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-playerchatevent","title":"function PlayerChatEvent","text":"<pre><code>inline explicit endstone::PlayerChatEvent::PlayerChatEvent (\n    Player &amp; player,\n    std::string message,\n    std::optional&lt; std::vector&lt; Player * &gt; &gt; recipients,\n    std::string format=\"&lt;{0}&gt; {1}\"\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-getformat","title":"function getFormat","text":"<p>Gets the format to use to display this chat message. <pre><code>inline std::string endstone::PlayerChatEvent::getFormat () const\n</code></pre></p> <p>See the format string syntax</p> <p>Returns:</p> <p>format string </p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-getmessage","title":"function getMessage","text":"<p>Gets the message that the player is attempting to send. <pre><code>inline std::string endstone::PlayerChatEvent::getMessage () const\n</code></pre></p> <p>Returns:</p> <p>Message the player is attempting to send </p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-getrecipients","title":"function getRecipients","text":"<p>Gets a set of recipients that this chat message will be displayed to. <pre><code>inline std::vector&lt; Player * &gt; endstone::PlayerChatEvent::getRecipients () const\n</code></pre></p> <p>Returns:</p> <p>All Players who will see this chat message </p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-setformat","title":"function setFormat","text":"<p>Sets the format to use to display this chat message. <pre><code>inline void endstone::PlayerChatEvent::setFormat (\n    std::string format\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>format</code> format string </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-setmessage","title":"function setMessage","text":"<p>Sets the message that the player will send. <pre><code>inline void endstone::PlayerChatEvent::setMessage (\n    std::string message\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> New message that the player will send </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-setplayer","title":"function setPlayer","text":"<p>Sets the player that this message will display as. <pre><code>inline void endstone::PlayerChatEvent::setPlayer (\n    Player &amp; player\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>player</code> New player which this event will execute as </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_chat_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/","title":"Class endstone::PlayerCommandEvent","text":"<p>ClassList &gt; endstone &gt; PlayerCommandEvent</p> <p>Called whenever a player runs a command. </p> <ul> <li><code>#include &lt;endstone/event/player/player_command_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PlayerCommandEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerCommandEvent (Player &amp; player, std::string command)  std::string getCommand () const virtual std::string getEventName () override const void setCommand (std::string command)  ~PlayerCommandEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerCommandEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-playercommandevent","title":"function PlayerCommandEvent","text":"<pre><code>inline explicit endstone::PlayerCommandEvent::PlayerCommandEvent (\n    Player &amp; player,\n    std::string command\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-getcommand","title":"function getCommand","text":"<pre><code>inline std::string endstone::PlayerCommandEvent::getCommand () const\n</code></pre> <p>Gets the command that the player is attempting to send.</p> <p>Returns:</p> <p>Command the player is attempting to send </p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerCommandEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-setcommand","title":"function setCommand","text":"<pre><code>inline void endstone::PlayerCommandEvent::setCommand (\n    std::string command\n) \n</code></pre> <p>Sets the command that the player will send.</p> <p>Parameters:</p> <ul> <li><code>command</code> New command that the player will send </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-playercommandevent_1","title":"function ~PlayerCommandEvent","text":"<pre><code>endstone::PlayerCommandEvent::~PlayerCommandEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_command_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/","title":"Class endstone::PlayerDeathEvent","text":"<p>ClassList &gt; endstone &gt; PlayerDeathEvent</p> <p>Called when a Player dies.</p> <ul> <li><code>#include &lt;endstone/event/player/player_death_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ActorDeathEvent,  endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-static-attributes-inherited-from-endstoneactordeathevent","title":"Public Static Attributes inherited from endstone::ActorDeathEvent","text":"<p>See endstone::ActorDeathEvent</p> Type Name const std::string NAME   = <code>\"ActorDeathEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerDeathEvent)  PlayerDeathEvent (Player &amp; player, std::unique_ptr&lt; DamageSource &gt; damage_source, std::optional&lt; Message &gt; death_message)  std::optional&lt; Message &gt; getDeathMessage () constGet the death message that will appear to everyone on the server. void setDeathMessage (std::optional&lt; Message &gt; death_message) Set the death message that will appear to everyone on the server."},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneactordeathevent","title":"Public Functions inherited from endstone::ActorDeathEvent","text":"<p>See endstone::ActorDeathEvent</p> Type Name ActorDeathEvent (Mob &amp; actor, std::unique_ptr&lt; DamageSource &gt; damage_source)  DamageSource &amp; getDamageSource () constGets the source of damage which caused the death. virtual std::string getEventName () override const"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneactorevent","title":"Public Functions inherited from endstone::ActorEvent","text":"<p>See endstone::ActorEvent</p> Type Name ActorEvent (ActorType &amp; actor)  ActorType &amp; getActor () constReturns the Actor involved in this event. ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneevent_1","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#protected-attributes-inherited-from-endstoneplayerevent","title":"Protected Attributes inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name std::reference_wrapper&lt; Player &gt; player_"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerDeathEvent::ENDSTONE_EVENT (\n    PlayerDeathEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-playerdeathevent","title":"function PlayerDeathEvent","text":"<pre><code>inline explicit endstone::PlayerDeathEvent::PlayerDeathEvent (\n    Player &amp; player,\n    std::unique_ptr&lt; DamageSource &gt; damage_source,\n    std::optional&lt; Message &gt; death_message\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-getdeathmessage","title":"function getDeathMessage","text":"<p>Get the death message that will appear to everyone on the server. <pre><code>inline std::optional&lt; Message &gt; endstone::PlayerDeathEvent::getDeathMessage () const\n</code></pre></p> <p>Returns:</p> <p>Message to appear to other players on the server. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-setdeathmessage","title":"function setDeathMessage","text":"<p>Set the death message that will appear to everyone on the server. <pre><code>inline void endstone::PlayerDeathEvent::setDeathMessage (\n    std::optional&lt; Message &gt; death_message\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>death_message</code> Message to appear to other players on the server. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_death_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerDropItemEvent/","title":"Class endstone::PlayerDropItemEvent","text":"<p>ClassList &gt; endstone &gt; PlayerDropItemEvent</p> <p>Called when a player drops an item from their inventory. </p> <ul> <li><code>#include &lt;endstone/event/player/player_drop_item_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerDropItemEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerDropItemEvent (Player &amp; player, const ItemStack &amp; drop)  const ItemStack &amp; getItem () constGets the ItemStack dropped by the player."},{"location":"reference/cpp/classendstone_1_1PlayerDropItemEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerDropItemEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerDropItemEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerDropItemEvent/#function-playerdropitemevent","title":"function PlayerDropItemEvent","text":"<pre><code>inline explicit endstone::PlayerDropItemEvent::PlayerDropItemEvent (\n    Player &amp; player,\n    const ItemStack &amp; drop\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerDropItemEvent/#function-getitem","title":"function getItem","text":"<p>Gets the ItemStack dropped by the player. <pre><code>inline const ItemStack &amp; endstone::PlayerDropItemEvent::getItem () const\n</code></pre></p> <p>Returns:</p> <p>ItemDrop dropped by the player </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_drop_item_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/","title":"Class endstone::PlayerEmoteEvent","text":"<p>ClassList &gt; endstone &gt; PlayerEmoteEvent</p> <p>Called when a player uses an emote. </p> <ul> <li><code>#include &lt;endstone/event/player/player_emote_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PlayerEmoteEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerEmoteEvent (Player &amp; player, std::string emote_id, bool muted)  std::string getEmoteId () constGets the emote piece ID. virtual std::string getEventName () override const bool isMuted () constGets the muted state for the emote. void setMuted (bool muted) Sets the muted state for the emote. ~PlayerEmoteEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerEmoteEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#function-playeremoteevent","title":"function PlayerEmoteEvent","text":"<pre><code>inline explicit endstone::PlayerEmoteEvent::PlayerEmoteEvent (\n    Player &amp; player,\n    std::string emote_id,\n    bool muted\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#function-getemoteid","title":"function getEmoteId","text":"<p>Gets the emote piece ID. <pre><code>inline std::string endstone::PlayerEmoteEvent::getEmoteId () const\n</code></pre></p> <p>Returns:</p> <p>The emote piece ID </p>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerEmoteEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#function-ismuted","title":"function isMuted","text":"<p>Gets the muted state for the emote. <pre><code>inline bool endstone::PlayerEmoteEvent::isMuted () const\n</code></pre></p> <p>This method determines whether the emote is being executed without sending a chat message about the emote.</p> <p>Returns:</p> <p>true if the emote is muted, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#function-setmuted","title":"function setMuted","text":"<p>Sets the muted state for the emote. <pre><code>inline void endstone::PlayerEmoteEvent::setMuted (\n    bool muted\n) \n</code></pre></p> <p>Note:</p> <p>If set to true, the emote will be executed silently, and no chat messages will be sent.</p> <p>Parameters:</p> <ul> <li><code>muted</code> true to mute the emote and disable chat messages, false to unmute it. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerEmoteEvent/#function-playeremoteevent_1","title":"function ~PlayerEmoteEvent","text":"<pre><code>endstone::PlayerEmoteEvent::~PlayerEmoteEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_emote_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/","title":"Class endstone::PlayerEvent","text":"<p>ClassList &gt; endstone &gt; PlayerEvent</p> <p>Represents a player related event. </p> <ul> <li><code>#include &lt;endstone/event/player/player_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::Cancellable,  endstone::PlayerBedLeaveEvent,  endstone::PlayerDeathEvent,  endstone::PlayerJoinEvent,  endstone::PlayerQuitEvent,  endstone::PlayerRespawnEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#protected-attributes","title":"Protected Attributes","text":"Type Name std::reference_wrapper&lt; Player &gt; player_"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#function-playerevent","title":"function PlayerEvent","text":"<pre><code>inline explicit endstone::PlayerEvent::PlayerEvent (\n    Player &amp; player\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#function-getplayer","title":"function getPlayer","text":"<pre><code>inline Player &amp; endstone::PlayerEvent::getPlayer () const\n</code></pre> <p>Returns the player involved in this event</p> <p>Returns:</p> <p>Player who is involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#function-playerevent_1","title":"function ~PlayerEvent","text":"<pre><code>endstone::PlayerEvent::~PlayerEvent () override\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#variable-player_","title":"variable player_","text":"<pre><code>std::reference_wrapper&lt;Player&gt; endstone::PlayerEvent::player_;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/","title":"Class endstone::PlayerGameModeChangeEvent","text":"<p>ClassList &gt; endstone &gt; PlayerGameModeChangeEvent</p> <p>Called when the GameMode of the player is changed. </p> <ul> <li><code>#include &lt;endstone/event/player/player_game_mode_change_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PlayerGameModeChangeEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerGameModeChangeEvent (Player &amp; player, GameMode new_game_mode)  virtual std::string getEventName () override const GameMode getNewGameMode () constGets the GameMode the player is switched to. ~PlayerGameModeChangeEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerGameModeChangeEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#function-playergamemodechangeevent","title":"function PlayerGameModeChangeEvent","text":"<pre><code>inline explicit endstone::PlayerGameModeChangeEvent::PlayerGameModeChangeEvent (\n    Player &amp; player,\n    GameMode new_game_mode\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerGameModeChangeEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#function-getnewgamemode","title":"function getNewGameMode","text":"<p>Gets the GameMode the player is switched to. <pre><code>inline GameMode endstone::PlayerGameModeChangeEvent::getNewGameMode () const\n</code></pre></p> <p>Returns:</p> <p>player's new GameMode </p>"},{"location":"reference/cpp/classendstone_1_1PlayerGameModeChangeEvent/#function-playergamemodechangeevent_1","title":"function ~PlayerGameModeChangeEvent","text":"<pre><code>endstone::PlayerGameModeChangeEvent::~PlayerGameModeChangeEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_game_mode_change_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/","title":"Class endstone::PlayerInteractActorEvent","text":"<p>ClassList &gt; endstone &gt; PlayerInteractActorEvent</p> <p>Represents an event that is called when a player right-clicks an actor. </p> <ul> <li><code>#include &lt;endstone/event/player/player_interact_actor_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PlayerInteractActorEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerInteractActorEvent (Player &amp; player, Actor &amp; actor)  Actor &amp; getActor () constGets the actor that was right-clicked by the player. virtual std::string getEventName () override const ~PlayerInteractActorEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerInteractActorEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#function-playerinteractactorevent","title":"function PlayerInteractActorEvent","text":"<pre><code>inline explicit endstone::PlayerInteractActorEvent::PlayerInteractActorEvent (\n    Player &amp; player,\n    Actor &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#function-getactor","title":"function getActor","text":"<p>Gets the actor that was right-clicked by the player. <pre><code>inline Actor &amp; endstone::PlayerInteractActorEvent::getActor () const\n</code></pre></p> <p>Returns:</p> <p>actor right-clicked by player </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerInteractActorEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractActorEvent/#function-playerinteractactorevent_1","title":"function ~PlayerInteractActorEvent","text":"<pre><code>endstone::PlayerInteractActorEvent::~PlayerInteractActorEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_interact_actor_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/","title":"Class endstone::PlayerInteractEvent","text":"<p>ClassList &gt; endstone &gt; PlayerInteractEvent</p> <p>Represents an event that is called when a player right-clicks a block. </p> <ul> <li><code>#include &lt;endstone/event/player/player_interact_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#public-types","title":"Public Types","text":"Type Name enum Action"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerInteractEvent)  PlayerInteractEvent (Player &amp; player, Action action, ItemStack * item, Block * block_clicked, BlockFace block_face, const std::optional&lt; Vector &gt; &amp; clicked_position)  Action getAction () constReturns the action type. Block * getBlock () constReturns the clicked block. BlockFace getBlockFace () constReturns the face of the block that was clicked. std::optional&lt; Vector &gt; getClickedPosition () constGets the exact position on the block the player interacted with. ItemStack * getItem () constReturns the item in hand represented by this event. bool hasBlock () constCheck if this event involved a block. bool hasItem () constCheck if this event involved an item."},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#enum-action","title":"enum Action","text":"<pre><code>enum endstone::PlayerInteractEvent::Action {\n    LeftClickBlock,\n    RightClickBlock,\n    LeftClickAir,\n    RightClickAir\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerInteractEvent::ENDSTONE_EVENT (\n    PlayerInteractEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-playerinteractevent","title":"function PlayerInteractEvent","text":"<pre><code>inline endstone::PlayerInteractEvent::PlayerInteractEvent (\n    Player &amp; player,\n    Action action,\n    ItemStack * item,\n    Block * block_clicked,\n    BlockFace block_face,\n    const std::optional&lt; Vector &gt; &amp; clicked_position\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-getaction","title":"function getAction","text":"<p>Returns the action type. <pre><code>inline Action endstone::PlayerInteractEvent::getAction () const\n</code></pre></p> <p>Returns:</p> <p>Action returns the type of interaction </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-getblock","title":"function getBlock","text":"<p>Returns the clicked block. <pre><code>inline Block * endstone::PlayerInteractEvent::getBlock () const\n</code></pre></p> <p>Returns:</p> <p>Block returns the block clicked with this item. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-getblockface","title":"function getBlockFace","text":"<p>Returns the face of the block that was clicked. <pre><code>inline BlockFace endstone::PlayerInteractEvent::getBlockFace () const\n</code></pre></p> <p>Returns:</p> <p>BlockFace returns the face of the block that was clicked </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-getclickedposition","title":"function getClickedPosition","text":"<p>Gets the exact position on the block the player interacted with. <pre><code>inline std::optional&lt; Vector &gt; endstone::PlayerInteractEvent::getClickedPosition () const\n</code></pre></p> <p>Note:</p> <p>This will be std::nullopt outside of Action.RightClickBlock </p> <p>Note:</p> <p>All vector components are between 0.0 and 1.0 inclusive.</p> <p>Returns:</p> <p>the clicked position. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-getitem","title":"function getItem","text":"<p>Returns the item in hand represented by this event. <pre><code>inline ItemStack * endstone::PlayerInteractEvent::getItem () const\n</code></pre></p> <p>Returns:</p> <p>ItemStack the item used </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-hasblock","title":"function hasBlock","text":"<p>Check if this event involved a block. <pre><code>inline bool endstone::PlayerInteractEvent::hasBlock () const\n</code></pre></p> <p>Returns:</p> <p>boolean true if it did </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInteractEvent/#function-hasitem","title":"function hasItem","text":"<p>Check if this event involved an item. <pre><code>inline bool endstone::PlayerInteractEvent::hasItem () const\n</code></pre></p> <p>Returns:</p> <p>boolean true if it did </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_interact_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/","title":"Class endstone::PlayerInventory","text":"<p>ClassList &gt; endstone &gt; PlayerInventory</p> <p>Interface to the inventory of a Player , including the four armor slots and any extra slots.</p> <ul> <li><code>#include &lt;endstone/inventory/player_inventory.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Inventory</p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#public-functions","title":"Public Functions","text":"Type Name virtual std::unique_ptr&lt; ItemStack &gt; getBoots () const = 0Return the ItemStack from the boots slot. virtual std::unique_ptr&lt; ItemStack &gt; getChestplate () const = 0Return the ItemStack from the chestplate slot. virtual int getHeldItemSlot () const = 0Get the slot number of the currently held item. virtual std::unique_ptr&lt; ItemStack &gt; getHelmet () const = 0Return the ItemStack from the helmet slot. virtual std::unique_ptr&lt; ItemStack &gt; getItemInMainHand () const = 0Gets the item the player is currently holding in their main hand. virtual std::unique_ptr&lt; ItemStack &gt; getItemInOffHand () const = 0Gets the item the player is currently holding in their off hand. virtual std::unique_ptr&lt; ItemStack &gt; getLeggings () const = 0Return the ItemStack from the leg slot. virtual void setBoots (const ItemStack * boots) = 0Put the given ItemStack into the boots slot. virtual void setChestplate (const ItemStack * chestplate) = 0Put the given ItemStack into the chestplate slot. virtual Result&lt; void &gt; setHeldItemSlot (int slot) = 0Set the slot number of the currently held item. virtual void setHelmet (const ItemStack * helmet) = 0Put the given ItemStack into the helmet slot. virtual void setItemInMainHand (const ItemStack * item) = 0Sets the item the player is holding in their main hand. virtual void setItemInOffHand (const ItemStack * item) = 0Sets the item the player is holding in their off hand. virtual void setLeggings (const ItemStack * leggings) = 0Put the given ItemStack into the leggings slot."},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#public-functions-inherited-from-endstoneinventory","title":"Public Functions inherited from endstone::Inventory","text":"<p>See endstone::Inventory</p> Type Name virtual std::unordered_map&lt; int, ItemStack * &gt; addItem (std::vector&lt; ItemStack * &gt; items) = 0Stores the given ItemStacks in the inventory. std::unordered_map&lt; int, ItemStack * &gt; addItem (Args &amp;&amp;... items) Stores the given ItemStacks in the inventory. virtual std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; all (const std::string &amp; type) const = 0Finds all slots in the inventory containing any ItemStacks with the given ItemType . virtual std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; all (const ItemStack &amp; item) const = 0Finds all slots in the inventory containing any ItemStacks with the given ItemStack . virtual void clear (int index) = 0Clears out a particular slot in the index. virtual void clear () = 0Clears out the whole Inventory . virtual bool contains (const std::string &amp; type) const = 0Checks if the inventory contains any ItemStacks with the given ItemType . virtual bool contains (const ItemStack &amp; item) const = 0Checks if the inventory contains any ItemStacks with the given ItemStack . virtual bool contains (const ItemStack &amp; item, int amount) const = 0Checks if the inventory contains at least the minimum amount specified of exactly matching ItemStacks. virtual bool containsAtLeast (const std::string &amp; type, int amount) const = 0Checks if the inventory contains any ItemStacks with the given ItemType , adding to at least the minimum amount specified. virtual bool containsAtLeast (const ItemStack &amp; item, int amount) const = 0Checks if the inventory contains ItemStacks matching the given ItemStack whose amounts sum to at least the minimum amount specified. virtual int first (const std::string &amp; type) const = 0Finds the first slot in the inventory containing an ItemStack with the givenItemType . virtual int first (const ItemStack &amp; item) const = 0Returns the first slot in the inventory containing an ItemStack with the given stack. virtual int firstEmpty () const = 0Returns the first empty Slot. virtual std::vector&lt; std::unique_ptr&lt; ItemStack &gt; &gt; getContents () const = 0Returns all ItemStacks from the inventory. virtual std::unique_ptr&lt; ItemStack &gt; getItem (int index) const = 0Returns the ItemStack found in the slot at the given index. virtual int getMaxStackSize () const = 0Returns the maximum stack size for an ItemStack in this inventory. virtual int getSize () const = 0Returns the size of the inventory. virtual bool isEmpty () const = 0Check whether this inventory is empty. An inventory is considered to be empty if there are no ItemStacks in any slot of this inventory. virtual void remove (const std::string &amp; type) = 0Removes all stacks in the inventory matching the given ItemType . virtual void remove (const ItemStack &amp; item) = 0Removes all stacks in the inventory matching the given stack. virtual std::unordered_map&lt; int, ItemStack * &gt; removeItem (std::vector&lt; ItemStack * &gt; items) = 0Removes the given ItemStacks from the inventory. std::unordered_map&lt; int, ItemStack * &gt; removeItem (Args &amp;&amp;... items) Removes the given ItemStacks from the inventory. virtual Result&lt; void &gt; setContents (std::vector&lt; const ItemStack * &gt; items) = 0Completely replaces the inventory's contents. Removes all existing contents and replaces it with the ItemStacks given in the array. virtual void setItem (int index, const ItemStack * item) = 0Stores the ItemStack at the given index of the inventory. virtual ~Inventory () = default"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-getboots","title":"function getBoots","text":"<p>Return the ItemStack from the boots slot. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::PlayerInventory::getBoots () const = 0\n</code></pre></p> <p>Returns:</p> <p>The ItemStack in the boots slot </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-getchestplate","title":"function getChestplate","text":"<p>Return the ItemStack from the chestplate slot. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::PlayerInventory::getChestplate () const = 0\n</code></pre></p> <p>Returns:</p> <p>The ItemStack in the chestplate slot </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-gethelditemslot","title":"function getHeldItemSlot","text":"<p>Get the slot number of the currently held item. <pre><code>virtual int endstone::PlayerInventory::getHeldItemSlot () const = 0\n</code></pre></p> <p>Returns:</p> <p>Held item slot number </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-gethelmet","title":"function getHelmet","text":"<p>Return the ItemStack from the helmet slot. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::PlayerInventory::getHelmet () const = 0\n</code></pre></p> <p>Returns:</p> <p>The ItemStack in the helmet slot </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-getiteminmainhand","title":"function getItemInMainHand","text":"<p>Gets the item the player is currently holding in their main hand. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::PlayerInventory::getItemInMainHand () const = 0\n</code></pre></p> <p>Returns:</p> <p>the currently held item </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-getiteminoffhand","title":"function getItemInOffHand","text":"<p>Gets the item the player is currently holding in their off hand. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::PlayerInventory::getItemInOffHand () const = 0\n</code></pre></p> <p>Returns:</p> <p>the currently held item </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-getleggings","title":"function getLeggings","text":"<p>Return the ItemStack from the leg slot. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::PlayerInventory::getLeggings () const = 0\n</code></pre></p> <p>Returns:</p> <p>The ItemStack in the leg slot </p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-setboots","title":"function setBoots","text":"<p>Put the given ItemStack into the boots slot. <pre><code>virtual void endstone::PlayerInventory::setBoots (\n    const ItemStack * boots\n) = 0\n</code></pre></p> <p>This does not check if the ItemStack is a pair of boots.</p> <p>Parameters:</p> <ul> <li><code>boots</code> The ItemStack to use as boots </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-setchestplate","title":"function setChestplate","text":"<p>Put the given ItemStack into the chestplate slot. <pre><code>virtual void endstone::PlayerInventory::setChestplate (\n    const ItemStack * chestplate\n) = 0\n</code></pre></p> <p>This does not check if the ItemStack is a chestplate.</p> <p>Parameters:</p> <ul> <li><code>chestplate</code> The ItemStack to use as chestplate </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-sethelditemslot","title":"function setHeldItemSlot","text":"<p>Set the slot number of the currently held item. <pre><code>virtual Result&lt; void &gt; endstone::PlayerInventory::setHeldItemSlot (\n    int slot\n) = 0\n</code></pre></p> <p>This validates whether the slot is between 0 and 8 inclusive.</p> <p>Parameters:</p> <ul> <li><code>slot</code> The new slot number </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-sethelmet","title":"function setHelmet","text":"<p>Put the given ItemStack into the helmet slot. <pre><code>virtual void endstone::PlayerInventory::setHelmet (\n    const ItemStack * helmet\n) = 0\n</code></pre></p> <p>This does not check if the ItemStack is a helmet.</p> <p>Parameters:</p> <ul> <li><code>helmet</code> The ItemStack to use as helmet </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-setiteminmainhand","title":"function setItemInMainHand","text":"<p>Sets the item the player is holding in their main hand. <pre><code>virtual void endstone::PlayerInventory::setItemInMainHand (\n    const ItemStack * item\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>item</code> The item to put into the player's hand </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-setiteminoffhand","title":"function setItemInOffHand","text":"<p>Sets the item the player is holding in their off hand. <pre><code>virtual void endstone::PlayerInventory::setItemInOffHand (\n    const ItemStack * item\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>item</code> The item to put into the player's hand </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#function-setleggings","title":"function setLeggings","text":"<p>Put the given ItemStack into the leggings slot. <pre><code>virtual void endstone::PlayerInventory::setLeggings (\n    const ItemStack * leggings\n) = 0\n</code></pre></p> <p>This does not check if the ItemStack is a pair of leggings.</p> <p>Parameters:</p> <ul> <li><code>leggings</code> The ItemStack to use as leggings </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/player_inventory.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/","title":"Class endstone::PlayerItemConsumeEvent","text":"<p>ClassList &gt; endstone &gt; PlayerItemConsumeEvent</p> <p>Called when a player is finishing consuming an item (food, potion, milk bucket). More...</p> <ul> <li><code>#include &lt;endstone/event/player/player_item_consume_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerItemConsumeEvent (Player &amp; player, const ItemStack &amp; item, EquipmentSlot hand)  EquipmentSlot getHand () constGet the hand used to consume the item. std::unique_ptr&lt; ItemStack &gt; getItem () constGets the item that is being consumed."},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#detailed-description","title":"Detailed Description","text":"<p>Note:</p> <p>If the ItemStack is modified the server will use the effects of the new item and not remove the original one from the player's inventory.</p> <p>Note:</p> <p>If the event is cancelled the effect will not be applied and the item will not be removed from the player's inventory. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#function-playeritemconsumeevent","title":"function PlayerItemConsumeEvent","text":"<pre><code>inline explicit endstone::PlayerItemConsumeEvent::PlayerItemConsumeEvent (\n    Player &amp; player,\n    const ItemStack &amp; item,\n    EquipmentSlot hand\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#function-gethand","title":"function getHand","text":"<p>Get the hand used to consume the item. <pre><code>inline EquipmentSlot endstone::PlayerItemConsumeEvent::getHand () const\n</code></pre></p> <p>Returns:</p> <p>the hand </p>"},{"location":"reference/cpp/classendstone_1_1PlayerItemConsumeEvent/#function-getitem","title":"function getItem","text":"<p>Gets the item that is being consumed. <pre><code>inline std::unique_ptr&lt; ItemStack &gt; endstone::PlayerItemConsumeEvent::getItem () const\n</code></pre></p> <p>Note:</p> <p>Modifying the returned item will have no effect, you must use setItem(ItemStack) instead.</p> <p>Returns:</p> <p>an ItemStack for the item being consumed </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_item_consume_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/","title":"Class endstone::PlayerItemHeldEvent","text":"<p>ClassList &gt; endstone &gt; PlayerItemHeldEvent</p> <p>Called when a player changes their currently held item. </p> <ul> <li><code>#include &lt;endstone/event/player/player_item_held_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerItemHeldEvent (Player &amp; player, const int previous, const int current)  int getNewSlot () constGets the new held slot index. int getPreviousSlot () constGets the previous held slot index."},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/#function-playeritemheldevent","title":"function PlayerItemHeldEvent","text":"<pre><code>inline explicit endstone::PlayerItemHeldEvent::PlayerItemHeldEvent (\n    Player &amp; player,\n    const int previous,\n    const int current\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/#function-getnewslot","title":"function getNewSlot","text":"<p>Gets the new held slot index. <pre><code>inline int endstone::PlayerItemHeldEvent::getNewSlot () const\n</code></pre></p> <p>Returns:</p> <p>New slot index </p>"},{"location":"reference/cpp/classendstone_1_1PlayerItemHeldEvent/#function-getpreviousslot","title":"function getPreviousSlot","text":"<p>Gets the previous held slot index. <pre><code>inline int endstone::PlayerItemHeldEvent::getPreviousSlot () const\n</code></pre></p> <p>Returns:</p> <p>Previous slot index </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_item_held_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/","title":"Class endstone::PlayerJoinEvent","text":"<p>ClassList &gt; endstone &gt; PlayerJoinEvent</p> <p>Called when a player joins a server. </p> <ul> <li><code>#include &lt;endstone/event/player/player_join_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerJoinEvent)  PlayerJoinEvent (Player &amp; player, std::optional&lt; Message &gt; join_message)  std::optional&lt; Message &gt; getJoinMessage () constGets the join message to send to all online players. void setJoinMessage (std::optional&lt; Message &gt; message) Sets the join message to send to all online players."},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#protected-attributes-inherited-from-endstoneplayerevent","title":"Protected Attributes inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name std::reference_wrapper&lt; Player &gt; player_"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerJoinEvent::ENDSTONE_EVENT (\n    PlayerJoinEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-playerjoinevent","title":"function PlayerJoinEvent","text":"<pre><code>inline explicit endstone::PlayerJoinEvent::PlayerJoinEvent (\n    Player &amp; player,\n    std::optional&lt; Message &gt; join_message\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-getjoinmessage","title":"function getJoinMessage","text":"<p>Gets the join message to send to all online players. <pre><code>inline std::optional&lt; Message &gt; endstone::PlayerJoinEvent::getJoinMessage () const\n</code></pre></p> <p>Returns:</p> <p>Message to appear to other players on the server. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-setjoinmessage","title":"function setJoinMessage","text":"<p>Sets the join message to send to all online players. <pre><code>inline void endstone::PlayerJoinEvent::setJoinMessage (\n    std::optional&lt; Message &gt; message\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to appear to other players on the server. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_join_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/","title":"Class endstone::PlayerJumpEvent","text":"<p>ClassList &gt; endstone &gt; PlayerJumpEvent</p> <p>Called when a player jumps. </p> <ul> <li><code>#include &lt;endstone/event/player/player_jump_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerMoveEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#public-attributes-inherited-from-endstoneplayermoveevent","title":"Public Attributes inherited from endstone::PlayerMoveEvent","text":"<p>See endstone::PlayerMoveEvent</p> Type Name Location from_ Location to_"},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerJumpEvent)  PlayerMoveEvent (Player &amp; player, Location from, Location to)"},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#public-functions-inherited-from-endstoneplayermoveevent","title":"Public Functions inherited from endstone::PlayerMoveEvent","text":"<p>See endstone::PlayerMoveEvent</p> Type Name ENDSTONE_EVENT (PlayerMoveEvent)  PlayerMoveEvent (Player &amp; player, Location from, Location to)  const Location &amp; getFrom () constGets the location this player moved from. const Location &amp; getTo () constGets the location this player moved to. Result&lt; void &gt; setFrom (const Location &amp; from) Sets the location to mark as where the player moved from. Result&lt; void &gt; setTo (const Location &amp; to) Sets the location that this player will move to."},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerJumpEvent::ENDSTONE_EVENT (\n    PlayerJumpEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerJumpEvent/#function-playermoveevent","title":"function PlayerMoveEvent","text":"<pre><code>inline explicit endstone::PlayerJumpEvent::PlayerMoveEvent (\n    Player &amp; player,\n    Location from,\n    Location to\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_jump_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/","title":"Class endstone::PlayerKickEvent","text":"<p>ClassList &gt; endstone &gt; PlayerKickEvent</p> <p>Called when a player gets kicked from the server. </p> <ul> <li><code>#include &lt;endstone/event/player/player_kick_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerKickEvent)  PlayerKickEvent (Player &amp; player, std::string reason)  std::string getReason () constGets the reason why the player is getting kicked. void setReason (std::string reason) Sets the reason why the player is getting kicked."},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerKickEvent::ENDSTONE_EVENT (\n    PlayerKickEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#function-playerkickevent","title":"function PlayerKickEvent","text":"<pre><code>inline explicit endstone::PlayerKickEvent::PlayerKickEvent (\n    Player &amp; player,\n    std::string reason\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#function-getreason","title":"function getReason","text":"<p>Gets the reason why the player is getting kicked. <pre><code>inline std::string endstone::PlayerKickEvent::getReason () const\n</code></pre></p> <p>Returns:</p> <p>string kick reason </p>"},{"location":"reference/cpp/classendstone_1_1PlayerKickEvent/#function-setreason","title":"function setReason","text":"<p>Sets the reason why the player is getting kicked. <pre><code>inline void endstone::PlayerKickEvent::setReason (\n    std::string reason\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>reason</code> kick reason </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_kick_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/","title":"Class endstone::PlayerLoginEvent","text":"<p>ClassList &gt; endstone &gt; PlayerLoginEvent</p> <p>Called when a player attempts to login in. </p> <ul> <li><code>#include &lt;endstone/event/player/player_login_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PlayerLoginEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerLoginEvent (Player &amp; player, std::string message=\"\")  virtual std::string getEventName () override const const std::string &amp; getKickMessage () const void setKickMessage (const std::string &amp; message)  ~PlayerLoginEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerLoginEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-playerloginevent","title":"function PlayerLoginEvent","text":"<pre><code>inline explicit endstone::PlayerLoginEvent::PlayerLoginEvent (\n    Player &amp; player,\n    std::string message=\"\"\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerLoginEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-getkickmessage","title":"function getKickMessage","text":"<pre><code>inline const std::string &amp; endstone::PlayerLoginEvent::getKickMessage () const\n</code></pre> <p>Gets the current kick message that will be used if event is cancelled</p> <p>Returns:</p> <p>Current kick message </p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-setkickmessage","title":"function setKickMessage","text":"<pre><code>inline void endstone::PlayerLoginEvent::setKickMessage (\n    const std::string &amp; message\n) \n</code></pre> <p>Sets the kick message to display if event is cancelled</p> <p>Parameters:</p> <ul> <li><code>message</code> New kick message </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-playerloginevent_1","title":"function ~PlayerLoginEvent","text":"<pre><code>endstone::PlayerLoginEvent::~PlayerLoginEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_login_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/","title":"Class endstone::PlayerMoveEvent","text":"<p>ClassList &gt; endstone &gt; PlayerMoveEvent</p> <p>Called when a player moves. </p> <ul> <li><code>#include &lt;endstone/event/player/player_move_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p> <p>Inherited by the following classes: endstone::PlayerJumpEvent,  endstone::PlayerTeleportEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#public-attributes","title":"Public Attributes","text":"Type Name Location from_ Location to_"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerMoveEvent)  PlayerMoveEvent (Player &amp; player, Location from, Location to)  const Location &amp; getFrom () constGets the location this player moved from. const Location &amp; getTo () constGets the location this player moved to. Result&lt; void &gt; setFrom (const Location &amp; from) Sets the location to mark as where the player moved from. Result&lt; void &gt; setTo (const Location &amp; to) Sets the location that this player will move to."},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#variable-from_","title":"variable from_","text":"<pre><code>Location endstone::PlayerMoveEvent::from_;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#variable-to_","title":"variable to_","text":"<pre><code>Location endstone::PlayerMoveEvent::to_;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerMoveEvent::ENDSTONE_EVENT (\n    PlayerMoveEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#function-playermoveevent","title":"function PlayerMoveEvent","text":"<pre><code>inline explicit endstone::PlayerMoveEvent::PlayerMoveEvent (\n    Player &amp; player,\n    Location from,\n    Location to\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#function-getfrom","title":"function getFrom","text":"<p>Gets the location this player moved from. <pre><code>inline const Location &amp; endstone::PlayerMoveEvent::getFrom () const\n</code></pre></p> <p>Returns:</p> <p>Location the player moved from </p>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#function-getto","title":"function getTo","text":"<p>Gets the location this player moved to. <pre><code>inline const Location &amp; endstone::PlayerMoveEvent::getTo () const\n</code></pre></p> <p>Returns:</p> <p>Location the player moved to </p>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#function-setfrom","title":"function setFrom","text":"<p>Sets the location to mark as where the player moved from. <pre><code>inline Result&lt; void &gt; endstone::PlayerMoveEvent::setFrom (\n    const Location &amp; from\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>from</code> New location to mark as the players previous location </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerMoveEvent/#function-setto","title":"function setTo","text":"<p>Sets the location that this player will move to. <pre><code>inline Result&lt; void &gt; endstone::PlayerMoveEvent::setTo (\n    const Location &amp; to\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>to</code> New Location this player will move to </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_move_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/","title":"Class endstone::PlayerPickupItemEvent","text":"<p>ClassList &gt; endstone &gt; PlayerPickupItemEvent</p> <p>Called when a player picks an item up from the ground. </p> <ul> <li><code>#include &lt;endstone/event/player/player_pickup_item_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerPickupItemEvent)  PlayerPickupItemEvent (Player &amp; player, Item &amp; item)  Item &amp; getItem () constGets the Item picked up by the entity."},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerPickupItemEvent::ENDSTONE_EVENT (\n    PlayerPickupItemEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/#function-playerpickupitemevent","title":"function PlayerPickupItemEvent","text":"<pre><code>inline explicit endstone::PlayerPickupItemEvent::PlayerPickupItemEvent (\n    Player &amp; player,\n    Item &amp; item\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerPickupItemEvent/#function-getitem","title":"function getItem","text":"<p>Gets the Item picked up by the entity. <pre><code>inline Item &amp; endstone::PlayerPickupItemEvent::getItem () const\n</code></pre></p> <p>Returns:</p> <p>Item </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_pickup_item_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/","title":"Class endstone::PlayerQuitEvent","text":"<p>ClassList &gt; endstone &gt; PlayerQuitEvent</p> <p>Called when a player leaves a server. </p> <ul> <li><code>#include &lt;endstone/event/player/player_quit_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerQuitEvent)  PlayerQuitEvent (Player &amp; player, std::optional&lt; Message &gt; quit_message)  std::optional&lt; Message &gt; getQuitMessage () constGets the quit message to send to all online players. void setQuitMessage (std::optional&lt; Message &gt; message) Sets the quit message to send to all online players."},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#protected-attributes-inherited-from-endstoneplayerevent","title":"Protected Attributes inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name std::reference_wrapper&lt; Player &gt; player_"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerQuitEvent::ENDSTONE_EVENT (\n    PlayerQuitEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-playerquitevent","title":"function PlayerQuitEvent","text":"<pre><code>inline explicit endstone::PlayerQuitEvent::PlayerQuitEvent (\n    Player &amp; player,\n    std::optional&lt; Message &gt; quit_message\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-getquitmessage","title":"function getQuitMessage","text":"<p>Gets the quit message to send to all online players. <pre><code>inline std::optional&lt; Message &gt; endstone::PlayerQuitEvent::getQuitMessage () const\n</code></pre></p> <p>Returns:</p> <p>Message to appear to other players on the server. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-setquitmessage","title":"function setQuitMessage","text":"<p>Sets the quit message to send to all online players. <pre><code>inline void endstone::PlayerQuitEvent::setQuitMessage (\n    std::optional&lt; Message &gt; message\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to appear to other players on the server. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_quit_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/","title":"Class endstone::PlayerRespawnEvent","text":"<p>ClassList &gt; endstone &gt; PlayerRespawnEvent</p> <p>Called when a player respawns. </p> <ul> <li><code>#include &lt;endstone/event/player/player_respawn_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PlayerRespawnEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerRespawnEvent (Player &amp; player)  virtual std::string getEventName () override const ~PlayerRespawnEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#protected-attributes-inherited-from-endstoneplayerevent","title":"Protected Attributes inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name std::reference_wrapper&lt; Player &gt; player_"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerRespawnEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#function-playerrespawnevent","title":"function PlayerRespawnEvent","text":"<pre><code>inline explicit endstone::PlayerRespawnEvent::PlayerRespawnEvent (\n    Player &amp; player\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerRespawnEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerRespawnEvent/#function-playerrespawnevent_1","title":"function ~PlayerRespawnEvent","text":"<pre><code>endstone::PlayerRespawnEvent::~PlayerRespawnEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_respawn_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/","title":"Class endstone::PlayerSkinChangeEvent","text":"<p>ClassList &gt; endstone &gt; PlayerSkinChangeEvent</p> <p>Called when a player changes their skin. </p> <ul> <li><code>#include &lt;endstone/event/player/player_skin_change_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerSkinChangeEvent)  PlayerSkinChangeEvent (Player &amp; player, Skin new_skin, std::optional&lt; Message &gt; message)  Skin getNewSkin () constGets the player's new skin. std::optional&lt; Message &gt; getSkinChangeMessage () constGets the message to send to all online players for this skin change. void setSkinChangeMessage (std::optional&lt; Message &gt; message) Sets the message to send to all online players for this skin change."},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerSkinChangeEvent::ENDSTONE_EVENT (\n    PlayerSkinChangeEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#function-playerskinchangeevent","title":"function PlayerSkinChangeEvent","text":"<pre><code>inline explicit endstone::PlayerSkinChangeEvent::PlayerSkinChangeEvent (\n    Player &amp; player,\n    Skin new_skin,\n    std::optional&lt; Message &gt; message\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#function-getnewskin","title":"function getNewSkin","text":"<p>Gets the player's new skin. <pre><code>inline Skin endstone::PlayerSkinChangeEvent::getNewSkin () const\n</code></pre></p> <p>Returns:</p> <p>The skin that will be applied. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#function-getskinchangemessage","title":"function getSkinChangeMessage","text":"<p>Gets the message to send to all online players for this skin change. <pre><code>inline std::optional&lt; Message &gt; endstone::PlayerSkinChangeEvent::getSkinChangeMessage () const\n</code></pre></p> <p>Returns:</p> <p>Message to appear to other players on the server. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerSkinChangeEvent/#function-setskinchangemessage","title":"function setSkinChangeMessage","text":"<p>Sets the message to send to all online players for this skin change. <pre><code>inline void endstone::PlayerSkinChangeEvent::setSkinChangeMessage (\n    std::optional&lt; Message &gt; message\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to appear to other players on the server. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_skin_change_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/","title":"Class endstone::PlayerTeleportEvent","text":"<p>ClassList &gt; endstone &gt; PlayerTeleportEvent</p> <p>Called when a player is teleported from one location to another. </p> <ul> <li><code>#include &lt;endstone/event/player/player_teleport_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerMoveEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#public-attributes-inherited-from-endstoneplayermoveevent","title":"Public Attributes inherited from endstone::PlayerMoveEvent","text":"<p>See endstone::PlayerMoveEvent</p> Type Name Location from_ Location to_"},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#public-functions","title":"Public Functions","text":"Type Name ENDSTONE_EVENT (PlayerTeleportEvent)  PlayerMoveEvent (Player &amp; player, Location from, Location to)"},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#public-functions-inherited-from-endstoneplayermoveevent","title":"Public Functions inherited from endstone::PlayerMoveEvent","text":"<p>See endstone::PlayerMoveEvent</p> Type Name ENDSTONE_EVENT (PlayerMoveEvent)  PlayerMoveEvent (Player &amp; player, Location from, Location to)  const Location &amp; getFrom () constGets the location this player moved from. const Location &amp; getTo () constGets the location this player moved to. Result&lt; void &gt; setFrom (const Location &amp; from) Sets the location to mark as where the player moved from. Result&lt; void &gt; setTo (const Location &amp; to) Sets the location that this player will move to."},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#function-endstone_event","title":"function ENDSTONE_EVENT","text":"<pre><code>endstone::PlayerTeleportEvent::ENDSTONE_EVENT (\n    PlayerTeleportEvent\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerTeleportEvent/#function-playermoveevent","title":"function PlayerMoveEvent","text":"<pre><code>inline explicit endstone::PlayerTeleportEvent::PlayerMoveEvent (\n    Player &amp; player,\n    Location from,\n    Location to\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_teleport_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Plugin/","title":"Class endstone::Plugin","text":"<p>ClassList &gt; endstone &gt; Plugin</p> <p>Represents a Plugin .</p> <ul> <li><code>#include &lt;endstone/plugin/plugin.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::CommandExecutor</p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#public-functions","title":"Public Functions","text":"Type Name Plugin () = default Plugin (const Plugin &amp;) = delete PluginCommand * getCommand (std::string name) constGets the command with the given name, specific to this plugin. const std::filesystem::path &amp; getDataFolder () constReturns the folder that the plugin data's files are located in. The folder may not yet exist. virtual const PluginDescription &amp; getDescription () const = 0Returns the details of this plugin. Logger &amp; getLogger () constReturns the plugin logger associated with this server's logger. The returned logger automatically tags all log messages with the plugin's name. std::string getName () constReturns the name of the plugin. PluginLoader &amp; getPluginLoader () constGets the associated PluginLoader responsible for this plugin. Server &amp; getServer () constReturns the Server instance currently running this plugin. bool isEnabled () constReturns a value indicating whether this plugin is currently enabled. virtual void onDisable () Called when this plugin is disabled. virtual void onEnable () Called when this plugin is enabled. virtual void onLoad () Called after a plugin is loaded but before it has been enabled. Plugin &amp; operator= (const Plugin &amp;) = delete void registerEvent (void(T::*)(EventType &amp;) func, T &amp; instance, EventPriority priority=EventPriority::Normal, bool ignore_cancelled=false)  void registerEvent (std::function&lt; void(EventType &amp;)&gt; func, EventPriority priority=EventPriority::Normal, bool ignore_cancelled=false)  ~Plugin () override"},{"location":"reference/cpp/classendstone_1_1Plugin/#public-functions-inherited-from-endstonecommandexecutor","title":"Public Functions inherited from endstone::CommandExecutor","text":"<p>See endstone::CommandExecutor</p> Type Name virtual bool onCommand (CommandSender &amp; sender, const Command &amp; command, const std::vector&lt; std::string &gt; &amp; args)  virtual ~CommandExecutor () = default"},{"location":"reference/cpp/classendstone_1_1Plugin/#protected-functions","title":"Protected Functions","text":"Type Name void setEnabled (bool enabled)"},{"location":"reference/cpp/classendstone_1_1Plugin/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Plugin/#function-plugin-12","title":"function Plugin [\u00bd]","text":"<pre><code>endstone::Plugin::Plugin () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-plugin-22","title":"function Plugin [2/2]","text":"<pre><code>endstone::Plugin::Plugin (\n    const Plugin &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getcommand","title":"function getCommand","text":"<p>Gets the command with the given name, specific to this plugin. <pre><code>inline PluginCommand * endstone::Plugin::getCommand (\n    std::string name\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> name or alias of the command </li> </ul> <p>Returns:</p> <p>the plugin command if found, otherwise null </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getdatafolder","title":"function getDataFolder","text":"<p>Returns the folder that the plugin data's files are located in. The folder may not yet exist. <pre><code>inline const std::filesystem::path &amp; endstone::Plugin::getDataFolder () const\n</code></pre></p> <p>Returns:</p> <p>The folder </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getdescription","title":"function getDescription","text":"<p>Returns the details of this plugin. <pre><code>virtual const PluginDescription &amp; endstone::Plugin::getDescription () const = 0\n</code></pre></p> <p>Returns:</p> <p>Details of this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getlogger","title":"function getLogger","text":"<p>Returns the plugin logger associated with this server's logger. The returned logger automatically tags all log messages with the plugin's name. <pre><code>inline Logger &amp; endstone::Plugin::getLogger () const\n</code></pre></p> <p>Returns:</p> <p>Logger associated with this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getname","title":"function getName","text":"<p>Returns the name of the plugin. <pre><code>inline std::string endstone::Plugin::getName () const\n</code></pre></p> <p>This should return the bare name of the plugin and should be used for comparison.</p> <p>Returns:</p> <p>name of the plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getpluginloader","title":"function getPluginLoader","text":"<p>Gets the associated PluginLoader responsible for this plugin. <pre><code>inline PluginLoader &amp; endstone::Plugin::getPluginLoader () const\n</code></pre></p> <p>Returns:</p> <p>PluginLoader that controls this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getserver","title":"function getServer","text":"<p>Returns the Server instance currently running this plugin. <pre><code>inline Server &amp; endstone::Plugin::getServer () const\n</code></pre></p> <p>Returns:</p> <p>Server running this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-isenabled","title":"function isEnabled","text":"<p>Returns a value indicating whether this plugin is currently enabled. <pre><code>inline bool endstone::Plugin::isEnabled () const\n</code></pre></p> <p>Returns:</p> <p>true if this plugin is enabled, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-ondisable","title":"function onDisable","text":"<p>Called when this plugin is disabled. <pre><code>inline virtual void endstone::Plugin::onDisable () \n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-onenable","title":"function onEnable","text":"<p>Called when this plugin is enabled. <pre><code>inline virtual void endstone::Plugin::onEnable () \n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-onload","title":"function onLoad","text":"<p>Called after a plugin is loaded but before it has been enabled. <pre><code>inline virtual void endstone::Plugin::onLoad () \n</code></pre></p> <p>When multiple plugins are loaded, the onLoad() for all plugins is called before any onEnable() is called. </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-operator","title":"function operator=","text":"<pre><code>Plugin &amp; endstone::Plugin::operator= (\n    const Plugin &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-registerevent-12","title":"function registerEvent [\u00bd]","text":"<pre><code>template&lt;typename EventType, typename T&gt;\ninline void endstone::Plugin::registerEvent (\n    void(T::*)(EventType &amp;) func,\n    T &amp; instance,\n    EventPriority priority=EventPriority::Normal,\n    bool ignore_cancelled=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-registerevent-22","title":"function registerEvent [2/2]","text":"<pre><code>template&lt;typename EventType&gt;\ninline void endstone::Plugin::registerEvent (\n    std::function&lt; void(EventType &amp;)&gt; func,\n    EventPriority priority=EventPriority::Normal,\n    bool ignore_cancelled=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-plugin","title":"function ~Plugin","text":"<pre><code>endstone::Plugin::~Plugin () override\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Plugin/#function-setenabled","title":"function setEnabled","text":"<pre><code>inline void endstone::Plugin::setEnabled (\n    bool enabled\n) \n</code></pre> <p>Sets the enabled state of this plugin</p> <p>Parameters:</p> <ul> <li><code>enabled</code> true if enabled, otherwise false </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Plugin/#friends-documentation","title":"Friends Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Plugin/#friend-endstonepluginmanager","title":"friend EndstonePluginManager","text":"<pre><code>class endstone::Plugin::EndstonePluginManager (\n    core::EndstonePluginManager\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/","title":"Class endstone::PluginCommand","text":"<p>ClassList &gt; endstone &gt; PluginCommand</p> <p>Represents a Command belonging to aPlugin .</p> <ul> <li><code>#include &lt;endstone/command/plugin_command.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Command</p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#public-functions","title":"Public Functions","text":"Type Name PluginCommand (const Command &amp; command, Plugin &amp; owner)  virtual PluginCommand * asPluginCommand () override const virtual bool execute (CommandSender &amp; sender, const std::vector&lt; std::string &gt; &amp; args) override const virtual CommandExecutor &amp; getExecutor () const Plugin &amp; getPlugin () const virtual void setExecutor (std::shared_ptr&lt; CommandExecutor &gt; executor)"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#public-functions-inherited-from-endstonecommand","title":"Public Functions inherited from endstone::Command","text":"<p>See endstone::Command</p> Type Name Command (std::string name, std::string description=\"\", std::vector&lt; std::string &gt; usages={}, std::vector&lt; std::string &gt; aliases={}, std::vector&lt; std::string &gt; permissions={})  virtual PluginCommand * asPluginCommand () const virtual bool execute (CommandSender &amp; sender, const std::vector&lt; std::string &gt; &amp; args) const std::vector&lt; std::string &gt; getAliases () const std::string getDescription () const std::string getName () const std::vector&lt; std::string &gt; getPermissions () const std::vector&lt; std::string &gt; getUsages () const bool isRegistered () const bool registerTo (const CommandMap &amp; command_map)  void setAliases (Alias... aliases)  void setDescription (std::string description)  void setName (std::string name)  void setPermissions (Permission... permissions)  void setUsages (Usage... usages)  bool testPermission (const CommandSender &amp; target) const bool testPermissionSilently (const CommandSender &amp; target) const bool unregisterFrom (const CommandMap &amp; command_map)  virtual ~Command () = default"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-plugincommand","title":"function PluginCommand","text":"<pre><code>inline endstone::PluginCommand::PluginCommand (\n    const Command &amp; command,\n    Plugin &amp; owner\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-asplugincommand","title":"function asPluginCommand","text":"<pre><code>inline virtual PluginCommand * endstone::PluginCommand::asPluginCommand () override const\n</code></pre> <p>Implements endstone::Command::asPluginCommand</p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-execute","title":"function execute","text":"<pre><code>inline virtual bool endstone::PluginCommand::execute (\n    CommandSender &amp; sender,\n    const std::vector&lt; std::string &gt; &amp; args\n) override const\n</code></pre> <p>Executes the command, returning its success</p> <p>Parameters:</p> <ul> <li><code>sender</code> Source of the command </li> <li><code>args</code> Arguments passed to the command </li> </ul> <p>Returns:</p> <p>true if the execution was successful, otherwise false </p> <p>Implements endstone::Command::execute</p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-getexecutor","title":"function getExecutor","text":"<pre><code>inline virtual CommandExecutor &amp; endstone::PluginCommand::getExecutor () const\n</code></pre> <p>Gets the CommandExecutor associated with this command</p> <p>Returns:</p> <p>CommandExecutor object linked to this command </p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PluginCommand::getPlugin () const\n</code></pre> <p>Gets the owner of this PluginCommand</p> <p>Returns:</p> <p>Plugin that owns this command </p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-setexecutor","title":"function setExecutor","text":"<pre><code>inline virtual void endstone::PluginCommand::setExecutor (\n    std::shared_ptr&lt; CommandExecutor &gt; executor\n) \n</code></pre> <p>Sets the CommandExecutor to run when parsing this command</p> <p>Parameters:</p> <ul> <li><code>executor</code> New executor to run </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/command/plugin_command.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/","title":"Class endstone::PluginDescription","text":"<p>ClassList &gt; endstone &gt; PluginDescription</p> <p>Represents the basic information about a plugin that the plugin loader needs to know. </p> <ul> <li><code>#include &lt;endstone/plugin/plugin_description.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#public-functions","title":"Public Functions","text":"Type Name PluginDescription (std::string name, std::string version, std::string description=\"\", PluginLoadOrder load=PluginLoadOrder::PostWorld, std::vector&lt; std::string &gt; authors={}, std::vector&lt; std::string &gt; contributors={}, std::string website=\"\", std::string prefix=\"\", std::vector&lt; std::string &gt; provides={}, std::vector&lt; std::string &gt; depend={}, std::vector&lt; std::string &gt; soft_depend={}, std::vector&lt; std::string &gt; load_before={}, PermissionDefault default_permission=PermissionDefault::Operator, std::vector&lt; Command &gt; commands={}, std::vector&lt; Permission &gt; permissions={})  std::string getAPIVersion () const std::vector&lt; std::string &gt; getAuthors () const std::vector&lt; Command &gt; getCommands () const std::vector&lt; std::string &gt; getContributors () const PermissionDefault getDefaultPermission () const std::vector&lt; std::string &gt; getDepend () const std::string getDescription () const std::string getFullName () const PluginLoadOrder getLoad () const std::vector&lt; std::string &gt; getLoadBefore () const std::string getName () const std::vector&lt; Permission &gt; getPermissions () const std::string getPrefix () const std::vector&lt; std::string &gt; getProvides () const std::vector&lt; std::string &gt; getSoftDepend () const std::string getVersion () const std::string getWebsite () const"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-plugindescription","title":"function PluginDescription","text":"<pre><code>inline endstone::PluginDescription::PluginDescription (\n    std::string name,\n    std::string version,\n    std::string description=\"\",\n    PluginLoadOrder load=PluginLoadOrder::PostWorld,\n    std::vector&lt; std::string &gt; authors={},\n    std::vector&lt; std::string &gt; contributors={},\n    std::string website=\"\",\n    std::string prefix=\"\",\n    std::vector&lt; std::string &gt; provides={},\n    std::vector&lt; std::string &gt; depend={},\n    std::vector&lt; std::string &gt; soft_depend={},\n    std::vector&lt; std::string &gt; load_before={},\n    PermissionDefault default_permission=PermissionDefault::Operator,\n    std::vector&lt; Command &gt; commands={},\n    std::vector&lt; Permission &gt; permissions={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getapiversion","title":"function getAPIVersion","text":"<pre><code>inline std::string endstone::PluginDescription::getAPIVersion () const\n</code></pre> <p>Gives the API version which this plugin is designed to support.</p> <p>Returns:</p> <p>the API version supported by the plugin </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getauthors","title":"function getAuthors","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getAuthors () const\n</code></pre> <p>Gives the list of authors for the plugin.</p> <p>Returns:</p> <p>an immutable list of the plugin's authors </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getcommands","title":"function getCommands","text":"<pre><code>inline std::vector&lt; Command &gt; endstone::PluginDescription::getCommands () const\n</code></pre> <p>Gives the list of commands the plugin will register at runtime.</p> <p>Returns:</p> <p>the commands this plugin will register </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getcontributors","title":"function getContributors","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getContributors () const\n</code></pre> <p>Gives the list of contributors for the plugin.</p> <p>Returns:</p> <p>an immutable list of the plugin's contributions </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getdefaultpermission","title":"function getDefaultPermission","text":"<pre><code>inline PermissionDefault endstone::PluginDescription::getDefaultPermission () const\n</code></pre> <p>Gives the default value of permissions registered for the plugin.</p> <p>Returns:</p> <p>the default value for the plugin's permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getdepend","title":"function getDepend","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getDepend () const\n</code></pre> <p>Gives a list of other plugins that the plugin requires.</p> <p>Returns:</p> <p>immutable list of the plugin's dependencies </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getdescription","title":"function getDescription","text":"<pre><code>inline std::string endstone::PluginDescription::getDescription () const\n</code></pre> <p>Gives a human-friendly description of the functionality the plugin provides. </p> <p>Returns:</p> <p>description of this plugin, or empty if not specified </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getfullname","title":"function getFullName","text":"<pre><code>inline std::string endstone::PluginDescription::getFullName () const\n</code></pre> <p>Returns the name of a plugin, including the version.</p> <p>Returns:</p> <p>a descriptive name of the plugin and respective version </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getload","title":"function getLoad","text":"<pre><code>inline PluginLoadOrder endstone::PluginDescription::getLoad () const\n</code></pre> <p>Gives the phase of server startup that the plugin should be loaded.</p> <p>Returns:</p> <p>the phase when the plugin should be loaded </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getloadbefore","title":"function getLoadBefore","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getLoadBefore () const\n</code></pre> <p>Gets the list of plugins that should consider this plugin a soft-dependency.</p> <p>Returns:</p> <p>immutable list of plugins that should consider this plugin a soft-dependency </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getname","title":"function getName","text":"<pre><code>inline std::string endstone::PluginDescription::getName () const\n</code></pre> <p>Gives the name of the plugin. This name is a unique identifier for plugins.</p> <p>Returns:</p> <p>the name of the plugin </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getpermissions","title":"function getPermissions","text":"<pre><code>inline std::vector&lt; Permission &gt; endstone::PluginDescription::getPermissions () const\n</code></pre> <p>Gives the list of permissions the plugin will register at runtime, immediately proceeding enabling.</p> <p>Returns:</p> <p>the permissions this plugin will register </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getprefix","title":"function getPrefix","text":"<pre><code>inline std::string endstone::PluginDescription::getPrefix () const\n</code></pre> <p>Gives the token to prefix plugin-specific logging messages with.</p> <p>Returns:</p> <p>the prefixed logging token, or empty if not specified </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getprovides","title":"function getProvides","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getProvides () const\n</code></pre> <p>Gives the list of other plugin APIs which this plugin provides. These are usable for other plugins to depend on.</p> <p>Returns:</p> <p>immutable list of the plugin APIs which this plugin provides </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getsoftdepend","title":"function getSoftDepend","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getSoftDepend () const\n</code></pre> <p>Gives a list of other plugins that the plugin requires for full functionality.</p> <p>Returns:</p> <p>immutable list of the plugin's preferred dependencies </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getversion","title":"function getVersion","text":"<pre><code>inline std::string endstone::PluginDescription::getVersion () const\n</code></pre> <p>Gives the version of the plugin.</p> <p>Returns:</p> <p>the version of the plugin </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getwebsite","title":"function getWebsite","text":"<pre><code>inline std::string endstone::PluginDescription::getWebsite () const\n</code></pre> <p>Gives the plugin's or plugin's author's website.</p> <p>Returns:</p> <p>the website of this plugin, or empty if not specified </p> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_description.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/","title":"Class endstone::PluginDisableEvent","text":"<p>ClassList &gt; endstone &gt; PluginDisableEvent</p> <p>Called when a plugin is disabled. </p> <ul> <li><code>#include &lt;endstone/event/server/plugin_disable_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PluginDisableEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions","title":"Public Functions","text":"Type Name PluginDisableEvent (Plugin &amp; plugin)  virtual std::string getEventName () override const Plugin &amp; getPlugin () const"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PluginDisableEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#function-plugindisableevent","title":"function PluginDisableEvent","text":"<pre><code>inline explicit endstone::PluginDisableEvent::PluginDisableEvent (\n    Plugin &amp; plugin\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PluginDisableEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PluginDisableEvent::getPlugin () const\n</code></pre> <p>Gets the plugin involved in this event</p> <p>Returns:</p> <p>Plugin for this event </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_disable_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/","title":"Class endstone::PluginEnableEvent","text":"<p>ClassList &gt; endstone &gt; PluginEnableEvent</p> <p>Called when a plugin is enabled. </p> <ul> <li><code>#include &lt;endstone/event/server/plugin_enable_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"PluginEnableEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions","title":"Public Functions","text":"Type Name PluginEnableEvent (Plugin &amp; plugin)  virtual std::string getEventName () override const Plugin &amp; getPlugin () const"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PluginEnableEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#function-pluginenableevent","title":"function PluginEnableEvent","text":"<pre><code>inline explicit endstone::PluginEnableEvent::PluginEnableEvent (\n    Plugin &amp; plugin\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PluginEnableEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PluginEnableEvent::getPlugin () const\n</code></pre> <p>Gets the plugin involved in this event</p> <p>Returns:</p> <p>Plugin for this event </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_enable_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/","title":"Class endstone::PluginLoader","text":"<p>ClassList &gt; endstone &gt; PluginLoader</p> <p>Represents a plugin loader, which handles direct access to specific types of plugins. </p> <ul> <li><code>#include &lt;endstone/plugin/plugin_loader.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#public-functions","title":"Public Functions","text":"Type Name PluginLoader (Server &amp; server)  PluginLoader (const PluginLoader &amp;) = delete virtual void disablePlugin (Plugin &amp; plugin) constDisables the specified plugin Attempting to disable a plugin that is not enabled will have no effect. virtual void enablePlugin (Plugin &amp; plugin) constEnables the specified plugin Attempting to enable a plugin that is already enabled will have no effect. virtual std::vector&lt; std::string &gt; getPluginFileFilters () const = 0Returns a list of all filename filters expected by this PluginLoader . Server &amp; getServer () constRetrieves the Server object associated with thePluginLoader . virtual Plugin * loadPlugin (std::string file) = 0 virtual std::vector&lt; Plugin * &gt; loadPlugins (std::string directory) Loads the plugin contained within the specified directory. PluginLoader &amp; operator= (const PluginLoader &amp;) = delete virtual ~PluginLoader () = default"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#protected-attributes","title":"Protected Attributes","text":"Type Name Server &amp; server_"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-pluginloader-12","title":"function PluginLoader [\u00bd]","text":"<pre><code>inline explicit endstone::PluginLoader::PluginLoader (\n    Server &amp; server\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-pluginloader-22","title":"function PluginLoader [2/2]","text":"<pre><code>endstone::PluginLoader::PluginLoader (\n    const PluginLoader &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-disableplugin","title":"function disablePlugin","text":"<p>Disables the specified plugin Attempting to disable a plugin that is not enabled will have no effect. <pre><code>inline virtual void endstone::PluginLoader::disablePlugin (\n    Plugin &amp; plugin\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to disable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-enableplugin","title":"function enablePlugin","text":"<p>Enables the specified plugin Attempting to enable a plugin that is already enabled will have no effect. <pre><code>inline virtual void endstone::PluginLoader::enablePlugin (\n    Plugin &amp; plugin\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to enable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-getpluginfilefilters","title":"function getPluginFileFilters","text":"<p>Returns a list of all filename filters expected by this PluginLoader . <pre><code>virtual std::vector&lt; std::string &gt; endstone::PluginLoader::getPluginFileFilters () const = 0\n</code></pre></p> <p>Returns:</p> <p>The filters </p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-getserver","title":"function getServer","text":"<p>Retrieves the Server object associated with thePluginLoader . <pre><code>inline Server &amp; endstone::PluginLoader::getServer () const\n</code></pre></p> <p>This function returns a reference to the Server object that the PluginLoader is associated with.</p> <p>Returns:</p> <p>The Server reference. </p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-loadplugin","title":"function loadPlugin","text":"<pre><code>virtual Plugin * endstone::PluginLoader::loadPlugin (\n    std::string file\n) = 0\n</code></pre> <p>Loads the plugin contained in the specified file</p> <p>Parameters:</p> <ul> <li><code>file</code> File to attempt to load </li> </ul> <p>Returns:</p> <p>Plugin that was contained in the specified file, or nullptr if unsuccessful </p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-loadplugins","title":"function loadPlugins","text":"<p>Loads the plugin contained within the specified directory. <pre><code>inline virtual std::vector&lt; Plugin * &gt; endstone::PluginLoader::loadPlugins (\n    std::string directory\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>directory</code> Directory to check for plugins </li> </ul> <p>Returns:</p> <p>A list of all plugins loaded </p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-operator","title":"function operator=","text":"<pre><code>PluginLoader &amp; endstone::PluginLoader::operator= (\n    const PluginLoader &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-pluginloader","title":"function ~PluginLoader","text":"<pre><code>virtual endstone::PluginLoader::~PluginLoader () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginLoader/#variable-server_","title":"variable server_","text":"<pre><code>Server&amp; endstone::PluginLoader::server_;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_loader.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/","title":"Class endstone::PluginManager","text":"<p>ClassList &gt; endstone &gt; PluginManager</p> <p>Represents a plugin manager that handles all plugins from the Server .</p> <ul> <li><code>#include &lt;endstone/plugin/plugin_manager.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#public-functions","title":"Public Functions","text":"Type Name PluginManager () = default PluginManager (PluginManager const &amp;) = delete virtual Permission * addPermission (std::unique_ptr&lt; Permission &gt; perm) = 0 virtual void callEvent (Event &amp; event) = 0 virtual void clearPlugins () = 0 virtual void disablePlugin (Plugin &amp; plugin) = 0 virtual void disablePlugins () = 0 virtual void enablePlugin (Plugin &amp; plugin) const = 0 virtual void enablePlugins () const = 0 virtual std::unordered_set&lt; Permissible * &gt; getDefaultPermSubscriptions (PermissionLevel level) const = 0 virtual std::vector&lt; Permission * &gt; getDefaultPermissions (PermissionLevel level) const = 0 virtual Permission * getPermission (std::string name) const = 0 virtual std::unordered_set&lt; Permissible * &gt; getPermissionSubscriptions (std::string permission) const = 0 virtual std::unordered_set&lt; Permission * &gt; getPermissions () const = 0 virtual Plugin * getPlugin (const std::string &amp; name) const = 0 virtual std::vector&lt; Plugin * &gt; getPlugins () const = 0 virtual bool isPluginEnabled (const std::string &amp; name) const = 0 virtual bool isPluginEnabled (Plugin * plugin) const = 0 virtual Plugin * loadPlugin (std::string file) = 0 virtual std::vector&lt; Plugin * &gt; loadPlugins (std::string directory) = 0 virtual std::vector&lt; Plugin * &gt; loadPlugins (std::vector&lt; std::string &gt; files) = 0 PluginManager &amp; operator= (PluginManager const &amp;) = delete virtual void recalculatePermissionDefaults (Permission &amp; perm) = 0 virtual void registerEvent (std::string event, std::function&lt; void(Event &amp;)&gt; executor, EventPriority priority, Plugin &amp; plugin, bool ignore_cancelled) = 0 virtual void registerLoader (std::unique_ptr&lt; PluginLoader &gt; loader) = 0 virtual void removePermission (Permission &amp; perm) = 0 virtual void removePermission (std::string name) = 0 virtual void subscribeToDefaultPerms (PermissionLevel level, Permissible &amp; permissible) = 0 virtual void subscribeToPermission (std::string permission, Permissible &amp; permissible) = 0 virtual void unsubscribeFromDefaultPerms (PermissionLevel level, Permissible &amp; permissible) = 0 virtual void unsubscribeFromPermission (std::string permission, Permissible &amp; permissible) = 0 virtual ~PluginManager () = default"},{"location":"reference/cpp/classendstone_1_1PluginManager/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-pluginmanager-12","title":"function PluginManager [\u00bd]","text":"<pre><code>endstone::PluginManager::PluginManager () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-pluginmanager-22","title":"function PluginManager [2/2]","text":"<pre><code>endstone::PluginManager::PluginManager (\n    PluginManager const &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-addpermission","title":"function addPermission","text":"<pre><code>virtual Permission * endstone::PluginManager::addPermission (\n    std::unique_ptr&lt; Permission &gt; perm\n) = 0\n</code></pre> <p>Adds a Permission to this plugin manager.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to add </li> </ul> <p>Returns:</p> <p>Permission, or nullptr if a permission is already defined with the given name of the new permission </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-callevent","title":"function callEvent","text":"<pre><code>virtual void endstone::PluginManager::callEvent (\n    Event &amp; event\n) = 0\n</code></pre> <p>Calls an event which will be passed to plugins.</p> <p>Parameters:</p> <ul> <li><code>event</code> Event to be called </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-clearplugins","title":"function clearPlugins","text":"<pre><code>virtual void endstone::PluginManager::clearPlugins () = 0\n</code></pre> <p>Disables and removes all plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-disableplugin","title":"function disablePlugin","text":"<pre><code>virtual void endstone::PluginManager::disablePlugin (\n    Plugin &amp; plugin\n) = 0\n</code></pre> <p>Disables the specified plugin Attempting to disable a plugin that is not enabled will have no effect</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to disable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-disableplugins","title":"function disablePlugins","text":"<pre><code>virtual void endstone::PluginManager::disablePlugins () = 0\n</code></pre> <p>Disables all the loaded plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-enableplugin","title":"function enablePlugin","text":"<pre><code>virtual void endstone::PluginManager::enablePlugin (\n    Plugin &amp; plugin\n) const = 0\n</code></pre> <p>Enables the specified plugin Attempting to enable a plugin that is already enabled will have no effect</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to enable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-enableplugins","title":"function enablePlugins","text":"<pre><code>virtual void endstone::PluginManager::enablePlugins () const = 0\n</code></pre> <p>Enable all the loaded plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getdefaultpermsubscriptions","title":"function getDefaultPermSubscriptions","text":"<pre><code>virtual std::unordered_set&lt; Permissible * &gt; endstone::PluginManager::getDefaultPermSubscriptions (\n    PermissionLevel level\n) const = 0\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given default list, by permission level</p> <p>Parameters:</p> <ul> <li><code>level</code> Default list to query for </li> </ul> <p>Returns:</p> <p>Set containing all subscribed permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getdefaultpermissions","title":"function getDefaultPermissions","text":"<pre><code>virtual std::vector&lt; Permission * &gt; endstone::PluginManager::getDefaultPermissions (\n    PermissionLevel level\n) const = 0\n</code></pre> <p>Gets the default permissions for the given permission level</p> <p>Parameters:</p> <ul> <li><code>level</code> Which set of default permissions to get </li> </ul> <p>Returns:</p> <p>The default permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getpermission","title":"function getPermission","text":"<pre><code>virtual Permission * endstone::PluginManager::getPermission (\n    std::string name\n) const = 0\n</code></pre> <p>Gets a Permission from its fully qualified name</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>Permission, or null if none </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getpermissionsubscriptions","title":"function getPermissionSubscriptions","text":"<pre><code>virtual std::unordered_set&lt; Permissible * &gt; endstone::PluginManager::getPermissionSubscriptions (\n    std::string permission\n) const = 0\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given permission, by name</p> <p>Parameters:</p> <ul> <li><code>permission</code> Permission to query for </li> </ul> <p>Returns:</p> <p>Set containing all subscribed permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getpermissions","title":"function getPermissions","text":"<pre><code>virtual std::unordered_set&lt; Permission * &gt; endstone::PluginManager::getPermissions () const = 0\n</code></pre> <p>Gets a set of all registered permissions.</p> <p>This set is a copy and will not be modified live.</p> <p>Returns:</p> <p>Set containing all current registered permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getplugin","title":"function getPlugin","text":"<pre><code>virtual Plugin * endstone::PluginManager::getPlugin (\n    const std::string &amp; name\n) const = 0\n</code></pre> <p>Checks if the given plugin is loaded and returns it when applicable. Please note that the name of the plugin is case-sensitive</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the plugin to check </li> </ul> <p>Returns:</p> <p>Plugin if it exists, otherwise nullptr </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getplugins","title":"function getPlugins","text":"<pre><code>virtual std::vector&lt; Plugin * &gt; endstone::PluginManager::getPlugins () const = 0\n</code></pre> <p>Gets a list of all currently loaded plugins</p> <p>Returns:</p> <p>List of Plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-ispluginenabled-12","title":"function isPluginEnabled [\u00bd]","text":"<pre><code>virtual bool endstone::PluginManager::isPluginEnabled (\n    const std::string &amp; name\n) const = 0\n</code></pre> <p>Checks if the given plugin is enabled or not Please note that the name of the plugin is case-sensitive.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the plugin to check </li> </ul> <p>Returns:</p> <p>true if the plugin is enabled, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-ispluginenabled-22","title":"function isPluginEnabled [2/2]","text":"<pre><code>virtual bool endstone::PluginManager::isPluginEnabled (\n    Plugin * plugin\n) const = 0\n</code></pre> <p>Checks if the given plugin is enabled or not</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to check </li> </ul> <p>Returns:</p> <p>true if the plugin is enabled, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-loadplugin","title":"function loadPlugin","text":"<pre><code>virtual Plugin * endstone::PluginManager::loadPlugin (\n    std::string file\n) = 0\n</code></pre> <p>Loads the plugin in the specified file</p> <p>File must be valid according to the current enabled Plugin interfaces</p> <p>Parameters:</p> <ul> <li><code>file</code> File containing the plugin to load </li> </ul> <p>Returns:</p> <p>The Plugin loaded, or nullptr if it was invalid </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-loadplugins-12","title":"function loadPlugins [\u00bd]","text":"<pre><code>virtual std::vector&lt; Plugin * &gt; endstone::PluginManager::loadPlugins (\n    std::string directory\n) = 0\n</code></pre> <p>Loads the plugin contained within the specified directory</p> <p>Parameters:</p> <ul> <li><code>directory</code> Directory to check for plugins </li> </ul> <p>Returns:</p> <p>A list of all plugins loaded </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-loadplugins-22","title":"function loadPlugins [2/2]","text":"<pre><code>virtual std::vector&lt; Plugin * &gt; endstone::PluginManager::loadPlugins (\n    std::vector&lt; std::string &gt; files\n) = 0\n</code></pre> <p>Loads the plugins in the list of the files</p> <p>Parameters:</p> <ul> <li><code>files</code> List of files containing plugins to load </li> </ul> <p>Returns:</p> <p>A list of all plugins loaded </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-operator","title":"function operator=","text":"<pre><code>PluginManager &amp; endstone::PluginManager::operator= (\n    PluginManager const &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-recalculatepermissiondefaults","title":"function recalculatePermissionDefaults","text":"<pre><code>virtual void endstone::PluginManager::recalculatePermissionDefaults (\n    Permission &amp; perm\n) = 0\n</code></pre> <p>Recalculates the defaults for the given <code>Permission</code>.</p> <p>This will have no effect if the specified permission is not registered here.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to recalculate </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-registerevent","title":"function registerEvent","text":"<pre><code>virtual void endstone::PluginManager::registerEvent (\n    std::string event,\n    std::function&lt; void( Event &amp;)&gt; executor,\n    EventPriority priority,\n    Plugin &amp; plugin,\n    bool ignore_cancelled\n) = 0\n</code></pre> <p>Registers the given event</p> <p>Parameters:</p> <ul> <li><code>event</code> Event name to register </li> <li><code>executor</code> EventExecutor to register </li> <li><code>priority</code> Priority of this event </li> <li><code>plugin</code> Plugin to register </li> <li><code>ignore_cancelled</code> Do not call executor if event was already cancelled </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-registerloader","title":"function registerLoader","text":"<pre><code>virtual void endstone::PluginManager::registerLoader (\n    std::unique_ptr&lt; PluginLoader &gt; loader\n) = 0\n</code></pre> <p>Registers the specified plugin loader</p> <p>Parameters:</p> <ul> <li><code>loader</code> PluginLoader to register </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-removepermission-12","title":"function removePermission [\u00bd]","text":"<pre><code>virtual void endstone::PluginManager::removePermission (\n    Permission &amp; perm\n) = 0\n</code></pre> <p>Removes a Permission registration from this plugin manager.</p> <p>If the specified permission does not exist in this plugin manager, nothing will happen. Removing a permission registration will not remove the permission from any Permissibles that have it.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-removepermission-22","title":"function removePermission [2/2]","text":"<pre><code>virtual void endstone::PluginManager::removePermission (\n    std::string name\n) = 0\n</code></pre> <p>Removes a Permission registration from this plugin manager.</p> <p>If the specified permission does not exist in this plugin manager, nothing will happen. Removing a permission registration will not remove the permission from any Permissibles that have it.</p> <p>Parameters:</p> <ul> <li><code>name</code> Permission to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-subscribetodefaultperms","title":"function subscribeToDefaultPerms","text":"<pre><code>virtual void endstone::PluginManager::subscribeToDefaultPerms (\n    PermissionLevel level,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Subscribes to the given Default permissions by permission level</p> <p>If the specified defaults change in any form, the Permissible will be asked to recalculate.</p> <p>Parameters:</p> <ul> <li><code>level</code> Default list to subscribe to </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-subscribetopermission","title":"function subscribeToPermission","text":"<pre><code>virtual void endstone::PluginManager::subscribeToPermission (\n    std::string permission,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Subscribes the given Permissible for information about the requested Permission, by name. If the specified Permission changes in any form, the Permissible will be asked to recalculate.</p> <p>Parameters:</p> <ul> <li><code>permission</code> Permission to subscribe to </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-unsubscribefromdefaultperms","title":"function unsubscribeFromDefaultPerms","text":"<pre><code>virtual void endstone::PluginManager::unsubscribeFromDefaultPerms (\n    PermissionLevel level,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Unsubscribes from the given Default permissions by permission level</p> <p>Parameters:</p> <ul> <li><code>level</code> Default list to unsubscribe from </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-unsubscribefrompermission","title":"function unsubscribeFromPermission","text":"<pre><code>virtual void endstone::PluginManager::unsubscribeFromPermission (\n    std::string permission,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Unsubscribes the given Permissible for information about the requested Permission, by name.</p> <p>Parameters:</p> <ul> <li><code>permission</code> Permission to unsubscribe from </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-pluginmanager","title":"function ~PluginManager","text":"<pre><code>virtual endstone::PluginManager::~PluginManager () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_manager.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Recipe/","title":"Class endstone::Recipe","text":"<p>ClassList &gt; endstone &gt; Recipe</p> <p>Represents some type of crafting recipe. </p> <ul> <li><code>#include &lt;endstone/inventory/recipe.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Recipe/#public-functions","title":"Public Functions","text":"Type Name virtual std::unique_ptr&lt; ItemStack &gt; getResult () const = 0Get the result of this recipe. virtual ~Recipe () = default"},{"location":"reference/cpp/classendstone_1_1Recipe/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Recipe/#function-getresult","title":"function getResult","text":"<p>Get the result of this recipe. <pre><code>virtual std::unique_ptr&lt; ItemStack &gt; endstone::Recipe::getResult () const = 0\n</code></pre></p> <p>Returns:</p> <p>The result stack </p>"},{"location":"reference/cpp/classendstone_1_1Recipe/#function-recipe","title":"function ~Recipe","text":"<pre><code>virtual endstone::Recipe::~Recipe () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/recipe.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Registry/","title":"Class endstone::Registry","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; endstone &gt; Registry</p> <p>Abstract registry interface for keyed objects. More...</p> <ul> <li><code>#include &lt;endstone/registry.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Registry/#public-functions","title":"Public Functions","text":"Type Name virtual void forEach (std::function&lt; bool(const T &amp;)&gt; func) const = 0Apply a function to each stored element. virtual T * get (const std::string &amp; key) noexcept = 0Get the object by its key. virtual const T * get (const std::string &amp; key) noexcept const = 0Get the object by its key. virtual T &amp; getOrThrow (const std::string &amp; key) Get the object by its key or throw if missing. virtual const T &amp; getOrThrow (const std::string &amp; key) constGet the object by its key or throw if missing. virtual ~Registry () = default"},{"location":"reference/cpp/classendstone_1_1Registry/#detailed-description","title":"Detailed Description","text":"<p>Provides lookup by key (nullable or exception-throwing) and iteration.</p> <p>Template parameters:</p> <ul> <li><code>T</code> Must satisfy Keyed, i.e. implement getKey(). </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Registry/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Registry/#function-foreach","title":"function forEach","text":"<p>Apply a function to each stored element. <pre><code>virtual void endstone::Registry::forEach (\n    std::function&lt; bool(const T &amp;)&gt; func\n) const = 0\n</code></pre></p> <p>Iterates over all stored elements and applies the provided function to them. The iteration continues until the function returns false or all elements have been processed.</p> <p>Parameters:</p> <ul> <li><code>func</code> A callable object taking a const reference to an element and returning a boolean. Returning false stops the iteration. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Registry/#function-get-12","title":"function get [\u00bd]","text":"<p>Get the object by its key. <pre><code>virtual T * endstone::Registry::get (\n    const std::string &amp; key\n) noexcept = 0\n</code></pre></p> <p>Returns a raw pointer to the object, or nullptr if not found.</p> <p>Parameters:</p> <ul> <li><code>key</code> Non-null key to look up. </li> </ul> <p>Returns:</p> <p>T* Pointer to the object, or nullptr if it does not exist. </p>"},{"location":"reference/cpp/classendstone_1_1Registry/#function-get-22","title":"function get [2/2]","text":"<p>Get the object by its key. <pre><code>virtual const T * endstone::Registry::get (\n    const std::string &amp; key\n) noexcept const = 0\n</code></pre></p> <p>Returns a raw pointer to the object, or nullptr if not found.</p> <p>Parameters:</p> <ul> <li><code>key</code> Non-null key to look up. </li> </ul> <p>Returns:</p> <p>const T* Pointer to the object, or nullptr if it does not exist. </p>"},{"location":"reference/cpp/classendstone_1_1Registry/#function-getorthrow-12","title":"function getOrThrow [\u00bd]","text":"<p>Get the object by its key or throw if missing. <pre><code>inline virtual T &amp; endstone::Registry::getOrThrow (\n    const std::string &amp; key\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>key</code> Key of the object to retrieve. </li> </ul> <p>Returns:</p> <p>T&amp; Reference to the object with the given key. </p> <p>Exception:</p> <ul> <li><code>std::invalid_argument</code> if no object with the given key exists. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Registry/#function-getorthrow-22","title":"function getOrThrow [2/2]","text":"<p>Get the object by its key or throw if missing. <pre><code>inline virtual const T &amp; endstone::Registry::getOrThrow (\n    const std::string &amp; key\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>key</code> Key of the object to retrieve. </li> </ul> <p>Returns:</p> <p>const T&amp; Const reference to the object with the given key. </p> <p>Exception:</p> <ul> <li><code>std::invalid_argument</code> if no object with the given key exists. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Registry/#function-registry","title":"function ~Registry","text":"<pre><code>virtual endstone::Registry::~Registry () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/registry.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/","title":"Class endstone::Scheduler","text":"<p>ClassList &gt; endstone &gt; Scheduler</p> <p>Represents a scheduler that executes various tasks. </p> <ul> <li><code>#include &lt;endstone/scheduler/scheduler.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#public-functions","title":"Public Functions","text":"Type Name virtual void cancelTask (TaskId id) = 0 virtual void cancelTasks (Plugin &amp; plugin) = 0 virtual std::vector&lt; Task * &gt; getPendingTasks () = 0 virtual bool isQueued (TaskId id) = 0 virtual bool isRunning (TaskId id) = 0 virtual std::shared_ptr&lt; Task &gt; runTask (Plugin &amp; plugin, std::function&lt; void()&gt; task) = 0 virtual std::shared_ptr&lt; Task &gt; runTaskAsync (Plugin &amp; plugin, std::function&lt; void()&gt; task) = 0Returns a task that will be executed asynchronously on the next server tick. virtual std::shared_ptr&lt; Task &gt; runTaskLater (Plugin &amp; plugin, std::function&lt; void()&gt; task, std::uint64_t delay) = 0 virtual std::shared_ptr&lt; Task &gt; runTaskLaterAsync (Plugin &amp; plugin, std::function&lt; void()&gt; task, std::uint64_t delay) = 0Returns a task that will be executed asynchronously after the specified number of server ticks. virtual std::shared_ptr&lt; Task &gt; runTaskTimer (Plugin &amp; plugin, std::function&lt; void()&gt; task, std::uint64_t delay, std::uint64_t period) = 0 virtual std::shared_ptr&lt; Task &gt; runTaskTimerAsync (Plugin &amp; plugin, std::function&lt; void()&gt; task, std::uint64_t delay, std::uint64_t period) = 0Returns a task that will be executed repeatedly (and asynchronously) until cancelled, starting after the specified number of server ticks. virtual ~Scheduler () = default"},{"location":"reference/cpp/classendstone_1_1Scheduler/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-canceltask","title":"function cancelTask","text":"<pre><code>virtual void endstone::Scheduler::cancelTask (\n    TaskId id\n) = 0\n</code></pre> <p>Removes task from scheduler.</p> <p>Parameters:</p> <ul> <li><code>taskId</code> Id number of task to be removed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-canceltasks","title":"function cancelTasks","text":"<pre><code>virtual void endstone::Scheduler::cancelTasks (\n    Plugin &amp; plugin\n) = 0\n</code></pre> <p>Removes all tasks associated with a particular plugin from the scheduler.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Owner of tasks to be removed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-getpendingtasks","title":"function getPendingTasks","text":"<pre><code>virtual std::vector&lt; Task * &gt; endstone::Scheduler::getPendingTasks () = 0\n</code></pre> <p>Returns a vector of all pending tasks.</p> <p>The ordering of the tasks is NOT related to their order of execution.</p> <p>Returns:</p> <p>Pending tasks </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-isqueued","title":"function isQueued","text":"<pre><code>virtual bool endstone::Scheduler::isQueued (\n    TaskId id\n) = 0\n</code></pre> <p>Check if the task queued to be run later.</p> <p>Parameters:</p> <ul> <li><code>taskId</code> The task to check.</li> </ul> <p>Returns:</p> <p>If the task is queued to be run. </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-isrunning","title":"function isRunning","text":"<pre><code>virtual bool endstone::Scheduler::isRunning (\n    TaskId id\n) = 0\n</code></pre> <p>Check if the task currently running.</p> <p>Parameters:</p> <ul> <li><code>taskId</code> The task to check.</li> </ul> <p>Returns:</p> <p>If the task is currently running. </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtask","title":"function runTask","text":"<pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTask (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task\n) = 0\n</code></pre> <p>Returns a task that will be executed synchronously on the next server tick.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtaskasync","title":"function runTaskAsync","text":"<p>Returns a task that will be executed asynchronously on the next server tick. <pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTaskAsync (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task\n) = 0\n</code></pre></p> <p>Remark:</p> <p>Asynchronous tasks should never access any Endstone API</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtasklater","title":"function runTaskLater","text":"<pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTaskLater (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task,\n    std::uint64_t delay\n) = 0\n</code></pre> <p>Returns a task that will be executed synchronously after the specified number of server ticks.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> <li><code>delay</code> the ticks to wait before running the task </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtasklaterasync","title":"function runTaskLaterAsync","text":"<p>Returns a task that will be executed asynchronously after the specified number of server ticks. <pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTaskLaterAsync (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task,\n    std::uint64_t delay\n) = 0\n</code></pre></p> <p>Remark:</p> <p>Asynchronous tasks should never access any Endstone API</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> <li><code>delay</code> the ticks to wait before running the task </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtasktimer","title":"function runTaskTimer","text":"<pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTaskTimer (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task,\n    std::uint64_t delay,\n    std::uint64_t period\n) = 0\n</code></pre> <p>Returns a task that will be executed repeatedly (and synchronously) until cancelled, starting after the specified number of server ticks.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> <li><code>delay</code> the ticks to wait before running the task </li> <li><code>period</code> the ticks to wait between runs </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtasktimerasync","title":"function runTaskTimerAsync","text":"<p>Returns a task that will be executed repeatedly (and asynchronously) until cancelled, starting after the specified number of server ticks. <pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTaskTimerAsync (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task,\n    std::uint64_t delay,\n    std::uint64_t period\n) = 0\n</code></pre></p> <p>Remark:</p> <p>Asynchronous tasks should never access any Endstone API</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> <li><code>delay</code> the ticks to wait before running the task </li> <li><code>period</code> the ticks to wait between runs </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-scheduler","title":"function ~Scheduler","text":"<pre><code>virtual endstone::Scheduler::~Scheduler () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/scheduler.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Score/","title":"Class endstone::Score","text":"<p>ClassList &gt; endstone &gt; Score</p> <p>Represents a score for an objective on a scoreboard. </p> <ul> <li><code>#include &lt;endstone/scoreboard/score.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Score/#public-functions","title":"Public Functions","text":"Type Name virtual ScoreEntry getEntry () const = 0Gets the entry being tracked by this Score . virtual Objective &amp; getObjective () const = 0Gets the Objective being tracked by thisScore . virtual Scoreboard &amp; getScoreboard () const = 0Gets the scoreboard for the associated objective. virtual Result&lt; int &gt; getValue () const = 0Gets the current score. virtual Result&lt; bool &gt; isScoreSet () const = 0Shows if this score has been set at any point in time. virtual Result&lt; void &gt; setValue (int score) = 0Sets the current score. virtual ~Score () = default"},{"location":"reference/cpp/classendstone_1_1Score/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Score/#function-getentry","title":"function getEntry","text":"<p>Gets the entry being tracked by this Score . <pre><code>virtual ScoreEntry endstone::Score::getEntry () const = 0\n</code></pre></p> <p>Returns:</p> <p>this Score's tracked entry </p>"},{"location":"reference/cpp/classendstone_1_1Score/#function-getobjective","title":"function getObjective","text":"<p>Gets the Objective being tracked by thisScore . <pre><code>virtual Objective &amp; endstone::Score::getObjective () const = 0\n</code></pre></p> <p>Returns:</p> <p>the owning objective's scoreboard </p>"},{"location":"reference/cpp/classendstone_1_1Score/#function-getscoreboard","title":"function getScoreboard","text":"<p>Gets the scoreboard for the associated objective. <pre><code>virtual Scoreboard &amp; endstone::Score::getScoreboard () const = 0\n</code></pre></p> <p>Returns:</p> <p>the owning objective's scoreboard </p>"},{"location":"reference/cpp/classendstone_1_1Score/#function-getvalue","title":"function getValue","text":"<p>Gets the current score. <pre><code>virtual Result&lt; int &gt; endstone::Score::getValue () const = 0\n</code></pre></p> <p>Returns:</p> <p>the current score </p>"},{"location":"reference/cpp/classendstone_1_1Score/#function-isscoreset","title":"function isScoreSet","text":"<p>Shows if this score has been set at any point in time. <pre><code>virtual Result&lt; bool &gt; endstone::Score::isScoreSet () const = 0\n</code></pre></p> <p>Returns:</p> <p>if this score has been set before </p>"},{"location":"reference/cpp/classendstone_1_1Score/#function-setvalue","title":"function setValue","text":"<p>Sets the current score. <pre><code>virtual Result&lt; void &gt; endstone::Score::setValue (\n    int score\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>score</code> New score </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Score/#function-score","title":"function ~Score","text":"<pre><code>virtual endstone::Score::~Score () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/score.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/","title":"Class endstone::Scoreboard","text":"<p>ClassList &gt; endstone &gt; Scoreboard</p> <p>Represents a scoreboard. </p> <ul> <li><code>#include &lt;endstone/scoreboard/scoreboard.h&gt;</code></li> </ul> <p>Inherits the following classes: std::enable_shared_from_this&lt; Scoreboard &gt;</p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#public-functions","title":"Public Functions","text":"Type Name virtual Result&lt; std::unique_ptr&lt; Objective &gt; &gt; addObjective (std::string name, Criteria::Type criteria) = 0Registers an Objective on thisScoreboard . virtual Result&lt; std::unique_ptr&lt; Objective &gt; &gt; addObjective (std::string name, Criteria::Type criteria, std::string display_name) = 0Registers an Objective on thisScoreboard . virtual Result&lt; std::unique_ptr&lt; Objective &gt; &gt; addObjective (std::string name, Criteria::Type criteria, std::string display_name, RenderType render_type) = 0Registers an Objective on thisScoreboard . virtual void clearSlot (DisplaySlot slot) = 0Clears any objective in the specified slot. virtual std::vector&lt; ScoreEntry &gt; getEntries () const = 0Gets all entries tracked by this Scoreboard . virtual std::unique_ptr&lt; Objective &gt; getObjective (std::string name) const = 0Gets an Objective on thisScoreboard by name. virtual std::unique_ptr&lt; Objective &gt; getObjective (DisplaySlot slot) const = 0Gets the Objective currently displayed in a DisplaySlot on thisScoreboard . virtual std::vector&lt; std::unique_ptr&lt; Objective &gt; &gt; getObjectives () const = 0Gets all Objectives on this Scoreboard . virtual std::vector&lt; std::unique_ptr&lt; Objective &gt; &gt; getObjectivesByCriteria (Criteria::Type criteria) const = 0Gets all Objectives of a Criteria on theScoreboard . virtual std::vector&lt; std::unique_ptr&lt; Score &gt; &gt; getScores (ScoreEntry entry) const = 0Gets all scores for an entry on this Scoreboard . virtual void resetScores (ScoreEntry entry) = 0Removes all scores for an entry on this Scoreboard . virtual ~Scoreboard () = default"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-addobjective-13","title":"function addObjective [\u2153]","text":"<p>Registers an Objective on thisScoreboard . <pre><code>virtual Result&lt; std::unique_ptr&lt; Objective &gt; &gt; endstone::Scoreboard::addObjective (\n    std::string name,\n    Criteria::Type criteria\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the Objective </li> <li><code>criteria</code> Criteria for the Objective </li> </ul> <p>Returns:</p> <p>A reference to the newly registered Objective. </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-addobjective-23","title":"function addObjective [\u2154]","text":"<p>Registers an Objective on thisScoreboard . <pre><code>virtual Result&lt; std::unique_ptr&lt; Objective &gt; &gt; endstone::Scoreboard::addObjective (\n    std::string name,\n    Criteria::Type criteria,\n    std::string display_name\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the Objective </li> <li><code>criteria</code> Criteria type for the Objective </li> <li><code>display_name</code> Name displayed to players for the Objective. </li> </ul> <p>Returns:</p> <p>A reference to the newly registered Objective. </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-addobjective-33","title":"function addObjective [3/3]","text":"<p>Registers an Objective on thisScoreboard . <pre><code>virtual Result&lt; std::unique_ptr&lt; Objective &gt; &gt; endstone::Scoreboard::addObjective (\n    std::string name,\n    Criteria::Type criteria,\n    std::string display_name,\n    RenderType render_type\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the Objective </li> <li><code>criteria</code> Criteria type for the Objective </li> <li><code>display_name</code> Name displayed to players for the Objective. </li> <li><code>render_type</code> Manner of rendering the Objective </li> </ul> <p>Returns:</p> <p>A reference to the newly registered Objective. </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-clearslot","title":"function clearSlot","text":"<p>Clears any objective in the specified slot. <pre><code>virtual void endstone::Scoreboard::clearSlot (\n    DisplaySlot slot\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>slot</code> the slot to remove objectives </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-getentries","title":"function getEntries","text":"<p>Gets all entries tracked by this Scoreboard . <pre><code>virtual std::vector&lt; ScoreEntry &gt; endstone::Scoreboard::getEntries () const = 0\n</code></pre></p> <p>Returns:</p> <p>A list of all tracked entries </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-getobjective-12","title":"function getObjective [\u00bd]","text":"<p>Gets an Objective on thisScoreboard by name. <pre><code>virtual std::unique_ptr&lt; Objective &gt; endstone::Scoreboard::getObjective (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the Objective </li> </ul> <p>Returns:</p> <p>the Objective or <code>nullptr</code> if it does not exist </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-getobjective-22","title":"function getObjective [2/2]","text":"<p>Gets the Objective currently displayed in a DisplaySlot on thisScoreboard . <pre><code>virtual std::unique_ptr&lt; Objective &gt; endstone::Scoreboard::getObjective (\n    DisplaySlot slot\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>slot</code> The DisplaySlot </li> </ul> <p>Returns:</p> <p>the Objective currently displayed or <code>nullptr</code> if nothing is displayed in that DisplaySlot </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-getobjectives","title":"function getObjectives","text":"<p>Gets all Objectives on this Scoreboard . <pre><code>virtual std::vector&lt; std::unique_ptr&lt; Objective &gt; &gt; endstone::Scoreboard::getObjectives () const = 0\n</code></pre></p> <p>Returns:</p> <p>A list of all Objectives on this Scoreboard </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-getobjectivesbycriteria","title":"function getObjectivesByCriteria","text":"<p>Gets all Objectives of a Criteria on theScoreboard . <pre><code>virtual std::vector&lt; std::unique_ptr&lt; Objective &gt; &gt; endstone::Scoreboard::getObjectivesByCriteria (\n    Criteria::Type criteria\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>criteria</code> Criteria type to search by </li> </ul> <p>Returns:</p> <p>A list of Objectives using the specified Criteria </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-getscores","title":"function getScores","text":"<p>Gets all scores for an entry on this Scoreboard . <pre><code>virtual std::vector&lt; std::unique_ptr&lt; Score &gt; &gt; endstone::Scoreboard::getScores (\n    ScoreEntry entry\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>entry</code> the entry whose scores are being retrieved </li> </ul> <p>Returns:</p> <p>a list of all scores tracked for the entry </p>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-resetscores","title":"function resetScores","text":"<p>Removes all scores for an entry on this Scoreboard . <pre><code>virtual void endstone::Scoreboard::resetScores (\n    ScoreEntry entry\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>entry</code> the entry to drop all current scores for </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scoreboard/#function-scoreboard","title":"function ~Scoreboard","text":"<pre><code>virtual endstone::Scoreboard::~Scoreboard () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/scoreboard.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/","title":"Class endstone::ScriptMessageEvent","text":"<p>ClassList &gt; endstone &gt; ScriptMessageEvent</p> <p>Called when a message is sent by <code>/scriptevent</code> command.</p> <ul> <li><code>#include &lt;endstone/event/server/script_message_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ScriptMessageEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#public-functions","title":"Public Functions","text":"Type Name ScriptMessageEvent (std::string message_id, std::string message, const CommandSender &amp; sender)  virtual std::string getEventName () override const const std::string &amp; getMessage () const const std::string &amp; getMessageId () const const CommandSender &amp; getSender () const"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ScriptMessageEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#function-scriptmessageevent","title":"function ScriptMessageEvent","text":"<pre><code>inline endstone::ScriptMessageEvent::ScriptMessageEvent (\n    std::string message_id,\n    std::string message,\n    const CommandSender &amp; sender\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ScriptMessageEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#function-getmessage","title":"function getMessage","text":"<pre><code>inline const std::string &amp; endstone::ScriptMessageEvent::getMessage () const\n</code></pre> <p>Get the message to send.</p> <p>Returns:</p> <p>Message to send </p>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#function-getmessageid","title":"function getMessageId","text":"<pre><code>inline const std::string &amp; endstone::ScriptMessageEvent::getMessageId () const\n</code></pre> <p>Get the message id to send.</p> <p>Returns:</p> <p>Message id to send </p>"},{"location":"reference/cpp/classendstone_1_1ScriptMessageEvent/#function-getsender","title":"function getSender","text":"<pre><code>inline const CommandSender &amp; endstone::ScriptMessageEvent::getSender () const\n</code></pre> <p>Gets the command sender who initiated the command</p> <p>Returns:</p> <p>Command sender who initiated the command </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/script_message_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Server/","title":"Class endstone::Server","text":"<p>ClassList &gt; endstone &gt; Server</p> <p>Represents a server implementation. </p> <ul> <li><code>#include &lt;endstone/server.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string BroadcastChannelAdmin   = <code>\"endstone.broadcast.admin\"</code>Used for all administrative messages, such as an operator using a command. const std::string BroadcastChannelUser   = <code>\"endstone.broadcast.user\"</code>Used for all announcement messages, such as informing users that a player has joined."},{"location":"reference/cpp/classendstone_1_1Server/#public-functions","title":"Public Functions","text":"Type Name Server () = default Server (const Server &amp;) = delete virtual void broadcast (const Message &amp; message, const std::string &amp; permission) const = 0Broadcasts the specified message to every user with the given permission name. virtual void broadcastMessage (const Message &amp; message) const = 0Broadcasts the specified message to every user with permission endstone.broadcast.user. void broadcastMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual Result&lt; std::unique_ptr&lt; BlockData &gt; &gt; createBlockData (std::string type) const = 0Creates a new BlockData instance for the specified block type, with all properties initialized to defaults. virtual Result&lt; std::unique_ptr&lt; BlockData &gt; &gt; createBlockData (std::string type, BlockStates block_states) const = 0Creates a new BlockData instance for the specified block type, with all properties initialized to defaults, except for those provided in data. virtual std::unique_ptr&lt; BossBar &gt; createBossBar (std::string title, BarColor color, BarStyle style) const = 0Creates a boss bar instance to display to players. The progress defaults to 1.0. virtual std::unique_ptr&lt; BossBar &gt; createBossBar (std::string title, BarColor color, BarStyle style, std::vector&lt; BarFlag &gt; flags) const = 0Creates a boss bar instance to display to players. The progress defaults to 1.0. virtual MapView &amp; createMap (const Dimension &amp; dimension) const = 0Create a new map with an automatically assigned ID. virtual std::shared_ptr&lt; Scoreboard &gt; createScoreboard () = 0Creates a new Scoreboard to be tracked by the server. virtual bool dispatchCommand (CommandSender &amp; sender, std::string command_line) const = 0Dispatches a command on this server, and executes it if found. virtual float getAverageMillisecondsPerTick () = 0Gets the average milliseconds per tick (MSPT). virtual float getAverageTickUsage () = 0Gets the average tick usage of the server. virtual float getAverageTicksPerSecond () = 0Gets the average ticks per second (TPS). virtual PlayerBanList &amp; getBanList () const = 0 virtual ConsoleCommandSender &amp; getCommandSender () const = 0Gets a CommandSender for this server. virtual float getCurrentMillisecondsPerTick () = 0Gets the current milliseconds per tick (MSPT). virtual float getCurrentTickUsage () = 0Gets the current tick usage of the server. virtual float getCurrentTicksPerSecond () = 0Gets the current ticks per second (TPS). virtual Registry&lt; Enchantment &gt; &amp; getEnchantmentRegistry () const = 0 virtual IpBanList &amp; getIpBanList () const = 0 virtual ItemFactory &amp; getItemFactory () const = 0 virtual Registry&lt; ItemType &gt; &amp; getItemRegistry () const = 0 virtual Language &amp; getLanguage () const = 0Gets the current language interface used by the server. virtual Level * getLevel () const = 0Gets the server level. virtual Logger &amp; getLogger () const = 0Returns the primary logger associated with this server instance. virtual MapView * getMap (std::int64_t id) const = 0Gets the map from the given item ID. virtual int getMaxPlayers () const = 0Get the maximum amount of players which can login to this server. virtual std::string getMinecraftVersion () const = 0Gets the Minecraft version that this server is running. virtual std::string getName () const = 0Gets the name of this server implementation. virtual bool getOnlineMode () const = 0Gets whether the Server is in online mode or not. virtual std::vector&lt; Player * &gt; getOnlinePlayers () const = 0Gets a list of all currently online players. virtual Player * getPlayer (endstone::UUID id) const = 0Gets the player with the given UUID . virtual Player * getPlayer (std::string name) const = 0Gets the player with the exact given name, case-insensitive. virtual PluginCommand * getPluginCommand (std::string name) const = 0Gets a PluginCommand with the given name or alias. virtual PluginManager &amp; getPluginManager () const = 0Gets the plugin manager for interfacing with plugins. virtual int getPort () const = 0Get the game port that the server runs on. virtual int getPortV6 () const = 0Get the game port (IPv6) that the server runs on. virtual int getProtocolVersion () const = 0Gets the network protocol version that this server supports. virtual Scheduler &amp; getScheduler () const = 0Gets the scheduler for managing scheduled events. virtual Scoreboard * getScoreboard () const = 0Gets the primary Scoreboard controlled by the server. virtual ServiceManager &amp; getServiceManager () const = 0 virtual std::chrono::system_clock::time_point getStartTime () = 0Gets the start time of the server. virtual std::string getVersion () const = 0Gets the version string of this server implementation. virtual bool isPrimaryThread () const = 0Checks the current thread against the expected primary server thread. Server &amp; operator= (const Server &amp;) = delete virtual void reload () = 0Reloads the server configuration, functions, scripts and plugins. virtual void reloadData () = 0Reload only the Minecraft data for the server. virtual Result&lt; void &gt; setMaxPlayers (int max_players) = 0Set the maximum amount of players allowed to be logged in at once. virtual void shutdown () = 0Shutdowns the server, stopping everything. virtual ~Server () = default"},{"location":"reference/cpp/classendstone_1_1Server/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Server/#variable-broadcastchanneladmin","title":"variable BroadcastChannelAdmin","text":"<p>Used for all administrative messages, such as an operator using a command. <pre><code>const std::string endstone::Server::BroadcastChannelAdmin;\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Server/#variable-broadcastchanneluser","title":"variable BroadcastChannelUser","text":"<p>Used for all announcement messages, such as informing users that a player has joined. <pre><code>const std::string endstone::Server::BroadcastChannelUser;\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Server/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Server/#function-server-12","title":"function Server [\u00bd]","text":"<pre><code>endstone::Server::Server () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-server-22","title":"function Server [2/2]","text":"<pre><code>endstone::Server::Server (\n    const Server &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-broadcast","title":"function broadcast","text":"<p>Broadcasts the specified message to every user with the given permission name. <pre><code>virtual void endstone::Server::broadcast (\n    const Message &amp; message,\n    const std::string &amp; permission\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> message to broadcast </li> <li><code>permission</code> the required permission Permissibles must have to receive the broadcast </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#function-broadcastmessage-12","title":"function broadcastMessage [\u00bd]","text":"<p>Broadcasts the specified message to every user with permission endstone.broadcast.user. <pre><code>virtual void endstone::Server::broadcastMessage (\n    const Message &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> the message </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#function-broadcastmessage-22","title":"function broadcastMessage [2/2]","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Server::broadcastMessage (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-createblockdata-12","title":"function createBlockData [\u00bd]","text":"<p>Creates a new BlockData instance for the specified block type, with all properties initialized to defaults. <pre><code>virtual Result&lt; std::unique_ptr&lt; BlockData &gt; &gt; endstone::Server::createBlockData (\n    std::string type\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> the block type </li> </ul> <p>Returns:</p> <p>new data instance </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-createblockdata-22","title":"function createBlockData [2/2]","text":"<p>Creates a new BlockData instance for the specified block type, with all properties initialized to defaults, except for those provided in data. <pre><code>virtual Result&lt; std::unique_ptr&lt; BlockData &gt; &gt; endstone::Server::createBlockData (\n    std::string type,\n    BlockStates block_states\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>type</code> the block type </li> <li><code>block_states</code> block states, for example <code>{\"old_leaf_type\":\"birch\", \"persistent_bit\":true}</code> </li> </ul> <p>Returns:</p> <p>new data instance </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-createbossbar-12","title":"function createBossBar [\u00bd]","text":"<p>Creates a boss bar instance to display to players. The progress defaults to 1.0. <pre><code>virtual std::unique_ptr&lt; BossBar &gt; endstone::Server::createBossBar (\n    std::string title,\n    BarColor color,\n    BarStyle style\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> the title of the boss bar </li> <li><code>color</code> the color of the boss bar </li> <li><code>style</code> the style of the boss bar </li> </ul> <p>Returns:</p> <p>the created boss bar </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-createbossbar-22","title":"function createBossBar [2/2]","text":"<p>Creates a boss bar instance to display to players. The progress defaults to 1.0. <pre><code>virtual std::unique_ptr&lt; BossBar &gt; endstone::Server::createBossBar (\n    std::string title,\n    BarColor color,\n    BarStyle style,\n    std::vector&lt; BarFlag &gt; flags\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> the title of the boss bar </li> <li><code>color</code> the color of the boss bar </li> <li><code>style</code> the style of the boss bar </li> <li><code>flags</code> a list of flags to set on the boss bar </li> </ul> <p>Returns:</p> <p>the created boss bar </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-createmap","title":"function createMap","text":"<p>Create a new map with an automatically assigned ID. <pre><code>virtual MapView &amp; endstone::Server::createMap (\n    const Dimension &amp; dimension\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>dimension</code> the Dimension the map will belong to</li> </ul> <p>Returns:</p> <p>a newly created map view </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-createscoreboard","title":"function createScoreboard","text":"<p>Creates a new Scoreboard to be tracked by the server. <pre><code>virtual std::shared_ptr&lt; Scoreboard &gt; endstone::Server::createScoreboard () = 0\n</code></pre></p> <p>This will not be saved by the server and is not affected by the /scoreboard command.</p> <p>Returns:</p> <p>the newly created Scoreboard </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-dispatchcommand","title":"function dispatchCommand","text":"<p>Dispatches a command on this server, and executes it if found. <pre><code>virtual bool endstone::Server::dispatchCommand (\n    CommandSender &amp; sender,\n    std::string command_line\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>sender</code> the apparent sender of the command </li> <li><code>command_line</code> the command + arguments. </li> </ul> <p>Returns:</p> <p>true if execution is successful, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getaveragemillisecondspertick","title":"function getAverageMillisecondsPerTick","text":"<p>Gets the average milliseconds per tick (MSPT). <pre><code>virtual float endstone::Server::getAverageMillisecondsPerTick () = 0\n</code></pre></p> <p>Returns:</p> <p>The average number of milliseconds per tick. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getaveragetickusage","title":"function getAverageTickUsage","text":"<p>Gets the average tick usage of the server. <pre><code>virtual float endstone::Server::getAverageTickUsage () = 0\n</code></pre></p> <p>Returns:</p> <p>The average tick usage in percentage. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getaveragetickspersecond","title":"function getAverageTicksPerSecond","text":"<p>Gets the average ticks per second (TPS). <pre><code>virtual float endstone::Server::getAverageTicksPerSecond () = 0\n</code></pre></p> <p>Returns:</p> <p>The average ticks per second </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getbanlist","title":"function getBanList","text":"<pre><code>virtual PlayerBanList &amp; endstone::Server::getBanList () const = 0\n</code></pre> <p>Gets the player ban list.</p> <p>Returns:</p> <p>The player ban list </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getcommandsender","title":"function getCommandSender","text":"<p>Gets a CommandSender for this server. <pre><code>virtual ConsoleCommandSender &amp; endstone::Server::getCommandSender () const = 0\n</code></pre></p> <p>Returns:</p> <p>a console command sender </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getcurrentmillisecondspertick","title":"function getCurrentMillisecondsPerTick","text":"<p>Gets the current milliseconds per tick (MSPT). <pre><code>virtual float endstone::Server::getCurrentMillisecondsPerTick () = 0\n</code></pre></p> <p>Returns:</p> <p>The average current of milliseconds per tick. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getcurrenttickusage","title":"function getCurrentTickUsage","text":"<p>Gets the current tick usage of the server. <pre><code>virtual float endstone::Server::getCurrentTickUsage () = 0\n</code></pre></p> <p>Returns:</p> <p>The current tick usage in percentage. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getcurrenttickspersecond","title":"function getCurrentTicksPerSecond","text":"<p>Gets the current ticks per second (TPS). <pre><code>virtual float endstone::Server::getCurrentTicksPerSecond () = 0\n</code></pre></p> <p>Returns:</p> <p>The current ticks per second </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getenchantmentregistry","title":"function getEnchantmentRegistry","text":"<pre><code>virtual Registry &lt; Enchantment &gt; &amp; endstone::Server::getEnchantmentRegistry () const = 0\n</code></pre> <p>Returns the registry for all the enchantments.</p> <p>Returns:</p> <p>the enchantment registry. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getipbanlist","title":"function getIpBanList","text":"<pre><code>virtual IpBanList &amp; endstone::Server::getIpBanList () const = 0\n</code></pre> <p>Gets the IP ban list.</p> <p>Returns:</p> <p>The IP ban list </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getitemfactory","title":"function getItemFactory","text":"<pre><code>virtual ItemFactory &amp; endstone::Server::getItemFactory () const = 0\n</code></pre> <p>Gets the instance of the item factory (for ItemMeta).</p> <p>Returns:</p> <p>the item factory </p> <p>See also: ItemFactory </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getitemregistry","title":"function getItemRegistry","text":"<pre><code>virtual Registry &lt; ItemType &gt; &amp; endstone::Server::getItemRegistry () const = 0\n</code></pre> <p>Returns the registry for all the item types.</p> <p>Returns:</p> <p>the item registry. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getlanguage","title":"function getLanguage","text":"<p>Gets the current language interface used by the server. <pre><code>virtual Language &amp; endstone::Server::getLanguage () const = 0\n</code></pre></p> <p>Returns:</p> <p>Language interface used by the server for translations. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getlevel","title":"function getLevel","text":"<p>Gets the server level. <pre><code>virtual Level * endstone::Server::getLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>the server level </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getlogger","title":"function getLogger","text":"<p>Returns the primary logger associated with this server instance. <pre><code>virtual Logger &amp; endstone::Server::getLogger () const = 0\n</code></pre></p> <p>Returns:</p> <p>Logger associated with this server </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getmap","title":"function getMap","text":"<p>Gets the map from the given item ID. <pre><code>virtual MapView * endstone::Server::getMap (\n    std::int64_t id\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> the id of the map to get</li> </ul> <p>Returns:</p> <p>a map view if it exists, or null otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getmaxplayers","title":"function getMaxPlayers","text":"<p>Get the maximum amount of players which can login to this server. <pre><code>virtual int endstone::Server::getMaxPlayers () const = 0\n</code></pre></p> <p>Returns:</p> <p>the amount of players this server allows </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getminecraftversion","title":"function getMinecraftVersion","text":"<p>Gets the Minecraft version that this server is running. <pre><code>virtual std::string endstone::Server::getMinecraftVersion () const = 0\n</code></pre></p> <p>Returns:</p> <p>version of Minecraft </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getname","title":"function getName","text":"<p>Gets the name of this server implementation. <pre><code>virtual std::string endstone::Server::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>name of this server implementation </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getonlinemode","title":"function getOnlineMode","text":"<p>Gets whether the Server is in online mode or not. <pre><code>virtual bool endstone::Server::getOnlineMode () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if the server authenticates clients, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getonlineplayers","title":"function getOnlinePlayers","text":"<p>Gets a list of all currently online players. <pre><code>virtual std::vector&lt; Player * &gt; endstone::Server::getOnlinePlayers () const = 0\n</code></pre></p> <p>Returns:</p> <p>a list of currently online players. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getplayer-12","title":"function getPlayer [\u00bd]","text":"<p>Gets the player with the given UUID . <pre><code>virtual Player * endstone::Server::getPlayer (\n    endstone::UUID id\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> UUID of the player to retrieve </li> </ul> <p>Returns:</p> <p>a player object if one was found, null otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getplayer-22","title":"function getPlayer [2/2]","text":"<p>Gets the player with the exact given name, case-insensitive. <pre><code>virtual Player * endstone::Server::getPlayer (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Exact name of the player to retrieve </li> </ul> <p>Returns:</p> <p>a player object if one was found, null otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getplugincommand","title":"function getPluginCommand","text":"<p>Gets a PluginCommand with the given name or alias. <pre><code>virtual PluginCommand * endstone::Server::getPluginCommand (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the command to retrieve </li> </ul> <p>Returns:</p> <p>a plugin command if found, null otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getpluginmanager","title":"function getPluginManager","text":"<p>Gets the plugin manager for interfacing with plugins. <pre><code>virtual PluginManager &amp; endstone::Server::getPluginManager () const = 0\n</code></pre></p> <p>Returns:</p> <p>a plugin manager for this Server instance </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getport","title":"function getPort","text":"<p>Get the game port that the server runs on. <pre><code>virtual int endstone::Server::getPort () const = 0\n</code></pre></p> <p>Returns:</p> <p>the port number of this server </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getportv6","title":"function getPortV6","text":"<p>Get the game port (IPv6) that the server runs on. <pre><code>virtual int endstone::Server::getPortV6 () const = 0\n</code></pre></p> <p>Returns:</p> <p>the port number of this server </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getprotocolversion","title":"function getProtocolVersion","text":"<p>Gets the network protocol version that this server supports. <pre><code>virtual int endstone::Server::getProtocolVersion () const = 0\n</code></pre></p> <p>Returns:</p> <p>version of network protocol </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getscheduler","title":"function getScheduler","text":"<p>Gets the scheduler for managing scheduled events. <pre><code>virtual Scheduler &amp; endstone::Server::getScheduler () const = 0\n</code></pre></p> <p>Returns:</p> <p>a scheduling service for this server </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getscoreboard","title":"function getScoreboard","text":"<p>Gets the primary Scoreboard controlled by the server. <pre><code>virtual Scoreboard * endstone::Server::getScoreboard () const = 0\n</code></pre></p> <p>This Scoreboard is saved by the server, is affected by the /scoreboard command, and is the scoreboard shown by default to players. This will only exist after the level has been loaded.</p> <p>Returns:</p> <p>the default server scoreboard </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getservicemanager","title":"function getServiceManager","text":"<pre><code>virtual ServiceManager &amp; endstone::Server::getServiceManager () const = 0\n</code></pre> <p>Gets the service manager.</p> <p>Returns:</p> <p>The service manager </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getstarttime","title":"function getStartTime","text":"<p>Gets the start time of the server. <pre><code>virtual std::chrono::system_clock::time_point endstone::Server::getStartTime () = 0\n</code></pre></p> <p>Returns:</p> <p>The start time of the server. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getversion","title":"function getVersion","text":"<p>Gets the version string of this server implementation. <pre><code>virtual std::string endstone::Server::getVersion () const = 0\n</code></pre></p> <p>Returns:</p> <p>version of this server implementation </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-isprimarythread","title":"function isPrimaryThread","text":"<p>Checks the current thread against the expected primary server thread. <pre><code>virtual bool endstone::Server::isPrimaryThread () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if the current thread matches the expected primary thread, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-operator","title":"function operator=","text":"<pre><code>Server &amp; endstone::Server::operator= (\n    const Server &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-reload","title":"function reload","text":"<p>Reloads the server configuration, functions, scripts and plugins. <pre><code>virtual void endstone::Server::reload () = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-reloaddata","title":"function reloadData","text":"<p>Reload only the Minecraft data for the server. <pre><code>virtual void endstone::Server::reloadData () = 0\n</code></pre></p> <p>This includes functions and script files from all behaviour packs. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-setmaxplayers","title":"function setMaxPlayers","text":"<p>Set the maximum amount of players allowed to be logged in at once. <pre><code>virtual Result&lt; void &gt; endstone::Server::setMaxPlayers (\n    int max_players\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>max_players</code> The maximum amount of concurrent players </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#function-shutdown","title":"function shutdown","text":"<p>Shutdowns the server, stopping everything. <pre><code>virtual void endstone::Server::shutdown () = 0\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-server","title":"function ~Server","text":"<pre><code>virtual endstone::Server::~Server () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/server.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/","title":"Class endstone::ServerCommandEvent","text":"<p>ClassList &gt; endstone &gt; ServerCommandEvent</p> <p>Called when the console runs a command, early in the process. More...</p> <ul> <li><code>#include &lt;endstone/event/server/server_command_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ServerCommandEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions","title":"Public Functions","text":"Type Name ServerCommandEvent (CommandSender &amp; sender, std::string command)  std::string getCommand () const virtual std::string getEventName () override const CommandSender &amp; getSender () const void setCommand (std::string message)"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#detailed-description","title":"Detailed Description","text":"<p>You should not use this except for a few cases like logging commands, blocking commands on certain places, or applying modifiers.</p> <p>The command message contains a slash '/' at the start </p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ServerCommandEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-servercommandevent","title":"function ServerCommandEvent","text":"<pre><code>inline endstone::ServerCommandEvent::ServerCommandEvent (\n    CommandSender &amp; sender,\n    std::string command\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-getcommand","title":"function getCommand","text":"<pre><code>inline std::string endstone::ServerCommandEvent::getCommand () const\n</code></pre> <p>Gets the command that the server is attempting to execute from the console</p> <p>Returns:</p> <p>Command the server is attempting to execute </p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ServerCommandEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-getsender","title":"function getSender","text":"<pre><code>inline CommandSender &amp; endstone::ServerCommandEvent::getSender () const\n</code></pre> <p>Get the command sender.</p> <p>Returns:</p> <p>The sender </p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-setcommand","title":"function setCommand","text":"<pre><code>inline void endstone::ServerCommandEvent::setCommand (\n    std::string message\n) \n</code></pre> <p>Sets the command that the server will execute</p> <p>Parameters:</p> <ul> <li><code>message</code> New message that the server will execute </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_command_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerEvent/","title":"Class endstone::ServerEvent","text":"<p>ClassList &gt; endstone &gt; ServerEvent</p> <p>Represents a Server-related event. </p> <ul> <li><code>#include &lt;endstone/event/server/server_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::Cancellable,  endstone::MapInitializeEvent,  endstone::PluginDisableEvent,  endstone::PluginEnableEvent,  endstone::ServerLoadEvent</p>"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#public-functions","title":"Public Functions","text":"Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerEvent/#function-event-12","title":"function Event [\u00bd]","text":"<pre><code>inline explicit endstone::ServerEvent::Event (\n    bool async=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#function-event-22","title":"function Event [2/2]","text":"<pre><code>endstone::ServerEvent::Event (\n    const Event &amp;\n) = delete\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/","title":"Class endstone::ServerListPingEvent","text":"<p>ClassList &gt; endstone &gt; ServerListPingEvent</p> <p>Called when a server ping is coming in. </p> <ul> <li><code>#include &lt;endstone/event/server/server_list_ping_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ServerListPingEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions","title":"Public Functions","text":"Type Name ServerListPingEvent (std::string remote_host, int remote_port, std::string ping_response)  bool deserialize ()  virtual std::string getEventName () override const GameMode getGameMode () const std::string getLevelName () const int getLocalPort () const int getLocalPortV6 () const int getMaxPlayers () const std::string getMinecraftVersionNetwork () const std::string getMotd () const int getNetworkProtocolVersion () const int getNumPlayers () const std::string getRemoteHost () const int getRemotePort () const std::string getServerGuid () const std::string serialize ()  void setGameMode (GameMode game_mode)  void setLevelName (std::string level_name)  void setLocalPort (int port)  void setLocalPortV6 (int port)  void setMaxPlayers (int max_players)  void setMinecraftVersionNetwork (std::string minecraft_version_network)  void setMotd (std::string motd)  void setNumPlayers (int num_players)  void setServerGuid (std::string guid)"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ServerListPingEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-serverlistpingevent","title":"function ServerListPingEvent","text":"<pre><code>inline endstone::ServerListPingEvent::ServerListPingEvent (\n    std::string remote_host,\n    int remote_port,\n    std::string ping_response\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-deserialize","title":"function deserialize","text":"<pre><code>bool endstone::ServerListPingEvent::deserialize () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ServerListPingEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getgamemode","title":"function getGameMode","text":"<pre><code>inline GameMode endstone::ServerListPingEvent::getGameMode () const\n</code></pre> <p>Get the current game mode.</p> <p>Returns:</p> <p>the game mode </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getlevelname","title":"function getLevelName","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getLevelName () const\n</code></pre> <p>Get the level name.</p> <p>Returns:</p> <p>the level name </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getlocalport","title":"function getLocalPort","text":"<pre><code>inline int endstone::ServerListPingEvent::getLocalPort () const\n</code></pre> <p>Get the local port of the server.</p> <p>Returns:</p> <p>The local port </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getlocalportv6","title":"function getLocalPortV6","text":"<pre><code>inline int endstone::ServerListPingEvent::getLocalPortV6 () const\n</code></pre> <p>Get the local port of the server for IPv6 support</p> <p>Returns:</p> <p>The local port for IPv6 </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getmaxplayers","title":"function getMaxPlayers","text":"<pre><code>inline int endstone::ServerListPingEvent::getMaxPlayers () const\n</code></pre> <p>Get the maximum number of players allowed.</p> <p>Returns:</p> <p>the maximum number of players </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getminecraftversionnetwork","title":"function getMinecraftVersionNetwork","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getMinecraftVersionNetwork () const\n</code></pre> <p>Get the network version of Minecraft that is supported by this server</p> <p>Returns:</p> <p>the network version of Minecraft </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getmotd","title":"function getMotd","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getMotd () const\n</code></pre> <p>Get the message of the day message.</p> <p>Returns:</p> <p>the message of the day </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getnetworkprotocolversion","title":"function getNetworkProtocolVersion","text":"<pre><code>inline int endstone::ServerListPingEvent::getNetworkProtocolVersion () const\n</code></pre> <p>Get the network protocol version of this server</p> <p>Returns:</p> <p>the network protocol version </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getnumplayers","title":"function getNumPlayers","text":"<pre><code>inline int endstone::ServerListPingEvent::getNumPlayers () const\n</code></pre> <p>Get the number of players online</p> <p>Returns:</p> <p>the number of players </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getremotehost","title":"function getRemoteHost","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getRemoteHost () const\n</code></pre> <p>Get the host the ping is coming from.</p> <p>Returns:</p> <p>The host </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getremoteport","title":"function getRemotePort","text":"<pre><code>inline int endstone::ServerListPingEvent::getRemotePort () const\n</code></pre> <p>Get the port the ping is coming from.</p> <p>Returns:</p> <p>The port </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getserverguid","title":"function getServerGuid","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getServerGuid () const\n</code></pre> <p>Get the unique identifier of the server.</p> <p>Returns:</p> <p>The server guid </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-serialize","title":"function serialize","text":"<pre><code>std::string endstone::ServerListPingEvent::serialize () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setgamemode","title":"function setGameMode","text":"<pre><code>inline void endstone::ServerListPingEvent::setGameMode (\n    GameMode game_mode\n) \n</code></pre> <p>Set the current game mode.</p> <p>Parameters:</p> <ul> <li><code>game_mode</code> the game mode </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setlevelname","title":"function setLevelName","text":"<pre><code>inline void endstone::ServerListPingEvent::setLevelName (\n    std::string level_name\n) \n</code></pre> <p>Set the level name.</p> <p>Parameters:</p> <ul> <li><code>level_name</code> the level name </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setlocalport","title":"function setLocalPort","text":"<pre><code>inline void endstone::ServerListPingEvent::setLocalPort (\n    int port\n) \n</code></pre> <p>Set the local port of the server.</p> <p>Parameters:</p> <ul> <li><code>port</code> the local port </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setlocalportv6","title":"function setLocalPortV6","text":"<pre><code>inline void endstone::ServerListPingEvent::setLocalPortV6 (\n    int port\n) \n</code></pre> <p>Set the local port of the server for IPv6 support.</p> <p>Parameters:</p> <ul> <li><code>port</code> the local port for IPv6 </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setmaxplayers","title":"function setMaxPlayers","text":"<pre><code>inline void endstone::ServerListPingEvent::setMaxPlayers (\n    int max_players\n) \n</code></pre> <p>Set the maximum number of players allowed.</p> <p>Parameters:</p> <ul> <li><code>max_players</code> the maximum number of players </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setminecraftversionnetwork","title":"function setMinecraftVersionNetwork","text":"<pre><code>inline void endstone::ServerListPingEvent::setMinecraftVersionNetwork (\n    std::string minecraft_version_network\n) \n</code></pre> <p>Set the network version of Minecraft that is supported by this server</p> <p>Parameters:</p> <ul> <li><code>minecraft_version_network</code> the network version of Minecraft </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setmotd","title":"function setMotd","text":"<pre><code>inline void endstone::ServerListPingEvent::setMotd (\n    std::string motd\n) \n</code></pre> <p>Change the message of the day message.</p> <p>Parameters:</p> <ul> <li><code>motd</code> the message of the day </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setnumplayers","title":"function setNumPlayers","text":"<pre><code>inline void endstone::ServerListPingEvent::setNumPlayers (\n    int num_players\n) \n</code></pre> <p>Set the number of players online.</p> <p>Parameters:</p> <ul> <li><code>num_players</code> the number of players </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setserverguid","title":"function setServerGuid","text":"<pre><code>inline void endstone::ServerListPingEvent::setServerGuid (\n    std::string guid\n) \n</code></pre> <p>Set the unique identifier of the server.</p> <p>Parameters:</p> <ul> <li><code>guid</code> the server guid </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_list_ping_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/","title":"Class endstone::ServerLoadEvent","text":"<p>ClassList &gt; endstone &gt; ServerLoadEvent</p> <p>Called when either the server startup or reload has completed. </p> <ul> <li><code>#include &lt;endstone/event/server/server_load_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-types","title":"Public Types","text":"Type Name enum LoadType"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ServerLoadEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions","title":"Public Functions","text":"Type Name ServerLoadEvent (LoadType type)  virtual std::string getEventName () override const LoadType getType () const"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#enum-loadtype","title":"enum LoadType","text":"<pre><code>enum endstone::ServerLoadEvent::LoadType {\n    Startup,\n    Reload\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ServerLoadEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#function-serverloadevent","title":"function ServerLoadEvent","text":"<pre><code>inline explicit endstone::ServerLoadEvent::ServerLoadEvent (\n    LoadType type\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ServerLoadEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#function-gettype","title":"function getType","text":"<pre><code>inline LoadType endstone::ServerLoadEvent::getType () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_load_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Service/","title":"Class endstone::Service","text":"<p>ClassList &gt; endstone &gt; Service</p> <p>Services represent a list of methods. </p> <ul> <li><code>#include &lt;endstone/plugin/service.h&gt;</code></li> </ul> <p>Inherits the following classes: std::enable_shared_from_this&lt; Service &gt;</p>"},{"location":"reference/cpp/classendstone_1_1Service/#public-functions","title":"Public Functions","text":"Type Name virtual ~Service () = default"},{"location":"reference/cpp/classendstone_1_1Service/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Service/#function-service","title":"function ~Service","text":"<pre><code>virtual endstone::Service::~Service () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/service.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/","title":"Class endstone::ServiceManager","text":"<p>ClassList &gt; endstone &gt; ServiceManager</p> <p>Represent a service manager that manages services and service providers. More...</p> <ul> <li><code>#include &lt;endstone/plugin/service_manager.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#public-functions","title":"Public Functions","text":"Type Name virtual std::shared_ptr&lt; Service &gt; get (std::string name) const = 0Queries for a provider. This may return null if no provider has been registered for a service. The highest priority provider is returned. std::shared_ptr&lt; T &gt; load (std::string name) const virtual void registerService (std::string name, std::shared_ptr&lt; Service &gt; provider, const Plugin &amp; plugin, ServicePriority priority) = 0Register a provider of a service. virtual void unregister (std::string name, const Service &amp; provider) = 0Unregister a particular provider for a particular service. virtual void unregister (const Service &amp; provider) = 0Unregister a particular provider. virtual void unregisterAll (const Plugin &amp; plugin) = 0Unregister all the services registered by a particular plugin. virtual ~ServiceManager () = default"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#detailed-description","title":"Detailed Description","text":"<p>Services are an interface specifying a list of methods that a provider must implement. Providers are implementations of these services. </p>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServiceManager/#function-get","title":"function get","text":"<p>Queries for a provider. This may return null if no provider has been registered for a service. The highest priority provider is returned. <pre><code>virtual std::shared_ptr&lt; Service &gt; endstone::ServiceManager::get (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The service name </li> </ul> <p>Returns:</p> <p>provider or null </p>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#function-load","title":"function load","text":"<pre><code>template&lt;typename T&gt;\ninline std::shared_ptr&lt; T &gt; endstone::ServiceManager::load (\n    std::string name\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#function-registerservice","title":"function registerService","text":"<p>Register a provider of a service. <pre><code>virtual void endstone::ServiceManager::registerService (\n    std::string name,\n    std::shared_ptr&lt; Service &gt; provider,\n    const Plugin &amp; plugin,\n    ServicePriority priority\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> service name </li> <li><code>provider</code> service provider to register </li> <li><code>plugin</code> plugin associated with the service </li> <li><code>priority</code> priority of the provider </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#function-unregister-12","title":"function unregister [\u00bd]","text":"<p>Unregister a particular provider for a particular service. <pre><code>virtual void endstone::ServiceManager::unregister (\n    std::string name,\n    const Service &amp; provider\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> The service name </li> <li><code>provider</code> The service provider implementation </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#function-unregister-22","title":"function unregister [2/2]","text":"<p>Unregister a particular provider. <pre><code>virtual void endstone::ServiceManager::unregister (\n    const Service &amp; provider\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>provider</code> The service provider implementation </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#function-unregisterall","title":"function unregisterAll","text":"<p>Unregister all the services registered by a particular plugin. <pre><code>virtual void endstone::ServiceManager::unregisterAll (\n    const Plugin &amp; plugin\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>plugin</code> The plugin </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServiceManager/#function-servicemanager","title":"function ~ServiceManager","text":"<pre><code>virtual endstone::ServiceManager::~ServiceManager () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/service_manager.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Skin/","title":"Class endstone::Skin","text":"<p>ClassList &gt; endstone &gt; Skin</p> <p>Represents a player skin. </p> <ul> <li><code>#include &lt;endstone/skin.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Skin/#public-functions","title":"Public Functions","text":"Type Name Skin (std::string id, Image image, std::optional&lt; std::string &gt; cape_id=std::nullopt, std::optional&lt; Image &gt; cape_image=std::nullopt)  const std::optional&lt; std::string &gt; &amp; getCapeId () constGets the cape id. const Image * getCapeImage () constGets the cape image. const std::string &amp; getId () constGets the skin id. const Image &amp; getImage () constGets the skin image."},{"location":"reference/cpp/classendstone_1_1Skin/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Skin/#function-skin","title":"function Skin","text":"<pre><code>inline endstone::Skin::Skin (\n    std::string id,\n    Image image,\n    std::optional&lt; std::string &gt; cape_id=std::nullopt,\n    std::optional&lt; Image &gt; cape_image=std::nullopt\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Skin/#function-getcapeid","title":"function getCapeId","text":"<p>Gets the cape id. <pre><code>inline const std::optional&lt; std::string &gt; &amp; endstone::Skin::getCapeId () const\n</code></pre></p> <p>Returns:</p> <p>the cape id. </p>"},{"location":"reference/cpp/classendstone_1_1Skin/#function-getcapeimage","title":"function getCapeImage","text":"<p>Gets the cape image. <pre><code>inline const Image * endstone::Skin::getCapeImage () const\n</code></pre></p> <p>Returns:</p> <p>the cape image. </p>"},{"location":"reference/cpp/classendstone_1_1Skin/#function-getid","title":"function getId","text":"<p>Gets the skin id. <pre><code>inline const std::string &amp; endstone::Skin::getId () const\n</code></pre></p> <p>Returns:</p> <p>the skin id. </p>"},{"location":"reference/cpp/classendstone_1_1Skin/#function-getimage","title":"function getImage","text":"<p>Gets the skin image. <pre><code>inline const Image &amp; endstone::Skin::getImage () const\n</code></pre></p> <p>Returns:</p> <p>the skin image. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/skin.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Slider/","title":"Class endstone::Slider","text":"<p>ClassList &gt; endstone &gt; Slider</p> <p>Represents a slider with a label. </p> <ul> <li><code>#include &lt;endstone/form/controls/slider.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Slider/#public-functions","title":"Public Functions","text":"Type Name Slider () = default Slider (Message label, float min, float max, float step, std::optional&lt; float &gt; default_value=std::nullopt)  std::optional&lt; float &gt; getDefaultValue () constGets the default value of the slider. Message getLabel () constGets the label of the toggle. float getMax () constGets the maximum value of the slider. float getMin () constGets the minimum value of the slider. float getStep () constGets the step size of the slider. Slider &amp; setDefaultValue (std::optional&lt; float &gt; default_value) Sets the default value of the slider. Slider &amp; setLabel (Message label) Sets the label of the toggle. Slider &amp; setMax (float max) Sets the maximum value of the slider. Slider &amp; setMin (float min) Sets the minimum value of the slider. Slider &amp; setStep (float step) Sets the step size of the slider."},{"location":"reference/cpp/classendstone_1_1Slider/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Slider/#function-slider-12","title":"function Slider [\u00bd]","text":"<pre><code>endstone::Slider::Slider () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-slider-22","title":"function Slider [2/2]","text":"<pre><code>inline explicit endstone::Slider::Slider (\n    Message label,\n    float min,\n    float max,\n    float step,\n    std::optional&lt; float &gt; default_value=std::nullopt\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-getdefaultvalue","title":"function getDefaultValue","text":"<p>Gets the default value of the slider. <pre><code>inline std::optional&lt; float &gt; endstone::Slider::getDefaultValue () const\n</code></pre></p> <p>Returns:</p> <p>The default value of the slider. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-getlabel","title":"function getLabel","text":"<p>Gets the label of the toggle. <pre><code>inline Message endstone::Slider::getLabel () const\n</code></pre></p> <p>Returns:</p> <p>The label of the toggle. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-getmax","title":"function getMax","text":"<p>Gets the maximum value of the slider. <pre><code>inline float endstone::Slider::getMax () const\n</code></pre></p> <p>Returns:</p> <p>The maximum value of the slider. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-getmin","title":"function getMin","text":"<p>Gets the minimum value of the slider. <pre><code>inline float endstone::Slider::getMin () const\n</code></pre></p> <p>Returns:</p> <p>The minimum value of the slider. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-getstep","title":"function getStep","text":"<p>Gets the step size of the slider. <pre><code>inline float endstone::Slider::getStep () const\n</code></pre></p> <p>Returns:</p> <p>The step size of the slider. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-setdefaultvalue","title":"function setDefaultValue","text":"<p>Sets the default value of the slider. <pre><code>inline Slider &amp; endstone::Slider::setDefaultValue (\n    std::optional&lt; float &gt; default_value\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>default_value</code> The new default value for the slider. </li> </ul> <p>Returns:</p> <p>A reference to the current slider, for function chaining. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-setlabel","title":"function setLabel","text":"<p>Sets the label of the toggle. <pre><code>inline Slider &amp; endstone::Slider::setLabel (\n    Message label\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>label</code> The new label for the toggle. </li> </ul> <p>Returns:</p> <p>A reference to the current toggle. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-setmax","title":"function setMax","text":"<p>Sets the maximum value of the slider. <pre><code>inline Slider &amp; endstone::Slider::setMax (\n    float max\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>max</code> The new maximum value for the slider. </li> </ul> <p>Returns:</p> <p>A reference to the current slider, for function chaining. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-setmin","title":"function setMin","text":"<p>Sets the minimum value of the slider. <pre><code>inline Slider &amp; endstone::Slider::setMin (\n    float min\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>min</code> The new minimum value for the slider. </li> </ul> <p>Returns:</p> <p>A reference to the current slider, for function chaining. </p>"},{"location":"reference/cpp/classendstone_1_1Slider/#function-setstep","title":"function setStep","text":"<p>Sets the step size of the slider. <pre><code>inline Slider &amp; endstone::Slider::setStep (\n    float step\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>step</code> The new step size for the slider. </li> </ul> <p>Returns:</p> <p>A reference to the current slider, for function chaining. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/slider.h</code></p>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/","title":"Class endstone::SocketAddress","text":"<p>ClassList &gt; endstone &gt; SocketAddress</p> <p>Represents an IP Socket Address (hostname + port number). </p> <ul> <li><code>#include &lt;endstone/util/socket_address.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#public-functions","title":"Public Functions","text":"Type Name SocketAddress () = default SocketAddress (std::string hostname, std::uint32_t port)  const std::string &amp; getHostname () const std::uint32_t getPort () const"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-socketaddress-12","title":"function SocketAddress [\u00bd]","text":"<pre><code>endstone::SocketAddress::SocketAddress () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-socketaddress-22","title":"function SocketAddress [2/2]","text":"<pre><code>inline endstone::SocketAddress::SocketAddress (\n    std::string hostname,\n    std::uint32_t port\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-gethostname","title":"function getHostname","text":"<pre><code>inline const std::string &amp; endstone::SocketAddress::getHostname () const\n</code></pre> <p>Gets the hostname.</p> <p>Returns:</p> <p>The hostname of this socket address </p>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-getport","title":"function getPort","text":"<pre><code>inline std::uint32_t endstone::SocketAddress::getPort () const\n</code></pre> <p>Gets the port number.</p> <p>Returns:</p> <p>The port number of this socket address </p> <p>The documentation for this class was generated from the following file <code>include/endstone/util/socket_address.h</code></p>"},{"location":"reference/cpp/classendstone_1_1StepSlider/","title":"Class endstone::StepSlider","text":"<p>ClassList &gt; endstone &gt; StepSlider</p> <p>Represents a step slider with a set of predefined options. </p> <ul> <li><code>#include &lt;endstone/form/controls/step_slider.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Dropdown</p>"},{"location":"reference/cpp/classendstone_1_1StepSlider/#public-functions","title":"Public Functions","text":"Type Name Dropdown () = default Dropdown (Message label, std::vector&lt; std::string &gt; options, std::optional&lt; int &gt; default_index=std::nullopt)"},{"location":"reference/cpp/classendstone_1_1StepSlider/#public-functions-inherited-from-endstonedropdown","title":"Public Functions inherited from endstone::Dropdown","text":"<p>See endstone::Dropdown</p> Type Name Dropdown () = default Dropdown (Message label, std::vector&lt; std::string &gt; options, std::optional&lt; int &gt; default_index=std::nullopt)  Dropdown &amp; addOption (const std::string &amp; option) Adds a new option to the dropdown. std::optional&lt; int &gt; getDefaultIndex () constGets the default index of the dropdown. Message getLabel () constGets the label of the dropdown. std::vector&lt; std::string &gt; getOptions () constGets the options of the dropdown. Dropdown &amp; setDefaultIndex (std::optional&lt; int &gt; default_index) Sets the default index of the dropdown. Dropdown &amp; setLabel (Message label) Sets the label of the dropdown. Dropdown &amp; setOptions (std::vector&lt; std::string &gt; options) Sets the options of the dropdown."},{"location":"reference/cpp/classendstone_1_1StepSlider/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1StepSlider/#function-dropdown-12","title":"function Dropdown [\u00bd]","text":"<pre><code>endstone::StepSlider::Dropdown () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1StepSlider/#function-dropdown-22","title":"function Dropdown [2/2]","text":"<pre><code>inline explicit endstone::StepSlider::Dropdown (\n    Message label,\n    std::vector&lt; std::string &gt; options,\n    std::optional&lt; int &gt; default_index=std::nullopt\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/step_slider.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Task/","title":"Class endstone::Task","text":"<p>ClassList &gt; endstone &gt; Task</p> <p>Represents a task being executed by the scheduler. </p> <ul> <li><code>#include &lt;endstone/scheduler/task.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Task/#public-functions","title":"Public Functions","text":"Type Name virtual void cancel () = 0 virtual Plugin * getOwner () const = 0 virtual TaskId getTaskId () const = 0 virtual bool isCancelled () const = 0 virtual bool isSync () const = 0 virtual ~Task () = default"},{"location":"reference/cpp/classendstone_1_1Task/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Task/#function-cancel","title":"function cancel","text":"<pre><code>virtual void endstone::Task::cancel () = 0\n</code></pre> <p>Attempts to cancel this task. </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-getowner","title":"function getOwner","text":"<pre><code>virtual Plugin * endstone::Task::getOwner () const = 0\n</code></pre> <p>Returns the Plugin that owns this task.</p> <p>Returns:</p> <p>The Plugin that owns the task </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-gettaskid","title":"function getTaskId","text":"<pre><code>virtual TaskId endstone::Task::getTaskId () const = 0\n</code></pre> <p>Returns the taskId for the task.</p> <p>Returns:</p> <p>Task id number </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-iscancelled","title":"function isCancelled","text":"<pre><code>virtual bool endstone::Task::isCancelled () const = 0\n</code></pre> <p>Returns true if this task has been cancelled.</p> <p>Returns:</p> <p>true if the task has been cancelled </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-issync","title":"function isSync","text":"<pre><code>virtual bool endstone::Task::isSync () const = 0\n</code></pre> <p>Returns true if the Task is a sync task.</p> <p>Returns:</p> <p>true if the task is run by server thread </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-task","title":"function ~Task","text":"<pre><code>virtual endstone::Task::~Task () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/task.h</code></p>"},{"location":"reference/cpp/classendstone_1_1TextInput/","title":"Class endstone::TextInput","text":"<p>ClassList &gt; endstone &gt; TextInput</p> <p>Represents a text input field. </p> <ul> <li><code>#include &lt;endstone/form/controls/text_input.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1TextInput/#public-functions","title":"Public Functions","text":"Type Name TextInput () = default TextInput (Message label, Message placeholder, std::optional&lt; std::string &gt; default_text=std::nullopt)  std::optional&lt; std::string &gt; getDefaultValue () constGets the default text of the text input field. Message getLabel () constGets the label of the text input field. Message getPlaceholder () constGets the placeholder of the text input field. TextInput &amp; setDefaultValue (std::optional&lt; std::string &gt; text) Sets the default text of the text input field. TextInput &amp; setLabel (Message label) Sets the label of the text input field. TextInput &amp; setPlaceholder (Message placeholder) Sets the placeholder of the text input field."},{"location":"reference/cpp/classendstone_1_1TextInput/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1TextInput/#function-textinput-12","title":"function TextInput [\u00bd]","text":"<pre><code>endstone::TextInput::TextInput () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1TextInput/#function-textinput-22","title":"function TextInput [2/2]","text":"<pre><code>inline explicit endstone::TextInput::TextInput (\n    Message label,\n    Message placeholder,\n    std::optional&lt; std::string &gt; default_text=std::nullopt\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1TextInput/#function-getdefaultvalue","title":"function getDefaultValue","text":"<p>Gets the default text of the text input field. <pre><code>inline std::optional&lt; std::string &gt; endstone::TextInput::getDefaultValue () const\n</code></pre></p> <p>Returns:</p> <p>The default text of the text input field. </p>"},{"location":"reference/cpp/classendstone_1_1TextInput/#function-getlabel","title":"function getLabel","text":"<p>Gets the label of the text input field. <pre><code>inline Message endstone::TextInput::getLabel () const\n</code></pre></p> <p>Returns:</p> <p>The label of the text input field. </p>"},{"location":"reference/cpp/classendstone_1_1TextInput/#function-getplaceholder","title":"function getPlaceholder","text":"<p>Gets the placeholder of the text input field. <pre><code>inline Message endstone::TextInput::getPlaceholder () const\n</code></pre></p> <p>Returns:</p> <p>The placeholder of the text input field. </p>"},{"location":"reference/cpp/classendstone_1_1TextInput/#function-setdefaultvalue","title":"function setDefaultValue","text":"<p>Sets the default text of the text input field. <pre><code>inline TextInput &amp; endstone::TextInput::setDefaultValue (\n    std::optional&lt; std::string &gt; text\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>text</code> The new default text for the text input field. </li> </ul> <p>Returns:</p> <p>A reference to the text input field itself. </p>"},{"location":"reference/cpp/classendstone_1_1TextInput/#function-setlabel","title":"function setLabel","text":"<p>Sets the label of the text input field. <pre><code>inline TextInput &amp; endstone::TextInput::setLabel (\n    Message label\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>label</code> The new label for the text input field. </li> </ul> <p>Returns:</p> <p>A reference to the text input field itself. </p>"},{"location":"reference/cpp/classendstone_1_1TextInput/#function-setplaceholder","title":"function setPlaceholder","text":"<p>Sets the placeholder of the text input field. <pre><code>inline TextInput &amp; endstone::TextInput::setPlaceholder (\n    Message placeholder\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>placeholder</code> The new placeholder for the text input field. </li> </ul> <p>Returns:</p> <p>A reference to the text input field itself. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/text_input.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/","title":"Class endstone::ThunderChangeEvent","text":"<p>ClassList &gt; endstone &gt; ThunderChangeEvent</p> <p>Called when the thunder state in a world is changing. </p> <ul> <li><code>#include &lt;endstone/event/weather/thunder_change_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"ThunderChangeEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions","title":"Public Functions","text":"Type Name ThunderChangeEvent (Level &amp; level, bool to)  virtual std::string getEventName () override const bool toThunderState () const ~ThunderChangeEvent () override"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ThunderChangeEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-thunderchangeevent","title":"function ThunderChangeEvent","text":"<pre><code>inline endstone::ThunderChangeEvent::ThunderChangeEvent (\n    Level &amp; level,\n    bool to\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ThunderChangeEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-tothunderstate","title":"function toThunderState","text":"<pre><code>inline bool endstone::ThunderChangeEvent::toThunderState () const\n</code></pre> <p>Gets the state of thunder that the world is being set to</p> <p>Returns:</p> <p>true if the weather is being set to thundering, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-thunderchangeevent_1","title":"function ~ThunderChangeEvent","text":"<pre><code>endstone::ThunderChangeEvent::~ThunderChangeEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/thunder_change_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Toggle/","title":"Class endstone::Toggle","text":"<p>ClassList &gt; endstone &gt; Toggle</p> <p>Represents a toggle button with a label. </p> <ul> <li><code>#include &lt;endstone/form/controls/toggle.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Toggle/#public-functions","title":"Public Functions","text":"Type Name Toggle () = default Toggle (Message label, bool default_value=false)  bool getDefaultValue () constGets the default value of the toggle. Message getLabel () constGets the label of the toggle. Toggle &amp; setDefaultValue (bool value) Sets the default value of the toggle. Toggle &amp; setLabel (Message label) Sets the label of the toggle."},{"location":"reference/cpp/classendstone_1_1Toggle/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Toggle/#function-toggle-12","title":"function Toggle [\u00bd]","text":"<pre><code>endstone::Toggle::Toggle () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Toggle/#function-toggle-22","title":"function Toggle [2/2]","text":"<pre><code>inline explicit endstone::Toggle::Toggle (\n    Message label,\n    bool default_value=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Toggle/#function-getdefaultvalue","title":"function getDefaultValue","text":"<p>Gets the default value of the toggle. <pre><code>inline bool endstone::Toggle::getDefaultValue () const\n</code></pre></p> <p>Returns:</p> <p>The default value of the toggle. </p>"},{"location":"reference/cpp/classendstone_1_1Toggle/#function-getlabel","title":"function getLabel","text":"<p>Gets the label of the toggle. <pre><code>inline Message endstone::Toggle::getLabel () const\n</code></pre></p> <p>Returns:</p> <p>The label of the toggle. </p>"},{"location":"reference/cpp/classendstone_1_1Toggle/#function-setdefaultvalue","title":"function setDefaultValue","text":"<p>Sets the default value of the toggle. <pre><code>inline Toggle &amp; endstone::Toggle::setDefaultValue (\n    bool value\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>value</code> The new default value for the toggle. </li> </ul> <p>Returns:</p> <p>A reference to the current toggle. </p>"},{"location":"reference/cpp/classendstone_1_1Toggle/#function-setlabel","title":"function setLabel","text":"<p>Sets the label of the toggle. <pre><code>inline Toggle &amp; endstone::Toggle::setLabel (\n    Message label\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>label</code> The new label for the toggle. </li> </ul> <p>Returns:</p> <p>A reference to the current toggle. </p> <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/toggle.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Translatable/","title":"Class endstone::Translatable","text":"<p>ClassList &gt; endstone &gt; Translatable</p> <p>Represents an object with a text representation that can be translated by the Minecraft client. </p> <ul> <li><code>#include &lt;endstone/lang/translatable.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Translatable/#public-functions","title":"Public Functions","text":"Type Name Translatable (std::string text, std::vector&lt; std::string &gt; params={})  bool empty () constCheck if the message to be translated is empty. const std::vector&lt; std::string &gt; &amp; getParameters () constGet the translation parameters. const std::string &amp; getText () constGet the text to be translated."},{"location":"reference/cpp/classendstone_1_1Translatable/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Translatable/#function-translatable","title":"function Translatable","text":"<pre><code>inline explicit endstone::Translatable::Translatable (\n    std::string text,\n    std::vector&lt; std::string &gt; params={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Translatable/#function-empty","title":"function empty","text":"<p>Check if the message to be translated is empty. <pre><code>inline bool endstone::Translatable::empty () const\n</code></pre></p> <p>Returns:</p> <p>true if the message to be translated is empty, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Translatable/#function-getparameters","title":"function getParameters","text":"<p>Get the translation parameters. <pre><code>inline const std::vector&lt; std::string &gt; &amp; endstone::Translatable::getParameters () const\n</code></pre></p> <p>Returns:</p> <p>the translation parameters </p>"},{"location":"reference/cpp/classendstone_1_1Translatable/#function-gettext","title":"function getText","text":"<p>Get the text to be translated. <pre><code>inline const std::string &amp; endstone::Translatable::getText () const\n</code></pre></p> <p>Returns:</p> <p>the text to be translated </p> <p>The documentation for this class was generated from the following file <code>include/endstone/lang/translatable.h</code></p>"},{"location":"reference/cpp/classendstone_1_1UUID/","title":"Class endstone::UUID","text":"<p>ClassList &gt; endstone &gt; UUID</p> <p>Implementation of Universally Unique Identifier ( UUID )More...</p> <ul> <li><code>#include &lt;endstone/util/uuid.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-attributes","title":"Public Attributes","text":"Type Name std::uint8_t data"},{"location":"reference/cpp/classendstone_1_1UUID/#public-functions","title":"Public Functions","text":"Type Name std::uint8_t * begin () noexcept const uint8_t * begin () noexcept const std::uint8_t * end () noexcept const uint8_t * end () noexcept const bool isNil () noexcept const std::string str () const void swap (UUID &amp; rhs) noexcept int version () noexcept const"},{"location":"reference/cpp/classendstone_1_1UUID/#public-static-functions","title":"Public Static Functions","text":"Type Name constexpr std::size_t size () noexcept"},{"location":"reference/cpp/classendstone_1_1UUID/#detailed-description","title":"Detailed Description","text":"<p>Adapted from https://github.com/boostorg/uuid/blob/develop/include/boost/uuid/uuid.hpp </p>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1UUID/#variable-data","title":"variable data","text":"<pre><code>std::uint8_t endstone::UUID::data[16];\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1UUID/#function-begin-12","title":"function begin [\u00bd]","text":"<pre><code>inline std::uint8_t * endstone::UUID::begin () noexcept\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-begin-22","title":"function begin [2/2]","text":"<pre><code>inline const uint8_t * endstone::UUID::begin () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-end-12","title":"function end [\u00bd]","text":"<pre><code>inline std::uint8_t * endstone::UUID::end () noexcept\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-end-22","title":"function end [2/2]","text":"<pre><code>inline const uint8_t * endstone::UUID::end () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-isnil","title":"function isNil","text":"<pre><code>inline bool endstone::UUID::isNil () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-str","title":"function str","text":"<pre><code>inline std::string endstone::UUID::str () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-swap","title":"function swap","text":"<pre><code>inline void endstone::UUID::swap (\n    UUID &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-version","title":"function version","text":"<pre><code>inline int endstone::UUID::version () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1UUID/#function-size","title":"function size","text":"<pre><code>static inline constexpr std::size_t endstone::UUID::size () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Vector/","title":"Class endstone::Vector","text":"<p>ClassList &gt; endstone &gt; Vector</p> <p>Represents a 3-dimensional vector. </p> <ul> <li><code>#include &lt;endstone/util/vector.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::Location</p>"},{"location":"reference/cpp/classendstone_1_1Vector/#public-functions","title":"Public Functions","text":"Type Name constexpr Vector () = defaultConstruct the vector with all components as 0. constexpr Vector (T x, T y, T z) Construct the vector with provided components. float distance (const Vector &amp; other) const constexpr float distanceSquared (const Vector &amp; other) const constexpr float getX () constGets the X component. constexpr float getY () constGets the Y component. constexpr float getZ () constGets the Z component. float length () constGets the magnitude of the vector, defined as sqrt(x<sup>2+y</sup>2+z^2). constexpr float lengthSquared () constGets the magnitude of the vector squared. Vector &amp; normalize ()  constexpr Vector operator* (const Vector &amp; other) const Vector operator* (float scalar) const Vector &amp; operator*= (const Vector &amp; other)  constexpr Vector operator+ (const Vector &amp; other) const Vector operator+ (float scalar) const Vector &amp; operator+= (const Vector &amp; other)  constexpr Vector operator- (const Vector &amp; other) const Vector operator- (float scalar) const Vector &amp; operator-= (const Vector &amp; other)  constexpr Vector operator/ (const Vector &amp; other) const Vector operator/ (float scalar) const Vector &amp; operator/= (const Vector &amp; other)  constexpr bool operator== (const Vector &amp; other) const constexpr void setX (float x) Set the X component. constexpr void setY (float y) Set the Y component. constexpr void setZ (float z) Set the Z component."},{"location":"reference/cpp/classendstone_1_1Vector/#protected-attributes","title":"Protected Attributes","text":"Type Name float x_   = <code>0.0</code> float y_   = <code>0.0</code> float z_   = <code>0.0</code>"},{"location":"reference/cpp/classendstone_1_1Vector/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Vector/#function-vector-12","title":"function Vector [\u00bd]","text":"<p>Construct the vector with all components as 0. <pre><code>constexpr endstone::Vector::Vector () = default\n</code></pre></p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-vector-22","title":"function Vector [2/2]","text":"<p>Construct the vector with provided components. <pre><code>template&lt;typename T&gt;\ninline constexpr endstone::Vector::Vector (\n    T x,\n    T y,\n    T z\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> X component </li> <li><code>y</code> Y component </li> <li><code>z</code> Z component </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-distance","title":"function distance","text":"<pre><code>inline float endstone::Vector::distance (\n    const Vector &amp; other\n) const\n</code></pre> <p>Get the distance between this vector and another.</p> <p>Parameters:</p> <ul> <li><code>other</code> The other vector </li> </ul> <p>Returns:</p> <p>the distance </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-distancesquared","title":"function distanceSquared","text":"<pre><code>inline constexpr float endstone::Vector::distanceSquared (\n    const Vector &amp; other\n) const\n</code></pre> <p>Get the squared distance between this vector and another.</p> <p>Parameters:</p> <ul> <li><code>other</code> The other vector </li> </ul> <p>Returns:</p> <p>the distance </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-getx","title":"function getX","text":"<p>Gets the X component. <pre><code>inline constexpr float endstone::Vector::getX () const\n</code></pre></p> <p>Returns:</p> <p>The X component. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-gety","title":"function getY","text":"<p>Gets the Y component. <pre><code>inline constexpr float endstone::Vector::getY () const\n</code></pre></p> <p>Returns:</p> <p>The Y component. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-getz","title":"function getZ","text":"<p>Gets the Z component. <pre><code>inline constexpr float endstone::Vector::getZ () const\n</code></pre></p> <p>Returns:</p> <p>The Z component. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-length","title":"function length","text":"<p>Gets the magnitude of the vector, defined as sqrt(x<sup>2+y</sup>2+z^2). <pre><code>inline float endstone::Vector::length () const\n</code></pre></p> <p>Returns:</p> <p>the magnitude </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-lengthsquared","title":"function lengthSquared","text":"<p>Gets the magnitude of the vector squared. <pre><code>inline constexpr float endstone::Vector::lengthSquared () const\n</code></pre></p> <p>Returns:</p> <p>the magnitude </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-normalize","title":"function normalize","text":"<pre><code>inline Vector &amp; endstone::Vector::normalize () \n</code></pre> <p>Converts this vector to a unit vector (a vector with length of 1).</p> <p>Returns:</p> <p>the same vector </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator","title":"function operator*","text":"<pre><code>inline constexpr Vector endstone::Vector::operator* (\n    const Vector &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_1","title":"function operator*","text":"<pre><code>inline Vector endstone::Vector::operator* (\n    float scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_2","title":"function operator*=","text":"<pre><code>inline Vector &amp; endstone::Vector::operator*= (\n    const Vector &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_3","title":"function operator+","text":"<pre><code>inline constexpr Vector endstone::Vector::operator+ (\n    const Vector &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_4","title":"function operator+","text":"<pre><code>inline Vector endstone::Vector::operator+ (\n    float scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_5","title":"function operator+=","text":"<pre><code>inline Vector &amp; endstone::Vector::operator+= (\n    const Vector &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator-","title":"function operator-","text":"<pre><code>inline constexpr Vector endstone::Vector::operator- (\n    const Vector &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator-_1","title":"function operator-","text":"<pre><code>inline Vector endstone::Vector::operator- (\n    float scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator-_2","title":"function operator-=","text":"<pre><code>inline Vector &amp; endstone::Vector::operator-= (\n    const Vector &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_6","title":"function operator/","text":"<pre><code>inline constexpr Vector endstone::Vector::operator/ (\n    const Vector &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_7","title":"function operator/","text":"<pre><code>inline Vector endstone::Vector::operator/ (\n    float scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_8","title":"function operator/=","text":"<pre><code>inline Vector &amp; endstone::Vector::operator/= (\n    const Vector &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_9","title":"function operator==","text":"<pre><code>inline constexpr bool endstone::Vector::operator== (\n    const Vector &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-setx","title":"function setX","text":"<p>Set the X component. <pre><code>inline constexpr void endstone::Vector::setX (\n    float x\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>x</code> The new X component. </li> </ul> <p>Returns:</p> <p>This vector. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-sety","title":"function setY","text":"<p>Set the Y component. <pre><code>inline constexpr void endstone::Vector::setY (\n    float y\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>y</code> The new Y component. </li> </ul> <p>Returns:</p> <p>This vector. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-setz","title":"function setZ","text":"<p>Set the Z component. <pre><code>inline constexpr void endstone::Vector::setZ (\n    float z\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>z</code> The new Z component. </li> </ul> <p>Returns:</p> <p>This vector. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Vector/#variable-x_","title":"variable x_","text":"<pre><code>float endstone::Vector::x_;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#variable-y_","title":"variable y_","text":"<pre><code>float endstone::Vector::y_;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#variable-z_","title":"variable z_","text":"<pre><code>float endstone::Vector::z_;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friends-documentation","title":"Friends Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator","title":"friend operator*","text":"<pre><code>inline Vector endstone::Vector::operator* (\n    float scalar,\n    const Vector &amp; v\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator_1","title":"friend operator+","text":"<pre><code>inline Vector endstone::Vector::operator+ (\n    float scalar,\n    const Vector &amp; v\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator-","title":"friend operator-","text":"<pre><code>inline Vector endstone::Vector::operator- (\n    float scalar,\n    const Vector &amp; v\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator_2","title":"friend operator/","text":"<pre><code>inline Vector endstone::Vector::operator/ (\n    float scalar,\n    const Vector &amp; v\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/vector.h</code></p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/","title":"Class endstone::WeatherChangeEvent","text":"<p>ClassList &gt; endstone &gt; WeatherChangeEvent</p> <p>Called when the weather (rain) state in a world is changing. </p> <ul> <li><code>#include &lt;endstone/event/weather/weather_change_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = <code>\"WeatherChangeEvent\"</code>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions","title":"Public Functions","text":"Type Name WeatherChangeEvent (Level &amp; level, const bool to)  virtual std::string getEventName () override const bool toWeatherState () const ~WeatherChangeEvent () override"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions-inherited-from-endstonecancellable","title":"Public Functions inherited from endstone::Cancellable","text":"<p>See endstone::Cancellable</p> Type Name virtual void cancel () Cancel this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual bool isCancelled () override constGets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins. virtual void setCancelled (bool cancel) overrideSets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins."},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions-inherited-from-endstoneicancellable","title":"Public Functions inherited from endstone::ICancellable","text":"<p>See endstone::ICancellable</p> Type Name virtual void cancel () = 0 virtual bool isCancelled () const = 0 virtual void setCancelled (bool cancel) = 0 virtual ~ICancellable () = default"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::WeatherChangeEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-weatherchangeevent","title":"function WeatherChangeEvent","text":"<pre><code>inline endstone::WeatherChangeEvent::WeatherChangeEvent (\n    Level &amp; level,\n    const bool to\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::WeatherChangeEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-toweatherstate","title":"function toWeatherState","text":"<pre><code>inline bool endstone::WeatherChangeEvent::toWeatherState () const\n</code></pre> <p>Gets the state of weather that the world is being set to</p> <p>Returns:</p> <p>true if the weather is being set to raining, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-weatherchangeevent_1","title":"function ~WeatherChangeEvent","text":"<pre><code>endstone::WeatherChangeEvent::~WeatherChangeEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_change_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/","title":"Class endstone::WeatherEvent","text":"<p>ClassList &gt; endstone &gt; WeatherEvent</p> <p>Represents a Weather-related event. </p> <ul> <li><code>#include &lt;endstone/event/weather/weather_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::Cancellable</p>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#public-functions","title":"Public Functions","text":"Type Name WeatherEvent (Level &amp; level)  Level &amp; getLevel () const ~WeatherEvent () override"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const Event &amp; operator= (const Event &amp;) = delete virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#function-weatherevent","title":"function WeatherEvent","text":"<pre><code>inline explicit endstone::WeatherEvent::WeatherEvent (\n    Level &amp; level\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#function-getlevel","title":"function getLevel","text":"<pre><code>inline Level &amp; endstone::WeatherEvent::getLevel () const\n</code></pre> <p>Returns the Level where this event is occurring</p> <p>Returns:</p> <p>Level this event is occurring in </p>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#function-weatherevent_1","title":"function ~WeatherEvent","text":"<pre><code>endstone::WeatherEvent::~WeatherEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_event.h</code></p>"},{"location":"reference/cpp/namespaceendstone_1_1core/","title":"Namespace endstone::core","text":"<p>Namespace List &gt; endstone &gt; core</p> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_stack.h</code></p>"},{"location":"reference/cpp/namespaceendstone_1_1detail/","title":"Namespace endstone::detail","text":"<p>Namespace List &gt; endstone &gt; detail</p> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/structendstone_1_1overloaded/","title":"Struct endstone::overloaded","text":"<p>template &lt;typename... Func&gt;</p> <p>ClassList &gt; endstone &gt; overloaded</p> <p>Helper type for visitors. More...</p> <ul> <li><code>#include &lt;endstone/variant.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Func</p>"},{"location":"reference/cpp/structendstone_1_1overloaded/#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>Func</code> Types of function objects. </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/variant.h</code></p>"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/","title":"Class endstone::detail::CommandBuilder","text":"<p>ClassList &gt; CommandBuilder</p>"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#public-functions","title":"Public Functions","text":"Type Name CommandBuilder (std::string name)  CommandBuilder &amp; aliases (Alias... aliases)  Command build () const CommandBuilder &amp; description (std::string description)  CommandBuilder &amp; permissions (Permissions... permissions)  CommandBuilder &amp; usages (Usage... usages)"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#function-commandbuilder","title":"function CommandBuilder","text":"<pre><code>inline explicit CommandBuilder::CommandBuilder (\n    std::string name\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#function-aliases","title":"function aliases","text":"<pre><code>template&lt;typename... Alias&gt;\ninline CommandBuilder &amp; CommandBuilder::aliases (\n    Alias... aliases\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#function-build","title":"function build","text":"<pre><code>inline Command CommandBuilder::build () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#function-description","title":"function description","text":"<pre><code>inline CommandBuilder &amp; CommandBuilder::description (\n    std::string description\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#function-permissions","title":"function permissions","text":"<pre><code>template&lt;typename... Permissions&gt;\ninline CommandBuilder &amp; CommandBuilder::permissions (\n    Permissions... permissions\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1CommandBuilder/#function-usages","title":"function usages","text":"<pre><code>template&lt;typename... Usage&gt;\ninline CommandBuilder &amp; CommandBuilder::usages (\n    Usage... usages\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/","title":"Class endstone::detail::PermissionBuilder","text":"<p>ClassList &gt; PermissionBuilder</p>"},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/#public-functions","title":"Public Functions","text":"Type Name PermissionBuilder (std::string name)  Permission build () const PermissionBuilder &amp; children (const std::string &amp; name, bool value)  PermissionBuilder &amp; default_ (PermissionDefault default_value)  PermissionBuilder &amp; description (std::string description)"},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/#function-permissionbuilder","title":"function PermissionBuilder","text":"<pre><code>inline explicit PermissionBuilder::PermissionBuilder (\n    std::string name\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/#function-build","title":"function build","text":"<pre><code>inline Permission PermissionBuilder::build () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/#function-children","title":"function children","text":"<pre><code>inline PermissionBuilder &amp; PermissionBuilder::children (\n    const std::string &amp; name,\n    bool value\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/#function-default_","title":"function default_","text":"<pre><code>inline PermissionBuilder &amp; PermissionBuilder::default_ (\n    PermissionDefault default_value\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1detail_1_1PermissionBuilder/#function-description","title":"function description","text":"<pre><code>inline PermissionBuilder &amp; PermissionBuilder::description (\n    std::string description\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/","title":"Struct endstone::detail::PluginDescriptionBuilder","text":"<p>ClassList &gt; PluginDescriptionBuilder</p>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#public-attributes","title":"Public Attributes","text":"Type Name std::vector&lt; std::string &gt; authors std::unordered_map&lt; std::string, CommandBuilder &gt; commands std::vector&lt; std::string &gt; contributors PermissionDefault default_permission   = <code>PermissionDefault::Operator</code> std::vector&lt; std::string &gt; depend std::string description PluginLoadOrder load   = <code>PluginLoadOrder::PostWorld</code> std::vector&lt; std::string &gt; load_before std::unordered_map&lt; std::string, PermissionBuilder &gt; permissions std::string prefix std::vector&lt; std::string &gt; provides std::vector&lt; std::string &gt; soft_depend std::string website"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#public-functions","title":"Public Functions","text":"Type Name PluginDescription build (std::string name, std::string version) const CommandBuilder &amp; command (std::string name)  PermissionBuilder &amp; permission (std::string name)"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-authors","title":"variable authors","text":"<pre><code>std::vector&lt;std::string&gt; endstone::detail::PluginDescriptionBuilder::authors;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-commands","title":"variable commands","text":"<pre><code>std::unordered_map&lt;std::string, CommandBuilder&gt; endstone::detail::PluginDescriptionBuilder::commands;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-contributors","title":"variable contributors","text":"<pre><code>std::vector&lt;std::string&gt; endstone::detail::PluginDescriptionBuilder::contributors;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-default_permission","title":"variable default_permission","text":"<pre><code>PermissionDefault endstone::detail::PluginDescriptionBuilder::default_permission;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-depend","title":"variable depend","text":"<pre><code>std::vector&lt;std::string&gt; endstone::detail::PluginDescriptionBuilder::depend;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-description","title":"variable description","text":"<pre><code>std::string endstone::detail::PluginDescriptionBuilder::description;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-load","title":"variable load","text":"<pre><code>PluginLoadOrder endstone::detail::PluginDescriptionBuilder::load;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-load_before","title":"variable load_before","text":"<pre><code>std::vector&lt;std::string&gt; endstone::detail::PluginDescriptionBuilder::load_before;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-permissions","title":"variable permissions","text":"<pre><code>std::unordered_map&lt;std::string, PermissionBuilder&gt; endstone::detail::PluginDescriptionBuilder::permissions;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-prefix","title":"variable prefix","text":"<pre><code>std::string endstone::detail::PluginDescriptionBuilder::prefix;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-provides","title":"variable provides","text":"<pre><code>std::vector&lt;std::string&gt; endstone::detail::PluginDescriptionBuilder::provides;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-soft_depend","title":"variable soft_depend","text":"<pre><code>std::vector&lt;std::string&gt; endstone::detail::PluginDescriptionBuilder::soft_depend;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#variable-website","title":"variable website","text":"<pre><code>std::string endstone::detail::PluginDescriptionBuilder::website;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#function-build","title":"function build","text":"<pre><code>inline PluginDescription PluginDescriptionBuilder::build (\n    std::string name,\n    std::string version\n) const\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#function-command","title":"function command","text":"<pre><code>inline CommandBuilder &amp; PluginDescriptionBuilder::command (\n    std::string name\n) \n</code></pre>"},{"location":"reference/cpp/structendstone_1_1detail_1_1PluginDescriptionBuilder/#function-permission","title":"function permission","text":"<pre><code>inline PermissionBuilder &amp; PluginDescriptionBuilder::permission (\n    std::string name\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/namespacefmt/","title":"Namespace fmt","text":"<p>Namespace List &gt; fmt</p>"},{"location":"reference/cpp/namespacefmt/#classes","title":"Classes","text":"Type Name struct formatter&lt; endstone::Actor &gt; &lt;&gt; struct formatter&lt; endstone::Block &gt; &lt;&gt; struct formatter&lt; endstone::BlockData &gt; &lt;&gt; struct formatter&lt; endstone::BlockState &gt; &lt;&gt; struct formatter&lt; endstone::BlockStates &gt; &lt;&gt; struct formatter&lt; endstone::BlockStates::mapped_type &gt; &lt;&gt; struct formatter&lt; endstone::BlockStates::value_type &gt; &lt;&gt; struct formatter&lt; endstone::Chunk &gt; &lt;&gt; struct formatter&lt; endstone::DamageSource &gt; &lt;&gt; struct formatter&lt; endstone::Dimension &gt; &lt;&gt; struct formatter&lt; endstone::ItemStack &gt; &lt;&gt; struct formatter&lt; endstone::ItemType &gt; &lt;&gt; struct formatter&lt; endstone::Location &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/block/block.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Actor_01_4/","title":"Struct fmt::formatter&lt; endstone::Actor &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::Actor &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Actor_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::Actor Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Actor_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Actor_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Actor_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::Actor &gt;::Type =  endstone::Actor;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Actor_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Actor_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::Actor &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/actor/actor.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Block_01_4/","title":"Struct fmt::formatter&lt; endstone::Block &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::Block &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Block_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::Block Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Block_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Block_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Block_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::Block &gt;::Type =  endstone::Block;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Block_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Block_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::Block &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockData_01_4/","title":"Struct fmt::formatter&lt; endstone::BlockData &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::BlockData &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockData_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::BlockData Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockData_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockData_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockData_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::BlockData &gt;::Type =  endstone::BlockData;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockData_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockData_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::BlockData &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_data.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockState_01_4/","title":"Struct fmt::formatter&lt; endstone::BlockState &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::BlockState &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockState_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::BlockState Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockState_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockState_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockState_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::BlockState &gt;::Type =  endstone::BlockState;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockState_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockState_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::BlockState &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_state.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_01_4/","title":"Struct fmt::formatter&lt; endstone::BlockStates &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::BlockStates &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::BlockStates Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::BlockStates &gt;::Type =  endstone::BlockStates;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::BlockStates &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_data.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1mapped__type_01_4/","title":"Struct fmt::formatter&lt; endstone::BlockStates::mapped_type &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::BlockStates::mapped_type &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1mapped__type_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::BlockStates::mapped_type Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1mapped__type_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1mapped__type_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1mapped__type_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::BlockStates::mapped_type &gt;::Type =  endstone::BlockStates::mapped_type;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1mapped__type_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1mapped__type_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::BlockStates::mapped_type &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_data.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1value__type_01_4/","title":"Struct fmt::formatter&lt; endstone::BlockStates::value_type &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::BlockStates::value_type &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1value__type_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::BlockStates::value_type Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1value__type_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1value__type_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1value__type_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::BlockStates::value_type &gt;::Type =  endstone::BlockStates::value_type;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1value__type_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1BlockStates_1_1value__type_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::BlockStates::value_type &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_data.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Chunk_01_4/","title":"Struct fmt::formatter&lt; endstone::Chunk &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::Chunk &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Chunk_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const endstone::Chunk &amp; self, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Chunk_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Chunk_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::Chunk &gt;::format (\n    const endstone::Chunk &amp; self,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/chunk.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1DamageSource_01_4/","title":"Struct fmt::formatter&lt; endstone::DamageSource &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::DamageSource &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1DamageSource_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::DamageSource Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1DamageSource_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1DamageSource_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1DamageSource_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::DamageSource &gt;::Type =  endstone::DamageSource;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1DamageSource_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1DamageSource_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::DamageSource &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/damage/damage_source.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Dimension_01_4/","title":"Struct fmt::formatter&lt; endstone::Dimension &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::Dimension &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Dimension_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const endstone::Dimension &amp; self, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Dimension_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Dimension_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::Dimension &gt;::format (\n    const endstone::Dimension &amp; self,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/dimension.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemStack_01_4/","title":"Struct fmt::formatter&lt; endstone::ItemStack &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::ItemStack &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemStack_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::ItemStack Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemStack_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemStack_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemStack_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::ItemStack &gt;::Type =  endstone::ItemStack;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemStack_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemStack_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::ItemStack &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_stack.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemType_01_4/","title":"Struct fmt::formatter&lt; endstone::ItemType &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::ItemType &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemType_01_4/#public-types","title":"Public Types","text":"Type Name typedef endstone::ItemType Type"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemType_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const Type &amp; val, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemType_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemType_01_4/#typedef-type","title":"typedef Type","text":"<pre><code>using fmt::formatter&lt; endstone::ItemType &gt;::Type =  endstone::ItemType;\n</code></pre>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemType_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1ItemType_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::ItemType &gt;::format (\n    const Type &amp; val,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_type.h</code></p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Location_01_4/","title":"Struct fmt::formatter&lt; endstone::Location &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; fmt &gt; formatter&lt; endstone::Location &gt;</p> <p>Inherits the following classes: formatter&lt; string_view &gt;</p>"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Location_01_4/#public-functions","title":"Public Functions","text":"Type Name auto format (const endstone::Location &amp; self, FormatContext &amp; ctx) const"},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Location_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structfmt_1_1formatter_3_01endstone_1_1Location_01_4/#function-format","title":"function format","text":"<pre><code>template&lt;typename FormatContext&gt;\ninline auto fmt::formatter&lt; endstone::Location &gt;::format (\n    const endstone::Location &amp; self,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/location.h</code></p>"},{"location":"reference/cpp/namespacestd/","title":"Namespace std","text":"<p>Namespace List &gt; std</p>"},{"location":"reference/cpp/namespacestd/#classes","title":"Classes","text":"Type Name struct hash&lt; endstone::UUID &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/","title":"Struct std::hash&lt; endstone::UUID &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; std &gt; hash&lt; endstone::UUID &gt;</p>"},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/#public-functions","title":"Public Functions","text":"Type Name std::size_t operator() (const endstone::UUID &amp; value) noexcept const"},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/#function-operator","title":"function operator()","text":"<pre><code>inline std::size_t std::hash&lt; endstone::UUID &gt;::operator() (\n    const endstone::UUID &amp; value\n) noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/dir_d44c64559bbebec7f509842c48db8b23/","title":"Dir include","text":"<p>FileList &gt; include</p>"},{"location":"reference/cpp/dir_d44c64559bbebec7f509842c48db8b23/#directories","title":"Directories","text":"Type Name dir endstone <p>The documentation for this class was generated from the following file <code>include/</code></p>"},{"location":"reference/cpp/dir_6cf277b678674f97c7a2b6b3b2447b33/","title":"Dir include/endstone","text":"<p>FileList &gt; endstone</p>"},{"location":"reference/cpp/dir_6cf277b678674f97c7a2b6b3b2447b33/#files","title":"Files","text":"Type Name file color_format.h file game_mode.h file logger.h file message.h file offline_player.h file player.h file registry.h file server.h file skin.h file variant.h"},{"location":"reference/cpp/dir_6cf277b678674f97c7a2b6b3b2447b33/#directories","title":"Directories","text":"Type Name dir actor dir ban dir block dir boss dir command dir damage dir enchantments dir event dir form dir inventory dir lang dir level dir map dir permissions dir plugin dir scheduler dir scoreboard dir util <p>The documentation for this class was generated from the following file <code>include/endstone/</code></p>"},{"location":"reference/cpp/color__format_8h/","title":"File color_format.h","text":"<p>FileList &gt; endstone &gt; color_format.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/color__format_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/color__format_8h/#classes","title":"Classes","text":"Type Name struct ColorFormat All supported color and format codes. <p>The documentation for this class was generated from the following file <code>include/endstone/color_format.h</code></p>"},{"location":"reference/cpp/color__format_8h_source/","title":"File color_format.h","text":"<p>File List &gt; endstone &gt; color_format.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\nnamespace endstone {\n\nstruct ColorFormat {\n    // Escape\n    inline static const std::string Escape = \"\u00a7\";\n\n    // Color code\n    inline static const std::string Black = Escape + '0';\n    inline static const std::string DarkBlue = Escape + '1';\n    inline static const std::string DarkGreen = Escape + '2';\n    inline static const std::string DarkAqua = Escape + '3';\n    inline static const std::string DarkRed = Escape + '4';\n    inline static const std::string DarkPurple = Escape + '5';\n    inline static const std::string Gold = Escape + '6';\n    inline static const std::string Gray = Escape + '7';\n    inline static const std::string DarkGray = Escape + '8';\n    inline static const std::string Blue = Escape + '9';\n    inline static const std::string Green = Escape + 'a';\n    inline static const std::string Aqua = Escape + 'b';\n    inline static const std::string Red = Escape + 'c';\n    inline static const std::string LightPurple = Escape + 'd';\n    inline static const std::string Yellow = Escape + 'e';\n    inline static const std::string White = Escape + 'f';\n    inline static const std::string MinecoinGold = Escape + 'g';\n    inline static const std::string MaterialQuartz = Escape + 'h';\n    inline static const std::string MaterialIron = Escape + 'i';\n    inline static const std::string MaterialNetherite = Escape + 'j';\n    inline static const std::string MaterialRedstone = Escape + 'm';\n    inline static const std::string MaterialCopper = Escape + 'n';\n    inline static const std::string MaterialGold = Escape + 'p';\n    inline static const std::string MaterialEmerald = Escape + 'q';\n    inline static const std::string MaterialDiamond = Escape + 's';\n    inline static const std::string MaterialLapis = Escape + 't';\n    inline static const std::string MaterialAmethyst = Escape + 'u';\n    inline static const std::string MaterialResin = Escape + 'v';\n\n    // Format code\n    inline static const std::string Obfuscated = Escape + 'k';\n    inline static const std::string Bold = Escape + 'l';\n    inline static const std::string Italic = Escape + 'o';\n    inline static const std::string Reset = Escape + 'r';\n};  // namespace ColorFormat\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/game__mode_8h/","title":"File game_mode.h","text":"<p>FileList &gt; endstone &gt; game_mode.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/game__mode_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/game_mode.h</code></p>"},{"location":"reference/cpp/game__mode_8h_source/","title":"File game_mode.h","text":"<p>File List &gt; endstone &gt; game_mode.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class GameMode {\n    Survival = 0,\n\n    Creative = 1,\n\n    Adventure = 2,\n\n    Spectator = 3,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_dd7779a583e02d88c9a89a2c881c3946/","title":"Dir include/endstone/actor","text":"<p>FileList &gt; actor</p>"},{"location":"reference/cpp/dir_dd7779a583e02d88c9a89a2c881c3946/#files","title":"Files","text":"Type Name file actor.h file item.h file mob.h <p>The documentation for this class was generated from the following file <code>include/endstone/actor/</code></p>"},{"location":"reference/cpp/actor_8h/","title":"File actor.h","text":"<p>FileList &gt; actor &gt; actor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/level/location.h\"</code></li> </ul>"},{"location":"reference/cpp/actor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor_8h/#classes","title":"Classes","text":"Type Name class Actor Represents a base actor in the level. struct formatter&lt; endstone::Actor &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/actor/actor.h</code></p>"},{"location":"reference/cpp/actor_8h_source/","title":"File actor.h","text":"<p>File List &gt; actor &gt; actor.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/level/location.h\"\n\nnamespace endstone {\nclass Item;\nclass Mob;\nclass Level;\nclass Actor : public CommandSender {\npublic:\n    [[nodiscard]] virtual Mob *asMob() const = 0;\n\n    [[nodiscard]] virtual Item *asItem() const = 0;\n\n    [[nodiscard]] virtual std::string getType() const = 0;\n\n    [[nodiscard]] virtual std::uint64_t getRuntimeId() const = 0;\n\n    [[nodiscard]] virtual Location getLocation() const = 0;\n\n    [[nodiscard]] virtual Vector getVelocity() const = 0;\n\n    [[nodiscard]] virtual bool isOnGround() const = 0;\n\n    [[nodiscard]] virtual bool isInWater() const = 0;\n\n    [[nodiscard]] virtual bool isInLava() const = 0;\n\n    [[nodiscard]] virtual Level &amp;getLevel() const = 0;\n\n    [[nodiscard]] virtual Dimension &amp;getDimension() const = 0;\n\n    virtual void setRotation(float yaw, float pitch) = 0;\n\n    virtual void teleport(Location location) = 0;\n\n    virtual void teleport(Actor &amp;target) = 0;\n\n    [[nodiscard]] virtual std::int64_t getId() const = 0;\n\n    virtual void remove() = 0;\n\n    [[nodiscard]] virtual bool isDead() const = 0;\n\n    [[nodiscard]] virtual bool isValid() const = 0;\n\n    [[nodiscard]] virtual int getHealth() const = 0;\n\n    [[nodiscard]] virtual Result&lt;void&gt; setHealth(int health) const = 0;\n\n    [[nodiscard]] virtual int getMaxHealth() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;std::string&gt; getScoreboardTags() const = 0;\n\n    [[nodiscard]] virtual bool addScoreboardTag(std::string tag) const = 0;\n\n    [[nodiscard]] virtual bool removeScoreboardTag(std::string tag) const = 0;\n\n    [[nodiscard]] virtual bool isNameTagVisible() const = 0;\n\n    virtual void setNameTagVisible(bool visible) = 0;\n\n    [[nodiscard]] virtual bool isNameTagAlwaysVisible() const = 0;\n\n    virtual void setNameTagAlwaysVisible(bool visible) = 0;\n\n    [[nodiscard]] virtual std::string getNameTag() const = 0;\n\n    virtual void setNameTag(std::string name) = 0;\n\n    [[nodiscard]] virtual std::string getScoreTag() const = 0;\n\n    virtual void setScoreTag(std::string score) = 0;\n};\n\n}  // namespace endstone\n\ntemplate &lt;&gt;\nstruct fmt::formatter&lt;endstone::Actor&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::Actor;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"{}\", val.getName());\n    }\n};  // namespace fmt\n</code></pre>"},{"location":"reference/cpp/item_8h/","title":"File item.h","text":"<p>FileList &gt; actor &gt; item.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/actor.h\"</code></li> <li><code>#include \"endstone/inventory/item_stack.h\"</code></li> </ul>"},{"location":"reference/cpp/item_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/item_8h/#classes","title":"Classes","text":"Type Name class Item Represents a base actor in the level. <p>The documentation for this class was generated from the following file <code>include/endstone/actor/item.h</code></p>"},{"location":"reference/cpp/item_8h_source/","title":"File item.h","text":"<p>File List &gt; actor &gt; item.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/actor.h\"\n#include \"endstone/inventory/item_stack.h\"\n\nnamespace endstone {\nclass Item : public Actor {\npublic:\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getItemStack() const = 0;\n\n    virtual void setItemStack(const ItemStack &amp;stack) = 0;\n\n    [[nodiscard]] virtual int getPickupDelay() const = 0;\n\n    virtual void setPickupDelay(int delay) = 0;\n\n    virtual void setUnlimitedLifetime(bool unlimited) = 0;\n\n    [[nodiscard]] virtual bool isUnlimitedLifetime() const = 0;\n\n    virtual void setThrower(std::optional&lt;std::int64_t&gt; thrower) = 0;\n\n    [[nodiscard]] virtual std::optional&lt;std::int64_t&gt; getThrower() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/mob_8h/","title":"File mob.h","text":"<p>FileList &gt; actor &gt; mob.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/actor.h\"</code></li> </ul>"},{"location":"reference/cpp/mob_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/mob_8h/#classes","title":"Classes","text":"Type Name class Mob Represents a mobile entity (i.e. living entity), such as a monster or player. <p>The documentation for this class was generated from the following file <code>include/endstone/actor/mob.h</code></p>"},{"location":"reference/cpp/mob_8h_source/","title":"File mob.h","text":"<p>File List &gt; actor &gt; mob.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/actor.h\"\n\nnamespace endstone {\nclass Mob : public Actor {\npublic:\n    [[nodiscard]] virtual bool isGliding() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_f1b1f2e9abb31749ef58cd98f22bcd78/","title":"Dir include/endstone/ban","text":"<p>FileList &gt; ban</p>"},{"location":"reference/cpp/dir_f1b1f2e9abb31749ef58cd98f22bcd78/#files","title":"Files","text":"Type Name file ban_entry.h file ban_list.h file ip_ban_entry.h file ip_ban_list.h file player_ban_entry.h file player_ban_list.h <p>The documentation for this class was generated from the following file <code>include/endstone/ban/</code></p>"},{"location":"reference/cpp/ban__entry_8h/","title":"File ban_entry.h","text":"<p>FileList &gt; ban &gt; ban_entry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> </ul>"},{"location":"reference/cpp/ban__entry_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/ban__entry_8h/#classes","title":"Classes","text":"Type Name class BanEntry A single entry from a ban list. <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ban_entry.h</code></p>"},{"location":"reference/cpp/ban__entry_8h_source/","title":"File ban_entry.h","text":"<p>File List &gt; ban &gt; ban_entry.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;chrono&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\nnamespace endstone {\nclass BanEntry {\n\npublic:\n    using Date = std::chrono::system_clock::time_point;\n\n    inline static const std::string DateFormat = \"%FT%T%Ez\";\n\n    [[nodiscard]] Date getCreated() const\n    {\n        return created_;\n    }\n\n    void setCreated(Date created)\n    {\n        created_ = created;\n    }\n\n    [[nodiscard]] std::string getSource() const\n    {\n        return source_;\n    }\n\n    void setSource(std::string source)\n    {\n        source_ = std::move(source);\n    }\n\n    [[nodiscard]] std::optional&lt;Date&gt; getExpiration() const\n    {\n        return expiration_;\n    }\n\n    void setExpiration(std::optional&lt;Date&gt; expiration)\n    {\n        expiration_ = expiration;\n    }\n\n    [[nodiscard]] std::string getReason() const\n    {\n        return reason_;\n    }\n\n    void setReason(std::string reason)\n    {\n        reason_ = std::move(reason);\n    }\n\nprivate:\n    Date created_ = std::chrono::system_clock::now();\n    std::string source_ = \"(Unknown)\";\n    std::optional&lt;Date&gt; expiration_ = std::nullopt;\n    std::string reason_ = \"Banned by an operator.\";\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/ban__list_8h/","title":"File ban_list.h","text":"<p>FileList &gt; ban &gt; ban_list.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/ban/ban_entry.h\"</code></li> </ul>"},{"location":"reference/cpp/ban__list_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/ban__list_8h/#classes","title":"Classes","text":"Type Name class BanList &lt;typename T&gt;Represents a ban list, containing bans. <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ban_list.h</code></p>"},{"location":"reference/cpp/ban__list_8h_source/","title":"File ban_list.h","text":"<p>File List &gt; ban &gt; ban_list.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;chrono&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/ban/ban_entry.h\"\n\nnamespace endstone {\n\ntemplate &lt;typename T&gt;\nclass BanList {\npublic:\n    virtual ~BanList() = default;\n\n    [[nodiscard]] virtual const T *getBanEntry(std::string target) const = 0;\n\n    [[nodiscard]] virtual T *getBanEntry(std::string target) = 0;\n\n    virtual T &amp;addBan(std::string target, std::optional&lt;std::string&gt; reason, std::optional&lt;BanEntry::Date&gt; expires,\n                      std::optional&lt;std::string&gt; source) = 0;\n\n    virtual T &amp;addBan(std::string target, std::optional&lt;std::string&gt; reason, std::chrono::seconds duration,\n                      std::optional&lt;std::string&gt; source) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;const T *&gt; getEntries() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;T *&gt; getEntries() = 0;\n\n    [[nodiscard]] virtual bool isBanned(std::string target) const = 0;\n\n    virtual void removeBan(std::string target) = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/ip__ban__entry_8h/","title":"File ip_ban_entry.h","text":"<p>FileList &gt; ban &gt; ip_ban_entry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/ban/ban_entry.h\"</code></li> </ul>"},{"location":"reference/cpp/ip__ban__entry_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/ip__ban__entry_8h/#classes","title":"Classes","text":"Type Name class IpBanEntry <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ip_ban_entry.h</code></p>"},{"location":"reference/cpp/ip__ban__entry_8h_source/","title":"File ip_ban_entry.h","text":"<p>File List &gt; ban &gt; ip_ban_entry.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;utility&gt;\n\n#include \"endstone/ban/ban_entry.h\"\n\nnamespace endstone {\n\nclass IpBanEntry : public BanEntry {\npublic:\n    explicit IpBanEntry(std::string address) : address_(std::move(address)) {}\n\n    [[nodiscard]] std::string getAddress() const\n    {\n        return address_;\n    }\n\nprivate:\n    std::string address_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/ip__ban__list_8h/","title":"File ip_ban_list.h","text":"<p>FileList &gt; ban &gt; ip_ban_list.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/ban/ban_list.h\"</code></li> <li><code>#include \"endstone/ban/ip_ban_entry.h\"</code></li> </ul>"},{"location":"reference/cpp/ip__ban__list_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/ip__ban__list_8h/#classes","title":"Classes","text":"Type Name class IpBanList Represents a ban list, containing banned IP addresses. <p>The documentation for this class was generated from the following file <code>include/endstone/ban/ip_ban_list.h</code></p>"},{"location":"reference/cpp/ip__ban__list_8h_source/","title":"File ip_ban_list.h","text":"<p>File List &gt; ban &gt; ip_ban_list.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;chrono&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/ban/ban_list.h\"\n#include \"endstone/ban/ip_ban_entry.h\"\n\nnamespace endstone {\n\nclass IpBanList : public BanList&lt;IpBanEntry&gt; {\npublic:\n    ~IpBanList() override = default;\n\n    [[nodiscard]] const IpBanEntry *getBanEntry(std::string address) const override = 0;\n\n    [[nodiscard]] IpBanEntry *getBanEntry(std::string address) override = 0;\n\n    IpBanEntry &amp;addBan(std::string address, std::optional&lt;std::string&gt; reason, std::optional&lt;BanEntry::Date&gt; expires,\n                       std::optional&lt;std::string&gt; source) override = 0;\n\n    IpBanEntry &amp;addBan(std::string address, std::optional&lt;std::string&gt; reason, std::chrono::seconds duration,\n                       std::optional&lt;std::string&gt; source) override = 0;\n\n    [[nodiscard]] std::vector&lt;const IpBanEntry *&gt; getEntries() const override = 0;\n\n    [[nodiscard]] std::vector&lt;IpBanEntry *&gt; getEntries() override = 0;\n\n    [[nodiscard]] bool isBanned(std::string address) const override = 0;\n\n    void removeBan(std::string address) override = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__ban__entry_8h/","title":"File player_ban_entry.h","text":"<p>FileList &gt; ban &gt; player_ban_entry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/ban/ban_entry.h\"</code></li> <li><code>#include \"endstone/util/uuid.h\"</code></li> </ul>"},{"location":"reference/cpp/player__ban__entry_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__ban__entry_8h/#classes","title":"Classes","text":"Type Name class PlayerBanEntry <p>The documentation for this class was generated from the following file <code>include/endstone/ban/player_ban_entry.h</code></p>"},{"location":"reference/cpp/player__ban__entry_8h_source/","title":"File player_ban_entry.h","text":"<p>File List &gt; ban &gt; player_ban_entry.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;utility&gt;\n\n#include \"endstone/ban/ban_entry.h\"\n#include \"endstone/util/uuid.h\"\n\nnamespace endstone {\n\nclass PlayerBanEntry : public BanEntry {\npublic:\n    explicit PlayerBanEntry(std::string name, std::optional&lt;UUID&gt; uuid = std::nullopt,\n                            std::optional&lt;std::string&gt; xuid = std::nullopt)\n        : name_(std::move(name)), uuid_(uuid), xuid_(std::move(xuid))\n    {\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return name_;\n    }\n\n    [[nodiscard]] std::optional&lt;UUID&gt; getUniqueId() const\n    {\n        return uuid_;\n    }\n\n    [[nodiscard]] std::optional&lt;std::string&gt; getXuid() const\n    {\n        return xuid_;\n    }\n\nprivate:\n    std::string name_;\n    std::optional&lt;UUID&gt; uuid_;\n    std::optional&lt;std::string&gt; xuid_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__ban__list_8h/","title":"File player_ban_list.h","text":"<p>FileList &gt; ban &gt; player_ban_list.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/ban/ban_list.h\"</code></li> <li><code>#include \"endstone/ban/player_ban_entry.h\"</code></li> </ul>"},{"location":"reference/cpp/player__ban__list_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__ban__list_8h/#classes","title":"Classes","text":"Type Name class PlayerBanList Represents a ban list, containing banned players. <p>The documentation for this class was generated from the following file <code>include/endstone/ban/player_ban_list.h</code></p>"},{"location":"reference/cpp/player__ban__list_8h_source/","title":"File player_ban_list.h","text":"<p>File List &gt; ban &gt; player_ban_list.h</p> <p>Go to the documentation of this file</p> <pre><code>#pragma once\n\n#include &lt;chrono&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/ban/ban_list.h\"\n#include \"endstone/ban/player_ban_entry.h\"\n\nnamespace endstone {\n\nclass PlayerBanList : public BanList&lt;PlayerBanEntry&gt; {\npublic:\n    virtual ~PlayerBanList() = default;\n\n    [[nodiscard]] virtual const PlayerBanEntry *getBanEntry(std::string name) const = 0;\n\n    [[nodiscard]] virtual PlayerBanEntry *getBanEntry(std::string name) = 0;\n\n    [[nodiscard]] virtual const PlayerBanEntry *getBanEntry(std::string name, std::optional&lt;UUID&gt; uuid,\n                                                            std::optional&lt;std::string&gt; xuid) const = 0;\n\n    [[nodiscard]] virtual PlayerBanEntry *getBanEntry(std::string name, std::optional&lt;UUID&gt; uuid,\n                                                      std::optional&lt;std::string&gt; xuid) = 0;\n\n    virtual PlayerBanEntry &amp;addBan(std::string name, std::optional&lt;std::string&gt; reason,\n                                   std::optional&lt;BanEntry::Date&gt; expires, std::optional&lt;std::string&gt; source) = 0;\n\n    virtual PlayerBanEntry &amp;addBan(std::string name, std::optional&lt;UUID&gt; uuid, std::optional&lt;std::string&gt; xuid,\n                                   std::optional&lt;std::string&gt; reason, std::optional&lt;BanEntry::Date&gt; expires,\n                                   std::optional&lt;std::string&gt; source) = 0;\n\n    virtual PlayerBanEntry &amp;addBan(std::string name, std::optional&lt;std::string&gt; reason, std::chrono::seconds duration,\n                                   std::optional&lt;std::string&gt; source) = 0;\n\n    virtual PlayerBanEntry &amp;addBan(std::string name, std::optional&lt;UUID&gt; uuid, std::optional&lt;std::string&gt; xuid,\n                                   std::optional&lt;std::string&gt; reason, std::chrono::seconds duration,\n                                   std::optional&lt;std::string&gt; source) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;const PlayerBanEntry *&gt; getEntries() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;PlayerBanEntry *&gt; getEntries() = 0;\n\n    [[nodiscard]] virtual bool isBanned(std::string name) const = 0;\n\n    [[nodiscard]] virtual bool isBanned(std::string name, std::optional&lt;UUID&gt; uuid,\n                                        std::optional&lt;std::string&gt; xuid) const = 0;\n\n    virtual void removeBan(std::string name) = 0;\n\n    virtual void removeBan(std::string name, std::optional&lt;UUID&gt; uuid, std::optional&lt;std::string&gt; xuid) = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_faca67fc60a7463eb1bd30eabe023cf1/","title":"Dir include/endstone/block","text":"<p>FileList &gt; block</p>"},{"location":"reference/cpp/dir_faca67fc60a7463eb1bd30eabe023cf1/#files","title":"Files","text":"Type Name file block.h file block_data.h file block_face.h file block_state.h <p>The documentation for this class was generated from the following file <code>include/endstone/block/</code></p>"},{"location":"reference/cpp/block_8h/","title":"File block.h","text":"<p>FileList &gt; block &gt; block.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/block/block_data.h\"</code></li> <li><code>#include \"endstone/block/block_face.h\"</code></li> <li><code>#include \"endstone/level/location.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/block_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace fmt"},{"location":"reference/cpp/block_8h/#classes","title":"Classes","text":"Type Name class Block Represents a block. struct formatter&lt; endstone::Block &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/block/block.h</code></p>"},{"location":"reference/cpp/block_8h_source/","title":"File block.h","text":"<p>File List &gt; block &gt; block.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n\n#include \"endstone/block/block_data.h\"\n#include \"endstone/block/block_face.h\"\n#include \"endstone/level/location.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass BlockState;\n\nclass Dimension;\n\nclass Block {\npublic:\n    virtual ~Block() = default;\n\n    [[nodiscard]] virtual std::string getType() const = 0;\n\n    virtual Result&lt;void&gt; setType(std::string type) = 0;\n\n    virtual Result&lt;void&gt; setType(std::string type, bool apply_physics) = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;BlockData&gt; getData() const = 0;\n\n    virtual Result&lt;void&gt; setData(const BlockData &amp;data) = 0;\n\n    virtual Result&lt;void&gt; setData(const BlockData &amp;data, bool apply_physics) = 0;\n\n    virtual std::unique_ptr&lt;Block&gt; getRelative(int offset_x, int offset_y, int offset_z) = 0;\n\n    virtual std::unique_ptr&lt;Block&gt; getRelative(BlockFace face) = 0;\n\n    virtual std::unique_ptr&lt;Block&gt; getRelative(BlockFace face, int distance) = 0;\n\n    [[nodiscard]] virtual Dimension &amp;getDimension() const = 0;\n\n    [[nodiscard]] virtual int getX() const = 0;\n\n    [[nodiscard]] virtual int getY() const = 0;\n\n    [[nodiscard]] virtual int getZ() const = 0;\n\n    [[nodiscard]] virtual Location getLocation() const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;BlockState&gt; captureState() const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Block&gt; clone() const = 0;\n};\n\n}  // namespace endstone\n\nnamespace fmt {\ntemplate &lt;&gt;\nstruct formatter&lt;endstone::Block&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::Block;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        auto it = ctx.out();\n        it = fmt::format_to(it, \"Block(pos=BlockPos(x={}, y={}, z={}), type={}\", val.getX(), val.getY(), val.getZ(),\n                            val.getType());\n        if (const auto data = val.getData()) {\n            it = fmt::format_to(it, \", data={}\", *data);\n        }\n        else {\n            it = fmt::format_to(it, \", data=INVALID\");\n        }\n        it = fmt::format_to(it, \")\");\n        return it;\n    }\n};\n}  // namespace fmt\n</code></pre>"},{"location":"reference/cpp/block__data_8h/","title":"File block_data.h","text":"<p>FileList &gt; block &gt; block_data.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;variant&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include &lt;fmt/ranges.h&gt;</code></li> <li><code>#include \"endstone/variant.h\"</code></li> </ul>"},{"location":"reference/cpp/block__data_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace fmt"},{"location":"reference/cpp/block__data_8h/#classes","title":"Classes","text":"Type Name class BlockData Represents the data related to a live block. struct formatter&lt; endstone::BlockData &gt; &lt;&gt; struct formatter&lt; endstone::BlockStates &gt; &lt;&gt; struct formatter&lt; endstone::BlockStates::mapped_type &gt; &lt;&gt; struct formatter&lt; endstone::BlockStates::value_type &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_data.h</code></p>"},{"location":"reference/cpp/block__data_8h_source/","title":"File block_data.h","text":"<p>File List &gt; block &gt; block_data.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;variant&gt;\n\n#include &lt;fmt/format.h&gt;\n#include &lt;fmt/ranges.h&gt;\n\n#include \"endstone/variant.h\"\n\nnamespace endstone {\n\nusing BlockStates = std::unordered_map&lt;std::string, std::variant&lt;bool, std::string, int&gt;&gt;;\n\nclass BlockData {\npublic:\n    virtual ~BlockData() = default;\n\n    [[nodiscard]] virtual std::string getType() const = 0;\n\n    [[nodiscard]] virtual BlockStates getBlockStates() const = 0;\n\n    [[nodiscard]] virtual std::uint32_t getRuntimeId() const = 0;\n};\n\n}  // namespace endstone\n\nnamespace fmt {\n\ntemplate &lt;&gt;\nstruct formatter&lt;endstone::BlockStates::mapped_type&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::BlockStates::mapped_type;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return std::visit(endstone::overloaded{\n                              [&amp;ctx](const std::string &amp;arg) { return fmt::format_to(ctx.out(), \"{:?}\", arg); },\n                              [&amp;ctx](auto &amp;&amp;arg) { return fmt::format_to(ctx.out(), \"{}\", arg); },\n                          },\n                          val);\n    }\n};\n\ntemplate &lt;&gt;\nstruct formatter&lt;endstone::BlockStates::value_type&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::BlockStates::value_type;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"{:?}={}\", val.first, val.second);\n    }\n};\n\ntemplate &lt;&gt;\nstruct formatter&lt;endstone::BlockStates&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::BlockStates;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"[{}]\", fmt::join(val.begin(), val.end(), \",\"));\n    }\n};\n\ntemplate &lt;&gt;\nstruct formatter&lt;endstone::BlockData&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::BlockData;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"BlockData(type={}, block_states={})\", val.getType(), val.getBlockStates());\n    }\n};\n}  // namespace fmt\n</code></pre>"},{"location":"reference/cpp/block__face_8h/","title":"File block_face.h","text":"<p>FileList &gt; block &gt; block_face.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/block__face_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_face.h</code></p>"},{"location":"reference/cpp/block__face_8h_source/","title":"File block_face.h","text":"<p>File List &gt; block &gt; block_face.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class BlockFace {\n    Down,\n    Up,\n    North,\n    South,\n    West,\n    East,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/block__state_8h/","title":"File block_state.h","text":"<p>FileList &gt; block &gt; block_state.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include \"endstone/block/block.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/block__state_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace fmt"},{"location":"reference/cpp/block__state_8h/#classes","title":"Classes","text":"Type Name class BlockState Represents a captured state of a block, which will not update automatically. struct formatter&lt; endstone::BlockState &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/block/block_state.h</code></p>"},{"location":"reference/cpp/block__state_8h_source/","title":"File block_state.h","text":"<p>File List &gt; block &gt; block_state.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;fmt/format.h&gt;\n\n#include \"endstone/block/block.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass BlockState {\npublic:\n    virtual ~BlockState() = default;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Block&gt; getBlock() const = 0;\n\n    [[nodiscard]] virtual std::string getType() const = 0;\n\n    virtual Result&lt;void&gt; setType(std::string type) = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;BlockData&gt; getData() const = 0;\n\n    virtual Result&lt;void&gt; setData(const BlockData&amp; data) = 0;\n\n    [[nodiscard]] virtual Dimension &amp;getDimension() const = 0;\n\n    [[nodiscard]] virtual int getX() const = 0;\n\n    [[nodiscard]] virtual int getY() const = 0;\n\n    [[nodiscard]] virtual int getZ() const = 0;\n\n    [[nodiscard]] virtual Location getLocation() const = 0;\n\n    virtual bool update() = 0;\n\n    virtual bool update(bool force) = 0;\n\n    virtual bool update(bool force, bool apply_physics) = 0;\n};\n}  // namespace endstone\n\nnamespace fmt {\ntemplate &lt;&gt;\nstruct formatter&lt;endstone::BlockState&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::BlockState;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"BlockState(pos=BlockPos(x={}, y={}, z={}), type={}, data={})\", val.getX(),\n                              val.getY(), val.getZ(), val.getType(), *val.getData());\n    }\n};\n}  // namespace fmt\n</code></pre>"},{"location":"reference/cpp/dir_d0a7fd8d5b72659767e2a2651b1ff51c/","title":"Dir include/endstone/boss","text":"<p>FileList &gt; boss</p>"},{"location":"reference/cpp/dir_d0a7fd8d5b72659767e2a2651b1ff51c/#files","title":"Files","text":"Type Name file bar_color.h file bar_flag.h file bar_style.h file boss_bar.h <p>The documentation for this class was generated from the following file <code>include/endstone/boss/</code></p>"},{"location":"reference/cpp/bar__color_8h/","title":"File bar_color.h","text":"<p>FileList &gt; boss &gt; bar_color.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/bar__color_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/boss/bar_color.h</code></p>"},{"location":"reference/cpp/bar__color_8h_source/","title":"File bar_color.h","text":"<p>File List &gt; boss &gt; bar_color.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class BarColor {\n    Pink = 0,\n    Blue = 1,\n    Red = 2,\n    Green = 3,\n    Yellow = 4,\n    Purple = 5,\n    RebeccaPurple = 6,\n    White = 7,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/bar__flag_8h/","title":"File bar_flag.h","text":"<p>FileList &gt; boss &gt; bar_flag.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/bar__flag_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/boss/bar_flag.h</code></p>"},{"location":"reference/cpp/bar__flag_8h_source/","title":"File bar_flag.h","text":"<p>File List &gt; boss &gt; bar_flag.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class BarFlag {\n    DarkenSky,\n    Count,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/bar__style_8h/","title":"File bar_style.h","text":"<p>FileList &gt; boss &gt; bar_style.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/bar__style_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/boss/bar_style.h</code></p>"},{"location":"reference/cpp/bar__style_8h_source/","title":"File bar_style.h","text":"<p>File List &gt; boss &gt; bar_style.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class BarStyle {\n    Solid,\n    Segmented6,\n    Segmented10,\n    Segmented12,\n    Segmented20,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/boss__bar_8h/","title":"File boss_bar.h","text":"<p>FileList &gt; boss &gt; boss_bar.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/boss/bar_color.h\"</code></li> <li><code>#include \"endstone/boss/bar_flag.h\"</code></li> <li><code>#include \"endstone/boss/bar_style.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/boss__bar_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/boss__bar_8h/#classes","title":"Classes","text":"Type Name class BossBar Represents a boss bar that is displayed to players. <p>The documentation for this class was generated from the following file <code>include/endstone/boss/boss_bar.h</code></p>"},{"location":"reference/cpp/boss__bar_8h_source/","title":"File boss_bar.h","text":"<p>File List &gt; boss &gt; boss_bar.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/boss/bar_color.h\"\n#include \"endstone/boss/bar_flag.h\"\n#include \"endstone/boss/bar_style.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass Player;\n\nclass BossBar {\npublic:\n    virtual ~BossBar() = default;\n\n    [[nodiscard]] virtual std::string getTitle() const = 0;\n\n    virtual void setTitle(std::string title) = 0;\n\n    [[nodiscard]] virtual BarColor getColor() const = 0;\n\n    virtual void setColor(BarColor color) = 0;\n\n    [[nodiscard]] virtual BarStyle getStyle() const = 0;\n\n    virtual void setStyle(BarStyle style) = 0;\n\n    [[nodiscard]] virtual bool hasFlag(BarFlag flag) const = 0;\n\n    virtual void addFlag(BarFlag flag) = 0;\n\n    virtual void removeFlag(BarFlag flag) = 0;\n\n    [[nodiscard]] virtual float getProgress() const = 0;\n\n    virtual Result&lt;void&gt; setProgress(float progress) = 0;\n\n    [[nodiscard]] virtual bool isVisible() const = 0;\n\n    virtual void setVisible(bool visible) = 0;\n\n    virtual void addPlayer(Player &amp;player) = 0;\n\n    virtual void removePlayer(Player &amp;player) = 0;\n\n    virtual void removeAll() = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Player *&gt; getPlayers() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_5c7b2dbfabcd1115569d1e20a260545c/","title":"Dir include/endstone/command","text":"<p>FileList &gt; command</p>"},{"location":"reference/cpp/dir_5c7b2dbfabcd1115569d1e20a260545c/#files","title":"Files","text":"Type Name file block_command_sender.h file command.h file command_executor.h file command_map.h file command_sender.h file command_sender_wrapper.h file console_command_sender.h file plugin_command.h <p>The documentation for this class was generated from the following file <code>include/endstone/command/</code></p>"},{"location":"reference/cpp/block__command__sender_8h/","title":"File block_command_sender.h","text":"<p>FileList &gt; command &gt; block_command_sender.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block.h\"</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/block__command__sender_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__command__sender_8h/#classes","title":"Classes","text":"Type Name class BlockCommandSender Represents a block command sender. <p>The documentation for this class was generated from the following file <code>include/endstone/command/block_command_sender.h</code></p>"},{"location":"reference/cpp/block__command__sender_8h_source/","title":"File block_command_sender.h","text":"<p>File List &gt; command &gt; block_command_sender.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block.h\"\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\n\nclass BlockCommandSender : public CommandSender {\npublic:\n    [[nodiscard]] virtual std::unique_ptr&lt;Block&gt; getBlock() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command_8h/","title":"File command.h","text":"<p>FileList &gt; command &gt; command.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/command/command_map.h\"</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/command_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/command_8h/#classes","title":"Classes","text":"Type Name class Command Represents a Command , which executes various tasks upon user input. <p>The documentation for this class was generated from the following file <code>include/endstone/command/command.h</code></p>"},{"location":"reference/cpp/command_8h_source/","title":"File command.h","text":"<p>File List &gt; command &gt; command.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/command/command_map.h\"\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\n\nclass PluginCommand;\n\nclass Command {\npublic:\n    explicit Command(std::string name, std::string description = \"\", std::vector&lt;std::string&gt; usages = {},\n                     std::vector&lt;std::string&gt; aliases = {}, std::vector&lt;std::string&gt; permissions = {})\n    {\n        setName(std::move(name));\n        setDescription(std::move(description));\n        setUsages(std::move(usages));\n        setAliases(std::move(aliases));\n        setPermissions(std::move(permissions));\n    }\n\n    virtual ~Command() = default;\n\n    [[nodiscard]] virtual bool execute(CommandSender &amp;sender, const std::vector&lt;std::string&gt; &amp;args) const\n    {\n        return false;\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return name_;\n    }\n\n    void setName(std::string name)\n    {\n        if (!isRegistered()) {\n            std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n            name_ = std::move(name);\n        }\n    }\n\n    [[nodiscard]] std::string getDescription() const\n    {\n        return description_;\n    }\n\n    void setDescription(std::string description)\n    {\n        if (!isRegistered()) {\n            description_ = std::move(description);\n        }\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getAliases() const\n    {\n        return aliases_;\n    }\n\n    template &lt;typename... Alias&gt;\n    void setAliases(Alias... aliases)\n    {\n        if (!isRegistered()) {\n            std::vector&lt;std::string&gt; all_aliases = {aliases...};\n            aliases_.clear();\n            for (auto alias : all_aliases) {\n                std::transform(alias.begin(), alias.end(), alias.begin(),\n                               [](unsigned char c) { return std::tolower(c); });\n                aliases_.push_back(alias);\n            }\n        }\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getUsages() const\n    {\n        return usages_;\n    }\n\n    template &lt;typename... Usage&gt;\n    void setUsages(Usage... usages)\n    {\n        if (!isRegistered()) {\n            std::vector&lt;std::string&gt; all_usages = {usages...};\n            if (all_usages.empty()) {\n                all_usages.push_back(\"/\" + getName());\n            }\n            usages_ = std::move(all_usages);\n        }\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getPermissions() const\n    {\n        return permissions_;\n    }\n\n    template &lt;typename... Permission&gt;\n    void setPermissions(Permission... permissions)\n    {\n        permissions_ = std::move(std::vector&lt;std::string&gt;{permissions...});\n    }\n\n    [[nodiscard]] bool testPermission(const CommandSender &amp;target) const\n    {\n        if (testPermissionSilently(target)) {\n            return true;\n        }\n\n        target.sendErrorMessage(Translatable(\"commands.generic.unknown\", {getName()}));\n        return false;\n    }\n\n    [[nodiscard]] bool testPermissionSilently(const CommandSender &amp;target) const\n    {\n        if (permissions_.empty()) {\n            return true;\n        }\n\n        return std::any_of(permissions_.begin(), permissions_.end(),\n                           [&amp;target](const auto &amp;p) { return target.hasPermission(p); });\n    }\n\n    bool registerTo(const CommandMap &amp;command_map)\n    {\n        if (allowChangesFrom(command_map)) {\n            command_map_ = &amp;command_map;\n            return true;\n        }\n\n        return false;\n    }\n\n    bool unregisterFrom(const CommandMap &amp;command_map)\n    {\n        if (allowChangesFrom(command_map)) {\n            command_map_ = nullptr;\n            return true;\n        }\n\n        return false;\n    }\n\n    [[nodiscard]] bool isRegistered() const\n    {\n        return command_map_ != nullptr;\n    }\n\n    [[nodiscard]] virtual PluginCommand *asPluginCommand() const\n    {\n        return nullptr;\n    }\n\nprivate:\n    [[nodiscard]] bool allowChangesFrom(const CommandMap &amp;command_map) const\n    {\n        return (!isRegistered() || command_map_ == &amp;command_map);\n    }\n\n    std::string name_;\n    std::string description_;\n    std::vector&lt;std::string&gt; aliases_;\n    std::vector&lt;std::string&gt; usages_;\n    std::vector&lt;std::string&gt; permissions_;\n    const CommandMap *command_map_ = nullptr;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command__executor_8h/","title":"File command_executor.h","text":"<p>FileList &gt; command &gt; command_executor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/command/command.h\"</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/command__executor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/command__executor_8h/#classes","title":"Classes","text":"Type Name class CommandExecutor Represents a class which contains a single method for executing commands. <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_executor.h</code></p>"},{"location":"reference/cpp/command__executor_8h_source/","title":"File command_executor.h","text":"<p>File List &gt; command &gt; command_executor.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;map&gt;\n#include &lt;string&gt;\n\n#include \"endstone/command/command.h\"\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\nclass CommandExecutor {\npublic:\n    virtual ~CommandExecutor() = default;\n\n    virtual bool onCommand(CommandSender &amp;sender, const Command &amp;command, const std::vector&lt;std::string&gt; &amp;args)\n    {\n        return false;\n    }\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command__map_8h/","title":"File command_map.h","text":"<p>FileList &gt; command &gt; command_map.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/command__map_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/command__map_8h/#classes","title":"Classes","text":"Type Name class CommandMap Represents a command map that manages all commands of the Server . <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_map.h</code></p>"},{"location":"reference/cpp/command__map_8h_source/","title":"File command_map.h","text":"<p>File List &gt; command &gt; command_map.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\n\nclass Command;\n\nclass CommandMap {\npublic:\n    CommandMap() = default;\n    CommandMap(const CommandMap &amp;) = delete;\n    CommandMap &amp;operator=(const CommandMap &amp;) = delete;\n    CommandMap(CommandMap &amp;&amp;) = default;\n    CommandMap &amp;operator=(CommandMap &amp;&amp;) = default;\n\n    virtual ~CommandMap() = default;\n\n    virtual bool registerCommand(std::shared_ptr&lt;Command&gt; command) = 0;\n\n    virtual bool dispatch(CommandSender &amp;sender, std::string command_line) const = 0;\n\n    virtual void clearCommands() = 0;\n\n    [[nodiscard]] virtual std::shared_ptr&lt;Command&gt; getCommand(std::string name) const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command__sender_8h/","title":"File command_sender.h","text":"<p>FileList &gt; command &gt; command_sender.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> <li><code>#include \"endstone/permissions/permissible.h\"</code></li> </ul>"},{"location":"reference/cpp/command__sender_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/command__sender_8h/#classes","title":"Classes","text":"Type Name class CommandSender Represents a command sender. <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_sender.h</code></p>"},{"location":"reference/cpp/command__sender_8h_source/","title":"File command_sender.h","text":"<p>File List &gt; command &gt; command_sender.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include &lt;fmt/format.h&gt;\n\n#include \"endstone/message.h\"\n#include \"endstone/permissions/permissible.h\"\n\nnamespace endstone {\n\nclass Actor;\nclass BlockCommandSender;\nclass ConsoleCommandSender;\nclass Mob;\nclass Server;\nclass Player;\n\nclass CommandSender : public Permissible {\npublic:\n    // Permissible\n    [[nodiscard]] CommandSender *asCommandSender() const override\n    {\n        return const_cast&lt;CommandSender *&gt;(this);\n    }\n\n    [[nodiscard]] virtual ConsoleCommandSender *asConsole() const = 0;\n\n    [[nodiscard]] virtual BlockCommandSender *asBlock() const = 0;\n\n    [[nodiscard]] virtual Actor *asActor() const = 0;\n\n    [[nodiscard]] virtual Player *asPlayer() const = 0;\n\n    virtual void sendMessage(const Message &amp;message) const = 0;\n\n    template &lt;typename... Args&gt;\n    void sendMessage(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        try {\n            sendMessage(fmt::format(format, std::forward&lt;Args&gt;(args)...));\n        }\n        catch (std::exception &amp;e) {\n            sendErrorMessage(e.what());\n        }\n    }\n\n    virtual void sendErrorMessage(const Message &amp;message) const = 0;\n\n    template &lt;typename... Args&gt;\n    void sendErrorMessage(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        sendErrorMessage(fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    [[nodiscard]] virtual Server &amp;getServer() const = 0;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command__sender__wrapper_8h/","title":"File command_sender_wrapper.h","text":"<p>FileList &gt; command &gt; command_sender_wrapper.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/command__sender__wrapper_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/command__sender__wrapper_8h/#classes","title":"Classes","text":"Type Name class CommandSenderWrapper Represents a wrapper that forwards commands to the wrapped CommandSender and captures its output. <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_sender_wrapper.h</code></p>"},{"location":"reference/cpp/command__sender__wrapper_8h_source/","title":"File command_sender_wrapper.h","text":"<p>File List &gt; command &gt; command_sender_wrapper.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\n\nclass CommandSenderWrapper final : public CommandSender {\npublic:\n    using Callback = std::function&lt;void(const Message &amp;)&gt;;\n    explicit CommandSenderWrapper(CommandSender &amp;sender, Callback on_message = {}, Callback on_error = {})\n        : sender_(sender), on_message_(std::move(on_message)), on_error_(std::move(on_error)) {};\n\n    void sendMessage(const Message &amp;message) const override\n    {\n        if (on_message_) {\n            on_message_(message);\n        }\n    }\n    void sendErrorMessage(const Message &amp;message) const override\n    {\n        if (on_error_) {\n            on_error_(message);\n        }\n    }\n\n    [[nodiscard]] PermissionLevel getPermissionLevel() const override\n    {\n        return sender_.getPermissionLevel();\n    }\n\n    [[nodiscard]] bool isPermissionSet(std::string name) const override\n    {\n        return sender_.isPermissionSet(name);\n    }\n\n    [[nodiscard]] bool isPermissionSet(const Permission &amp;perm) const override\n    {\n        return sender_.isPermissionSet(perm);\n    }\n\n    [[nodiscard]] bool hasPermission(std::string name) const override\n    {\n        return sender_.hasPermission(name);\n    }\n\n    [[nodiscard]] bool hasPermission(const Permission &amp;perm) const override\n    {\n        return sender_.hasPermission(perm);\n    }\n\n    PermissionAttachment *addAttachment(Plugin &amp;plugin, const std::string &amp;name, bool value) override\n    {\n        return sender_.addAttachment(plugin, name, value);\n    }\n\n    PermissionAttachment *addAttachment(Plugin &amp;plugin) override\n    {\n        return sender_.addAttachment(plugin);\n    }\n\n    Result&lt;void&gt; removeAttachment(PermissionAttachment &amp;attachment) override\n    {\n        return sender_.removeAttachment(attachment);\n    }\n\n    void recalculatePermissions() override\n    {\n        sender_.recalculatePermissions();\n    }\n\n    [[nodiscard]] std::unordered_set&lt;PermissionAttachmentInfo *&gt; getEffectivePermissions() const override\n    {\n        return sender_.getEffectivePermissions();\n    }\n\n    [[nodiscard]] ConsoleCommandSender *asConsole() const override\n    {\n        return sender_.asConsole();\n    }\n\n    [[nodiscard]] BlockCommandSender *asBlock() const override\n    {\n        return sender_.asBlock();\n    }\n\n    [[nodiscard]] Actor *asActor() const override\n    {\n        return sender_.asActor();\n    }\n\n    [[nodiscard]] Player *asPlayer() const override\n    {\n        return sender_.asPlayer();\n    }\n\n    [[nodiscard]] Server &amp;getServer() const override\n    {\n        return sender_.getServer();\n    }\n\n    [[nodiscard]] std::string getName() const override\n    {\n        return sender_.getName();\n    }\n\nprivate:\n    CommandSender &amp;sender_;\n    Callback on_message_;\n    Callback on_error_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/console__command__sender_8h/","title":"File console_command_sender.h","text":"<p>FileList &gt; command &gt; console_command_sender.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/console__command__sender_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/console__command__sender_8h/#classes","title":"Classes","text":"Type Name class ConsoleCommandSender Represents a console command sender. <p>The documentation for this class was generated from the following file <code>include/endstone/command/console_command_sender.h</code></p>"},{"location":"reference/cpp/console__command__sender_8h_source/","title":"File console_command_sender.h","text":"<p>File List &gt; command &gt; console_command_sender.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\n\nclass ConsoleCommandSender : public CommandSender {};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__command_8h/","title":"File plugin_command.h","text":"<p>FileList &gt; command &gt; plugin_command.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/command/command.h\"</code></li> <li><code>#include \"endstone/command/command_executor.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__command_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/plugin__command_8h/#classes","title":"Classes","text":"Type Name class PluginCommand Represents a Command belonging to aPlugin . <p>The documentation for this class was generated from the following file <code>include/endstone/command/plugin_command.h</code></p>"},{"location":"reference/cpp/plugin__command_8h_source/","title":"File plugin_command.h","text":"<p>File List &gt; command &gt; plugin_command.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/command/command.h\"\n#include \"endstone/command/command_executor.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass PluginCommand : public Command {\npublic:\n    PluginCommand(const Command &amp;command, Plugin &amp;owner) : Command(command), owner_(owner) {}\n\n    bool execute(CommandSender &amp;sender, const std::vector&lt;std::string&gt; &amp;args) const override\n    {\n        if (!owner_.isEnabled()) {\n            sender.sendMessage(\"Cannot execute command '{}' in plugin {}. Plugin is disabled.\", getName(),\n                               getPlugin().getDescription().getFullName());\n            return false;\n        }\n\n        if (!testPermission(sender)) {\n            return true;\n        }\n\n        try {\n            return getExecutor().onCommand(sender, *this, args);\n        }\n        catch (std::exception &amp;e) {\n            getPlugin().getLogger().error(\"Unhandled exception executing command '{}' in plugin {}\", getName(),\n                                          owner_.getDescription().getFullName());\n            getPlugin().getLogger().error(e.what());\n            return false;\n        }\n    }\n\n    virtual void setExecutor(std::shared_ptr&lt;CommandExecutor&gt; executor)\n    {\n        executor_ = std::move(executor);\n    }\n\n    [[nodiscard]] virtual CommandExecutor &amp;getExecutor() const\n    {\n        if (executor_) {\n            return *executor_;\n        }\n        return owner_;\n    }\n\n    [[maybe_unused]] [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return owner_;\n    }\n\n    [[nodiscard]] PluginCommand *asPluginCommand() const override\n    {\n        return const_cast&lt;PluginCommand *&gt;(this);\n    }\n\nprivate:\n    Plugin &amp;owner_;\n    std::shared_ptr&lt;CommandExecutor&gt; executor_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_d35032eb9ca22acb8eface5f2c8b6a35/","title":"Dir include/endstone/damage","text":"<p>FileList &gt; damage</p>"},{"location":"reference/cpp/dir_d35032eb9ca22acb8eface5f2c8b6a35/#files","title":"Files","text":"Type Name file damage_source.h <p>The documentation for this class was generated from the following file <code>include/endstone/damage/</code></p>"},{"location":"reference/cpp/damage__source_8h/","title":"File damage_source.h","text":"<p>FileList &gt; damage &gt; damage_source.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/actor/actor.h\"</code></li> </ul>"},{"location":"reference/cpp/damage__source_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace fmt"},{"location":"reference/cpp/damage__source_8h/#classes","title":"Classes","text":"Type Name class DamageSource Represents a source of damage. struct formatter&lt; endstone::DamageSource &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/damage/damage_source.h</code></p>"},{"location":"reference/cpp/damage__source_8h_source/","title":"File damage_source.h","text":"<p>File List &gt; damage &gt; damage_source.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/actor/actor.h\"\n\nnamespace endstone {\n\nclass DamageSource {\npublic:\n    virtual ~DamageSource() = default;\n\n    [[nodiscard]] virtual std::string_view getType() const = 0;\n\n    [[nodiscard]] virtual Actor *getActor() const = 0;\n\n    [[nodiscard]] virtual Actor *getDamagingActor() const = 0;\n\n    [[nodiscard]] virtual bool isIndirect() const = 0;\n};\n\n}  // namespace endstone\n\nnamespace fmt {\ntemplate &lt;&gt;\nstruct formatter&lt;endstone::DamageSource&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::DamageSource;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        auto it = ctx.out();\n        it = fmt::format_to(it, \"DamageSource(type={}\", val.getType());\n        if (auto *actor = val.getActor()) {\n            it = fmt::format_to(it, \", actor={}\", *actor);\n        }\n        else {\n            it = fmt::format_to(it, \", actor=None\");\n        }\n        if (auto *damaging_actor = val.getDamagingActor()) {\n            it = fmt::format_to(it, \", damaging_actor={}\", *damaging_actor);\n        }\n        else {\n            it = fmt::format_to(it, \", damaging_actor=None\");\n        }\n        it = fmt::format_to(it, \")\");\n        return it;\n    }\n};\n}  // namespace fmt\n</code></pre>"},{"location":"reference/cpp/dir_5154bf3e53eefb0e1f350f5612107967/","title":"Dir include/endstone/enchantments","text":"<p>FileList &gt; enchantments</p>"},{"location":"reference/cpp/dir_5154bf3e53eefb0e1f350f5612107967/#files","title":"Files","text":"Type Name file enchantment.h <p>The documentation for this class was generated from the following file <code>include/endstone/enchantments/</code></p>"},{"location":"reference/cpp/enchantment_8h/","title":"File enchantment.h","text":"<p>FileList &gt; enchantments &gt; enchantment.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/detail/endstone.h\"</code></li> <li><code>#include \"endstone/registry.h\"</code></li> </ul>"},{"location":"reference/cpp/enchantment_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/enchantment_8h/#classes","title":"Classes","text":"Type Name class Enchantment <p>The documentation for this class was generated from the following file <code>include/endstone/enchantments/enchantment.h</code></p>"},{"location":"reference/cpp/enchantment_8h_source/","title":"File enchantment.h","text":"<p>File List &gt; enchantments &gt; enchantment.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/detail/endstone.h\"\n#include \"endstone/registry.h\"\n\nnamespace endstone {\nclass ItemStack;\n\nclass Enchantment {\npublic:\n    virtual ~Enchantment() = default;\n\n    [[nodiscard]] virtual std::string getId() const = 0;\n\n    [[nodiscard]] virtual std::string getTranslationKey() const = 0;\n\n    [[nodiscard]] virtual int getMaxLevel() const = 0;\n\n    [[nodiscard]] virtual int getStartLevel() const = 0;\n\n    [[nodiscard]] virtual bool conflictsWith(const Enchantment &amp;other) const = 0;\n\n    [[nodiscard]] virtual bool canEnchantItem(const ItemStack &amp;item) const = 0;\n\n    static const Enchantment *get(const std::string &amp;name)\n    {\n        return Endstone::getServer().getEnchantmentRegistry().get(name);\n    }\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_f1d783c0ad83ee143d16e768ebca51c8/","title":"Dir include/endstone/event","text":"<p>FileList &gt; endstone &gt; event</p>"},{"location":"reference/cpp/dir_f1d783c0ad83ee143d16e768ebca51c8/#files","title":"Files","text":"Type Name file cancellable.h file event.h file event_handler.h file event_priority.h file handler_list.h"},{"location":"reference/cpp/dir_f1d783c0ad83ee143d16e768ebca51c8/#directories","title":"Directories","text":"Type Name dir actor dir block dir chunk dir level dir player dir server dir weather <p>The documentation for this class was generated from the following file <code>include/endstone/event/</code></p>"},{"location":"reference/cpp/cancellable_8h/","title":"File cancellable.h","text":"<p>FileList &gt; endstone &gt; event &gt; cancellable.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/cancellable_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/cancellable_8h/#classes","title":"Classes","text":"Type Name class Cancellable &lt;typename EventType&gt;A type characterizing events that may be cancelled by a plugin or the server. class ICancellable <p>The documentation for this class was generated from the following file <code>include/endstone/event/cancellable.h</code></p>"},{"location":"reference/cpp/cancellable_8h_source/","title":"File cancellable.h","text":"<p>File List &gt; endstone &gt; event &gt; cancellable.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nclass ICancellable {\npublic:\n    virtual ~ICancellable() = default;\n    [[nodiscard]] virtual bool isCancelled() const = 0;\n    virtual void setCancelled(bool cancel) = 0;\n    virtual void cancel() = 0;\n};\n\ntemplate &lt;typename EventType&gt;\nclass Cancellable : public EventType, public ICancellable {\npublic:\n    using EventType::EventType;\n\n    [[nodiscard]] bool isCancelled() const override\n    {\n        return EventType::cancelled_;\n    }\n\n    void setCancelled(bool cancel) override\n    {\n        EventType::cancelled_ = cancel;\n    }\n\n    void cancel() final\n    {\n        setCancelled(true);\n    }\n\nprivate:\n    [[nodiscard]] bool isCancellable() const final\n    {\n        return true;\n    }\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/event_8h/","title":"File event.h","text":"<p>FileList &gt; endstone &gt; event &gt; event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;stdexcept&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/event_8h/#classes","title":"Classes","text":"Type Name class Event Represents an event."},{"location":"reference/cpp/event_8h/#macros","title":"Macros","text":"Type Name define ENDSTONE_EVENT (type) <code>/* multi line expression */</code>"},{"location":"reference/cpp/event_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"reference/cpp/event_8h/#define-endstone_event","title":"define ENDSTONE_EVENT","text":"<pre><code>#define ENDSTONE_EVENT (\n    type\n) `/* multi line expression */`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/event.h</code></p>"},{"location":"reference/cpp/event_8h_source/","title":"File event.h","text":"<p>File List &gt; endstone &gt; event &gt; event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;stdexcept&gt;\n#include &lt;string&gt;\n\nnamespace endstone {\n\nenum class EventResult {\n    Deny,\n    Default,\n    Allow\n};\n\nclass Event {\npublic:\n    explicit Event(bool async = false) : async_(async){};\n    Event(const Event &amp;) = delete;             // deleted copy constructor\n    Event &amp;operator=(const Event &amp;) = delete;  // deleted copy assignment operator\n\n    virtual ~Event() = default;\n\n    [[nodiscard]] virtual std::string getEventName() const = 0;\n\n    [[nodiscard]] bool isAsynchronous() const\n    {\n        return async_;\n    }\n\nprivate:\n    [[nodiscard]] virtual bool isCancellable() const\n    {\n        return false;\n    }\n\n    template &lt;class T&gt;\n    friend class Cancellable;\n    friend class EventHandler;\n\n    bool async_;\n    bool cancelled_{false};\n};\n\n#define ENDSTONE_EVENT(type)                                \\\npublic:                                                     \\\n    inline static constexpr auto NAME = #type;              \\\n    [[nodiscard]] std::string getEventName() const override \\\n    {                                                       \\\n        return NAME;                                        \\\n    }\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/event__handler_8h/","title":"File event_handler.h","text":"<p>FileList &gt; endstone &gt; event &gt; event_handler.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/event_priority.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/event__handler_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/event__handler_8h/#classes","title":"Classes","text":"Type Name class EventHandler Represents a registered EventHandler which associates with aPlugin . <p>The documentation for this class was generated from the following file <code>include/endstone/event/event_handler.h</code></p>"},{"location":"reference/cpp/event__handler_8h_source/","title":"File event_handler.h","text":"<p>File List &gt; endstone &gt; event &gt; event_handler.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;functional&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/event_priority.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass EventHandler {\npublic:\n    EventHandler(std::string event, std::function&lt;void(Event &amp;)&gt; executor, EventPriority priority, Plugin &amp;plugin,\n                 bool ignore_cancelled)\n        : event_(std::move(event)), executor_(std::move(executor)), priority_(priority), plugin_(plugin),\n          ignore_cancelled_(ignore_cancelled)\n    {\n    }\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n    [[nodiscard]] EventPriority getPriority() const\n    {\n        return priority_;\n    }\n\n    [[nodiscard]] bool isIgnoreCancelled() const\n    {\n        return ignore_cancelled_;\n    }\n\n    void callEvent(Event &amp;event) const\n    {\n        if (event.getEventName() != event_) {\n            return;\n        }\n        if (event.isCancellable() &amp;&amp; event.cancelled_ &amp;&amp; isIgnoreCancelled()) {\n            return;\n        }\n        executor_(event);\n    };\n\n    [[nodiscard]] std::string getEventType() const\n    {\n        return event_;\n    }\n\nprivate:\n    std::string event_;\n    std::function&lt;void(Event &amp;)&gt; executor_;\n    EventPriority priority_;\n    Plugin &amp;plugin_;\n    bool ignore_cancelled_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/event__priority_8h/","title":"File event_priority.h","text":"<p>FileList &gt; endstone &gt; event &gt; event_priority.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/event__priority_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/event/event_priority.h</code></p>"},{"location":"reference/cpp/event__priority_8h_source/","title":"File event_priority.h","text":"<p>File List &gt; endstone &gt; event &gt; event_priority.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class EventPriority {\n    Lowest = 0,\n    Low = 1,\n    Normal = 2,\n    High = 3,\n    Highest = 4,\n    Monitor = 5\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/handler__list_8h/","title":"File handler_list.h","text":"<p>FileList &gt; endstone &gt; event &gt; handler_list.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;mutex&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/event_handler.h\"</code></li> <li><code>#include \"endstone/event/event_priority.h\"</code></li> </ul>"},{"location":"reference/cpp/handler__list_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/handler__list_8h/#classes","title":"Classes","text":"Type Name class HandlerList A list of event handlers. Should be instantiated on a per-event basis. <p>The documentation for this class was generated from the following file <code>include/endstone/event/handler_list.h</code></p>"},{"location":"reference/cpp/handler__list_8h_source/","title":"File handler_list.h","text":"<p>File List &gt; endstone &gt; event &gt; handler_list.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;map&gt;\n#include &lt;mutex&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/event_handler.h\"\n#include \"endstone/event/event_priority.h\"\n\nnamespace endstone {\n\nclass HandlerList {\npublic:\n    explicit HandlerList(std::string event) : event_(std::move(event)) {}\n\n    EventHandler *registerHandler(std::unique_ptr&lt;EventHandler&gt; handler)\n    {\n        if (handler-&gt;getEventType() != event_) {\n            return nullptr;\n        }\n\n        std::lock_guard lock(mtx_);\n        valid_ = false;\n        auto &amp;vector =\n            handlers_.emplace(handler-&gt;getPriority(), std::vector&lt;std::unique_ptr&lt;EventHandler&gt;&gt;{}).first-&gt;second;\n        auto &amp;it = vector.emplace_back(std::move(handler));\n        return it.get();\n    }\n\n    void unregister(const EventHandler &amp;handler)\n    {\n        std::lock_guard lock(mtx_);\n        auto &amp;vector =\n            handlers_.emplace(handler.getPriority(), std::vector&lt;std::unique_ptr&lt;EventHandler&gt;&gt;{}).first-&gt;second;\n        const auto it = std::find_if(vector.begin(), vector.end(),\n                                     [&amp;](const std::unique_ptr&lt;EventHandler&gt; &amp;h) { return h.get() == &amp;handler; });\n        if (it != vector.end()) {\n            valid_ = false;\n            vector.erase(it);\n        }\n    }\n\n    void unregister(const Plugin &amp;plugin)\n    {\n        std::lock_guard lock(mtx_);\n        for (auto &amp;[priority, vector] : handlers_) {\n            vector.erase(\n                std::remove_if(vector.begin(), vector.end(),\n                               [&amp;](const std::unique_ptr&lt;EventHandler&gt; &amp;h) { return &amp;h-&gt;getPlugin() == &amp;plugin; }),\n                vector.end());\n            valid_ = false;\n        }\n    }\n\n    std::vector&lt;EventHandler *&gt; getHandlers() const\n    {\n        std::lock_guard lock(mtx_);\n        if (!valid_) {\n            bake();\n        }\n        return baked_handlers_;\n    }\n\nprotected:\n    void bake() const\n    {\n        if (valid_) {\n            return;\n        }\n\n        baked_handlers_.clear();\n        for (const auto &amp;[priority, vector] : handlers_) {\n            for (const auto &amp;handler : vector) {\n                baked_handlers_.push_back(handler.get());\n            }\n        }\n        valid_ = true;\n    }\n\nprivate:\n    mutable std::mutex mtx_;\n    std::map&lt;EventPriority, std::vector&lt;std::unique_ptr&lt;EventHandler&gt;&gt;&gt; handlers_;\n    mutable std::vector&lt;EventHandler *&gt; baked_handlers_;\n    mutable bool valid_{false};\n    std::string event_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_621c26b5fd4198aba66e7e31570ce44a/","title":"Dir include/endstone/event/actor","text":"<p>FileList &gt; actor</p>"},{"location":"reference/cpp/dir_621c26b5fd4198aba66e7e31570ce44a/#files","title":"Files","text":"Type Name file actor_damage_event.h file actor_death_event.h file actor_event.h file actor_explode_event.h file actor_knockback_event.h file actor_remove_event.h file actor_spawn_event.h file actor_teleport_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/</code></p>"},{"location":"reference/cpp/actor__damage__event_8h/","title":"File actor_damage_event.h","text":"<p>FileList &gt; actor &gt; actor_damage_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/damage/damage_source.h\"</code></li> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__damage__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__damage__event_8h/#classes","title":"Classes","text":"Type Name class ActorDamageEvent Called when an Actor is damaged. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_damage_event.h</code></p>"},{"location":"reference/cpp/actor__damage__event_8h_source/","title":"File actor_damage_event.h","text":"<p>File List &gt; actor &gt; actor_damage_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/damage/damage_source.h\"\n#include \"endstone/event/actor/actor_event.h\"\n#include \"endstone/event/cancellable.h\"\n\nnamespace endstone {\n\nclass ActorDamageEvent : public Cancellable&lt;ActorEvent&lt;Mob&gt;&gt; {\npublic:\n    ActorDamageEvent(Mob &amp;actor, std::unique_ptr&lt;DamageSource&gt; damage_source, const float damage)\n        : Cancellable(actor), damage_source_(std::move(damage_source)), damage_(damage)\n    {\n    }\n\n    inline static const std::string NAME = \"ActorDamageEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] float getDamage() const\n    {\n        return damage_;\n    }\n\n    void setDamage(const float damage)\n    {\n        damage_ = damage;\n    }\n\n    [[nodiscard]] DamageSource &amp;getDamageSource() const\n    {\n        return *damage_source_;\n    }\n\nprivate:\n    std::unique_ptr&lt;DamageSource&gt; damage_source_;\n    float damage_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__death__event_8h/","title":"File actor_death_event.h","text":"<p>FileList &gt; actor &gt; actor_death_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/damage/damage_source.h\"</code></li> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__death__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__death__event_8h/#classes","title":"Classes","text":"Type Name class ActorDeathEvent Called when an Actor dies. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_death_event.h</code></p>"},{"location":"reference/cpp/actor__death__event_8h_source/","title":"File actor_death_event.h","text":"<p>File List &gt; actor &gt; actor_death_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/damage/damage_source.h\"\n#include \"endstone/event/actor/actor_event.h\"\n\nnamespace endstone {\n\nclass ActorDeathEvent : public ActorEvent&lt;Mob&gt; {\npublic:\n    ActorDeathEvent(Mob &amp;actor, std::unique_ptr&lt;DamageSource&gt; damage_source)\n        : ActorEvent(actor), damage_source_(std::move(damage_source))\n    {\n    }\n\n    inline static const std::string NAME = \"ActorDeathEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] DamageSource &amp;getDamageSource() const\n    {\n        return *damage_source_;\n    }\n\nprivate:\n    std::unique_ptr&lt;DamageSource&gt; damage_source_;\n    // TODO(event): add drops and dropExp\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__event_8h/","title":"File actor_event.h","text":"<p>FileList &gt; actor &gt; actor_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/actor.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__event_8h/#classes","title":"Classes","text":"Type Name class ActorEvent &lt;typename ActorType&gt;Represents an Actor-related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_event.h</code></p>"},{"location":"reference/cpp/actor__event_8h_source/","title":"File actor_event.h","text":"<p>File List &gt; actor &gt; actor_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/actor.h\"\n#include \"endstone/event/event.h\"\n\nnamespace endstone {\n\ntemplate &lt;typename ActorType&gt;\nclass ActorEvent : public Event {\npublic:\n    explicit ActorEvent(ActorType &amp;actor) : actor_(actor) {};\n    ~ActorEvent() override = default;\n\n    [[nodiscard]] ActorType &amp;getActor() const\n    {\n        return actor_;\n    }\n\n    // TODO(event): add getActorType method\n\nprivate:\n    ActorType &amp;actor_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__explode__event_8h/","title":"File actor_explode_event.h","text":"<p>FileList &gt; actor &gt; actor_explode_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block.h\"</code></li> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/level/location.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__explode__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__explode__event_8h/#classes","title":"Classes","text":"Type Name class ActorExplodeEvent Called when an actor explodes. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_explode_event.h</code></p>"},{"location":"reference/cpp/actor__explode__event_8h_source/","title":"File actor_explode_event.h","text":"<p>File List &gt; actor &gt; actor_explode_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block.h\"\n#include \"endstone/event/actor/actor_event.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/level/location.h\"\n\nnamespace endstone {\n\nclass ActorExplodeEvent : public Cancellable&lt;ActorEvent&lt;Actor&gt;&gt; {\n    using BlockList = std::vector&lt;std::unique_ptr&lt;Block&gt;&gt;;\n\npublic:\n    explicit ActorExplodeEvent(Actor &amp;actor, Location location, BlockList blocks)\n        : Cancellable(actor), location_(location), blocks_(std::move(blocks))\n    {\n    }\n    ~ActorExplodeEvent() override = default;\n\n    inline static const std::string NAME = \"ActorExplodeEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] const Location &amp;getLocation() const\n    {\n        return location_;\n    }\n\n    [[nodiscard]] const BlockList &amp;getBlockList() const\n    {\n        return blocks_;\n    }\n\n    [[nodiscard]] BlockList &amp;getBlockList()\n    {\n        return blocks_;\n    }\n\nprivate:\n    Location location_;\n    BlockList blocks_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__knockback__event_8h/","title":"File actor_knockback_event.h","text":"<p>FileList &gt; actor &gt; actor_knockback_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/mob.h\"</code></li> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__knockback__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__knockback__event_8h/#classes","title":"Classes","text":"Type Name class ActorKnockbackEvent Called when a living entity receives knockback. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_knockback_event.h</code></p>"},{"location":"reference/cpp/actor__knockback__event_8h_source/","title":"File actor_knockback_event.h","text":"<p>File List &gt; actor &gt; actor_knockback_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/mob.h\"\n#include \"endstone/event/actor/actor_event.h\"\n#include \"endstone/event/cancellable.h\"\n\nnamespace endstone {\n\nclass ActorKnockbackEvent : public Cancellable&lt;ActorEvent&lt;Mob&gt;&gt; {\npublic:\n    ENDSTONE_EVENT(ActorKnockbackEvent);\n\n    explicit ActorKnockbackEvent(Mob &amp;mob, Actor *source, Vector knockback)\n        : Cancellable(mob), mob_(mob), source_(source), knockback_(knockback)\n    {\n    }\n\n    [[nodiscard]] Actor *getSource() const\n    {\n        return source_;\n    }\n\n    [[nodiscard]] Vector getKnockback() const\n    {\n        return knockback_;\n    }\n\n    void setKnockback(Vector knockback)\n    {\n        knockback_ = knockback;\n    }\n\nprivate:\n    Mob &amp;mob_;\n    Actor *source_;\n    Vector raw_knockback_;\n    Vector knockback_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__remove__event_8h/","title":"File actor_remove_event.h","text":"<p>FileList &gt; actor &gt; actor_remove_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__remove__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__remove__event_8h/#classes","title":"Classes","text":"Type Name class ActorRemoveEvent Called when an Actor is removed. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_remove_event.h</code></p>"},{"location":"reference/cpp/actor__remove__event_8h_source/","title":"File actor_remove_event.h","text":"<p>File List &gt; actor &gt; actor_remove_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_event.h\"\n\nnamespace endstone {\n\nclass ActorRemoveEvent : public ActorEvent&lt;Actor&gt; {\npublic:\n    using ActorEvent::ActorEvent;\n\n    inline static const std::string NAME = \"ActorRemoveEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    // TODO(event): add remove cause\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__spawn__event_8h/","title":"File actor_spawn_event.h","text":"<p>FileList &gt; actor &gt; actor_spawn_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__spawn__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__spawn__event_8h/#classes","title":"Classes","text":"Type Name class ActorSpawnEvent Called when an Actor is spawned into a world. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_spawn_event.h</code></p>"},{"location":"reference/cpp/actor__spawn__event_8h_source/","title":"File actor_spawn_event.h","text":"<p>File List &gt; actor &gt; actor_spawn_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_event.h\"\n#include \"endstone/event/cancellable.h\"\n\nnamespace endstone {\n\nclass ActorSpawnEvent : public Cancellable&lt;ActorEvent&lt;Actor&gt;&gt; {\npublic:\n    explicit ActorSpawnEvent(Actor &amp;actor) : Cancellable(actor) {}\n    ~ActorSpawnEvent() override = default;\n\n    inline static const std::string NAME = \"ActorSpawnEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    // TODO(event): add spawn cause\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__teleport__event_8h/","title":"File actor_teleport_event.h","text":"<p>FileList &gt; actor &gt; actor_teleport_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/level/location.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__teleport__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/actor__teleport__event_8h/#classes","title":"Classes","text":"Type Name class ActorTeleportEvent Called when a non-player entity is teleported from one location to another. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_teleport_event.h</code></p>"},{"location":"reference/cpp/actor__teleport__event_8h_source/","title":"File actor_teleport_event.h","text":"<p>File List &gt; actor &gt; actor_teleport_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_event.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/level/location.h\"\n\nnamespace endstone {\n\nclass ActorTeleportEvent : public Cancellable&lt;ActorEvent&lt;Actor&gt;&gt; {\npublic:\n    explicit ActorTeleportEvent(Actor &amp;actor, Location from, Location to)\n        : Cancellable(actor), from_(std::move(from)), to_(std::move(to))\n    {\n    }\n    ~ActorTeleportEvent() override = default;\n\n    inline static const std::string NAME = \"ActorTeleportEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] const Location &amp;getFrom() const\n    {\n        return from_;\n    }\n\n    void setFrom(const Location &amp;from)\n    {\n        from_ = from;\n    }\n\n    [[nodiscard]] const Location &amp;getTo() const\n    {\n        return to_;\n    }\n\n    void setTo(const Location &amp;to)\n    {\n        to_ = to;\n    }\n\nprivate:\n    Location from_;\n    Location to_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_992e9ad7dc69726476903ba283e33c71/","title":"Dir include/endstone/event/block","text":"<p>FileList &gt; block</p>"},{"location":"reference/cpp/dir_992e9ad7dc69726476903ba283e33c71/#files","title":"Files","text":"Type Name file block_break_event.h file block_cook_event.h file block_event.h file block_piston_event.h file block_piston_extend_event.h file block_piston_retract_event.h file block_place_event.h file leaves_decay_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/</code></p>"},{"location":"reference/cpp/block__break__event_8h/","title":"File block_break_event.h","text":"<p>FileList &gt; block &gt; block_break_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/block/block_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> </ul>"},{"location":"reference/cpp/block__break__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__break__event_8h/#classes","title":"Classes","text":"Type Name class BlockBreakEvent Called when a block is broken by a player. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_break_event.h</code></p>"},{"location":"reference/cpp/block__break__event_8h_source/","title":"File block_break_event.h","text":"<p>File List &gt; block &gt; block_break_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/block/block_event.h\"\n#include \"endstone/event/cancellable.h\"\n\nnamespace endstone {\n\nclass BlockBreakEvent : public Cancellable&lt;BlockEvent&gt; {\npublic:\n    explicit BlockBreakEvent(std::unique_ptr&lt;Block&gt; block, Player &amp;player)\n        : Cancellable(std::move(block)), player_(player)\n    {\n    }\n    ~BlockBreakEvent() override = default;\n\n    inline static const std::string NAME = \"BlockBreakEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] Player &amp;getPlayer() const\n    {\n        return player_;\n    }\n\nprivate:\n    Player &amp;player_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/block__cook__event_8h/","title":"File block_cook_event.h","text":"<p>FileList &gt; block &gt; block_cook_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/block/block_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/inventory/item_stack.h\"</code></li> </ul>"},{"location":"reference/cpp/block__cook__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__cook__event_8h/#classes","title":"Classes","text":"Type Name class BlockCookEvent Called when an ItemStack is successfully cooked in a block. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_cook_event.h</code></p>"},{"location":"reference/cpp/block__cook__event_8h_source/","title":"File block_cook_event.h","text":"<p>File List &gt; block &gt; block_cook_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/block/block_event.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/inventory/item_stack.h\"\n\nnamespace endstone {\nclass BlockCookEvent : public Cancellable&lt;BlockEvent&gt; {\npublic:\n    ENDSTONE_EVENT(BlockCookEvent);\n\n    BlockCookEvent(std::unique_ptr&lt;Block&gt; block, std::unique_ptr&lt;ItemStack&gt; source, std::unique_ptr&lt;ItemStack&gt; result)\n        : Cancellable(std::move(block)), source_(std::move(source)), result_(std::move(result))\n    {\n    }\n\n    [[nodiscard]] const ItemStack &amp;getSource() const\n    {\n        return *source_;\n    }\n\n    [[nodiscard]] const ItemStack &amp;getResult() const\n    {\n        return *result_;\n    }\n\n    void setResult(std::unique_ptr&lt;ItemStack&gt; result)\n    {\n        result_ = std::move(result);\n    }\n\nprivate:\n    std::unique_ptr&lt;ItemStack&gt; source_;\n    std::unique_ptr&lt;ItemStack&gt; result_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/block__event_8h/","title":"File block_event.h","text":"<p>FileList &gt; block &gt; block_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> </ul>"},{"location":"reference/cpp/block__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__event_8h/#classes","title":"Classes","text":"Type Name class BlockEvent Represents an Block-related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_event.h</code></p>"},{"location":"reference/cpp/block__event_8h_source/","title":"File block_event.h","text":"<p>File List &gt; block &gt; block_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block.h\"\n#include \"endstone/event/event.h\"\n\nnamespace endstone {\n\nclass BlockEvent : public Event {\npublic:\n    explicit BlockEvent(std::unique_ptr&lt;Block&gt; block) : block_(std::move(block)){};\n    ~BlockEvent() override = default;\n\n    [[nodiscard]] Block &amp;getBlock() const\n    {\n        return *block_;\n    }\n\nprivate:\n    std::unique_ptr&lt;Block&gt; block_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/block__piston__event_8h/","title":"File block_piston_event.h","text":"<p>FileList &gt; block &gt; block_piston_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block_face.h\"</code></li> <li><code>#include \"endstone/event/block/block_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> </ul>"},{"location":"reference/cpp/block__piston__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__piston__event_8h/#classes","title":"Classes","text":"Type Name class BlockPistonEvent Called when a piston block is triggered. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_piston_event.h</code></p>"},{"location":"reference/cpp/block__piston__event_8h_source/","title":"File block_piston_event.h","text":"<p>File List &gt; block &gt; block_piston_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block_face.h\"\n#include \"endstone/event/block/block_event.h\"\n#include \"endstone/event/cancellable.h\"\n\nnamespace endstone {\n\nclass BlockPistonEvent : public Cancellable&lt;BlockEvent&gt; {\npublic:\n    explicit BlockPistonEvent(std::unique_ptr&lt;Block&gt; block, BlockFace direction)\n        : Cancellable(std::move(block)), direction_(direction)\n    {\n    }\n\n    [[nodiscard]] BlockFace getDirection() const\n    {\n        return direction_;\n    }\n\nprivate:\n    BlockFace direction_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/block__piston__extend__event_8h/","title":"File block_piston_extend_event.h","text":"<p>FileList &gt; block &gt; block_piston_extend_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/block/block_piston_event.h\"</code></li> </ul>"},{"location":"reference/cpp/block__piston__extend__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__piston__extend__event_8h/#classes","title":"Classes","text":"Type Name class BlockPistonExtendEvent Called when a piston extends. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_piston_extend_event.h</code></p>"},{"location":"reference/cpp/block__piston__extend__event_8h_source/","title":"File block_piston_extend_event.h","text":"<p>File List &gt; block &gt; block_piston_extend_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/block/block_piston_event.h\"\n\nnamespace endstone {\n\nclass BlockPistonExtendEvent final : public BlockPistonEvent {\npublic:\n    ENDSTONE_EVENT(BlockPistonExtendEvent);\n    using BlockPistonEvent::BlockPistonEvent;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/block__piston__retract__event_8h/","title":"File block_piston_retract_event.h","text":"<p>FileList &gt; block &gt; block_piston_retract_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/block/block_piston_event.h\"</code></li> </ul>"},{"location":"reference/cpp/block__piston__retract__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__piston__retract__event_8h/#classes","title":"Classes","text":"Type Name class BlockPistonRetractEvent Called when a piston retracts. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_piston_retract_event.h</code></p>"},{"location":"reference/cpp/block__piston__retract__event_8h_source/","title":"File block_piston_retract_event.h","text":"<p>File List &gt; block &gt; block_piston_retract_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/block/block_piston_event.h\"\n\nnamespace endstone {\n\nclass BlockPistonRetractEvent final : public BlockPistonEvent {\npublic:\n    ENDSTONE_EVENT(BlockPistonRetractEvent);\n    using BlockPistonEvent::BlockPistonEvent;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/block__place__event_8h/","title":"File block_place_event.h","text":"<p>FileList &gt; block &gt; block_place_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block_state.h\"</code></li> <li><code>#include \"endstone/event/block/block_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/player.h\"</code></li> </ul>"},{"location":"reference/cpp/block__place__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/block__place__event_8h/#classes","title":"Classes","text":"Type Name class BlockPlaceEvent Called when a block is placed by a player. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/block_place_event.h</code></p>"},{"location":"reference/cpp/block__place__event_8h_source/","title":"File block_place_event.h","text":"<p>File List &gt; block &gt; block_place_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block_state.h\"\n#include \"endstone/event/block/block_event.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/player.h\"\n\nnamespace endstone {\n\nclass BlockPlaceEvent : public Cancellable&lt;BlockEvent&gt; {\npublic:\n    explicit BlockPlaceEvent(std::unique_ptr&lt;BlockState&gt; placed_block, std::unique_ptr&lt;Block&gt; replaced_block,\n                             std::unique_ptr&lt;Block&gt; placed_against, Player &amp;player)\n        : Cancellable(std::move(replaced_block)), placed_block_(std::move(placed_block)),\n          placed_against_(std::move(placed_against)), player_(player)\n    {\n    }\n    ~BlockPlaceEvent() override = default;\n\n    inline static const std::string NAME = \"BlockPlaceEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] Player &amp;getPlayer() const\n    {\n        return player_;\n    }\n\n    [[nodiscard]] BlockState &amp;getBlockPlacedState() const\n    {\n        return *placed_block_;\n    }\n\n    [[nodiscard]] Block &amp;getBlockReplaced() const\n    {\n        return getBlock();\n    }\n\n    [[nodiscard]] Block &amp;getBlockAgainst() const\n    {\n        return *placed_against_;\n    }\n\nprivate:\n    std::unique_ptr&lt;BlockState&gt; placed_block_;\n    std::unique_ptr&lt;Block&gt; placed_against_;\n    Player &amp;player_;\n    // TODO(event): add ItemStack item\n    // TODO(event): add BlockState placedBlockState\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/leaves__decay__event_8h/","title":"File leaves_decay_event.h","text":"<p>FileList &gt; block &gt; leaves_decay_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/block/block_event.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> </ul>"},{"location":"reference/cpp/leaves__decay__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/leaves__decay__event_8h/#classes","title":"Classes","text":"Type Name class LeavesDecayEvent Called when leaves are decaying naturally. <p>The documentation for this class was generated from the following file <code>include/endstone/event/block/leaves_decay_event.h</code></p>"},{"location":"reference/cpp/leaves__decay__event_8h_source/","title":"File leaves_decay_event.h","text":"<p>File List &gt; block &gt; leaves_decay_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/block/block_event.h\"\n#include \"endstone/event/cancellable.h\"\n\nnamespace endstone {\n\nclass LeavesDecayEvent : public Cancellable&lt;BlockEvent&gt; {\npublic:\n    ENDSTONE_EVENT(LeavesDecayEvent);\n    using Cancellable::Cancellable;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_7eabd153c13720ffd29490c98a6f4dde/","title":"Dir include/endstone/event/chunk","text":"<p>FileList &gt; chunk</p>"},{"location":"reference/cpp/dir_7eabd153c13720ffd29490c98a6f4dde/#files","title":"Files","text":"Type Name file chunk_event.h file chunk_load_event.h file chunk_unload_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/chunk/</code></p>"},{"location":"reference/cpp/chunk__event_8h/","title":"File chunk_event.h","text":"<p>FileList &gt; chunk &gt; chunk_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/level/dimension_event.h\"</code></li> <li><code>#include \"endstone/level/chunk.h\"</code></li> </ul>"},{"location":"reference/cpp/chunk__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/chunk__event_8h/#classes","title":"Classes","text":"Type Name class ChunkEvent Represents a Chunk related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/chunk/chunk_event.h</code></p>"},{"location":"reference/cpp/chunk__event_8h_source/","title":"File chunk_event.h","text":"<p>File List &gt; chunk &gt; chunk_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/level/dimension_event.h\"\n#include \"endstone/level/chunk.h\"\n\nnamespace endstone {\n\nclass ChunkEvent : public DimensionEvent {\npublic:\n    explicit ChunkEvent(Chunk &amp;chunk) : DimensionEvent(chunk.getDimension()), chunk_(chunk){};\n\n    [[nodiscard]] Chunk &amp;getChunk() const\n    {\n        return chunk_;\n    }\n\nprivate:\n    Chunk &amp;chunk_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/chunk__load__event_8h/","title":"File chunk_load_event.h","text":"<p>FileList &gt; chunk &gt; chunk_load_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/chunk/chunk_event.h\"</code></li> </ul>"},{"location":"reference/cpp/chunk__load__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/chunk__load__event_8h/#classes","title":"Classes","text":"Type Name class ChunkLoadEvent Called when a chunk is loaded. <p>The documentation for this class was generated from the following file <code>include/endstone/event/chunk/chunk_load_event.h</code></p>"},{"location":"reference/cpp/chunk__load__event_8h_source/","title":"File chunk_load_event.h","text":"<p>File List &gt; chunk &gt; chunk_load_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/chunk/chunk_event.h\"\n\nnamespace endstone {\n\nclass ChunkLoadEvent : public ChunkEvent {\npublic:\n    ENDSTONE_EVENT(ChunkLoadEvent);\n\n    explicit ChunkLoadEvent(Chunk &amp;chunk) : ChunkEvent(chunk) {}\n    ~ChunkLoadEvent() override = default;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/chunk__unload__event_8h/","title":"File chunk_unload_event.h","text":"<p>FileList &gt; chunk &gt; chunk_unload_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/chunk/chunk_event.h\"</code></li> </ul>"},{"location":"reference/cpp/chunk__unload__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/chunk__unload__event_8h/#classes","title":"Classes","text":"Type Name class ChunkUnloadEvent Called when a chunk is unloaded. <p>The documentation for this class was generated from the following file <code>include/endstone/event/chunk/chunk_unload_event.h</code></p>"},{"location":"reference/cpp/chunk__unload__event_8h_source/","title":"File chunk_unload_event.h","text":"<p>File List &gt; chunk &gt; chunk_unload_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/chunk/chunk_event.h\"\n\nnamespace endstone {\n\nclass ChunkUnloadEvent : public ChunkEvent {\npublic:\n    ENDSTONE_EVENT(ChunkUnloadEvent);\n\n    explicit ChunkUnloadEvent(Chunk &amp;chunk) : ChunkEvent(chunk) {}\n    ~ChunkUnloadEvent() override = default;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_9972879ee1a1ab85aef1f41c76fb712c/","title":"Dir include/endstone/event/level","text":"<p>FileList &gt; endstone &gt; event &gt; level</p>"},{"location":"reference/cpp/dir_9972879ee1a1ab85aef1f41c76fb712c/#files","title":"Files","text":"Type Name file dimension_event.h file level_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/level/</code></p>"},{"location":"reference/cpp/dimension__event_8h/","title":"File dimension_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; level &gt; dimension_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/level/level_event.h\"</code></li> <li><code>#include \"endstone/level/dimension.h\"</code></li> </ul>"},{"location":"reference/cpp/dimension__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/dimension__event_8h/#classes","title":"Classes","text":"Type Name class DimensionEvent Represents events within a level. <p>The documentation for this class was generated from the following file <code>include/endstone/event/level/dimension_event.h</code></p>"},{"location":"reference/cpp/dimension__event_8h_source/","title":"File dimension_event.h","text":"<p>File List &gt; endstone &gt; event &gt; level &gt; dimension_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/level/level_event.h\"\n#include \"endstone/level/dimension.h\"\n\nnamespace endstone {\n\nclass DimensionEvent : public LevelEvent {\npublic:\n    explicit DimensionEvent(Dimension &amp;dimension) : LevelEvent(dimension.getLevel()), dimension_(dimension){};\n\n    [[nodiscard]] Dimension &amp;getDimension() const\n    {\n        return dimension_;\n    }\n\nprivate:\n    Dimension &amp;dimension_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/level__event_8h/","title":"File level_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; level &gt; level_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/level/level.h\"</code></li> </ul>"},{"location":"reference/cpp/level__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/level__event_8h/#classes","title":"Classes","text":"Type Name class LevelEvent Represents events within a level. <p>The documentation for this class was generated from the following file <code>include/endstone/event/level/level_event.h</code></p>"},{"location":"reference/cpp/level__event_8h_source/","title":"File level_event.h","text":"<p>File List &gt; endstone &gt; event &gt; level &gt; level_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/level/level.h\"\n\nnamespace endstone {\n\nclass LevelEvent : public Event {\npublic:\n    explicit LevelEvent(Level &amp;level) : level_(level){};\n\n    [[nodiscard]] Level &amp;getLevel() const\n    {\n        return level_;\n    }\n\nprivate:\n    Level &amp;level_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_7c05c37b25e9c9eccd9c63c2d313ba28/","title":"Dir include/endstone/event/player","text":"<p>FileList &gt; endstone &gt; event &gt; player</p>"},{"location":"reference/cpp/dir_7c05c37b25e9c9eccd9c63c2d313ba28/#files","title":"Files","text":"Type Name file player_bed_enter_event.h file player_bed_leave_event.h file player_chat_event.h file player_command_event.h file player_death_event.h file player_drop_item_event.h file player_emote_event.h file player_event.h file player_game_mode_change_event.h file player_interact_actor_event.h file player_interact_event.h file player_item_consume_event.h file player_item_held_event.h file player_join_event.h file player_jump_event.h file player_kick_event.h file player_login_event.h file player_move_event.h file player_pickup_item_event.h file player_quit_event.h file player_respawn_event.h file player_skin_change_event.h file player_teleport_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/</code></p>"},{"location":"reference/cpp/player__bed__enter__event_8h/","title":"File player_bed_enter_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_bed_enter_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__bed__enter__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__bed__enter__event_8h/#classes","title":"Classes","text":"Type Name class PlayerBedEnterEvent Called when a player is almost about to enter the bed. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_bed_enter_event.h</code></p>"},{"location":"reference/cpp/player__bed__enter__event_8h_source/","title":"File player_bed_enter_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_bed_enter_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerBedEnterEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerBedEnterEvent)\n\n    explicit PlayerBedEnterEvent(Player &amp;player, Block &amp;bed) : Cancellable(player), bed_(bed) {}\n\n    // /**\n    //  * @brief Represents the default possible outcomes of this event.\n    //  */\n    // enum class BedEnterResult : int {\n    //     /**\n    //      * The player will enter the bed.\n    //      */\n    //     Ok,\n    //     /**\n    //      * The dimension doesn't allow sleeping or saving the spawn point (eg,Nether, The End).\n    //      */\n    //     NotPossibleHere,\n    //     /**\n    //      * Entering the bed is prevented due to it not being night nor thundering currently.\n    //      */\n    //     NotPossibleNow,\n    //     /**\n    //      * Entering the bed is prevented due to the player being too far away.\n    //      */\n    //     TooFarAway,\n    //     /**\n    //      * Entering the bed is prevented due to there being monsters nearby.\n    //      */\n    //     NotSafe,\n    //     /**\n    //      * Entering the bed is prevented due to there being some other problem.\n    //      */\n    //     OtherProblem,\n    // };\n\n    // explicit PlayerBedEnterEvent(Player &amp;player, Block &amp;bed, BedEnterResult bed_enter_result)\n    //     : Cancellable(player), bed_(bed), bed_enter_result_(bed_enter_result)\n    // {\n    // }\n\n    // /**\n    //  * @brief This describes the default outcome of this event.\n    //  *\n    //  * @return The bed enter result representing the default outcome of this event\n    //  */\n    // [[nodiscard]] BedEnterResult getBedEnterResult() const\n    // {\n    //     return bed_enter_result_;\n    // }\n    //\n    // /**\n    //  * @brief This controls the action to take with the bed that was clicked on.\n    //  *\n    //  * @return the action to take with the interacted bed\n    //  */\n    // [[nodiscard]] EventResult useBed() const\n    // {\n    //     return use_bed_;\n    // }\n    //\n    // /**\n    //  * @brief Sets the action to take with the interacted bed.\n    //  *\n    //  * - Result::Allow will result in the player sleeping, regardless of the default outcome described by\n    //  * getBedEnterResult().\n    //  * - Result::Deny will prevent the player from sleeping. This has the same effect as canceling the event\n    //  * - Result::Default will result in the outcome described by getBedEnterResult().\n    //  *\n    //  * @param use_bed the action to take with the interacted bed\n    //  */\n    // void setUseBed(EventResult use_bed)\n    // {\n    //     use_bed_ = use_bed;\n    // }\n    //\n    // /**\n    //  * @brief Gets the cancellation state of this event. Set to true if you want to prevent the player from sleeping.\n    //  *\n    //  * @note Canceling the event has the same effect as setting useBed() to Result::Deny.\n    //  *\n    //  * @return boolean cancellation state\n    //  */\n    // [[nodiscard]] bool isCancelled() const override\n    // {\n    //     return use_bed_ == EventResult::Deny ||\n    //            (use_bed_ == EventResult::Default &amp;&amp; bed_enter_result_ != BedEnterResult::Ok);\n    // }\n    //\n    // /**\n    //  * @brief Sets the cancellation state of this event. A canceled event will not be executed in the server, but\n    //  will\n    //  * still pass to other plugins.\n    //  *\n    //  * @note Canceling this event will prevent use of the bed.\n    //  *\n    //  * @param cancel true if you wish to cancel this event\n    //  */\n    // void setCancelled(bool cancel) override\n    // {\n    //     if (useBed() == EventResult::Deny) {\n    //         setUseBed(cancel ? EventResult::Deny : EventResult::Default);\n    //     }\n    //     else {\n    //         setUseBed(cancel ? EventResult::Deny : useBed());\n    //     }\n    // }\n\n    [[nodiscard]] Block &amp;getBed() const\n    {\n        return bed_;\n    }\n\nprivate:\n    Block &amp;bed_;\n    // BedEnterResult bed_enter_result_;\n    // EventResult use_bed_ = EventResult::Default;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__bed__leave__event_8h/","title":"File player_bed_leave_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_bed_leave_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__bed__leave__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__bed__leave__event_8h/#classes","title":"Classes","text":"Type Name class PlayerBedLeaveEvent Called when a player is leaving a bed. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_bed_leave_event.h</code></p>"},{"location":"reference/cpp/player__bed__leave__event_8h_source/","title":"File player_bed_leave_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_bed_leave_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerBedLeaveEvent final : public PlayerEvent {\npublic:\n    ENDSTONE_EVENT(PlayerBedLeaveEvent)\n\n    explicit PlayerBedLeaveEvent(Player &amp;player, Block &amp;bed) : PlayerEvent(player), bed_(bed) {}\n    ~PlayerBedLeaveEvent() override = default;\n\n    [[nodiscard]] Block &amp;getBed() const\n    {\n        return bed_;\n    }\n\nprivate:\n    Block &amp;bed_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__chat__event_8h/","title":"File player_chat_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_chat_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__chat__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__chat__event_8h/#classes","title":"Classes","text":"Type Name class PlayerChatEvent Called when a player sends a chat message. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_chat_event.h</code></p>"},{"location":"reference/cpp/player__chat__event_8h_source/","title":"File player_chat_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_chat_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerChatEvent final : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerChatEvent);\n    explicit PlayerChatEvent(Player &amp;player, std::string message, std::optional&lt;std::vector&lt;Player *&gt;&gt; recipients,\n                             std::string format = \"&lt;{0}&gt; {1}\")\n        : Cancellable(player), message_(std::move(message)), format_(std::move(format)),\n          recipients_(std::move(recipients))\n    {\n    }\n\n    [[nodiscard]] std::string getMessage() const\n    {\n        return message_;\n    }\n\n    void setMessage(std::string message)\n    {\n        message_ = std::move(message);\n    }\n\n    void setPlayer(Player &amp;player)\n    {\n        player_ = player;\n    }\n\n    [[nodiscard]] std::string getFormat() const\n    {\n        return format_;\n    }\n\n    void setFormat(std::string format)\n    {\n        format_ = std::move(format);\n    }\n\n    [[nodiscard]] std::vector&lt;Player *&gt; getRecipients() const\n    {\n        if (!recipients_) {\n            recipients_ = player_.get().getServer().getOnlinePlayers();\n        }\n        return recipients_.value();\n    }\n\nprivate:\n    std::string message_;\n    std::string format_;\n    mutable std::optional&lt;std::vector&lt;Player *&gt;&gt; recipients_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__command__event_8h/","title":"File player_command_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_command_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__command__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__command__event_8h/#classes","title":"Classes","text":"Type Name class PlayerCommandEvent Called whenever a player runs a command. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_command_event.h</code></p>"},{"location":"reference/cpp/player__command__event_8h_source/","title":"File player_command_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_command_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerCommandEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    explicit PlayerCommandEvent(Player &amp;player, std::string command) : Cancellable(player), command_(std::move(command))\n    {\n    }\n    ~PlayerCommandEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerCommandEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] std::string getCommand() const\n    {\n        return command_;\n    }\n\n    void setCommand(std::string command)\n    {\n        command_ = std::move(command);\n    }\n\nprivate:\n    std::string command_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__death__event_8h/","title":"File player_death_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_death_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_death_event.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__death__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__death__event_8h/#classes","title":"Classes","text":"Type Name class PlayerDeathEvent Called when a Player dies. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_death_event.h</code></p>"},{"location":"reference/cpp/player__death__event_8h_source/","title":"File player_death_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_death_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_death_event.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerDeathEvent : public ActorDeathEvent, public PlayerEvent {\npublic:\n    ENDSTONE_EVENT(PlayerDeathEvent);\n\n    explicit PlayerDeathEvent(Player &amp;player, std::unique_ptr&lt;DamageSource&gt; damage_source,\n                              std::optional&lt;Message&gt; death_message)\n        : ActorDeathEvent(player, std::move(damage_source)), PlayerEvent(player),\n          death_message_(std::move(death_message))\n    {\n    }\n\n    [[nodiscard]] std::optional&lt;Message&gt; getDeathMessage() const\n    {\n        return death_message_;\n    }\n\n    void setDeathMessage(std::optional&lt;Message&gt; death_message)\n    {\n        death_message_ = std::move(death_message);\n    }\n\nprivate:\n    std::optional&lt;Message&gt; death_message_;\n\n    // TODO(event): new exp, new level, new total exp, keep level, keep inventory\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__drop__item__event_8h/","title":"File player_drop_item_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_drop_item_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> <li><code>#include \"endstone/inventory/equipment_slot.h\"</code></li> <li><code>#include \"endstone/inventory/item_stack.h\"</code></li> </ul>"},{"location":"reference/cpp/player__drop__item__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__drop__item__event_8h/#classes","title":"Classes","text":"Type Name class PlayerDropItemEvent Called when a player drops an item from their inventory. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_drop_item_event.h</code></p>"},{"location":"reference/cpp/player__drop__item__event_8h_source/","title":"File player_drop_item_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_drop_item_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n#include \"endstone/inventory/equipment_slot.h\"\n#include \"endstone/inventory/item_stack.h\"\n\nnamespace endstone {\nclass PlayerDropItemEvent final : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerDropItemEvent)\n\n    explicit PlayerDropItemEvent(Player &amp;player, const ItemStack &amp;drop) : Cancellable(player), drop_(drop) {}\n\n    [[nodiscard]] const ItemStack &amp;getItem() const\n    {\n        return drop_;\n    }\n\nprivate:\n    const ItemStack &amp;drop_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__emote__event_8h/","title":"File player_emote_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_emote_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__emote__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__emote__event_8h/#classes","title":"Classes","text":"Type Name class PlayerEmoteEvent Called when a player uses an emote. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_emote_event.h</code></p>"},{"location":"reference/cpp/player__emote__event_8h_source/","title":"File player_emote_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_emote_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerEmoteEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    explicit PlayerEmoteEvent(Player &amp;player, std::string emote_id, bool muted)\n        : Cancellable(player), emote_id_(std::move(emote_id)), muted_(muted)\n    {\n    }\n    ~PlayerEmoteEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerEmoteEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] std::string getEmoteId() const\n    {\n        return emote_id_;\n    }\n\n    [[nodiscard]] bool isMuted() const\n    {\n        return muted_;\n    }\n\n    void setMuted(bool muted)\n    {\n        muted_ = muted;\n    }\n\nprivate:\n    std::string emote_id_;\n    bool muted_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__event_8h/","title":"File player_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/player.h\"</code></li> </ul>"},{"location":"reference/cpp/player__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__event_8h/#classes","title":"Classes","text":"Type Name class PlayerEvent Represents a player related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_event.h</code></p>"},{"location":"reference/cpp/player__event_8h_source/","title":"File player_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/player.h\"\n\nnamespace endstone {\n\nclass PlayerEvent : public Event {\npublic:\n    explicit PlayerEvent(Player &amp;player) : player_(player) {};\n    ~PlayerEvent() override = default;\n\n    [[nodiscard]] Player &amp;getPlayer() const\n    {\n        return player_;\n    }\n\nprotected:\n    std::reference_wrapper&lt;Player&gt; player_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__game__mode__change__event_8h/","title":"File player_game_mode_change_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_game_mode_change_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> <li><code>#include \"endstone/game_mode.h\"</code></li> </ul>"},{"location":"reference/cpp/player__game__mode__change__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__game__mode__change__event_8h/#classes","title":"Classes","text":"Type Name class PlayerGameModeChangeEvent Called when the GameMode of the player is changed. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_game_mode_change_event.h</code></p>"},{"location":"reference/cpp/player__game__mode__change__event_8h_source/","title":"File player_game_mode_change_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_game_mode_change_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n#include \"endstone/game_mode.h\"\n\nnamespace endstone {\n\nclass PlayerGameModeChangeEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    explicit PlayerGameModeChangeEvent(Player &amp;player, GameMode new_game_mode)\n        : Cancellable(player), new_game_mode_(new_game_mode)\n    {\n    }\n    ~PlayerGameModeChangeEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerGameModeChangeEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] GameMode getNewGameMode() const\n    {\n        return new_game_mode_;\n    }\n\nprivate:\n    GameMode new_game_mode_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__interact__actor__event_8h/","title":"File player_interact_actor_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_interact_actor_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__interact__actor__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__interact__actor__event_8h/#classes","title":"Classes","text":"Type Name class PlayerInteractActorEvent Represents an event that is called when a player right-clicks an actor. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_interact_actor_event.h</code></p>"},{"location":"reference/cpp/player__interact__actor__event_8h_source/","title":"File player_interact_actor_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_interact_actor_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerInteractActorEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    explicit PlayerInteractActorEvent(Player &amp;player, Actor &amp;actor) : Cancellable(player), actor_(actor) {}\n    ~PlayerInteractActorEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerInteractActorEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] Actor &amp;getActor() const\n    {\n        return actor_;\n    }\n\nprivate:\n    Actor &amp;actor_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__interact__event_8h/","title":"File player_interact_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_interact_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block_face.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__interact__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__interact__event_8h/#classes","title":"Classes","text":"Type Name class PlayerInteractEvent Represents an event that is called when a player right-clicks a block. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_interact_event.h</code></p>"},{"location":"reference/cpp/player__interact__event_8h_source/","title":"File player_interact_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_interact_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block_face.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerInteractEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    enum class Action {\n        LeftClickBlock,\n        RightClickBlock,\n        LeftClickAir,\n        RightClickAir,\n    };\n\n    ENDSTONE_EVENT(PlayerInteractEvent);\n\n    PlayerInteractEvent(Player &amp;player, Action action, ItemStack *item, Block *block_clicked, BlockFace block_face,\n                        const std::optional&lt;Vector&gt; &amp;clicked_position)\n        : Cancellable(player), action_(action), item_(item), block_clicked_(block_clicked), block_face_(block_face),\n          clicked_position_(clicked_position)\n    {\n    }\n\n    [[nodiscard]] Action getAction() const\n    {\n        return action_;\n    }\n\n    [[nodiscard]] bool hasItem() const\n    {\n        return item_ != nullptr;\n    }\n\n    [[nodiscard]] ItemStack *getItem() const\n    {\n        return item_;\n    }\n\n    [[nodiscard]] bool hasBlock() const\n    {\n        return block_clicked_ != nullptr;\n    }\n\n    [[nodiscard]] Block *getBlock() const\n    {\n        return block_clicked_;\n    }\n\n    [[nodiscard]] BlockFace getBlockFace() const\n    {\n        return block_face_;\n    }\n\n    [[nodiscard]] std::optional&lt;Vector&gt; getClickedPosition() const\n    {\n        return clicked_position_;\n    }\n\nprivate:\n    ItemStack *item_;\n    Action action_;\n    Block *block_clicked_;\n    BlockFace block_face_;\n    std::optional&lt;Vector&gt; clicked_position_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__item__consume__event_8h/","title":"File player_item_consume_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_item_consume_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> <li><code>#include \"endstone/inventory/equipment_slot.h\"</code></li> <li><code>#include \"endstone/inventory/item_stack.h\"</code></li> </ul>"},{"location":"reference/cpp/player__item__consume__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__item__consume__event_8h/#classes","title":"Classes","text":"Type Name class PlayerItemConsumeEvent Called when a player is finishing consuming an item (food, potion, milk bucket). <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_item_consume_event.h</code></p>"},{"location":"reference/cpp/player__item__consume__event_8h_source/","title":"File player_item_consume_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_item_consume_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n#include \"endstone/inventory/equipment_slot.h\"\n#include \"endstone/inventory/item_stack.h\"\n\nnamespace endstone {\nclass PlayerItemConsumeEvent final : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerItemConsumeEvent)\n\n    explicit PlayerItemConsumeEvent(Player &amp;player, const ItemStack &amp;item, EquipmentSlot hand)\n        : Cancellable(player), item_(item), hand_(hand)\n    {\n    }\n\n    [[nodiscard]] std::unique_ptr&lt;ItemStack&gt; getItem() const\n    {\n        return item_.clone();\n    }\n\n    [[nodiscard]] EquipmentSlot getHand() const\n    {\n        return hand_;\n    }\n\nprivate:\n    const ItemStack &amp;item_;\n    EquipmentSlot hand_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__item__held__event_8h/","title":"File player_item_held_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_item_held_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__item__held__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__item__held__event_8h/#classes","title":"Classes","text":"Type Name class PlayerItemHeldEvent Called when a player changes their currently held item. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_item_held_event.h</code></p>"},{"location":"reference/cpp/player__item__held__event_8h_source/","title":"File player_item_held_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_item_held_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\nclass PlayerItemHeldEvent final : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerItemHeldEvent)\n\n    explicit PlayerItemHeldEvent(Player &amp;player, const int previous, const int current)\n        : Cancellable(player), previous_(previous), current_(current)\n    {\n    }\n\n    [[nodiscard]] int getPreviousSlot() const\n    {\n        return previous_;\n    }\n\n    [[nodiscard]] int getNewSlot() const\n    {\n        return current_;\n    }\n\nprivate:\n    int previous_;\n    int current_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__join__event_8h/","title":"File player_join_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_join_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__join__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__join__event_8h/#classes","title":"Classes","text":"Type Name class PlayerJoinEvent Called when a player joins a server. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_join_event.h</code></p>"},{"location":"reference/cpp/player__join__event_8h_source/","title":"File player_join_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_join_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerJoinEvent : public PlayerEvent {\npublic:\n    ENDSTONE_EVENT(PlayerJoinEvent);\n\n    explicit PlayerJoinEvent(Player &amp;player, std::optional&lt;Message&gt; join_message)\n        : PlayerEvent(player), join_message_(std::move(join_message))\n    {\n    }\n\n    [[nodiscard]] std::optional&lt;Message&gt; getJoinMessage() const\n    {\n        return join_message_;\n    }\n\n    void setJoinMessage(std::optional&lt;Message&gt; message)\n    {\n        join_message_ = std::move(message);\n    }\n\nprivate:\n    std::optional&lt;Message&gt; join_message_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__jump__event_8h/","title":"File player_jump_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_jump_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_move_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__jump__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__jump__event_8h/#classes","title":"Classes","text":"Type Name class PlayerJumpEvent Called when a player jumps. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_jump_event.h</code></p>"},{"location":"reference/cpp/player__jump__event_8h_source/","title":"File player_jump_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_jump_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_move_event.h\"\n\nnamespace endstone {\n\nclass PlayerJumpEvent : public PlayerMoveEvent {\npublic:\n    ENDSTONE_EVENT(PlayerJumpEvent);\n    using PlayerMoveEvent::PlayerMoveEvent;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__kick__event_8h/","title":"File player_kick_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_kick_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__kick__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__kick__event_8h/#classes","title":"Classes","text":"Type Name class PlayerKickEvent Called when a player gets kicked from the server. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_kick_event.h</code></p>"},{"location":"reference/cpp/player__kick__event_8h_source/","title":"File player_kick_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_kick_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerKickEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerKickEvent);\n\n    explicit PlayerKickEvent(Player &amp;player, std::string reason) : Cancellable(player), reason_(std::move(reason)) {}\n\n    [[nodiscard]] std::string getReason() const\n    {\n        return reason_;\n    }\n\n    void setReason(std::string reason)\n    {\n        reason_ = std::move(reason);\n    }\n\nprivate:\n    std::string reason_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__login__event_8h/","title":"File player_login_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_login_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__login__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__login__event_8h/#classes","title":"Classes","text":"Type Name class PlayerLoginEvent Called when a player attempts to login in. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_login_event.h</code></p>"},{"location":"reference/cpp/player__login__event_8h_source/","title":"File player_login_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_login_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerLoginEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    explicit PlayerLoginEvent(Player &amp;player, std::string message = \"\")\n        : Cancellable(player), message_(std::move(message))\n    {\n    }\n    ~PlayerLoginEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerLoginEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] const std::string &amp;getKickMessage() const\n    {\n        return message_;\n    }\n\n    void setKickMessage(const std::string &amp;message)\n    {\n        message_ = message;\n    }\n\nprivate:\n    std::string message_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__move__event_8h/","title":"File player_move_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_move_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> <li><code>#include \"endstone/level/location.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/player__move__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__move__event_8h/#classes","title":"Classes","text":"Type Name class PlayerMoveEvent Called when a player moves. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_move_event.h</code></p>"},{"location":"reference/cpp/player__move__event_8h_source/","title":"File player_move_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_move_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n#include \"endstone/level/location.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass PlayerMoveEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerMoveEvent);\n\n    explicit PlayerMoveEvent(Player &amp;player, Location from, Location to) : Cancellable(player), from_(from), to_(to) {}\n\n    [[nodiscard]] const Location &amp;getFrom() const\n    {\n        return from_;\n    }\n\n    Result&lt;void&gt; setFrom(const Location &amp;from)\n    {\n        ENDSTONE_CHECKF(from.getDimension() != nullptr, \"Cannot set a location with no associated dimension!\")\n        from_ = from;\n        return {};\n    }\n\n    [[nodiscard]] const Location &amp;getTo() const\n    {\n        return to_;\n    }\n\n    Result&lt;void&gt; setTo(const Location &amp;to)\n    {\n        ENDSTONE_CHECKF(to.getDimension() != nullptr, \"Cannot set a location with no associated dimension!\")\n        to_ = to;\n        return {};\n    }\n\n    Location from_;\n    Location to_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__pickup__item__event_8h/","title":"File player_pickup_item_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_pickup_item_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/item.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__pickup__item__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__pickup__item__event_8h/#classes","title":"Classes","text":"Type Name class PlayerPickupItemEvent Called when a player picks an item up from the ground. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_pickup_item_event.h</code></p>"},{"location":"reference/cpp/player__pickup__item__event_8h_source/","title":"File player_pickup_item_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_pickup_item_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/item.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerPickupItemEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerPickupItemEvent);\n\n    explicit PlayerPickupItemEvent(Player &amp;player, Item &amp;item) : Cancellable(player), item_(item){};\n\n    Item &amp;getItem() const\n    {\n        return item_;\n    }\n\nprivate:\n    Item &amp;item_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__quit__event_8h/","title":"File player_quit_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_quit_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__quit__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__quit__event_8h/#classes","title":"Classes","text":"Type Name class PlayerQuitEvent Called when a player leaves a server. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_quit_event.h</code></p>"},{"location":"reference/cpp/player__quit__event_8h_source/","title":"File player_quit_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_quit_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerQuitEvent : public PlayerEvent {\npublic:\n    ENDSTONE_EVENT(PlayerQuitEvent);\n\n    explicit PlayerQuitEvent(Player &amp;player, std::optional&lt;Message&gt; quit_message)\n        : PlayerEvent(player), quit_message_(std::move(quit_message))\n    {\n    }\n\n    [[nodiscard]] std::optional&lt;Message&gt; getQuitMessage() const\n    {\n        return quit_message_;\n    }\n\n    void setQuitMessage(std::optional&lt;Message&gt; message)\n    {\n        quit_message_ = std::move(message);\n    }\n\nprivate:\n    std::optional&lt;Message&gt; quit_message_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__respawn__event_8h/","title":"File player_respawn_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_respawn_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__respawn__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__respawn__event_8h/#classes","title":"Classes","text":"Type Name class PlayerRespawnEvent Called when a player respawns. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_respawn_event.h</code></p>"},{"location":"reference/cpp/player__respawn__event_8h_source/","title":"File player_respawn_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_respawn_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerRespawnEvent : public PlayerEvent {\npublic:\n    explicit PlayerRespawnEvent(Player &amp;player) : PlayerEvent(player) {}\n    ~PlayerRespawnEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerRespawnEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__skin__change__event_8h/","title":"File player_skin_change_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_skin_change_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__skin__change__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__skin__change__event_8h/#classes","title":"Classes","text":"Type Name class PlayerSkinChangeEvent Called when a player changes their skin. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_skin_change_event.h</code></p>"},{"location":"reference/cpp/player__skin__change__event_8h_source/","title":"File player_skin_change_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_skin_change_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerSkinChangeEvent : public Cancellable&lt;PlayerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PlayerSkinChangeEvent);\n\n    explicit PlayerSkinChangeEvent(Player &amp;player, Skin new_skin, std::optional&lt;Message&gt; message)\n        : Cancellable(player), new_skin_(std::move(new_skin)), message_(std::move(message))\n    {\n    }\n\n    [[nodiscard]] Skin getNewSkin() const\n    {\n        return new_skin_;\n    }\n\n    [[nodiscard]] std::optional&lt;Message&gt; getSkinChangeMessage() const\n    {\n        return message_;\n    }\n\n    void setSkinChangeMessage(std::optional&lt;Message&gt; message)\n    {\n        message_ = std::move(message);\n    }\n\nprivate:\n    Skin new_skin_;\n    std::optional&lt;Message&gt; message_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__teleport__event_8h/","title":"File player_teleport_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_teleport_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_move_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__teleport__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__teleport__event_8h/#classes","title":"Classes","text":"Type Name class PlayerTeleportEvent Called when a player is teleported from one location to another. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_teleport_event.h</code></p>"},{"location":"reference/cpp/player__teleport__event_8h_source/","title":"File player_teleport_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_teleport_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_move_event.h\"\n\nnamespace endstone {\n\nclass PlayerTeleportEvent : public PlayerMoveEvent {\npublic:\n    ENDSTONE_EVENT(PlayerTeleportEvent);\n    using PlayerMoveEvent::PlayerMoveEvent;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_77022909323d5ad872c4820a738a5429/","title":"Dir include/endstone/event/server","text":"<p>FileList &gt; endstone &gt; event &gt; server</p>"},{"location":"reference/cpp/dir_77022909323d5ad872c4820a738a5429/#files","title":"Files","text":"Type Name file broadcast_message_event.h file map_initialize_event.h file packet_receive_event.h file packet_send_event.h file plugin_disable_event.h file plugin_enable_event.h file script_message_event.h file server_command_event.h file server_event.h file server_list_ping_event.h file server_load_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/</code></p>"},{"location":"reference/cpp/broadcast__message__event_8h/","title":"File broadcast_message_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; broadcast_message_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/broadcast__message__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/broadcast__message__event_8h/#classes","title":"Classes","text":"Type Name class BroadcastMessageEvent Event triggered for server broadcast messages such as fromServer::broadcast . <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/broadcast_message_event.h</code></p>"},{"location":"reference/cpp/broadcast__message__event_8h_source/","title":"File broadcast_message_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; broadcast_message_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass BroadcastMessageEvent : public Cancellable&lt;ServerEvent&gt; {\npublic:\n    BroadcastMessageEvent(bool async, Message message, std::unordered_set&lt;const CommandSender *&gt; recipients)\n        : Cancellable(async), message_(std::move(message)), recipients_(std::move(recipients))\n    {\n    }\n\n    inline static const std::string NAME = \"BroadcastMessageEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] const Message &amp;getMessage() const\n    {\n        return message_;\n    }\n\n    void setMessage(Message message)\n    {\n        message_ = std::move(message);\n    }\n\n    [[nodiscard]] const std::unordered_set&lt;const CommandSender *&gt; &amp;getRecipients() const\n    {\n        return recipients_;\n    }\n\nprivate:\n    Message message_;\n    std::unordered_set&lt;const CommandSender *&gt; recipients_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/map__initialize__event_8h/","title":"File map_initialize_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; map_initialize_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> <li><code>#include \"endstone/map/map_view.h\"</code></li> </ul>"},{"location":"reference/cpp/map__initialize__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/map__initialize__event_8h/#classes","title":"Classes","text":"Type Name class MapInitializeEvent Called when a map is initialized. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/map_initialize_event.h</code></p>"},{"location":"reference/cpp/map__initialize__event_8h_source/","title":"File map_initialize_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; map_initialize_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n#include \"endstone/map/map_view.h\"\n\nnamespace endstone {\n\nclass MapInitializeEvent : public ServerEvent {\npublic:\n    ENDSTONE_EVENT(MapInitializeEvent)\n\n    explicit MapInitializeEvent(MapView &amp;map) : map_(map) {}\n\n    [[nodiscard]] MapView &amp;getMap() const\n    {\n        return map_;\n    }\n\nprivate:\n    MapView &amp;map_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/packet__receive__event_8h/","title":"File packet_receive_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; packet_receive_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/packet__receive__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/packet__receive__event_8h/#classes","title":"Classes","text":"Type Name class PacketReceiveEvent Called when the server receives a packet from a connected client. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/packet_receive_event.h</code></p>"},{"location":"reference/cpp/packet__receive__event_8h_source/","title":"File packet_receive_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; packet_receive_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass PacketReceiveEvent : public Cancellable&lt;ServerEvent&gt; {\npublic:\n    PacketReceiveEvent(Player *player, const int packet_id, std::string_view payload, SocketAddress address,\n                       const int sub_client_id)\n        : player_(player), packet_id_(packet_id), payload_(payload), address_(std::move(address)),\n          sub_client_id_(sub_client_id)\n    {\n    }\n\n    inline static const std::string NAME = \"PacketReceiveEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] int getPacketId() const\n    {\n        return packet_id_;\n    }\n\n    [[nodiscard]] std::string_view getPayload() const\n    {\n        return payload_;\n    }\n\n    void setPayload(std::string_view payload)\n    {\n        owned_payload_ = payload;\n        payload_ = owned_payload_;\n    }\n\n    [[nodiscard]] Player *getPlayer() const\n    {\n        return player_;\n    }\n\n    [[nodiscard]] SocketAddress getAddress() const\n    {\n        return address_;\n    }\n\n    [[nodiscard]] int getSubClientId() const\n    {\n        return sub_client_id_;\n    }\n\nprivate:\n    Player *player_;\n    int packet_id_;\n    std::string_view payload_;\n    std::string owned_payload_;\n    SocketAddress address_;\n    int sub_client_id_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/packet__send__event_8h/","title":"File packet_send_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; packet_send_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/packet__send__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/packet__send__event_8h/#classes","title":"Classes","text":"Type Name class PacketSendEvent Called when the server sends a packet to a connected client. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/packet_send_event.h</code></p>"},{"location":"reference/cpp/packet__send__event_8h_source/","title":"File packet_send_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; packet_send_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass PacketSendEvent : public Cancellable&lt;ServerEvent&gt; {\npublic:\n    ENDSTONE_EVENT(PacketSendEvent);\n\n    PacketSendEvent(Player *player, const int packet_id, std::string_view payload, SocketAddress address,\n                    const int sub_client_id)\n        : player_(player), packet_id_(packet_id), payload_(payload), address_(std::move(address)),\n          sub_client_id_(sub_client_id)\n    {\n    }\n\n    [[nodiscard]] int getPacketId() const\n    {\n        return packet_id_;\n    }\n\n    [[nodiscard]] std::string_view getPayload() const\n    {\n        return payload_;\n    }\n\n    void setPayload(std::string_view payload)\n    {\n        owned_payload_ = payload;\n        payload_ = owned_payload_;\n    }\n\n    [[nodiscard]] Player *getPlayer() const\n    {\n        return player_;\n    }\n\n    [[nodiscard]] SocketAddress getAddress() const\n    {\n        return address_;\n    }\n\n    [[nodiscard]] int getSubClientId() const\n    {\n        return sub_client_id_;\n    }\n\nprivate:\n    Player *player_;\n    int packet_id_;\n    std::string_view payload_;\n    std::string owned_payload_;\n    SocketAddress address_;\n    int sub_client_id_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__disable__event_8h/","title":"File plugin_disable_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; plugin_disable_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__disable__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/plugin__disable__event_8h/#classes","title":"Classes","text":"Type Name class PluginDisableEvent Called when a plugin is disabled. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_disable_event.h</code></p>"},{"location":"reference/cpp/plugin__disable__event_8h_source/","title":"File plugin_disable_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; plugin_disable_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass PluginDisableEvent : public ServerEvent {\npublic:\n    explicit PluginDisableEvent(Plugin &amp;plugin) : plugin_(plugin) {}\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n\n    inline static const std::string NAME = \"PluginDisableEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\nprivate:\n    Plugin &amp;plugin_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__enable__event_8h/","title":"File plugin_enable_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; plugin_enable_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__enable__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/plugin__enable__event_8h/#classes","title":"Classes","text":"Type Name class PluginEnableEvent Called when a plugin is enabled. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_enable_event.h</code></p>"},{"location":"reference/cpp/plugin__enable__event_8h_source/","title":"File plugin_enable_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; plugin_enable_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass PluginEnableEvent : public ServerEvent {\npublic:\n    explicit PluginEnableEvent(Plugin &amp;plugin) : plugin_(plugin) {}\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n\n    inline static const std::string NAME = \"PluginEnableEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\nprivate:\n    Plugin &amp;plugin_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/script__message__event_8h/","title":"File script_message_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; script_message_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/script__message__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/script__message__event_8h/#classes","title":"Classes","text":"Type Name class ScriptMessageEvent Called when a message is sent by <code>/scriptevent</code> command. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/script_message_event.h</code></p>"},{"location":"reference/cpp/script__message__event_8h_source/","title":"File script_message_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; script_message_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass ScriptMessageEvent : public Cancellable&lt;ServerEvent&gt; {\npublic:\n    ScriptMessageEvent(std::string message_id, std::string message, const CommandSender &amp;sender)\n        : Cancellable(false), message_id_(std::move(message_id)), message_(std::move(message)), sender_(sender)\n    {\n    }\n\n    inline static const std::string NAME = \"ScriptMessageEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] const std::string &amp;getMessageId() const\n    {\n        return message_id_;\n    }\n\n    [[nodiscard]] const std::string &amp;getMessage() const\n    {\n        return message_;\n    }\n\n    [[nodiscard]] const CommandSender &amp;getSender() const\n    {\n        return sender_;\n    }\n\nprivate:\n    std::string message_id_;\n    std::string message_;\n    const CommandSender &amp;sender_;\n};\n\n};  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__command__event_8h/","title":"File server_command_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_command_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/server__command__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/server__command__event_8h/#classes","title":"Classes","text":"Type Name class ServerCommandEvent Called when the console runs a command, early in the process. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_command_event.h</code></p>"},{"location":"reference/cpp/server__command__event_8h_source/","title":"File server_command_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_command_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass ServerCommandEvent : public Cancellable&lt;ServerEvent&gt; {\npublic:\n    ServerCommandEvent(CommandSender &amp;sender, std::string command) : sender_(sender), command_(std::move(command)) {}\n\n    inline static const std::string NAME = \"ServerCommandEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] std::string getCommand() const\n    {\n        return command_;\n    }\n\n    void setCommand(std::string message)\n    {\n        command_ = std::move(message);\n    }\n\n    [[nodiscard]] CommandSender &amp;getSender() const\n    {\n        return sender_;\n    }\n\nprivate:\n    CommandSender &amp;sender_;\n    std::string command_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__event_8h/","title":"File server_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/actor.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> </ul>"},{"location":"reference/cpp/server__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/server__event_8h/#classes","title":"Classes","text":"Type Name class ServerEvent Represents a Server-related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_event.h</code></p>"},{"location":"reference/cpp/server__event_8h_source/","title":"File server_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/actor.h\"\n#include \"endstone/event/event.h\"\n\nnamespace endstone {\n\nclass ServerEvent : public Event {\npublic:\n    using Event::Event;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__list__ping__event_8h/","title":"File server_list_ping_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_list_ping_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> <li><code>#include \"endstone/game_mode.h\"</code></li> </ul>"},{"location":"reference/cpp/server__list__ping__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/server__list__ping__event_8h/#classes","title":"Classes","text":"Type Name class ServerListPingEvent Called when a server ping is coming in. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_list_ping_event.h</code></p>"},{"location":"reference/cpp/server__list__ping__event_8h_source/","title":"File server_list_ping_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_list_ping_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/server/server_event.h\"\n#include \"endstone/game_mode.h\"\n\nnamespace endstone {\n\nclass ServerListPingEvent : public Cancellable&lt;ServerEvent&gt; {\npublic:\n    ServerListPingEvent(std::string remote_host, int remote_port, std::string ping_response)\n        : Cancellable(true), ping_response_(std::move(ping_response)), remote_host_(std::move(remote_host)),\n          remote_port_(remote_port), network_protocol_version_(0), num_players_(0), max_players_(0), game_mode_(),\n          local_port_(0), local_port_v6_(0)\n    {\n    }\n\n    [[nodiscard]] std::string getRemoteHost() const\n    {\n        return remote_host_;\n    }\n\n    [[nodiscard]] int getRemotePort() const\n    {\n        return remote_port_;\n    }\n\n    [[nodiscard]] std::string getServerGuid() const\n    {\n        return server_guid_;\n    }\n\n    void setServerGuid(std::string guid)\n    {\n        server_guid_ = std::move(guid);\n    }\n\n    [[nodiscard]] int getLocalPort() const\n    {\n        return local_port_;\n    }\n\n    void setLocalPort(int port)\n    {\n        local_port_ = port;\n    }\n\n    [[nodiscard]] int getLocalPortV6() const\n    {\n        return local_port_v6_;\n    }\n\n    void setLocalPortV6(int port)\n    {\n        local_port_v6_ = port;\n    }\n\n    [[nodiscard]] std::string getMotd() const\n    {\n        return motd_;\n    }\n\n    void setMotd(std::string motd)\n    {\n        motd_ = std::move(motd);\n    }\n\n    [[nodiscard]] int getNetworkProtocolVersion() const\n    {\n        return network_protocol_version_;\n    }\n\n    [[nodiscard]] std::string getMinecraftVersionNetwork() const\n    {\n        return minecraft_version_network_;\n    }\n\n    void setMinecraftVersionNetwork(std::string minecraft_version_network)\n    {\n        minecraft_version_network_ = std::move(minecraft_version_network);\n    }\n\n    [[nodiscard]] int getNumPlayers() const\n    {\n        return num_players_;\n    }\n\n    void setNumPlayers(int num_players)\n    {\n        num_players_ = num_players;\n    }\n\n    [[nodiscard]] int getMaxPlayers() const\n    {\n        return max_players_;\n    }\n\n    void setMaxPlayers(int max_players)\n    {\n        max_players_ = max_players;\n    }\n\n    [[nodiscard]] std::string getLevelName() const\n    {\n        return level_name_;\n    }\n\n    void setLevelName(std::string level_name)\n    {\n        level_name_ = std::move(level_name);\n    }\n\n    [[nodiscard]] GameMode getGameMode() const\n    {\n        return game_mode_;\n    }\n\n    void setGameMode(GameMode game_mode)\n    {\n        game_mode_ = game_mode;\n    }\n\n    inline static const std::string NAME = \"ServerListPingEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    bool deserialize();\n    std::string serialize();\n\nprivate:\n    std::string ping_response_;\n    std::string remote_host_;\n    int remote_port_;\n    std::string motd_;\n    int network_protocol_version_;\n    std::string minecraft_version_network_;\n    int num_players_;\n    int max_players_;\n    std::string server_guid_;\n    std::string level_name_;\n    GameMode game_mode_;\n    int local_port_;\n    int local_port_v6_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__load__event_8h/","title":"File server_load_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_load_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/server__load__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/server__load__event_8h/#classes","title":"Classes","text":"Type Name class ServerLoadEvent Called when either the server startup or reload has completed. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_load_event.h</code></p>"},{"location":"reference/cpp/server__load__event_8h_source/","title":"File server_load_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_load_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass ServerLoadEvent : public ServerEvent {\npublic:\n    enum class LoadType {\n        Startup,\n        Reload\n    };\n\n    explicit ServerLoadEvent(LoadType type) : type_(type) {}\n\n    [[nodiscard]] LoadType getType() const\n    {\n        return type_;\n    }\n\n    inline static const std::string NAME = \"ServerLoadEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\nprivate:\n    LoadType type_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_7fcf87d2683114df01ea446fea23c187/","title":"Dir include/endstone/event/weather","text":"<p>FileList &gt; endstone &gt; event &gt; weather</p>"},{"location":"reference/cpp/dir_7fcf87d2683114df01ea446fea23c187/#files","title":"Files","text":"Type Name file thunder_change_event.h file weather_change_event.h file weather_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/</code></p>"},{"location":"reference/cpp/thunder__change__event_8h/","title":"File thunder_change_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; weather &gt; thunder_change_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/weather/weather_event.h\"</code></li> </ul>"},{"location":"reference/cpp/thunder__change__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/thunder__change__event_8h/#classes","title":"Classes","text":"Type Name class ThunderChangeEvent Called when the thunder state in a world is changing. <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/thunder_change_event.h</code></p>"},{"location":"reference/cpp/thunder__change__event_8h_source/","title":"File thunder_change_event.h","text":"<p>File List &gt; endstone &gt; event &gt; weather &gt; thunder_change_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/weather/weather_event.h\"\n\nnamespace endstone {\n\nclass ThunderChangeEvent : public Cancellable&lt;WeatherEvent&gt; {\npublic:\n    ThunderChangeEvent(Level &amp;level, bool to) : Cancellable(level), to_(to) {}\n    ~ThunderChangeEvent() override = default;\n\n    [[nodiscard]] bool toThunderState() const\n    {\n        return to_;\n    }\n\n    inline static const std::string NAME = \"ThunderChangeEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\nprivate:\n    bool to_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/weather__change__event_8h/","title":"File weather_change_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; weather &gt; weather_change_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/cancellable.h\"</code></li> <li><code>#include \"endstone/event/weather/weather_event.h\"</code></li> </ul>"},{"location":"reference/cpp/weather__change__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/weather__change__event_8h/#classes","title":"Classes","text":"Type Name class WeatherChangeEvent Called when the weather (rain) state in a world is changing. <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_change_event.h</code></p>"},{"location":"reference/cpp/weather__change__event_8h_source/","title":"File weather_change_event.h","text":"<p>File List &gt; endstone &gt; event &gt; weather &gt; weather_change_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/cancellable.h\"\n#include \"endstone/event/weather/weather_event.h\"\n\nnamespace endstone {\n\nclass WeatherChangeEvent : public Cancellable&lt;WeatherEvent&gt; {\npublic:\n    WeatherChangeEvent(Level &amp;level, const bool to) : Cancellable(level), to_(to) {}\n    ~WeatherChangeEvent() override = default;\n\n    [[nodiscard]] bool toWeatherState() const\n    {\n        return to_;\n    }\n\n    inline static const std::string NAME = \"WeatherChangeEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\nprivate:\n    bool to_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/weather__event_8h/","title":"File weather_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; weather &gt; weather_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/level/level.h\"</code></li> </ul>"},{"location":"reference/cpp/weather__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/weather__event_8h/#classes","title":"Classes","text":"Type Name class WeatherEvent Represents a Weather-related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_event.h</code></p>"},{"location":"reference/cpp/weather__event_8h_source/","title":"File weather_event.h","text":"<p>File List &gt; endstone &gt; event &gt; weather &gt; weather_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/level/level.h\"\n\nnamespace endstone {\n\nclass WeatherEvent : public Event {\npublic:\n    explicit WeatherEvent(Level &amp;level) : level_(level){};\n    ~WeatherEvent() override = default;\n\n    [[nodiscard]] Level &amp;getLevel() const\n    {\n        return level_;\n    }\n\nprivate:\n    Level &amp;level_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_0fd3b458603af3963ebb9c312a9238ec/","title":"Dir include/endstone/form","text":"<p>FileList &gt; endstone &gt; form</p>"},{"location":"reference/cpp/dir_0fd3b458603af3963ebb9c312a9238ec/#files","title":"Files","text":"Type Name file action_form.h file form.h file message_form.h file modal_form.h"},{"location":"reference/cpp/dir_0fd3b458603af3963ebb9c312a9238ec/#directories","title":"Directories","text":"Type Name dir controls <p>The documentation for this class was generated from the following file <code>include/endstone/form/</code></p>"},{"location":"reference/cpp/action__form_8h/","title":"File action_form.h","text":"<p>FileList &gt; endstone &gt; form &gt; action_form.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/form/controls/button.h\"</code></li> <li><code>#include \"endstone/form/controls/divider.h\"</code></li> <li><code>#include \"endstone/form/controls/header.h\"</code></li> <li><code>#include \"endstone/form/controls/label.h\"</code></li> <li><code>#include \"endstone/form/form.h\"</code></li> </ul>"},{"location":"reference/cpp/action__form_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/action__form_8h/#classes","title":"Classes","text":"Type Name class ActionForm Represents a form with buttons that let the player take action. <p>The documentation for this class was generated from the following file <code>include/endstone/form/action_form.h</code></p>"},{"location":"reference/cpp/action__form_8h_source/","title":"File action_form.h","text":"<p>File List &gt; endstone &gt; form &gt; action_form.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n\n#include \"endstone/form/controls/button.h\"\n#include \"endstone/form/controls/divider.h\"\n#include \"endstone/form/controls/header.h\"\n#include \"endstone/form/controls/label.h\"\n#include \"endstone/form/form.h\"\n\nnamespace endstone {\n\nclass ActionForm : public Form&lt;ActionForm&gt; {\npublic:\n    using Control = std::variant&lt;Button, Divider, Header, Label&gt;;\n    using OnSubmitCallback = std::function&lt;void(Player *, int)&gt;;\n\n    explicit ActionForm() = default;\n\n    [[nodiscard]] Message getContent() const\n    {\n        return content_;\n    }\n\n    ActionForm &amp;setContent(Message text)\n    {\n        content_ = std::move(text);\n        return *this;\n    }\n\n    ActionForm &amp;addButton(const Message &amp;text, const std::optional&lt;std::string&gt; &amp;icon = std::nullopt,\n                          Button::OnClickCallback on_click = {})\n    {\n        auto button = Button(text, icon, std::move(on_click));\n        controls_.emplace_back(button);\n        return *this;\n    }\n\n    ActionForm &amp;addLabel(const Message &amp;text)\n    {\n        controls_.push_back(Label(text));\n        return *this;\n    }\n\n    ActionForm &amp;addHeader(const Message &amp;text)\n    {\n        controls_.push_back(Header(text));\n        return *this;\n    }\n\n    ActionForm &amp;addDivider()\n    {\n        controls_.push_back(Divider());\n        return *this;\n    }\n\n    [[nodiscard]] const std::vector&lt;Control&gt; &amp;getControls() const\n    {\n        return controls_;\n    }\n\n    ActionForm &amp;setControls(const std::vector&lt;Control&gt; &amp;controls)\n    {\n        controls_ = controls;\n        return *this;\n    }\n\n    [[nodiscard]] OnSubmitCallback getOnSubmit() const\n    {\n        return on_submit_;\n    }\n\n    ActionForm &amp;setOnSubmit(OnSubmitCallback on_submit)\n    {\n        on_submit_ = std::move(on_submit);\n        return *this;\n    }\n\nprivate:\n    Message content_;\n    std::vector&lt;Control&gt; controls_;\n    OnSubmitCallback on_submit_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/form_8h/","title":"File form.h","text":"<p>FileList &gt; endstone &gt; form &gt; form.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/form_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/form_8h/#classes","title":"Classes","text":"Type Name class Form &lt;typename T&gt;Represents a generic form. <p>The documentation for this class was generated from the following file <code>include/endstone/form/form.h</code></p>"},{"location":"reference/cpp/form_8h_source/","title":"File form.h","text":"<p>File List &gt; endstone &gt; form &gt; form.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;functional&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Player;\n\ntemplate &lt;typename T&gt;\nclass Form {\npublic:\n    using OnCloseCallback = std::function&lt;void(Player *)&gt;;\n    explicit Form() = default;\n\n    [[nodiscard]] Message getTitle() const\n    {\n        return title_;\n    }\n\n    T &amp;setTitle(Message title)\n    {\n        title_ = std::move(title);\n        return *static_cast&lt;T *&gt;(this);\n    }\n\n    T &amp;setOnClose(OnCloseCallback on_close)\n    {\n        on_close_ = std::move(on_close);\n        return *static_cast&lt;T *&gt;(this);\n    }\n\n    [[nodiscard]] OnCloseCallback getOnClose() const\n    {\n        return on_close_;\n    }\n\nprotected:\n    Message title_;\n    OnCloseCallback on_close_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_035306890ec6a3fa870e30b726ac5ffc/","title":"Dir include/endstone/form/controls","text":"<p>FileList &gt; controls</p>"},{"location":"reference/cpp/dir_035306890ec6a3fa870e30b726ac5ffc/#files","title":"Files","text":"Type Name file button.h file divider.h file dropdown.h file header.h file label.h file slider.h file step_slider.h file text_input.h file toggle.h <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/</code></p>"},{"location":"reference/cpp/button_8h/","title":"File button.h","text":"<p>FileList &gt; controls &gt; button.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/button_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/button_8h/#classes","title":"Classes","text":"Type Name class Button Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/button.h</code></p>"},{"location":"reference/cpp/button_8h_source/","title":"File button.h","text":"<p>File List &gt; controls &gt; button.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Player;\n\nclass Button {\npublic:\n    using OnClickCallback = std::function&lt;void(Player *)&gt;;\n\n    Button() = default;\n    explicit Button(Message text, std::optional&lt;std::string&gt; icon = std::nullopt, OnClickCallback on_click = {})\n        : text_(std::move(text)), icon_(std::move(icon)), on_click_(std::move(on_click))\n    {\n    }\n\n    [[nodiscard]] Message getText() const\n    {\n        return text_;\n    }\n\n    Button &amp;setText(Message text)\n    {\n        text_ = std::move(text);\n        return *this;\n    }\n\n    [[nodiscard]] std::optional&lt;std::string&gt; getIcon() const\n    {\n        return icon_;\n    }\n\n    Button &amp;setIcon(std::string icon)\n    {\n        icon_ = std::move(icon);\n        return *this;\n    }\n\n    [[nodiscard]] OnClickCallback getOnClick() const\n    {\n        return on_click_;\n    }\n\n    Button &amp;setOnClick(OnClickCallback on_click)\n    {\n        on_click_ = std::move(on_click);\n        return *this;\n    }\n\nprivate:\n    Message text_;\n    std::optional&lt;std::string&gt; icon_;\n    OnClickCallback on_click_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/divider_8h/","title":"File divider.h","text":"<p>FileList &gt; controls &gt; divider.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/divider_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/divider_8h/#classes","title":"Classes","text":"Type Name class Divider Represents a divider. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/divider.h</code></p>"},{"location":"reference/cpp/divider_8h_source/","title":"File divider.h","text":"<p>File List &gt; controls &gt; divider.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Divider {\npublic:\n    Divider() = default;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dropdown_8h/","title":"File dropdown.h","text":"<p>FileList &gt; controls &gt; dropdown.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/dropdown_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/dropdown_8h/#classes","title":"Classes","text":"Type Name class Dropdown Represents a dropdown with a set of predefined options. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/dropdown.h</code></p>"},{"location":"reference/cpp/dropdown_8h_source/","title":"File dropdown.h","text":"<p>File List &gt; controls &gt; dropdown.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Dropdown {\npublic:\n    Dropdown() = default;\n    explicit Dropdown(Message label, std::vector&lt;std::string&gt; options, std::optional&lt;int&gt; default_index = std::nullopt)\n        : label_(std::move(label)), options_(std::move(options)), default_index_(default_index)\n    {\n    }\n\n    [[nodiscard]] Message getLabel() const\n    {\n        return label_;\n    }\n\n    Dropdown &amp;setLabel(Message label)\n    {\n        label_ = std::move(label);\n        return *this;\n    }\n\n    Dropdown &amp;addOption(const std::string &amp;option)\n    {\n        options_.push_back(option);\n        return *this;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getOptions() const\n    {\n        return options_;\n    }\n\n    Dropdown &amp;setOptions(std::vector&lt;std::string&gt; options)\n    {\n        options_ = std::move(options);\n        return *this;\n    }\n\n    [[nodiscard]] std::optional&lt;int&gt; getDefaultIndex() const\n    {\n        return default_index_;\n    }\n\n    Dropdown &amp;setDefaultIndex(std::optional&lt;int&gt; default_index)\n    {\n        default_index_ = default_index;\n        return *this;\n    }\n\nprivate:\n    Message label_;\n    std::vector&lt;std::string&gt; options_;\n    std::optional&lt;int&gt; default_index_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/header_8h/","title":"File header.h","text":"<p>FileList &gt; controls &gt; header.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/header_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/header_8h/#classes","title":"Classes","text":"Type Name class Header Represents a header with a label. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/header.h</code></p>"},{"location":"reference/cpp/header_8h_source/","title":"File header.h","text":"<p>File List &gt; controls &gt; header.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Header {\npublic:\n    Header() = default;\n    explicit Header(Message label) : label_(std::move(label))\n    {\n    }\n\n    [[nodiscard]] Message getLabel() const\n    {\n        return label_;\n    }\n\n    Header &amp;setLabel(Message label)\n    {\n        label_ = std::move(label);\n        return *this;\n    }\nprivate:\n    Message label_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/label_8h/","title":"File label.h","text":"<p>FileList &gt; controls &gt; label.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/label_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/label_8h/#classes","title":"Classes","text":"Type Name class Label Represents a text label. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/label.h</code></p>"},{"location":"reference/cpp/label_8h_source/","title":"File label.h","text":"<p>File List &gt; controls &gt; label.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Label {\npublic:\n    Label() = default;\n    explicit Label(Message text) : text_(std::move(text)) {}\n\n    [[nodiscard]] Message getText() const\n    {\n        return text_;\n    }\n\n    Label &amp;setText(Message text)\n    {\n        text_ = std::move(text);\n        return *this;\n    }\n\nprivate:\n    Message text_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/slider_8h/","title":"File slider.h","text":"<p>FileList &gt; controls &gt; slider.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/slider_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/slider_8h/#classes","title":"Classes","text":"Type Name class Slider Represents a slider with a label. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/slider.h</code></p>"},{"location":"reference/cpp/slider_8h_source/","title":"File slider.h","text":"<p>File List &gt; controls &gt; slider.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Slider {\npublic:\n    Slider() = default;\n    explicit Slider(Message label, float min, float max, float step, std::optional&lt;float&gt; default_value = std::nullopt)\n        : label_(std::move(label)), min_(min), max_(max), step_(step), default_value_(default_value)\n    {\n    }\n\n    [[nodiscard]] Message getLabel() const\n    {\n        return label_;\n    }\n\n    Slider &amp;setLabel(Message label)\n    {\n        label_ = std::move(label);\n        return *this;\n    }\n\n    [[nodiscard]] float getMin() const\n    {\n        return min_;\n    }\n\n    Slider &amp;setMin(float min)\n    {\n        min_ = min;\n        return *this;\n    }\n\n    [[nodiscard]] float getMax() const\n    {\n        return max_;\n    }\n\n    Slider &amp;setMax(float max)\n    {\n        max_ = max;\n        return *this;\n    }\n\n    [[nodiscard]] float getStep() const\n    {\n        return step_;\n    }\n\n    Slider &amp;setStep(float step)\n    {\n        step_ = step;\n        return *this;\n    }\n\n    [[nodiscard]] std::optional&lt;float&gt; getDefaultValue() const\n    {\n        return default_value_;\n    }\n\n    Slider &amp;setDefaultValue(std::optional&lt;float&gt; default_value)\n    {\n        default_value_ = default_value;\n        return *this;\n    }\n\nprivate:\n    Message label_;\n    float min_;\n    float max_;\n    float step_;\n    std::optional&lt;float&gt; default_value_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/step__slider_8h/","title":"File step_slider.h","text":"<p>FileList &gt; controls &gt; step_slider.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/form/controls/dropdown.h\"</code></li> </ul>"},{"location":"reference/cpp/step__slider_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/step__slider_8h/#classes","title":"Classes","text":"Type Name class StepSlider Represents a step slider with a set of predefined options. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/step_slider.h</code></p>"},{"location":"reference/cpp/step__slider_8h_source/","title":"File step_slider.h","text":"<p>File List &gt; controls &gt; step_slider.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/form/controls/dropdown.h\"\n\nnamespace endstone {\n\nclass StepSlider : public Dropdown {\npublic:\n    using Dropdown::Dropdown;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/text__input_8h/","title":"File text_input.h","text":"<p>FileList &gt; controls &gt; text_input.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/text__input_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/text__input_8h/#classes","title":"Classes","text":"Type Name class TextInput Represents a text input field. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/text_input.h</code></p>"},{"location":"reference/cpp/text__input_8h_source/","title":"File text_input.h","text":"<p>File List &gt; controls &gt; text_input.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass TextInput {\npublic:\n    TextInput() = default;\n    explicit TextInput(Message label, Message placeholder, std::optional&lt;std::string&gt; default_text = std::nullopt)\n        : label_(std::move(label)), placeholder_(std::move(placeholder)), default_text_(std::move(default_text))\n    {\n    }\n\n    [[nodiscard]] Message getLabel() const\n    {\n        return label_;\n    }\n\n    TextInput &amp;setLabel(Message label)\n    {\n        label_ = std::move(label);\n        return *this;\n    }\n\n    [[nodiscard]] Message getPlaceholder() const\n    {\n        return placeholder_;\n    }\n\n    TextInput &amp;setPlaceholder(Message placeholder)\n    {\n        placeholder_ = std::move(placeholder);\n        return *this;\n    }\n\n    [[nodiscard]] std::optional&lt;std::string&gt; getDefaultValue() const\n    {\n        return default_text_;\n    }\n\n    TextInput &amp;setDefaultValue(std::optional&lt;std::string&gt; text)\n    {\n        default_text_ = std::move(text);\n        return *this;\n    }\n\nprivate:\n    Message label_;\n    Message placeholder_;\n    std::optional&lt;std::string&gt; default_text_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/toggle_8h/","title":"File toggle.h","text":"<p>FileList &gt; controls &gt; toggle.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/message.h\"</code></li> </ul>"},{"location":"reference/cpp/toggle_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/toggle_8h/#classes","title":"Classes","text":"Type Name class Toggle Represents a toggle button with a label. <p>The documentation for this class was generated from the following file <code>include/endstone/form/controls/toggle.h</code></p>"},{"location":"reference/cpp/toggle_8h_source/","title":"File toggle.h","text":"<p>File List &gt; controls &gt; toggle.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/message.h\"\n\nnamespace endstone {\n\nclass Toggle {\npublic:\n    Toggle() = default;\n    explicit Toggle(Message label, bool default_value = false) : label_(std::move(label)), default_value_(default_value)\n    {\n    }\n\n    [[nodiscard]] Message getLabel() const\n    {\n        return label_;\n    }\n\n    Toggle &amp;setLabel(Message label)\n    {\n        label_ = std::move(label);\n        return *this;\n    }\n\n    [[nodiscard]] bool getDefaultValue() const\n    {\n        return default_value_;\n    }\n\n    Toggle &amp;setDefaultValue(bool value)\n    {\n        default_value_ = value;\n        return *this;\n    }\n\nprivate:\n    Message label_;\n    bool default_value_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/message__form_8h/","title":"File message_form.h","text":"<p>FileList &gt; endstone &gt; form &gt; message_form.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/form/form.h\"</code></li> </ul>"},{"location":"reference/cpp/message__form_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/message__form_8h/#classes","title":"Classes","text":"Type Name class MessageForm Represents a form with two buttons. <p>The documentation for this class was generated from the following file <code>include/endstone/form/message_form.h</code></p>"},{"location":"reference/cpp/message__form_8h_source/","title":"File message_form.h","text":"<p>File List &gt; endstone &gt; form &gt; message_form.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;utility&gt;\n\n#include \"endstone/form/form.h\"\n\nnamespace endstone {\n\nclass MessageForm : public Form&lt;MessageForm&gt; {\npublic:\n    using OnSubmitCallback = std::function&lt;void(Player *, int)&gt;;\n\n    [[nodiscard]] Message getContent() const\n    {\n        return content_;\n    }\n\n    MessageForm &amp;setContent(Message text)\n    {\n        content_ = std::move(text);\n        return *this;\n    }\n\n    [[nodiscard]] Message getButton1() const\n    {\n        return button1_text_;\n    }\n\n    MessageForm &amp;setButton1(Message text)\n    {\n        button1_text_ = std::move(text);\n        return *this;\n    }\n\n    [[nodiscard]] Message getButton2() const\n    {\n        return button2_text_;\n    }\n\n    MessageForm &amp;setButton2(Message text)\n    {\n        button2_text_ = std::move(text);\n        return *this;\n    }\n\n    [[nodiscard]] OnSubmitCallback getOnSubmit() const\n    {\n        return on_submit_;\n    }\n\n    MessageForm &amp;setOnSubmit(OnSubmitCallback on_submit)\n    {\n        on_submit_ = std::move(on_submit);\n        return *this;\n    }\n\nprivate:\n    Message content_;\n    Message button1_text_;\n    Message button2_text_;\n    OnSubmitCallback on_submit_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/modal__form_8h/","title":"File modal_form.h","text":"<p>FileList &gt; endstone &gt; form &gt; modal_form.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/form/controls/dropdown.h\"</code></li> <li><code>#include \"endstone/form/controls/label.h\"</code></li> <li><code>#include \"endstone/form/controls/slider.h\"</code></li> <li><code>#include \"endstone/form/controls/step_slider.h\"</code></li> <li><code>#include \"endstone/form/controls/text_input.h\"</code></li> <li><code>#include \"endstone/form/controls/toggle.h\"</code></li> <li><code>#include \"endstone/form/controls/divider.h\"</code></li> <li><code>#include \"endstone/form/controls/header.h\"</code></li> <li><code>#include \"endstone/form/form.h\"</code></li> </ul>"},{"location":"reference/cpp/modal__form_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/modal__form_8h/#classes","title":"Classes","text":"Type Name class ModalForm Represents a modal form with controls. <p>The documentation for this class was generated from the following file <code>include/endstone/form/modal_form.h</code></p>"},{"location":"reference/cpp/modal__form_8h_source/","title":"File modal_form.h","text":"<p>File List &gt; endstone &gt; form &gt; modal_form.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/form/controls/dropdown.h\"\n#include \"endstone/form/controls/label.h\"\n#include \"endstone/form/controls/slider.h\"\n#include \"endstone/form/controls/step_slider.h\"\n#include \"endstone/form/controls/text_input.h\"\n#include \"endstone/form/controls/toggle.h\"\n#include \"endstone/form/controls/divider.h\"\n#include \"endstone/form/controls/header.h\"\n#include \"endstone/form/form.h\"\n\nnamespace endstone {\n\nclass ModalForm : public Form&lt;ModalForm&gt; {\npublic:\n    using Control = std::variant&lt;Dropdown, Label, Slider, StepSlider, TextInput, Toggle, Divider, Header&gt;;\n    using OnSubmitCallback = std::function&lt;void(Player *, std::string)&gt;;\n\n    ModalForm &amp;addControl(const Control &amp;control)\n    {\n        controls_.push_back(control);\n        return *this;\n    }\n\n    [[nodiscard]] std::vector&lt;Control&gt; getControls() const\n    {\n        return controls_;\n    }\n\n    ModalForm &amp;setControls(std::vector&lt;Control&gt; controls)\n    {\n        controls_ = std::move(controls);\n        return *this;\n    }\n\n    [[nodiscard]] std::optional&lt;Message&gt; getSubmitButton() const\n    {\n        return submit_button_text_;\n    }\n\n    ModalForm &amp;setSubmitButton(std::optional&lt;Message&gt; text)\n    {\n        submit_button_text_ = std::move(text);\n        return *this;\n    }\n\n    [[nodiscard]] std::optional&lt;std::string&gt; getIcon() const\n    {\n        return icon_;\n    }\n\n    ModalForm &amp;setIcon(std::optional&lt;std::string&gt; icon)\n    {\n        icon_ = std::move(icon);\n        return *this;\n    }\n\n    [[nodiscard]] OnSubmitCallback getOnSubmit() const\n    {\n        return on_submit_;\n    }\n\n    ModalForm &amp;setOnSubmit(OnSubmitCallback on_submit)\n    {\n        on_submit_ = std::move(on_submit);\n        return *this;\n    }\n\nprivate:\n    std::vector&lt;Control&gt; controls_;\n    std::optional&lt;Message&gt; submit_button_text_;\n    std::optional&lt;std::string&gt; icon_;\n    OnSubmitCallback on_submit_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_d1e84b530b14f41e8b6f5ec1b5dee76c/","title":"Dir include/endstone/inventory","text":"<p>FileList &gt; endstone &gt; inventory</p>"},{"location":"reference/cpp/dir_d1e84b530b14f41e8b6f5ec1b5dee76c/#files","title":"Files","text":"Type Name file equipment_slot.h file inventory.h file item_factory.h file item_stack.h file item_type.h file player_inventory.h file recipe.h"},{"location":"reference/cpp/dir_d1e84b530b14f41e8b6f5ec1b5dee76c/#directories","title":"Directories","text":"Type Name dir meta <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/</code></p>"},{"location":"reference/cpp/equipment__slot_8h/","title":"File equipment_slot.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; equipment_slot.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"reference/cpp/equipment__slot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/equipment_slot.h</code></p>"},{"location":"reference/cpp/equipment__slot_8h_source/","title":"File equipment_slot.h","text":"<p>File List &gt; endstone &gt; inventory &gt; equipment_slot.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;vector&gt;\n\nnamespace endstone {\nenum class EquipmentSlot {\n    Hand,\n    OffHand,\n    Feet,\n    Legs,\n    Chest,\n    Head,\n    Body\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_2d728641c8c30e7cdff7ab60efc98406/","title":"Dir include/endstone/inventory/meta","text":"<p>FileList &gt; endstone &gt; inventory &gt; meta</p>"},{"location":"reference/cpp/dir_2d728641c8c30e7cdff7ab60efc98406/#files","title":"Files","text":"Type Name file item_meta.h file map_meta.h <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/meta/</code></p>"},{"location":"reference/cpp/item__meta_8h/","title":"File item_meta.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; meta &gt; item_meta.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/enchantments/enchantment.h\"</code></li> </ul>"},{"location":"reference/cpp/item__meta_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/item__meta_8h/#classes","title":"Classes","text":"Type Name class ItemMeta Represents the metadata of a generic item. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/meta/item_meta.h</code></p>"},{"location":"reference/cpp/item__meta_8h_source/","title":"File item_meta.h","text":"<p>File List &gt; endstone &gt; inventory &gt; meta &gt; item_meta.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/enchantments/enchantment.h\"\n\nnamespace endstone {\nclass ItemMeta {\npublic:\n    enum class Type {\n        Item,\n        Map,\n    };\n\n    explicit ItemMeta(const ItemMeta *meta)\n    {\n        if (meta == nullptr) {\n            return;\n        }\n        display_name_ = meta-&gt;display_name_;\n        lore_ = meta-&gt;lore_;\n        enchantments_ = meta-&gt;enchantments_;\n        repair_cost_ = meta-&gt;repair_cost_;\n        damage_ = meta-&gt;damage_;\n        unbreakable_ = meta-&gt;unbreakable_;\n    }\n\n    virtual ~ItemMeta() = default;\n\n    [[nodiscard]] virtual Type getType() const\n    {\n        return Type::Item;\n    }\n\n    [[nodiscard]] virtual bool isEmpty() const\n    {\n        return !(hasDisplayName() || hasLore() || hasEnchants() || hasRepairCost() || isUnbreakable() || hasDamage());\n    }\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemMeta&gt; clone() const\n    {\n        return std::make_unique&lt;ItemMeta&gt;(this);\n    }\n\n    [[nodiscard]] bool hasDisplayName() const\n    {\n        return !display_name_.empty();\n    }\n\n    [[nodiscard]] std::string getDisplayName() const\n    {\n        return display_name_;\n    }\n\n    void setDisplayName(std::optional&lt;std::string&gt; name)\n    {\n        display_name_ = std::move(name.value_or(\"\"));\n    }\n\n    [[nodiscard]] bool hasLore() const\n    {\n        return !lore_.empty();\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getLore() const\n    {\n        return lore_;\n    }\n\n    void setLore(std::optional&lt;std::vector&lt;std::string&gt;&gt; lore)\n    {\n        if (!lore.has_value() || lore.value().empty()) {\n            lore_.clear();\n        }\n        else {\n            lore_ = std::move(lore.value());\n        }\n    }\n\n    [[nodiscard]] bool hasDamage() const\n    {\n        return damage_ &gt; 0;\n    }\n\n    [[nodiscard]] int getDamage() const\n    {\n        return damage_;\n    }\n\n    void setDamage(int damage)\n    {\n        damage_ = damage;\n    }\n\n    [[nodiscard]] bool hasEnchants() const\n    {\n        return !enchantments_.empty();\n    }\n\n    [[nodiscard]] bool hasEnchant(const std::string &amp;id) const\n    {\n        return hasEnchants() &amp;&amp; enchantments_.contains(id);\n    }\n\n    [[nodiscard]] int getEnchantLevel(const std::string &amp;id) const\n    {\n        if (!hasEnchant(id)) {\n            return 0;\n        }\n        return enchantments_.at(id);\n    }\n\n    [[nodiscard]] std::unordered_map&lt;std::string, int&gt; getEnchants() const\n    {\n        if (hasEnchants()) {\n            return enchantments_;\n        }\n        return {};\n    }\n\n    bool addEnchant(const std::string &amp;id, int level, bool force = false)\n    {\n        const auto *ench = Enchantment::get(id);\n        if (!ench) {\n            return false;\n        }\n        if (force || level &gt;= ench-&gt;getStartLevel() &amp;&amp; level &lt;= ench-&gt;getMaxLevel()) {\n            const auto old = getEnchantLevel(id);\n            enchantments_[id] = level;\n            return old == 0 || old != level;\n        }\n        return false;\n    }\n\n    bool removeEnchant(const std::string &amp;id)\n    {\n        return enchantments_.erase(id) &gt; 0;\n    }\n\n    void removeEnchants()\n    {\n        enchantments_.clear();\n    }\n\n    [[nodiscard]] bool hasRepairCost() const\n    {\n        return repair_cost_ &gt; 0;\n    }\n\n    [[nodiscard]] int getRepairCost() const\n    {\n        return repair_cost_;\n    }\n\n    void setRepairCost(int cost)\n    {\n        repair_cost_ = cost;\n    }\n\n    [[nodiscard]] bool isUnbreakable() const\n    {\n        return unbreakable_;\n    }\n\n    void setUnbreakable(bool unbreakable)\n    {\n        unbreakable_ = unbreakable;\n    }\n\n    template &lt;typename T&gt;\n    T *as()\n    {\n        if (getType() == T::TYPE) {\n            return static_cast&lt;T *&gt;(this);\n        }\n        return nullptr;\n    }\n\n    template &lt;typename T&gt;\n    const T *as() const\n    {\n        if (getType() == T::TYPE) {\n            return static_cast&lt;const T *&gt;(this);\n        }\n        return nullptr;\n    }\n\nprivate:\n    std::string display_name_;\n    std::vector&lt;std::string&gt; lore_;\n    std::unordered_map&lt;std::string, int&gt; enchantments_;\n    int repair_cost_ = 0;\n    int damage_ = 0;\n    bool unbreakable_ = false;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/map__meta_8h/","title":"File map_meta.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; meta &gt; map_meta.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/detail/endstone.h\"</code></li> <li><code>#include \"endstone/inventory/meta/item_meta.h\"</code></li> <li><code>#include \"endstone/map/map_view.h\"</code></li> </ul>"},{"location":"reference/cpp/map__meta_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/map__meta_8h/#classes","title":"Classes","text":"Type Name class MapMeta Represents the metadata for a map item. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/meta/map_meta.h</code></p>"},{"location":"reference/cpp/map__meta_8h_source/","title":"File map_meta.h","text":"<p>File List &gt; endstone &gt; inventory &gt; meta &gt; map_meta.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/detail/endstone.h\"\n#include \"endstone/inventory/meta/item_meta.h\"\n#include \"endstone/map/map_view.h\"\n\nnamespace endstone {\nclass MapMeta final : public ItemMeta {\npublic:\n    explicit MapMeta(const ItemMeta *meta) : ItemMeta(meta)\n    {\n        const auto *map = meta ? meta-&gt;as&lt;MapMeta&gt;() : nullptr;\n        if (!map) {\n            return;\n        }\n        map_id_ = map-&gt;map_id_;\n    }\n\n    static constexpr auto TYPE = Type::Map;\n    [[nodiscard]] Type getType() const override\n    {\n        return TYPE;\n    }\n\n    [[nodiscard]] bool isEmpty() const override\n    {\n        return ItemMeta::isEmpty() &amp;&amp; isMapEmpty();\n    }\n\n    [[nodiscard]] std::unique_ptr&lt;ItemMeta&gt; clone() const override\n    {\n        return std::make_unique&lt;MapMeta&gt;(this);\n    }\n\n    [[nodiscard]] bool hasMapId() const\n    {\n        return map_id_ != -1;\n    }\n\n    [[nodiscard]] std::int64_t getMapId() const\n    {\n        return map_id_;\n    }\n\n    void setMapId(std::int64_t id)\n    {\n        map_id_ = id;\n    }\n\n    [[nodiscard]] bool hasMapView() const\n    {\n        return hasMapId();\n    }\n\n    [[nodiscard]] MapView *getMapView() const\n    {\n        return Endstone::getServer().getMap(getMapId());\n    }\n\n    void setMapView(const MapView *map)\n    {\n        map_id_ = map ? map-&gt;getId() : -1;\n    }\n\nprotected:\n    [[nodiscard]] bool isMapEmpty() const\n    {\n        return !(hasMapId());  // TODO(map): add hasScaling\n    }\n\nprivate:\n    std::int64_t map_id_ = -1;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/inventory_8h/","title":"File inventory.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; inventory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/inventory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/inventory_8h/#classes","title":"Classes","text":"Type Name class Inventory Interface to the various inventories. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/inventory.h</code></p>"},{"location":"reference/cpp/inventory_8h_source/","title":"File inventory.h","text":"<p>File List &gt; endstone &gt; inventory &gt; inventory.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\nclass ItemStack;\nclass ItemType;\nclass Inventory {\npublic:\n    virtual ~Inventory() = default;\n    [[nodiscard]] virtual int getSize() const = 0;\n\n    [[nodiscard]] virtual int getMaxStackSize() const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getItem(int index) const = 0;\n\n    virtual void setItem(int index, const ItemStack *item) = 0;\n\n    virtual std::unordered_map&lt;int, ItemStack *&gt; addItem(std::vector&lt;ItemStack *&gt; items) = 0;\n\n    virtual std::unordered_map&lt;int, ItemStack *&gt; removeItem(std::vector&lt;ItemStack *&gt; items) = 0;\n\n    template &lt;typename... Args, typename = std::enable_if_t&lt;(std::is_convertible_v&lt;Args, ItemStack &amp;&gt; &amp;&amp; ...)&gt;&gt;\n    std::unordered_map&lt;int, ItemStack *&gt; addItem(Args &amp;&amp;...items)\n    {\n        return addItem(std::vector&lt;ItemStack *&gt;{&amp;items...});\n    }\n\n    template &lt;typename... Args, typename = std::enable_if_t&lt;(std::is_convertible_v&lt;Args, ItemStack &amp;&gt; &amp;&amp; ...)&gt;&gt;\n    std::unordered_map&lt;int, ItemStack *&gt; removeItem(Args &amp;&amp;...items)\n    {\n        return removeItem(std::vector&lt;ItemStack *&gt;{&amp;items...});\n    }\n\n    [[nodiscard]] virtual std::vector&lt;std::unique_ptr&lt;ItemStack&gt;&gt; getContents() const = 0;\n\n    virtual Result&lt;void&gt; setContents(std::vector&lt;const ItemStack *&gt; items) = 0;\n\n    [[nodiscard]] virtual bool contains(const std::string &amp;type) const = 0;\n\n    [[nodiscard]] virtual bool contains(const ItemStack &amp;item) const = 0;\n\n    [[nodiscard]] virtual bool contains(const ItemStack &amp;item, int amount) const = 0;\n\n    [[nodiscard]] virtual bool containsAtLeast(const std::string &amp;type, int amount) const = 0;\n\n    [[nodiscard]] virtual bool containsAtLeast(const ItemStack &amp;item, int amount) const = 0;\n\n    [[nodiscard]] virtual std::unordered_map&lt;int, std::unique_ptr&lt;ItemStack&gt;&gt; all(const std::string &amp;type) const = 0;\n\n    [[nodiscard]] virtual std::unordered_map&lt;int, std::unique_ptr&lt;ItemStack&gt;&gt; all(const ItemStack &amp;item) const = 0;\n\n    [[nodiscard]] virtual int first(const std::string &amp;type) const = 0;\n\n    [[nodiscard]] virtual int first(const ItemStack &amp;item) const = 0;\n\n    [[nodiscard]] virtual int firstEmpty() const = 0;\n\n    [[nodiscard]] virtual bool isEmpty() const = 0;\n\n    virtual void remove(const std::string &amp;type) = 0;\n\n    virtual void remove(const ItemStack &amp;item) = 0;\n\n    virtual void clear(int index) = 0;\n\n    virtual void clear() = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/item__factory_8h/","title":"File item_factory.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; item_factory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/inventory/meta/item_meta.h\"</code></li> </ul>"},{"location":"reference/cpp/item__factory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/item__factory_8h/#classes","title":"Classes","text":"Type Name class ItemFactory <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_factory.h</code></p>"},{"location":"reference/cpp/item__factory_8h_source/","title":"File item_factory.h","text":"<p>File List &gt; endstone &gt; inventory &gt; item_factory.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/inventory/meta/item_meta.h\"\n\nnamespace endstone {\nclass ItemFactory {\npublic:\n    virtual ~ItemFactory() = default;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemMeta&gt; getItemMeta(const std::string &amp;type) const = 0;\n\n    [[nodiscard]] virtual bool isApplicable(const ItemMeta *meta, const std::string &amp;type) const = 0;\n\n    [[nodiscard]] virtual bool equals(const ItemMeta *meta1, const ItemMeta *meta2) const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemMeta&gt; asMetaFor(const ItemMeta *meta, const std::string &amp;type) const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/item__stack_8h/","title":"File item_stack.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; item_stack.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include \"endstone/detail/endstone.h\"</code></li> <li><code>#include \"endstone/inventory/item_factory.h\"</code></li> <li><code>#include \"endstone/inventory/item_type.h\"</code></li> <li><code>#include \"endstone/inventory/meta/item_meta.h\"</code></li> <li><code>#include \"endstone/registry.h\"</code></li> </ul>"},{"location":"reference/cpp/item__stack_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace core"},{"location":"reference/cpp/item__stack_8h/#classes","title":"Classes","text":"Type Name class ItemStack Represents a stack of items. struct formatter&lt; endstone::ItemStack &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_stack.h</code></p>"},{"location":"reference/cpp/item__stack_8h_source/","title":"File item_stack.h","text":"<p>File List &gt; endstone &gt; inventory &gt; item_stack.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n\n#include \"endstone/detail/endstone.h\"\n#include \"endstone/inventory/item_factory.h\"\n#include \"endstone/inventory/item_type.h\"\n#include \"endstone/inventory/meta/item_meta.h\"\n#include \"endstone/registry.h\"\n\nnamespace endstone {\n\nnamespace core {\nclass EndstoneItemStack;\n}\n\nclass ItemStack {\n    explicit ItemStack(const std::string &amp;type = \"minecraft:air\", const int amount = 1, const int data = 0)\n    {\n        type_ = type;\n        amount_ = amount;\n        data_ = data;\n    }\n\npublic:\n    ItemStack(const ItemStack &amp;stack) : type_(stack.getType()), amount_(stack.getAmount()), data_(stack.getData())\n    {\n        if (stack.hasItemMeta()) {\n            ItemStack::setItemMeta(stack.getItemMeta().get());\n        }\n    }\n\n    static Result&lt;ItemStack&gt; create(const ItemType &amp;type, const int amount = 1, const int data = 0)\n    {\n        ENDSTONE_CHECKF(amount &gt;= 1 &amp;&amp; amount &lt;= 0xff, \"Item stack amount must be between 1 to 255, got {}.\", amount);\n        return ItemStack(type.getId(), amount, data);\n    }\n\n    static Result&lt;ItemStack&gt; create(const std::string &amp;type, const int amount = 1, const int data = 0)\n    {\n        const auto *item_type = ItemType::get(type);\n        ENDSTONE_CHECKF(item_type != nullptr, \"Unknown item type: {}\", type);\n        return create(*item_type, amount, data);\n    }\n\n    virtual ~ItemStack() = default;\n\nprotected:\n    friend class core::EndstoneItemStack;\n    [[nodiscard]] virtual bool isEndstoneItemStack() const\n    {\n        return false;\n    }\n\npublic:\n    [[nodiscard]] virtual std::string getType() const\n    {\n        return type_;\n    }\n\n    virtual Result&lt;void&gt; setType(const std::string &amp;type)\n    {\n        const auto *item_type = ItemType::get(type);\n        ENDSTONE_CHECKF(item_type != nullptr, \"Unknown item type: {}\", type);\n        type_ = type;\n        if (meta_ != nullptr) {\n            meta_ = Endstone::getServer().getItemFactory().asMetaFor(meta_.get(), type);\n        }\n        return {};\n    }\n\n    [[nodiscard]] virtual int getAmount() const\n    {\n        return amount_;\n    }\n\n    virtual Result&lt;void&gt; setAmount(const int amount)\n    {\n        ENDSTONE_CHECKF(amount &gt;= 1 &amp;&amp; amount &lt;= 0xff, \"Item stack amount must be between 1 to 255, got {}.\", amount);\n        amount_ = amount;\n        return {};\n    }\n\n    [[nodiscard]] virtual int getData() const\n    {\n        return data_;\n    }\n\n    virtual void setData(const int data)\n    {\n        data_ = data;\n    }\n\n    [[nodiscard]] virtual std::string getTranslationKey() const\n    {\n        const auto *item_type = ItemType::get(getType());\n        if (!item_type) {\n            return \"item.air.name\";\n        }\n        return item_type-&gt;getTranslationKey(getData());\n    }\n\n    [[nodiscard]] virtual int getMaxStackSize() const\n    {\n        auto *item_type = ItemType::get(getType());\n        if (!item_type) {\n            return 0;\n        }\n        return item_type-&gt;getMaxStackSize();\n    }\n\n    bool operator==(const ItemStack &amp;other) const\n    {\n        if (&amp;other == this) {\n            return true;\n        }\n        return getAmount() == other.getAmount() &amp;&amp; isSimilar(other);\n    }\n\n    bool operator!=(const ItemStack &amp;other) const\n    {\n        return !(*this == other);\n    }\n\n    [[nodiscard]] virtual bool isSimilar(const ItemStack &amp;other) const\n    {\n        if (&amp;other == this) {\n            return true;\n        }\n        return getType() == other.getType() &amp;&amp; hasItemMeta() == other.hasItemMeta() &amp;&amp;\n               (hasItemMeta()\n                    ? Endstone::getServer().getItemFactory().equals(getItemMeta().get(), other.getItemMeta().get())\n                    : true);\n    }\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemMeta&gt; getItemMeta() const\n    {\n        return meta_ == nullptr ? Endstone::getServer().getItemFactory().getItemMeta(type_) : meta_-&gt;clone();\n    }\n\n    [[nodiscard]] virtual bool hasItemMeta() const\n    {\n        return !Endstone::getServer().getItemFactory().equals(meta_.get(), nullptr);\n    }\n\n    virtual bool setItemMeta(ItemMeta *meta)\n    {\n        return setItemMeta0(meta, type_);\n    }\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; clone() const\n    {\n        return std::make_unique&lt;ItemStack&gt;(*this);\n    }\n\nprivate:\n    bool setItemMeta0(const ItemMeta *meta, const std::string &amp;type)\n    {\n        if (!meta) {\n            meta_ = nullptr;\n            return true;\n        }\n\n        const auto &amp;item_factory = Endstone::getServer().getItemFactory();\n        if (!item_factory.isApplicable(meta, type)) {\n            return false;\n        }\n\n        meta_ = item_factory.asMetaFor(meta, type);\n        return true;\n    }\n\n    std::string type_ = \"minecraft:air\";\n    int amount_ = 0;\n    int data_ = 0;\n    std::unique_ptr&lt;ItemMeta&gt; meta_ = nullptr;\n};\n\n}  // namespace endstone\n\ntemplate &lt;&gt;\nstruct fmt::formatter&lt;endstone::ItemStack&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::ItemStack;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"ItemStack({} x {})\", val.getType(), val.getAmount());\n    }\n};  // namespace fmt\n</code></pre>"},{"location":"reference/cpp/item__type_8h/","title":"File item_type.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; item_type.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/detail/endstone.h\"</code></li> <li><code>#include \"endstone/registry.h\"</code></li> </ul>"},{"location":"reference/cpp/item__type_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/item__type_8h/#classes","title":"Classes","text":"Type Name class ItemType Represents an item type. struct formatter&lt; endstone::ItemType &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/item_type.h</code></p>"},{"location":"reference/cpp/item__type_8h_source/","title":"File item_type.h","text":"<p>File List &gt; endstone &gt; inventory &gt; item_type.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/detail/endstone.h\"\n#include \"endstone/registry.h\"\n\nnamespace endstone {\nclass ItemType {\npublic:\n    virtual ~ItemType() = default;\n    [[nodiscard]] virtual std::string getId() const = 0;\n\n    [[nodiscard]] virtual std::string getTranslationKey() const = 0;\n\n    [[nodiscard]] virtual std::string getTranslationKey(int data) const = 0;\n\n    [[nodiscard]] virtual int getMaxStackSize() const = 0;\n\n    [[nodiscard]] virtual int getMaxDurability() const = 0;\n\n    static const ItemType *get(const std::string &amp;name)\n    {\n        return Endstone::getServer().getItemRegistry().get(name);\n    }\n\n    bool operator==(const std::string_view other) const\n    {\n        return getId() == other;\n    }\n\n    bool operator!=(const std::string_view other) const\n    {\n        return !(*this == other);\n    }\n\n    bool operator==(const ItemType &amp;other) const\n    {\n        return getId() == other.getId();\n    }\n\n    bool operator!=(const ItemType &amp;other) const\n    {\n        return !(*this == other);\n    }\n};\n}  // namespace endstone\n\ntemplate &lt;&gt;\nstruct fmt::formatter&lt;endstone::ItemType&gt; : formatter&lt;string_view&gt; {\n    using Type = endstone::ItemType;\n\n    template &lt;typename FormatContext&gt;\n    auto format(const Type &amp;val, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"{}\", val.getId());\n    }\n};  // namespace fmt\n</code></pre>"},{"location":"reference/cpp/player__inventory_8h/","title":"File player_inventory.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; player_inventory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/inventory/inventory.h\"</code></li> </ul>"},{"location":"reference/cpp/player__inventory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player__inventory_8h/#classes","title":"Classes","text":"Type Name class PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/player_inventory.h</code></p>"},{"location":"reference/cpp/player__inventory_8h_source/","title":"File player_inventory.h","text":"<p>File List &gt; endstone &gt; inventory &gt; player_inventory.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/inventory/inventory.h\"\n\nnamespace endstone {\n\nclass PlayerInventory : public Inventory {\npublic:\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getHelmet() const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getChestplate() const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getLeggings() const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getBoots() const = 0;\n\n    virtual void setHelmet(const ItemStack *helmet) = 0;\n\n    virtual void setChestplate(const ItemStack *chestplate) = 0;\n\n    virtual void setLeggings(const ItemStack *leggings) = 0;\n\n    virtual void setBoots(const ItemStack *boots) = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getItemInMainHand() const = 0;\n\n    virtual void setItemInMainHand(const ItemStack *item) = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getItemInOffHand() const = 0;\n\n    virtual void setItemInOffHand(const ItemStack *item) = 0;\n\n    [[nodiscard]] virtual int getHeldItemSlot() const = 0;\n\n    virtual Result&lt;void&gt; setHeldItemSlot(int slot) = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/recipe_8h/","title":"File recipe.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; recipe.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/inventory/item_stack.h\"</code></li> </ul>"},{"location":"reference/cpp/recipe_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/recipe_8h/#classes","title":"Classes","text":"Type Name class Recipe Represents some type of crafting recipe. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/recipe.h</code></p>"},{"location":"reference/cpp/recipe_8h_source/","title":"File recipe.h","text":"<p>File List &gt; endstone &gt; inventory &gt; recipe.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/inventory/item_stack.h\"\n\nnamespace endstone {\nclass Recipe {\npublic:\n    virtual ~Recipe() = default;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;ItemStack&gt; getResult() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_cd2600a5c389b96acc106cf97f774d1c/","title":"Dir include/endstone/lang","text":"<p>FileList &gt; endstone &gt; lang</p>"},{"location":"reference/cpp/dir_cd2600a5c389b96acc106cf97f774d1c/#files","title":"Files","text":"Type Name file language.h file translatable.h <p>The documentation for this class was generated from the following file <code>include/endstone/lang/</code></p>"},{"location":"reference/cpp/language_8h/","title":"File language.h","text":"<p>FileList &gt; endstone &gt; lang &gt; language.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/lang/translatable.h\"</code></li> </ul>"},{"location":"reference/cpp/language_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/language_8h/#classes","title":"Classes","text":"Type Name class Language Represents the interface for translating text into different languages. <p>The documentation for this class was generated from the following file <code>include/endstone/lang/language.h</code></p>"},{"location":"reference/cpp/language_8h_source/","title":"File language.h","text":"<p>File List &gt; endstone &gt; lang &gt; language.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/lang/translatable.h\"\n\nnamespace endstone {\n\nclass Language {\npublic:\n    virtual ~Language() = default;\n\n    [[nodiscard]] virtual std::string translate(std::string text) const = 0;\n\n    [[nodiscard]] virtual std::string translate(std::string text, std::string locale) const = 0;\n\n    [[nodiscard]] virtual std::string translate(std::string text, std::vector&lt;std::string&gt; params) const = 0;\n\n    [[nodiscard]] virtual std::string translate(std::string text, std::vector&lt;std::string&gt; params,\n                                                std::string locale) const = 0;\n\n    [[nodiscard]] virtual std::string translate(Translatable translatable) const = 0;\n\n    [[nodiscard]] virtual std::string translate(Translatable translatable, std::string locale) const = 0;\n\n    [[nodiscard]] virtual std::string getLocale() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/translatable_8h/","title":"File translatable.h","text":"<p>FileList &gt; endstone &gt; lang &gt; translatable.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"reference/cpp/translatable_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/translatable_8h/#classes","title":"Classes","text":"Type Name class Translatable Represents an object with a text representation that can be translated by the Minecraft client. <p>The documentation for this class was generated from the following file <code>include/endstone/lang/translatable.h</code></p>"},{"location":"reference/cpp/translatable_8h_source/","title":"File translatable.h","text":"<p>File List &gt; endstone &gt; lang &gt; translatable.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\nnamespace endstone {\n\nclass Translatable {\npublic:\n    explicit Translatable(std::string text, std::vector&lt;std::string&gt; params = {})\n        : text_(std::move(text)), params_(std::move(params))\n    {\n    }\n\n    [[nodiscard]] const std::string &amp;getText() const\n    {\n        return text_;\n    }\n\n    [[nodiscard]] const std::vector&lt;std::string&gt; &amp;getParameters() const\n    {\n        return params_;\n    }\n\n    [[nodiscard]] bool empty() const\n    {\n        return text_.empty();\n    }\n\nprivate:\n    std::string text_;\n    std::vector&lt;std::string&gt; params_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_8e239ca1e5fd0d936d66a30330d3a329/","title":"Dir include/endstone/level","text":"<p>FileList &gt; endstone &gt; level</p>"},{"location":"reference/cpp/dir_8e239ca1e5fd0d936d66a30330d3a329/#files","title":"Files","text":"Type Name file chunk.h file dimension.h file level.h file location.h <p>The documentation for this class was generated from the following file <code>include/endstone/level/</code></p>"},{"location":"reference/cpp/chunk_8h/","title":"File chunk.h","text":"<p>FileList &gt; endstone &gt; level &gt; chunk.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/actor.h\"</code></li> </ul>"},{"location":"reference/cpp/chunk_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/chunk_8h/#classes","title":"Classes","text":"Type Name class Chunk Represents a chunk of blocks. struct formatter&lt; endstone::Chunk &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/level/chunk.h</code></p>"},{"location":"reference/cpp/chunk_8h_source/","title":"File chunk.h","text":"<p>File List &gt; endstone &gt; level &gt; chunk.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/actor.h\"\n\nnamespace endstone {\n\nclass Chunk {\npublic:\n    virtual ~Chunk() = default;\n\n    [[nodiscard]] virtual int getX() const = 0;\n\n    [[nodiscard]] virtual int getZ() const = 0;\n\n    [[nodiscard]] virtual Level &amp;getLevel() const = 0;\n\n    [[nodiscard]] virtual Dimension &amp;getDimension() const = 0;\n};\n\n}  // namespace endstone\n\ntemplate &lt;&gt;\nstruct fmt::formatter&lt;endstone::Chunk&gt; : formatter&lt;string_view&gt; {\n    template &lt;typename FormatContext&gt;\n    auto format(const endstone::Chunk &amp;self, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"Chunk(x={}, z={})\", self.getX(), self.getZ());\n    }\n};\n</code></pre>"},{"location":"reference/cpp/dimension_8h/","title":"File dimension.h","text":"<p>FileList &gt; endstone &gt; level &gt; dimension.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/block/block.h\"</code></li> <li><code>#include \"endstone/inventory/item_stack.h\"</code></li> <li><code>#include \"endstone/level/chunk.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/dimension_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/dimension_8h/#classes","title":"Classes","text":"Type Name class Dimension Represents a dimension within a Level . struct formatter&lt; endstone::Dimension &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/level/dimension.h</code></p>"},{"location":"reference/cpp/dimension_8h_source/","title":"File dimension.h","text":"<p>File List &gt; endstone &gt; level &gt; dimension.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/block/block.h\"\n#include \"endstone/inventory/item_stack.h\"\n#include \"endstone/level/chunk.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass Dimension {\npublic:\n    enum class Type {\n        Overworld = 0,\n        Nether = 1,\n        TheEnd = 2,\n        Custom = 999\n    };\n\n    virtual ~Dimension() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual Type getType() const = 0;\n\n    [[nodiscard]] virtual Level &amp;getLevel() const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Block&gt; getBlockAt(int x, int y, int z) const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Block&gt; getBlockAt(Location location) const = 0;\n\n    [[nodiscard]] virtual int getHighestBlockYAt(int x, int z) const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Block&gt; getHighestBlockAt(int x, int z) const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Block&gt; getHighestBlockAt(Location location) const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;std::unique_ptr&lt;Chunk&gt;&gt; getLoadedChunks() = 0;\n\n    [[nodiscard]] virtual Item &amp;dropItem(Location location, ItemStack &amp;item) = 0;\n\n    [[nodiscard]] virtual Actor *spawnActor(Location location, std::string type) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Actor *&gt; getActors() const = 0;\n};\n}  // namespace endstone\n\ntemplate &lt;&gt;\nstruct fmt::formatter&lt;endstone::Dimension&gt; : formatter&lt;string_view&gt; {\n    template &lt;typename FormatContext&gt;\n    auto format(const endstone::Dimension &amp;self, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        return fmt::format_to(ctx.out(), \"Dimension(name={})\", self.getName());\n    }\n};\n</code></pre>"},{"location":"reference/cpp/level_8h/","title":"File level.h","text":"<p>FileList &gt; endstone &gt; level &gt; level.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/actor/actor.h\"</code></li> </ul>"},{"location":"reference/cpp/level_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/level_8h/#classes","title":"Classes","text":"Type Name class Level Represents a level, which may contain actors, chunks and blocks. <p>The documentation for this class was generated from the following file <code>include/endstone/level/level.h</code></p>"},{"location":"reference/cpp/level_8h_source/","title":"File level.h","text":"<p>File List &gt; endstone &gt; level &gt; level.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n\n#include \"endstone/actor/actor.h\"\n\nnamespace endstone {\n\nclass Level {\npublic:\n    virtual ~Level() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Actor *&gt; getActors() const = 0;\n\n    [[nodiscard]] virtual int getTime() const = 0;\n\n    virtual void setTime(int time) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Dimension *&gt; getDimensions() const = 0;\n\n    [[nodiscard]] virtual Dimension *getDimension(std::string name) const = 0;\n\n    [[nodiscard]] virtual std::int64_t getSeed() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/location_8h/","title":"File location.h","text":"<p>FileList &gt; endstone &gt; level &gt; location.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include &lt;numbers&gt;</code></li> <li><code>#include \"endstone/util/vector.h\"</code></li> </ul>"},{"location":"reference/cpp/location_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/location_8h/#classes","title":"Classes","text":"Type Name class Location Represents a 3-dimensional location in a dimension within a level. struct formatter&lt; endstone::Location &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/level/location.h</code></p>"},{"location":"reference/cpp/location_8h_source/","title":"File location.h","text":"<p>File List &gt; endstone &gt; level &gt; location.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;cmath&gt;\n#include &lt;numbers&gt;\n\n#include \"endstone/util/vector.h\"\n\nnamespace endstone {\n\nclass Dimension;\n\nclass Location : public Vector {\npublic:\n    template &lt;typename T, typename = std::enable_if_t&lt;std::is_convertible_v&lt;T, float&gt;&gt;&gt;\n    Location(T x, T y, T z, const float pitch = 0.0, const float yaw = 0.0)\n        : Vector(x, y, z), dimension_(nullptr), pitch_(pitch), yaw_(yaw)\n    {\n    }\n\n    template &lt;typename T, typename = std::enable_if_t&lt;std::is_convertible_v&lt;T, float&gt;&gt;&gt;\n    Location(T x, T y, T z, Dimension &amp;dimension) : Location(x, y, z, 0.0, dimension)\n    {\n    }\n\n    template &lt;typename T, typename = std::enable_if_t&lt;std::is_convertible_v&lt;T, float&gt;&gt;&gt;\n    Location(T x, T y, T z, const float pitch, Dimension &amp;dimension) : Location(x, y, z, pitch, 0.0, dimension)\n    {\n    }\n\n    template &lt;typename T, typename = std::enable_if_t&lt;std::is_convertible_v&lt;T, float&gt;&gt;&gt;\n    Location(T x, T y, T z, const float pitch, const float yaw, Dimension &amp;dimension)\n        : Vector(x, y, z), dimension_(&amp;dimension), pitch_(pitch), yaw_(yaw)\n    {\n    }\n\n    [[nodiscard]] float getPitch() const\n    {\n        return pitch_;\n    }\n\n    void setPitch(float pitch)\n    {\n        pitch_ = pitch;\n    }\n\n    [[nodiscard]] float getYaw() const\n    {\n        return yaw_;\n    }\n\n    void setYaw(float yaw)\n    {\n        yaw_ = yaw;\n    }\n\n    [[nodiscard]] Dimension *getDimension() const\n    {\n        return dimension_;\n    }\n\n    void setDimension(Dimension &amp;dimension)\n    {\n        dimension_ = &amp;dimension;\n    }\n\n    [[nodiscard]] int getBlockX() const\n    {\n        return static_cast&lt;int&gt;(std::floorf(x_));\n    }\n\n    [[nodiscard]] int getBlockY() const\n    {\n        return static_cast&lt;int&gt;(std::floorf(y_));\n    }\n\n    [[nodiscard]] int getBlockZ() const\n    {\n        return static_cast&lt;int&gt;(std::floorf(z_));\n    }\n\n    [[nodiscard]] Vector getDirection() const\n    {\n        Vector vector;\n        const auto rot_x = getYaw() * std::numbers::pi / 180.0F;\n        const auto rot_y = getPitch() * std::numbers::pi / 180.0F;\n        vector.setY(-std::sin(rot_y));\n        const double xz = std::cos(rot_y);\n        vector.setX(-xz * std::sin(rot_x));\n        vector.setZ(xz * std::cos(rot_x));\n        return vector;\n    }\n\nprivate:\n    float pitch_;  // Rotation around the right axis (around X axis).\n    float yaw_;    // Rotation around the up axis (around Y axis)\n    Dimension *dimension_;\n};\n}  // namespace endstone\n\ntemplate &lt;&gt;\nstruct fmt::formatter&lt;endstone::Location&gt; : formatter&lt;string_view&gt; {\n    template &lt;typename FormatContext&gt;\n    auto format(const endstone::Location &amp;self, FormatContext &amp;ctx) const -&gt; format_context::iterator\n    {\n        auto out = ctx.out();\n        if (self.getDimension()) {\n            out = fmt::format_to(out, \"Location(dimension={},\", *self.getDimension());\n        }\n        else {\n            out = fmt::format_to(out, \"Location(dimension=null,\");\n        }\n        return fmt::format_to(out, \"x={},y={},z={},pitch={},yaw={})\", self.getX(), self.getY(), self.getZ(),\n                              self.getPitch(), self.getYaw());\n    }\n};\n</code></pre>"},{"location":"reference/cpp/dir_35fd4abc90217931459f3a8776f2bf4e/","title":"Dir include/endstone/map","text":"<p>FileList &gt; endstone &gt; map</p>"},{"location":"reference/cpp/dir_35fd4abc90217931459f3a8776f2bf4e/#files","title":"Files","text":"Type Name file map_canvas.h file map_cursor.h file map_renderer.h file map_view.h <p>The documentation for this class was generated from the following file <code>include/endstone/map/</code></p>"},{"location":"reference/cpp/map__canvas_8h/","title":"File map_canvas.h","text":"<p>FileList &gt; endstone &gt; map &gt; map_canvas.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/map/map_cursor.h\"</code></li> <li><code>#include \"endstone/util/color.h\"</code></li> <li><code>#include \"endstone/util/image.h\"</code></li> </ul>"},{"location":"reference/cpp/map__canvas_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/map__canvas_8h/#classes","title":"Classes","text":"Type Name class MapCanvas Represents a canvas for drawing to a map. <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_canvas.h</code></p>"},{"location":"reference/cpp/map__canvas_8h_source/","title":"File map_canvas.h","text":"<p>File List &gt; endstone &gt; map &gt; map_canvas.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/map/map_cursor.h\"\n#include \"endstone/util/color.h\"\n#include \"endstone/util/image.h\"\n\nnamespace endstone {\n\nclass MapView;\n\nclass MapCanvas {\npublic:\n    virtual ~MapCanvas() = default;\n\n    [[nodiscard]] virtual MapView &amp;getMapView() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;MapCursor&gt; getCursors() const = 0;\n\n    virtual void setCursors(const std::vector&lt;MapCursor&gt; &amp;cursors) = 0;\n\n    virtual void setPixelColor(int x, int y, Color color) = 0;\n\n    [[nodiscard]] virtual Result&lt;Color&gt; getPixelColor(int x, int y) const = 0;\n\n    [[nodiscard]] virtual Result&lt;Color&gt; getBasePixelColor(int x, int y) const = 0;\n\n    virtual void setPixel(int x, int y, std::uint32_t color) = 0;\n\n    [[nodiscard]] virtual std::uint32_t getPixel(int x, int y) const = 0;\n\n    [[nodiscard]] virtual std::uint32_t getBasePixel(int x, int y) const = 0;\n\n    virtual void drawImage(int x, int y, const Image &amp;image) = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/map__cursor_8h/","title":"File map_cursor.h","text":"<p>FileList &gt; endstone &gt; map &gt; map_cursor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/map__cursor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/map__cursor_8h/#classes","title":"Classes","text":"Type Name class MapCursor Represents a cursor on a map. <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_cursor.h</code></p>"},{"location":"reference/cpp/map__cursor_8h_source/","title":"File map_cursor.h","text":"<p>File List &gt; endstone &gt; map &gt; map_cursor.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\nclass MapCursor {\npublic:\n    enum class Type {\n        Player = 0,\n        Frame = 1,\n        RedMarker = 2,\n        BlueMarker = 3,\n        TargetX = 4,\n        TargetPoint = 5,\n        PlayerOffMap = 6,\n        SignMarker = 7,\n        PinkMarker = 8,\n        OrangeMarker = 9,\n        YellowMarker = 10,\n        CyanMarker = 11,\n        GreenPoint = 12,\n        PlayerOffLimits = 13,\n        Mansion = 14,\n        Monument = 15,\n        // PlayerHidden = 16,\n        VillageDesert = 17,\n        VillagePlains = 18,\n        VillageSavanna = 19,\n        VillageSnowy = 20,\n        VillageTaiga = 21,\n        JungleTemple = 22,\n        SwampHut = 23,\n        TrialChambers = 24,\n    };\n\n    MapCursor(std::int8_t x, std::int8_t y, std::int8_t direction, Type type, bool visible, std::string caption = \"\")\n        : x_(x), y_(y), direction_(direction), visible_(visible), caption_(std::move(caption)), type_(type)\n    {\n    }\n\n    [[nodiscard]] std::int8_t getX() const\n    {\n        return x_;\n    }\n\n    [[nodiscard]] std::int8_t getY() const\n    {\n        return y_;\n    }\n\n    [[nodiscard]] std::int8_t getDirection() const\n    {\n        return direction_;\n    }\n\n    [[nodiscard]] Type getType() const\n    {\n        return type_;\n    }\n\n    [[nodiscard]] bool isVisible() const\n    {\n        return visible_;\n    }\n\n    void setX(const std::int8_t x)\n    {\n        x_ = x;\n    }\n\n    void setY(const std::int8_t y)\n    {\n        y_ = y;\n    }\n\n    Result&lt;void&gt; setDirection(std::int8_t direction)\n    {\n        ENDSTONE_CHECKF(direction &gt;= 0 &amp;&amp; direction &lt;= 15, \"direction must be between 0 and 15 but is {}\", direction);\n        direction_ = direction;\n        return {};\n    }\n\n    void setType(Type type)\n    {\n        type_ = type;\n    }\n\n    void setVisible(bool visible)\n    {\n        visible_ = visible;\n    }\n\n    [[nodiscard]] std::string getCaption() const\n    {\n        return caption_;\n    }\n\n    void setCaption(std::string caption)\n    {\n        caption_ = std::move(caption);\n    }\n\nprivate:\n    std::int8_t x_, y_;\n    std::int8_t direction_;\n    bool visible_;\n    std::string caption_;\n    Type type_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/map__renderer_8h/","title":"File map_renderer.h","text":"<p>FileList &gt; endstone &gt; map &gt; map_renderer.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/map/map_canvas.h\"</code></li> </ul>"},{"location":"reference/cpp/map__renderer_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace core"},{"location":"reference/cpp/map__renderer_8h/#classes","title":"Classes","text":"Type Name class MapRenderer Represents a renderer for a map. <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_renderer.h</code></p>"},{"location":"reference/cpp/map__renderer_8h_source/","title":"File map_renderer.h","text":"<p>File List &gt; endstone &gt; map &gt; map_renderer.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/map/map_canvas.h\"\n\nnamespace endstone {\n\nclass MapView;\nclass Player;\n\nnamespace core {\nclass EndstoneMapView;\n}\n\nclass MapRenderer {\npublic:\n    explicit MapRenderer(const bool is_contextual = false) : is_contextual_(is_contextual) {}\n\n    virtual ~MapRenderer() = default;\n\nprivate:\n    friend class core::EndstoneMapView;\n    [[nodiscard]] virtual bool isEndstoneMapRenderer() const\n    {\n        return false;\n    }\n\npublic:\n    [[nodiscard]] bool isContextual() const\n    {\n        return is_contextual_;\n    }\n\n    virtual void initialize(MapView &amp;map) {}\n\n    virtual void render(MapView &amp;map, MapCanvas &amp;canvas, Player &amp;player) = 0;\n\nprivate:\n    bool is_contextual_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/map__view_8h/","title":"File map_view.h","text":"<p>FileList &gt; endstone &gt; map &gt; map_view.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/map/map_renderer.h\"</code></li> </ul>"},{"location":"reference/cpp/map__view_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/map__view_8h/#classes","title":"Classes","text":"Type Name class MapView Represents a map item. <p>The documentation for this class was generated from the following file <code>include/endstone/map/map_view.h</code></p>"},{"location":"reference/cpp/map__view_8h_source/","title":"File map_view.h","text":"<p>File List &gt; endstone &gt; map &gt; map_view.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/map/map_renderer.h\"\n\nnamespace endstone {\n\nclass Dimension;\n\nclass MapView {\npublic:\n    enum class Scale : uint8_t {\n        Closest = 0,\n        Close = 1,\n        Normal = 2,\n        Far = 3,\n        Farthest = 4\n    };\n\n    virtual ~MapView() = default;\n\n    [[nodiscard]] virtual std::int64_t getId() const = 0;\n\n    [[nodiscard]] virtual bool isVirtual() const = 0;\n\n    [[nodiscard]] virtual Scale getScale() const = 0;\n\n    virtual void setScale(Scale scale) = 0;\n\n    [[nodiscard]] virtual int getCenterX() const = 0;\n\n    [[nodiscard]] virtual int getCenterZ() const = 0;\n\n    virtual void setCenterX(int x) = 0;\n\n    virtual void setCenterZ(int z) = 0;\n\n    [[nodiscard]] virtual Dimension *getDimension() const = 0;\n\n    virtual void setDimension(const Dimension &amp;dimension) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;std::shared_ptr&lt;MapRenderer&gt;&gt; getRenderers() const = 0;\n\n    virtual void addRenderer(std::shared_ptr&lt;MapRenderer&gt; renderer) = 0;\n\n    virtual bool removeRenderer(const std::shared_ptr&lt;MapRenderer&gt; &amp;renderer) = 0;\n\n    [[nodiscard]] virtual bool isUnlimitedTracking() const = 0;\n\n    virtual void setUnlimitedTracking(bool unlimited) = 0;\n\n    [[nodiscard]] virtual bool isLocked() const = 0;\n\n    virtual void setLocked(bool locked) = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_33a21cc2f228e5ad6b7d1bc8d0d1e9bc/","title":"Dir include/endstone/permissions","text":"<p>FileList &gt; endstone &gt; permissions</p>"},{"location":"reference/cpp/dir_33a21cc2f228e5ad6b7d1bc8d0d1e9bc/#files","title":"Files","text":"Type Name file permissible.h file permission.h file permission_attachment.h file permission_attachment_info.h file permission_default.h file permission_level.h <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/</code></p>"},{"location":"reference/cpp/permissible_8h/","title":"File permissible.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permissible.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_set&gt;</code></li> <li><code>#include \"endstone/permissions/permission_attachment_info.h\"</code></li> <li><code>#include \"endstone/permissions/permission_level.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/permissible_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/permissible_8h/#classes","title":"Classes","text":"Type Name class Permissible Represents an object that may become a server operator and can be assigned permissions. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permissible.h</code></p>"},{"location":"reference/cpp/permissible_8h_source/","title":"File permissible.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permissible.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;unordered_set&gt;\n\n#include \"endstone/permissions/permission_attachment_info.h\"\n#include \"endstone/permissions/permission_level.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass CommandSender;\nclass Plugin;\nclass Permission;\nclass PermissionAttachment;\n\nclass Permissible {\npublic:\n    virtual ~Permissible() = default;\n\n    [[nodiscard]] virtual PermissionLevel getPermissionLevel() const = 0;\n\n    [[nodiscard]] virtual bool isPermissionSet(std::string name) const = 0;\n\n    [[nodiscard]] virtual bool isPermissionSet(const Permission &amp;perm) const = 0;\n\n    [[nodiscard]] virtual bool hasPermission(std::string name) const = 0;\n\n    [[nodiscard]] virtual bool hasPermission(const Permission &amp;perm) const = 0;\n\n    virtual PermissionAttachment *addAttachment(Plugin &amp;plugin, const std::string &amp;name, bool value) = 0;\n\n    virtual PermissionAttachment *addAttachment(Plugin &amp;plugin) = 0;\n\n    virtual Result&lt;void&gt; removeAttachment(PermissionAttachment &amp;attachment) = 0;\n\n    virtual void recalculatePermissions() = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;PermissionAttachmentInfo *&gt; getEffectivePermissions() const = 0;\n\n    [[nodiscard]] virtual CommandSender *asCommandSender() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission_8h/","title":"File permission.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;unordered_set&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/permissions/permissible.h\"</code></li> <li><code>#include \"endstone/permissions/permission_default.h\"</code></li> <li><code>#include \"endstone/plugin/plugin_manager.h\"</code></li> </ul>"},{"location":"reference/cpp/permission_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/permission_8h/#classes","title":"Classes","text":"Type Name class Permission Represents a unique permission that may be attached to a Permissible . <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission.h</code></p>"},{"location":"reference/cpp/permission_8h_source/","title":"File permission.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;unordered_set&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/permissions/permissible.h\"\n#include \"endstone/permissions/permission_default.h\"\n#include \"endstone/plugin/plugin_manager.h\"\n\nnamespace endstone {\n\nclass Permission {\npublic:\n    static const PermissionDefault DefaultPermission = PermissionDefault::Operator;\n\n    explicit Permission(std::string name, std::string description = \"\",\n                        PermissionDefault default_value = DefaultPermission,\n                        std::unordered_map&lt;std::string, bool&gt; children = {})\n    {\n        this-&gt;name_ = std::move(name);\n        this-&gt;description_ = std::move(description);\n        this-&gt;default_value_ = default_value;\n        this-&gt;children_ = std::move(children);\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return name_;\n    }\n\n    std::unordered_map&lt;std::string, bool&gt; &amp;getChildren()\n    {\n        return children_;\n    }\n\n    [[nodiscard]] PermissionDefault getDefault() const\n    {\n        return default_value_;\n    }\n\n    void setDefault(PermissionDefault value)\n    {\n        default_value_ = value;\n        recalculatePermissibles();\n    }\n\n    [[nodiscard]] std::string getDescription() const\n    {\n        return description_;\n    }\n\n    void setDescription(std::string value)\n    {\n        description_ = std::move(value);\n    }\n\n    [[nodiscard]] std::unordered_set&lt;Permissible *&gt; getPermissibles() const\n    {\n        if (!plugin_manager_) {\n            return {};\n        }\n\n        return plugin_manager_-&gt;getPermissionSubscriptions(name_);\n    }\n\n    void recalculatePermissibles()\n    {\n        if (!plugin_manager_) {\n            return;\n        }\n\n        auto perms = getPermissibles();\n        plugin_manager_-&gt;recalculatePermissionDefaults(*this);\n\n        for (auto *p : perms) {\n            p-&gt;recalculatePermissions();\n        }\n    }\n\n    Permission *addParent(std::string name, bool value)\n    {\n        if (!plugin_manager_) {\n            return nullptr;\n        }\n\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        auto *perm = plugin_manager_-&gt;getPermission(name);\n\n        if (!perm) {\n            perm = plugin_manager_-&gt;addPermission(std::make_unique&lt;Permission&gt;(name));\n        }\n\n        addParent(*perm, value);\n        return perm;\n    }\n\n    void addParent(Permission &amp;perm, bool value) const\n    {\n        perm.getChildren()[getName()] = value;\n        perm.recalculatePermissibles();\n    }\n\n    void init(PluginManager &amp;plugin_manager)\n    {\n        plugin_manager_ = &amp;plugin_manager;\n    }\n\nprivate:\n    std::string name_;\n    std::unordered_map&lt;std::string, bool&gt; children_;\n    PermissionDefault default_value_ = DefaultPermission;\n    std::string description_;\n    PluginManager *plugin_manager_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission__attachment_8h/","title":"File permission_attachment.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission_attachment.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/permissions/permissible.h\"</code></li> <li><code>#include \"endstone/permissions/permission.h\"</code></li> </ul>"},{"location":"reference/cpp/permission__attachment_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/permission__attachment_8h/#classes","title":"Classes","text":"Type Name class PermissionAttachment Holds information about a permission attachment on a Permissible object. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment.h</code></p>"},{"location":"reference/cpp/permission__attachment_8h_source/","title":"File permission_attachment.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission_attachment.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/permissions/permissible.h\"\n#include \"endstone/permissions/permission.h\"\n\nnamespace endstone {\n\nusing PermissionRemovedExecutor = std::function&lt;void(const PermissionAttachment &amp;)&gt;;\n\nclass PermissionAttachment {\npublic:\n    PermissionAttachment(Plugin &amp;plugin, Permissible &amp;permissible) : permissible_(permissible), plugin_(plugin) {}\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n\n    void setRemovalCallback(PermissionRemovedExecutor ex)\n    {\n        removed_ = std::move(ex);\n    }\n\n    [[nodiscard]] PermissionRemovedExecutor getRemovalCallback() const\n    {\n        return removed_;\n    }\n\n    [[nodiscard]] Permissible &amp;getPermissible() const\n    {\n        return permissible_;\n    }\n\n    [[nodiscard]] std::unordered_map&lt;std::string, bool&gt; getPermissions() const\n    {\n        return permissions_;\n    }\n\n    void setPermission(std::string name, bool value)\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        permissions_[name] = value;\n        permissible_.recalculatePermissions();\n    }\n\n    void setPermission(Permission &amp;perm, bool value)\n    {\n        setPermission(perm.getName(), value);\n    }\n\n    void unsetPermission(std::string name)\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        permissions_.erase(name);\n        permissible_.recalculatePermissions();\n    }\n\n    void unsetPermission(Permission &amp;perm)\n    {\n        unsetPermission(perm.getName());\n    }\n\n    bool remove()\n    {\n        return permissible_.removeAttachment(*this).has_value();\n    }\n\nprivate:\n    PermissionRemovedExecutor removed_;\n    std::unordered_map&lt;std::string, bool&gt; permissions_;\n    Permissible &amp;permissible_;\n    Plugin &amp;plugin_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission__attachment__info_8h/","title":"File permission_attachment_info.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission_attachment_info.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> </ul>"},{"location":"reference/cpp/permission__attachment__info_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/permission__attachment__info_8h/#classes","title":"Classes","text":"Type Name class PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment_info.h</code></p>"},{"location":"reference/cpp/permission__attachment__info_8h_source/","title":"File permission_attachment_info.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission_attachment_info.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\nnamespace endstone {\n\nclass Permissible;\nclass PermissionAttachment;\n\nclass PermissionAttachmentInfo {\n\npublic:\n    PermissionAttachmentInfo(Permissible &amp;permissible, std::string permission, PermissionAttachment *attachment,\n                             bool value)\n        : permissible_(permissible), permission_(std::move(permission)), attachment_(attachment), value_(value)\n    {\n    }\n\n    [[nodiscard]] Permissible &amp;getPermissible() const\n    {\n        return permissible_;\n    }\n\n    [[nodiscard]] std::string getPermission() const\n    {\n        return permission_;\n    }\n\n    [[nodiscard]] PermissionAttachment *getAttachment() const\n    {\n        return attachment_;\n    }\n\n    [[nodiscard]] bool getValue() const\n    {\n        return value_;\n    }\n\nprivate:\n    Permissible &amp;permissible_;\n    std::string permission_;\n    PermissionAttachment *attachment_;\n    bool value_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission__default_8h/","title":"File permission_default.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission_default.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/permission__default_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_default.h</code></p>"},{"location":"reference/cpp/permission__default_8h_source/","title":"File permission_default.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission_default.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class PermissionDefault {\n    True,\n    False,\n    Operator,\n    NotOperator,\n    Console\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission__level_8h/","title":"File permission_level.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission_level.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/permission__level_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_level.h</code></p>"},{"location":"reference/cpp/permission__level_8h_source/","title":"File permission_level.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission_level.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\nenum class PermissionLevel {\n    Default = 0,\n    Operator = 1,\n    Console = 2,\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_53ee43673b2467e53c4cb8c30a2e7d89/","title":"Dir include/endstone/plugin","text":"<p>FileList &gt; endstone &gt; plugin</p>"},{"location":"reference/cpp/dir_53ee43673b2467e53c4cb8c30a2e7d89/#files","title":"Files","text":"Type Name file plugin.h file plugin_description.h file plugin_load_order.h file plugin_loader.h file plugin_manager.h file service.h file service_manager.h file service_priority.h <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/</code></p>"},{"location":"reference/cpp/plugin_8h/","title":"File plugin.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;filesystem&gt;</code></li> <li><code>#include &lt;set&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/command/command_executor.h\"</code></li> <li><code>#include \"endstone/logger.h\"</code></li> <li><code>#include \"endstone/permissions/permission.h\"</code></li> <li><code>#include \"endstone/plugin/plugin_description.h\"</code></li> <li><code>#include \"endstone/server.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace core namespace detail"},{"location":"reference/cpp/plugin_8h/#classes","title":"Classes","text":"Type Name class Plugin Represents a Plugin ."},{"location":"reference/cpp/plugin_8h/#macros","title":"Macros","text":"Type Name define ENDSTONE_EXPORT <code>\\_\\_attribute\\_\\_((visibility(\"default\")))</code> define ENDSTONE_PLUGIN (Name, Version, MainClass) <code>/* multi line expression */</code>"},{"location":"reference/cpp/plugin_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"reference/cpp/plugin_8h/#define-endstone_export","title":"define ENDSTONE_EXPORT","text":"<pre><code>#define ENDSTONE_EXPORT `__attribute__((visibility(\"default\")))`\n</code></pre>"},{"location":"reference/cpp/plugin_8h/#define-endstone_plugin","title":"define ENDSTONE_PLUGIN","text":"<pre><code>#define ENDSTONE_PLUGIN (\n    Name,\n    Version,\n    MainClass\n) `/* multi line expression */`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/plugin_8h_source/","title":"File plugin.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;filesystem&gt;\n#include &lt;set&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/command/command_executor.h\"\n#include \"endstone/logger.h\"\n#include \"endstone/permissions/permission.h\"\n#include \"endstone/plugin/plugin_description.h\"\n#include \"endstone/server.h\"\n\nnamespace endstone {\nclass PluginCommand;\nclass PluginLoader;\nnamespace core {\nclass EndstonePluginManager;\n}\n\nclass Plugin : public CommandExecutor {\npublic:\n    Plugin() = default;\n    Plugin(const Plugin &amp;) = delete;\n    Plugin &amp;operator=(const Plugin &amp;) = delete;\n\n    ~Plugin() override = default;\n\n    [[nodiscard]] virtual const PluginDescription &amp;getDescription() const = 0;\n\n    virtual void onLoad() {}\n\n    virtual void onEnable() {}\n\n    virtual void onDisable() {}\n\n    [[nodiscard]] Logger &amp;getLogger() const\n    {\n        return *logger_;\n    }\n\n    [[nodiscard]] bool isEnabled() const\n    {\n        return enabled_;\n    }\n\n    [[nodiscard]] PluginLoader &amp;getPluginLoader() const\n    {\n        return *loader_;\n    }\n\n    [[nodiscard]] Server &amp;getServer() const\n    {\n        return *server_;\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return getDescription().getName();\n    };\n\n    [[nodiscard]] PluginCommand *getCommand(std::string name) const\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        return getServer().getPluginCommand(name);\n    }\n\n    [[nodiscard]] const std::filesystem::path &amp;getDataFolder() const\n    {\n        return data_folder_;\n    }\n\n    template &lt;typename EventType, typename T&gt;\n    void registerEvent(void (T::*func)(EventType &amp;), T &amp;instance, EventPriority priority = EventPriority::Normal,\n                       bool ignore_cancelled = false)\n    {\n        getServer().getPluginManager().registerEvent(\n            EventType::NAME, [func, &amp;instance](Event &amp;e) { (instance.*func)(reinterpret_cast&lt;EventType &amp;&gt;(e)); },\n            priority, *this, ignore_cancelled);\n    }\n\n    template &lt;typename EventType&gt;\n    void registerEvent(std::function&lt;void(EventType &amp;)&gt; func, EventPriority priority = EventPriority::Normal,\n                       bool ignore_cancelled = false)\n    {\n        getServer().getPluginManager().registerEvent(\n            EventType::NAME, [func](Event &amp;e) { func(reinterpret_cast&lt;EventType &amp;&gt;(e)); }, priority, *this,\n            ignore_cancelled);\n    }\n\nprotected:\n    friend class PluginLoader;\n    friend class core::EndstonePluginManager;\n\n    void setEnabled(bool enabled)\n    {\n        if (enabled_ != enabled) {\n            enabled_ = enabled;\n\n            if (enabled_) {\n                onEnable();\n            }\n            else {\n                onDisable();\n            }\n        }\n    }\n\nprivate:\n    bool enabled_{false};\n    PluginLoader *loader_{nullptr};\n    Server *server_{nullptr};\n    Logger *logger_{nullptr};\n    std::filesystem::path data_folder_;\n};\n\nnamespace detail {\nclass CommandBuilder {\npublic:\n    explicit CommandBuilder(std::string name) : name_(std::move(name)) {}\n\n    CommandBuilder &amp;description(std::string description)\n    {\n        description_ = std::move(description);\n        return *this;\n    }\n\n    template &lt;typename... Usage&gt;\n    CommandBuilder &amp;usages(Usage... usages)\n    {\n        (usages_.insert(usages), ...);\n        return *this;\n    }\n\n    template &lt;typename... Alias&gt;\n    CommandBuilder &amp;aliases(Alias... aliases)\n    {\n        (aliases_.insert(aliases), ...);\n        return *this;\n    }\n\n    template &lt;typename... Permissions&gt;\n    CommandBuilder &amp;permissions(Permissions... permissions)\n    {\n        (permissions_.insert(permissions), ...);\n        return *this;\n    }\n\n    [[nodiscard]] Command build() const\n    {\n        return Command(name_, description_, std::vector&lt;std::string&gt;(usages_.begin(), usages_.end()),\n                       std::vector&lt;std::string&gt;(aliases_.begin(), aliases_.end()),\n                       std::vector&lt;std::string&gt;(permissions_.begin(), permissions_.end()));\n    }\n\nprivate:\n    std::string name_;\n    std::string description_;\n    std::set&lt;std::string&gt; usages_;\n    std::set&lt;std::string&gt; aliases_;\n    std::set&lt;std::string&gt; permissions_;\n};\n\nclass PermissionBuilder {\npublic:\n    explicit PermissionBuilder(std::string name) : name_(std::move(name)) {}\n\n    PermissionBuilder &amp;description(std::string description)\n    {\n        description_ = std::move(description);\n        return *this;\n    }\n\n    PermissionBuilder &amp;default_(PermissionDefault default_value)  // NOLINT(*-identifier-naming)\n    {\n        default_value_ = default_value;\n        return *this;\n    }\n\n    PermissionBuilder &amp;children(const std::string &amp;name, bool value)\n    {\n        children_[name] = value;\n        return *this;\n    }\n\n    [[nodiscard]] Permission build() const\n    {\n        return Permission(name_, description_, default_value_, children_);\n    }\n\nprivate:\n    std::string name_;\n    std::string description_;\n    PermissionDefault default_value_ = Permission::DefaultPermission;\n    std::unordered_map&lt;std::string, bool&gt; children_ = {};\n};\n\nstruct PluginDescriptionBuilder {\n    std::string description;\n    PluginLoadOrder load = PluginLoadOrder::PostWorld;\n    std::vector&lt;std::string&gt; authors;\n    std::vector&lt;std::string&gt; contributors;\n    std::string website;\n    std::string prefix;\n    std::vector&lt;std::string&gt; provides;\n    std::vector&lt;std::string&gt; depend;\n    std::vector&lt;std::string&gt; soft_depend;\n    std::vector&lt;std::string&gt; load_before;\n    PermissionDefault default_permission = PermissionDefault::Operator;\n    std::unordered_map&lt;std::string, CommandBuilder&gt; commands;\n    std::unordered_map&lt;std::string, PermissionBuilder&gt; permissions;\n\n    CommandBuilder &amp;command(std::string name)\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        return commands.emplace(name, name).first-&gt;second;\n    }\n\n    PermissionBuilder &amp;permission(std::string name)\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        return permissions.emplace(name, name).first-&gt;second;\n    }\n\n    [[nodiscard]] PluginDescription build(std::string name, std::string version) const\n    {\n        return {std::move(name),\n                std::move(version),\n                description,\n                load,\n                authors,\n                contributors,\n                website,\n                prefix,\n                provides,\n                depend,\n                soft_depend,\n                load_before,\n                default_permission,\n                buildCommands(),\n                buildPermissions()};\n    }\n\nprivate:\n    [[nodiscard]] std::vector&lt;Command&gt; buildCommands() const\n    {\n        std::vector&lt;Command&gt; result;\n        result.reserve(commands.size());\n        for (const auto &amp;pair : commands) {\n            result.push_back(pair.second.build());\n        }\n        return result;\n    }\n\n    [[nodiscard]] std::vector&lt;Permission&gt; buildPermissions() const\n    {\n        std::vector&lt;Permission&gt; result;\n        result.reserve(permissions.size());\n        for (const auto &amp;pair : permissions) {\n            result.push_back(pair.second.build());\n        }\n        return result;\n    }\n};\n}  // namespace detail\n\n}  // namespace endstone\n\n#ifndef ENDSTONE_EXPORT\n#if defined(WIN32) || defined(_WIN32)\n#define ENDSTONE_EXPORT __declspec(dllexport)\n#else\n#define ENDSTONE_EXPORT __attribute__((visibility(\"default\")))\n#endif\n#endif\n\n#ifndef ENDSTONE_PLUGIN\n#define ENDSTONE_PLUGIN(Name, Version, MainClass)                                            \\\n    class PluginDescriptionBuilderImpl : public endstone::detail::PluginDescriptionBuilder { \\\n    public:                                                                                  \\\n        PluginDescriptionBuilderImpl();                                                      \\\n    };                                                                                       \\\n    static PluginDescriptionBuilderImpl builder;                                             \\\n    class EndstonePluginImpl : public MainClass {                                            \\\n    public:                                                                                  \\\n        EndstonePluginImpl() = default;                                                      \\\n        const endstone::PluginDescription &amp;getDescription() const override                   \\\n        {                                                                                    \\\n            return description_;                                                             \\\n        }                                                                                    \\\n                                                                                             \\\n    private:                                                                                 \\\n        endstone::PluginDescription description_ = builder.build(Name, Version);             \\\n    };                                                                                       \\\n    extern \"C\" [[maybe_unused]] ENDSTONE_EXPORT endstone::Plugin *init_endstone_plugin()     \\\n    {                                                                                        \\\n        auto *p = new EndstonePluginImpl();                                                  \\\n        return p;                                                                            \\\n    }                                                                                        \\\n    PluginDescriptionBuilderImpl::PluginDescriptionBuilderImpl()\n#endif\n</code></pre>"},{"location":"reference/cpp/plugin__description_8h/","title":"File plugin_description.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_description.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include \"endstone/command/command.h\"</code></li> <li><code>#include \"endstone/detail/common.h\"</code></li> <li><code>#include \"endstone/permissions/permission.h\"</code></li> <li><code>#include \"endstone/plugin/plugin_load_order.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__description_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/plugin__description_8h/#classes","title":"Classes","text":"Type Name class PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_description.h</code></p>"},{"location":"reference/cpp/plugin__description_8h_source/","title":"File plugin_description.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_description.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include &lt;fmt/format.h&gt;\n\n#include \"endstone/command/command.h\"\n#include \"endstone/detail/common.h\"\n#include \"endstone/permissions/permission.h\"\n#include \"endstone/plugin/plugin_load_order.h\"\n\nnamespace endstone {\n\nclass PluginDescription {\npublic:\n    PluginDescription(std::string name, std::string version, std::string description = \"\",\n                      PluginLoadOrder load = PluginLoadOrder::PostWorld, std::vector&lt;std::string&gt; authors = {},\n                      std::vector&lt;std::string&gt; contributors = {}, std::string website = \"\", std::string prefix = \"\",\n                      std::vector&lt;std::string&gt; provides = {}, std::vector&lt;std::string&gt; depend = {},\n                      std::vector&lt;std::string&gt; soft_depend = {}, std::vector&lt;std::string&gt; load_before = {},\n                      PermissionDefault default_permission = PermissionDefault::Operator,\n                      std::vector&lt;Command&gt; commands = {}, std::vector&lt;Permission&gt; permissions = {})\n        : description_(std::move(description)), load_(load), authors_(std::move(authors)),\n          contributors_(std::move(contributors)), website_(std::move(website)), prefix_(std::move(prefix)),\n          provides_(std::move(provides)), depend_(std::move(depend)), soft_depend_(std::move(soft_depend)),\n          load_before_(std::move(load_before)), default_permission_(default_permission), commands_(std::move(commands)),\n          permissions_(std::move(permissions))\n    {\n        name_ = std::move(name);\n        std::replace(name_.begin(), name_.end(), ' ', '_');\n        version_ = std::move(version);\n        full_name_ = fmt::format(\"{} v{}\", name_, version_);\n        api_version_ = ENDSTONE_API_VERSION;\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return name_;\n    }\n\n    [[nodiscard]] std::string getVersion() const\n    {\n        return version_;\n    }\n\n    [[nodiscard]] std::string getFullName() const\n    {\n        return full_name_;\n    }\n\n    [[nodiscard]] std::string getAPIVersion() const\n    {\n        return api_version_;\n    }\n\n    [[nodiscard]] std::string getDescription() const\n    {\n        return description_;\n    }\n\n    [[nodiscard]] PluginLoadOrder getLoad() const\n    {\n        return load_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getAuthors() const\n    {\n        return authors_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getContributors() const\n    {\n        return contributors_;\n    }\n\n    [[nodiscard]] std::string getWebsite() const\n    {\n        return website_;\n    }\n\n    [[nodiscard]] std::string getPrefix() const\n    {\n        return prefix_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getProvides() const\n    {\n        return provides_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getDepend() const\n    {\n        return depend_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getSoftDepend() const\n    {\n        return soft_depend_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getLoadBefore() const\n    {\n        return load_before_;\n    }\n\n    [[nodiscard]] PermissionDefault getDefaultPermission() const\n    {\n        return default_permission_;\n    }\n\n    [[nodiscard]] std::vector&lt;Command&gt; getCommands() const\n    {\n        return commands_;\n    }\n\n    [[nodiscard]] std::vector&lt;Permission&gt; getPermissions() const\n    {\n        return permissions_;\n    }\n\nprivate:\n    std::string name_;\n    std::string version_;\n    std::string full_name_;\n    std::string api_version_;\n    std::string description_;\n    PluginLoadOrder load_ = PluginLoadOrder::PostWorld;\n    std::vector&lt;std::string&gt; authors_;\n    std::vector&lt;std::string&gt; contributors_;\n    std::string website_;\n    std::string prefix_;\n    std::vector&lt;std::string&gt; provides_;\n    std::vector&lt;std::string&gt; depend_;\n    std::vector&lt;std::string&gt; soft_depend_;\n    std::vector&lt;std::string&gt; load_before_;\n    PermissionDefault default_permission_ = PermissionDefault::Operator;\n    std::vector&lt;Command&gt; commands_;\n    std::vector&lt;Permission&gt; permissions_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__load__order_8h/","title":"File plugin_load_order.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_load_order.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/plugin__load__order_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_load_order.h</code></p>"},{"location":"reference/cpp/plugin__load__order_8h_source/","title":"File plugin_load_order.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_load_order.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class PluginLoadOrder {\n    Startup,\n    PostWorld,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__loader_8h/","title":"File plugin_loader.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_loader.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;filesystem&gt;</code></li> <li><code>#include &lt;regex&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/server/plugin_disable_event.h\"</code></li> <li><code>#include \"endstone/event/server/plugin_enable_event.h\"</code></li> <li><code>#include \"endstone/logger.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> <li><code>#include \"endstone/server.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__loader_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/plugin__loader_8h/#classes","title":"Classes","text":"Type Name class PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_loader.h</code></p>"},{"location":"reference/cpp/plugin__loader_8h_source/","title":"File plugin_loader.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_loader.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;filesystem&gt;\n#include &lt;regex&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/server/plugin_disable_event.h\"\n#include \"endstone/event/server/plugin_enable_event.h\"\n#include \"endstone/logger.h\"\n#include \"endstone/plugin/plugin.h\"\n#include \"endstone/server.h\"\n\nnamespace endstone {\n\nclass PluginLoader {\npublic:\n    explicit PluginLoader(Server &amp;server) : server_(server) {}\n    PluginLoader(const PluginLoader &amp;) = delete;\n    PluginLoader &amp;operator=(const PluginLoader &amp;) = delete;\n\n    virtual ~PluginLoader() = default;\n\n    [[nodiscard]] virtual Plugin *loadPlugin(std::string file) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Plugin *&gt; loadPlugins(std::string directory)\n    {\n        auto &amp;logger = server_.getLogger();\n\n        auto dir = std::filesystem::path(directory);\n        if (!exists(dir)) {\n            logger.error(\"Error occurred when trying to load plugins in '{}': Provided directory does not exist.\",\n                         dir.string());\n            return {};\n        }\n\n        if (!is_directory(dir)) {\n            logger.error(\"Error occurred when trying to load plugins in '{}': Provided path is not a directory.\",\n                         dir.string());\n            return {};\n        }\n\n        std::vector&lt;Plugin *&gt; loaded_plugins;\n\n        for (const auto &amp;entry : std::filesystem::directory_iterator(dir)) {\n            if (!is_regular_file(entry.status())) {\n                continue;\n            }\n\n            const auto &amp;file = entry.path();\n            for (const auto &amp;pattern : getPluginFileFilters()) {\n                if (std::regex r(pattern); std::regex_search(file.string(), r)) {\n                    if (auto *plugin = loadPlugin(file.string())) {\n                        loaded_plugins.push_back(plugin);\n                    }\n                }\n            }\n        }\n\n        return loaded_plugins;\n    }\n\n    [[nodiscard]] virtual std::vector&lt;std::string&gt; getPluginFileFilters() const = 0;\n\n    virtual void enablePlugin(Plugin &amp;plugin) const\n    {\n        if (!plugin.isEnabled()) {\n            plugin.getLogger().info(\"Enabling {}\", plugin.getDescription().getFullName());\n            try {\n                plugin.setEnabled(true);\n            }\n            catch (std::exception &amp;e) {\n                plugin.getLogger().error(\"Error occurred when enabling {}.\", plugin.getDescription().getFullName());\n                plugin.getLogger().error(e.what());\n                return;\n            }\n            PluginEnableEvent event(plugin);\n            server_.getPluginManager().callEvent(event);\n        }\n    }\n\n    virtual void disablePlugin(Plugin &amp;plugin) const\n    {\n        if (plugin.isEnabled()) {\n            plugin.getLogger().info(\"Disabling {}\", plugin.getDescription().getFullName());\n            try {\n                plugin.setEnabled(false);\n            }\n            catch (std::exception &amp;e) {\n                plugin.getLogger().error(\"Error occurred when disabling {}.\", plugin.getDescription().getFullName());\n                plugin.getLogger().error(e.what());\n                return;\n            }\n            PluginDisableEvent event(plugin);\n            server_.getPluginManager().callEvent(event);\n        }\n    }\n\n    [[nodiscard]] Server &amp;getServer() const\n    {\n        return server_;\n    }\n\nprotected:\n    Server &amp;server_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__manager_8h/","title":"File plugin_manager.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_manager.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/event_priority.h\"</code></li> <li><code>#include \"endstone/permissions/permission_level.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__manager_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/plugin__manager_8h/#classes","title":"Classes","text":"Type Name class PluginManager Represents a plugin manager that handles all plugins from the Server . <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_manager.h</code></p>"},{"location":"reference/cpp/plugin__manager_8h_source/","title":"File plugin_manager.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_manager.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/event_priority.h\"\n#include \"endstone/permissions/permission_level.h\"\n\nnamespace endstone {\n\nclass Permission;\nclass Permissible;\nclass Plugin;\nclass PluginLoader;\n\nclass PluginManager {\npublic:\n    PluginManager() = default;\n    PluginManager(PluginManager const &amp;) = delete;\n    PluginManager &amp;operator=(PluginManager const &amp;) = delete;\n    virtual ~PluginManager() = default;\n\n    virtual void registerLoader(std::unique_ptr&lt;PluginLoader&gt; loader) = 0;\n\n    [[nodiscard]] virtual Plugin *getPlugin(const std::string &amp;name) const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Plugin *&gt; getPlugins() const = 0;\n\n    [[nodiscard]] virtual bool isPluginEnabled(const std::string &amp;name) const = 0;\n\n    [[nodiscard]] virtual bool isPluginEnabled(Plugin *plugin) const = 0;\n\n    virtual Plugin *loadPlugin(std::string file) = 0;\n\n    virtual std::vector&lt;Plugin *&gt; loadPlugins(std::string directory) = 0;\n\n    virtual std::vector&lt;Plugin *&gt; loadPlugins(std::vector&lt;std::string&gt; files) = 0;\n\n    virtual void enablePlugin(Plugin &amp;plugin) const = 0;\n\n    virtual void enablePlugins() const = 0;\n\n    virtual void disablePlugin(Plugin &amp;plugin) = 0;\n\n    virtual void disablePlugins() = 0;\n\n    virtual void clearPlugins() = 0;\n\n    virtual void callEvent(Event &amp;event) = 0;\n\n    virtual void registerEvent(std::string event, std::function&lt;void(Event &amp;)&gt; executor, EventPriority priority,\n                               Plugin &amp;plugin, bool ignore_cancelled) = 0;\n\n    [[nodiscard]] virtual Permission *getPermission(std::string name) const = 0;\n\n    virtual Permission *addPermission(std::unique_ptr&lt;Permission&gt; perm) = 0;\n\n    virtual void removePermission(Permission &amp;perm) = 0;\n\n    virtual void removePermission(std::string name) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Permission *&gt; getDefaultPermissions(PermissionLevel level) const = 0;\n\n    virtual void recalculatePermissionDefaults(Permission &amp;perm) = 0;\n\n    virtual void subscribeToPermission(std::string permission, Permissible &amp;permissible) = 0;\n\n    virtual void unsubscribeFromPermission(std::string permission, Permissible &amp;permissible) = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;Permissible *&gt; getPermissionSubscriptions(\n        std::string permission) const = 0;\n\n    virtual void subscribeToDefaultPerms(PermissionLevel level, Permissible &amp;permissible) = 0;\n\n    virtual void unsubscribeFromDefaultPerms(PermissionLevel level, Permissible &amp;permissible) = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;Permissible *&gt; getDefaultPermSubscriptions(\n        PermissionLevel level) const = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;Permission *&gt; getPermissions() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/service_8h/","title":"File service.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; service.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/service_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/service_8h/#classes","title":"Classes","text":"Type Name class Service Services represent a list of methods. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/service.h</code></p>"},{"location":"reference/cpp/service_8h_source/","title":"File service.h","text":"<p>File List &gt; endstone &gt; plugin &gt; service.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\nclass Service : public std::enable_shared_from_this&lt;Service&gt; {\npublic:\n    virtual ~Service() = default;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/service__manager_8h/","title":"File service_manager.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; service_manager.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/plugin/service.h\"</code></li> <li><code>#include \"endstone/plugin/service_priority.h\"</code></li> </ul>"},{"location":"reference/cpp/service__manager_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/service__manager_8h/#classes","title":"Classes","text":"Type Name class ServiceManager Represent a service manager that manages services and service providers. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/service_manager.h</code></p>"},{"location":"reference/cpp/service__manager_8h_source/","title":"File service_manager.h","text":"<p>File List &gt; endstone &gt; plugin &gt; service_manager.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/plugin/service.h\"\n#include \"endstone/plugin/service_priority.h\"\n\nnamespace endstone {\n\nclass Plugin;\n\nclass ServiceManager {\npublic:\n    virtual ~ServiceManager() = default;\n\n    virtual void registerService(std::string name, std::shared_ptr&lt;Service&gt; provider, const Plugin &amp;plugin,\n                                 ServicePriority priority) = 0;\n\n    virtual void unregisterAll(const Plugin &amp;plugin) = 0;\n\n    virtual void unregister(std::string name, const Service &amp;provider) = 0;\n\n    virtual void unregister(const Service &amp;provider) = 0;\n\n    virtual std::shared_ptr&lt;Service&gt; get(std::string name) const = 0;\n\n    template &lt;typename T&gt;\n    std::shared_ptr&lt;T&gt; load(std::string name) const\n    {\n        return std::static_pointer_cast&lt;T&gt;(get(std::move(name)));\n    }\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/service__priority_8h/","title":"File service_priority.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; service_priority.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/service__priority_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/service_priority.h</code></p>"},{"location":"reference/cpp/service__priority_8h_source/","title":"File service_priority.h","text":"<p>File List &gt; endstone &gt; plugin &gt; service_priority.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\nenum class ServicePriority {\n    Lowest,\n    Low,\n    Normal,\n    High,\n    Highest\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_3a50fadda3c7cdc27c965a478a3f7d27/","title":"Dir include/endstone/scheduler","text":"<p>FileList &gt; endstone &gt; scheduler</p>"},{"location":"reference/cpp/dir_3a50fadda3c7cdc27c965a478a3f7d27/#files","title":"Files","text":"Type Name file scheduler.h file task.h <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/</code></p>"},{"location":"reference/cpp/scheduler_8h/","title":"File scheduler.h","text":"<p>FileList &gt; endstone &gt; scheduler &gt; scheduler.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/scheduler/task.h\"</code></li> </ul>"},{"location":"reference/cpp/scheduler_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/scheduler_8h/#classes","title":"Classes","text":"Type Name class Scheduler Represents a scheduler that executes various tasks. <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/scheduler.h</code></p>"},{"location":"reference/cpp/scheduler_8h_source/","title":"File scheduler.h","text":"<p>File List &gt; endstone &gt; scheduler &gt; scheduler.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/scheduler/task.h\"\n\nnamespace endstone {\n\nclass Scheduler {\npublic:\n    virtual ~Scheduler() = default;\n\n    virtual std::shared_ptr&lt;Task&gt; runTask(Plugin &amp;plugin, std::function&lt;void()&gt; task) = 0;\n\n    virtual std::shared_ptr&lt;Task&gt; runTaskLater(Plugin &amp;plugin, std::function&lt;void()&gt; task, std::uint64_t delay) = 0;\n\n    virtual std::shared_ptr&lt;Task&gt; runTaskTimer(Plugin &amp;plugin, std::function&lt;void()&gt; task, std::uint64_t delay,\n                                               std::uint64_t period) = 0;\n\n    virtual std::shared_ptr&lt;Task&gt; runTaskAsync(Plugin &amp;plugin, std::function&lt;void()&gt; task) = 0;\n\n    virtual std::shared_ptr&lt;Task&gt; runTaskLaterAsync(Plugin &amp;plugin, std::function&lt;void()&gt; task, std::uint64_t delay) = 0;\n\n    virtual std::shared_ptr&lt;Task&gt; runTaskTimerAsync(Plugin &amp;plugin, std::function&lt;void()&gt; task, std::uint64_t delay,\n                                               std::uint64_t period) = 0;\n\n    virtual void cancelTask(TaskId id) = 0;\n\n    virtual void cancelTasks(Plugin &amp;plugin) = 0;\n\n    virtual bool isRunning(TaskId id) = 0;\n\n    virtual bool isQueued(TaskId id) = 0;\n\n    virtual std::vector&lt;Task *&gt; getPendingTasks() = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/task_8h/","title":"File task.h","text":"<p>FileList &gt; endstone &gt; scheduler &gt; task.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/task_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/task_8h/#classes","title":"Classes","text":"Type Name class Task Represents a task being executed by the scheduler. <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/task.h</code></p>"},{"location":"reference/cpp/task_8h_source/","title":"File task.h","text":"<p>File List &gt; endstone &gt; scheduler &gt; task.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;cstdint&gt;\n\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nusing TaskId = std::uint32_t;\n\nclass Task {\npublic:\n    virtual ~Task() = default;\n\n    [[nodiscard]] virtual TaskId getTaskId() const = 0;\n\n    [[nodiscard]] virtual Plugin *getOwner() const = 0;\n\n    [[nodiscard]] virtual bool isSync() const = 0;\n\n    [[nodiscard]] virtual bool isCancelled() const = 0;\n\n    virtual void cancel() = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_19c52f9ea81a2cf7449c80dcee80d6f0/","title":"Dir include/endstone/scoreboard","text":"<p>FileList &gt; endstone &gt; scoreboard</p>"},{"location":"reference/cpp/dir_19c52f9ea81a2cf7449c80dcee80d6f0/#files","title":"Files","text":"Type Name file criteria.h file display_slot.h file objective.h file objective_sort_order.h file render_type.h file score.h file score_entry.h file scoreboard.h <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/</code></p>"},{"location":"reference/cpp/criteria_8h/","title":"File criteria.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; criteria.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/scoreboard/render_type.h\"</code></li> </ul>"},{"location":"reference/cpp/criteria_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/criteria_8h/#classes","title":"Classes","text":"Type Name class Criteria Represents a scoreboard criteria. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/criteria.h</code></p>"},{"location":"reference/cpp/criteria_8h_source/","title":"File criteria.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; criteria.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/scoreboard/render_type.h\"\n\nnamespace endstone {\n\nclass Criteria {\npublic:\n    enum class Type {\n        Dummy,\n    };\n\n    virtual ~Criteria() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual bool isReadOnly() const = 0;\n\n    [[nodiscard]] virtual RenderType getDefaultRenderType() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/display__slot_8h/","title":"File display_slot.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; display_slot.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/display__slot_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/display_slot.h</code></p>"},{"location":"reference/cpp/display__slot_8h_source/","title":"File display_slot.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; display_slot.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class DisplaySlot {\n    BelowName,\n    PlayerList,\n    SideBar,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/objective_8h/","title":"File objective.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; objective.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/scoreboard/objective_sort_order.h\"</code></li> <li><code>#include \"endstone/scoreboard/score.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/objective_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/objective_8h/#classes","title":"Classes","text":"Type Name class Objective Represents an objective on a scoreboard that can show scores specific to entries. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/objective.h</code></p>"},{"location":"reference/cpp/objective_8h_source/","title":"File objective.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; objective.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/scoreboard/objective_sort_order.h\"\n#include \"endstone/scoreboard/score.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass Scoreboard;\n\nclass Objective {\npublic:\n    virtual ~Objective() = default;\n\n    [[nodiscard]] virtual Result&lt;std::string&gt; getName() const = 0;\n\n    [[nodiscard]] virtual Result&lt;std::string&gt; getDisplayName() const = 0;\n\n    virtual Result&lt;void&gt; setDisplayName(std::string display_name) = 0;\n\n    [[nodiscard]] virtual Result&lt;const Criteria *&gt; getCriteria() const = 0;\n\n    [[nodiscard]] virtual Result&lt;bool&gt; isModifiable() const = 0;\n\n    [[nodiscard]] virtual Scoreboard &amp;getScoreboard() const = 0;\n\n    [[nodiscard]] virtual Result&lt;void&gt; unregister() const = 0;\n\n    [[nodiscard]] virtual Result&lt;bool&gt; isDisplayed() const = 0;\n\n    [[nodiscard]] virtual Result&lt;DisplaySlot&gt; getDisplaySlot() const = 0;\n\n    [[nodiscard]] virtual Result&lt;ObjectiveSortOrder&gt; getSortOrder() const = 0;\n\n    virtual Result&lt;void&gt; setDisplaySlot(std::optional&lt;DisplaySlot&gt; slot) = 0;\n\n    virtual Result&lt;void&gt; setSortOrder(ObjectiveSortOrder order) = 0;\n\n    virtual Result&lt;void&gt; setDisplay(std::optional&lt;DisplaySlot&gt; slot, ObjectiveSortOrder order) = 0;\n\n    [[nodiscard]] virtual Result&lt;RenderType&gt; getRenderType() const = 0;\n\n    // virtual Result&lt;void&gt; setRenderType(RenderType render_type) = 0;\n\n    [[nodiscard]] virtual Result&lt;std::unique_ptr&lt;Score&gt;&gt; getScore(ScoreEntry entry) const = 0;\n\n    virtual bool operator==(const Objective &amp;other) const = 0;\n    virtual bool operator!=(const Objective &amp;other) const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/objective__sort__order_8h/","title":"File objective_sort_order.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; objective_sort_order.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/objective__sort__order_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/objective_sort_order.h</code></p>"},{"location":"reference/cpp/objective__sort__order_8h_source/","title":"File objective_sort_order.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; objective_sort_order.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class ObjectiveSortOrder {\n    Ascending,\n    Descending,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/render__type_8h/","title":"File render_type.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; render_type.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/render__type_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/render_type.h</code></p>"},{"location":"reference/cpp/render__type_8h_source/","title":"File render_type.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; render_type.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class RenderType : std::uint8_t {\n    Integer,\n    Hearts,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/score_8h/","title":"File score.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; score.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/scoreboard/score_entry.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/score_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/score_8h/#classes","title":"Classes","text":"Type Name class Score Represents a score for an objective on a scoreboard. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/score.h</code></p>"},{"location":"reference/cpp/score_8h_source/","title":"File score.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; score.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/scoreboard/score_entry.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass Scoreboard;\nclass Objective;\n\nclass Score {\npublic:\n    virtual ~Score() = default;\n\n    [[nodiscard]] virtual ScoreEntry getEntry() const = 0;\n\n    [[nodiscard]] virtual Result&lt;int&gt; getValue() const = 0;\n\n    virtual Result&lt;void&gt; setValue(int score) = 0;\n\n    [[nodiscard]] virtual Result&lt;bool&gt; isScoreSet() const = 0;\n\n    [[nodiscard]] virtual Objective &amp;getObjective() const = 0;\n\n    [[nodiscard]] virtual Scoreboard &amp;getScoreboard() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/score__entry_8h/","title":"File score_entry.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; score_entry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;variant&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"reference/cpp/score__entry_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/score_entry.h</code></p>"},{"location":"reference/cpp/score__entry_8h_source/","title":"File score_entry.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; score_entry.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;variant&gt;\n#include &lt;vector&gt;\n\nnamespace endstone {\n\nclass Player;\nclass Actor;\n\nusing ScoreEntry = std::variant&lt;Player *, Actor *, std::string&gt;;\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/scoreboard_8h/","title":"File scoreboard.h","text":"<p>FileList &gt; endstone &gt; scoreboard &gt; scoreboard.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/scoreboard/criteria.h\"</code></li> <li><code>#include \"endstone/scoreboard/display_slot.h\"</code></li> <li><code>#include \"endstone/scoreboard/objective.h\"</code></li> <li><code>#include \"endstone/scoreboard/score_entry.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/scoreboard_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/scoreboard_8h/#classes","title":"Classes","text":"Type Name class Scoreboard Represents a scoreboard. <p>The documentation for this class was generated from the following file <code>include/endstone/scoreboard/scoreboard.h</code></p>"},{"location":"reference/cpp/scoreboard_8h_source/","title":"File scoreboard.h","text":"<p>File List &gt; endstone &gt; scoreboard &gt; scoreboard.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/scoreboard/criteria.h\"\n#include \"endstone/scoreboard/display_slot.h\"\n#include \"endstone/scoreboard/objective.h\"\n#include \"endstone/scoreboard/score_entry.h\"\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\n\nclass Scoreboard : public std::enable_shared_from_this&lt;Scoreboard&gt; {\npublic:\n    virtual ~Scoreboard() = default;\n\n    virtual Result&lt;std::unique_ptr&lt;Objective&gt;&gt; addObjective(std::string name, Criteria::Type criteria) = 0;\n\n    virtual Result&lt;std::unique_ptr&lt;Objective&gt;&gt; addObjective(std::string name, Criteria::Type criteria,\n                                                            std::string display_name) = 0;\n\n    virtual Result&lt;std::unique_ptr&lt;Objective&gt;&gt; addObjective(std::string name, Criteria::Type criteria,\n                                                            std::string display_name, RenderType render_type) = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Objective&gt; getObjective(std::string name) const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;Objective&gt; getObjective(DisplaySlot slot) const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;std::unique_ptr&lt;Objective&gt;&gt; getObjectives() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;std::unique_ptr&lt;Objective&gt;&gt; getObjectivesByCriteria(\n        Criteria::Type criteria) const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;std::unique_ptr&lt;Score&gt;&gt; getScores(ScoreEntry entry) const = 0;\n\n    virtual void resetScores(ScoreEntry entry) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;ScoreEntry&gt; getEntries() const = 0;\n\n    virtual void clearSlot(DisplaySlot slot) = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_89b85071337bf933dea6c29b4c6a4410/","title":"Dir include/endstone/util","text":"<p>FileList &gt; endstone &gt; util</p>"},{"location":"reference/cpp/dir_89b85071337bf933dea6c29b4c6a4410/#files","title":"Files","text":"Type Name file color.h file image.h file result.h file socket_address.h file uuid.h file vector.h <p>The documentation for this class was generated from the following file <code>include/endstone/util/</code></p>"},{"location":"reference/cpp/color_8h/","title":"File color.h","text":"<p>FileList &gt; endstone &gt; util &gt; color.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/util/result.h\"</code></li> </ul>"},{"location":"reference/cpp/color_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/color_8h/#classes","title":"Classes","text":"Type Name class Color Represents a color with red, green, blue, and alpha components. class Colors <p>The documentation for this class was generated from the following file <code>include/endstone/util/color.h</code></p>"},{"location":"reference/cpp/color_8h_source/","title":"File color.h","text":"<p>File List &gt; endstone &gt; util &gt; color.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/util/result.h\"\n\nnamespace endstone {\nclass Color {\npublic:\n    static constexpr int BIT_MASK = 0xff;\n    static constexpr int DEFAULT_ALPHA = 255;\n\n    constexpr Color(const std::uint8_t red, const std::uint8_t green, const std::uint8_t blue,\n                    const std::uint8_t alpha = DEFAULT_ALPHA)\n        : red_(red), green_(green), blue_(blue), alpha_(alpha)\n    {\n    }\n\n    static Result&lt;Color&gt; fromRGBA(int red, int green, int blue, int alpha)\n    {\n        ENDSTONE_CHECKF(red &gt;= 0 &amp;&amp; red &lt;= BIT_MASK, \"Red[{}] must be between 0-255\", red);\n        ENDSTONE_CHECKF(green &gt;= 0 &amp;&amp; green &lt;= BIT_MASK, \"Green[{}] must be between 0-255\", green);\n        ENDSTONE_CHECKF(blue &gt;= 0 &amp;&amp; blue &lt;= BIT_MASK, \"Blue[{}] must be between 0-255\", blue);\n        ENDSTONE_CHECKF(alpha &gt;= 0 &amp;&amp; alpha &lt;= BIT_MASK, \"Alpha[{}] must be between 0-255\", alpha);\n        return Color(static_cast&lt;std::uint8_t&gt;(red), static_cast&lt;std::uint8_t&gt;(green), static_cast&lt;std::uint8_t&gt;(blue),\n                     static_cast&lt;std::uint8_t&gt;(alpha));\n    }\n\n    static Result&lt;Color&gt; fromRGB(const int red, const int green, const int blue)\n    {\n        return fromRGBA(red, green, blue, DEFAULT_ALPHA);\n    }\n\n    static Result&lt;Color&gt; fromBGR(const int blue, const int green, const int red)\n    {\n        return fromRGBA(red, green, blue, DEFAULT_ALPHA);\n    }\n\n    static Result&lt;Color&gt; fromRGBA(const int rgba)\n    {\n        return fromRGBA(rgba &gt;&gt; 24 &amp; BIT_MASK, rgba &gt;&gt; 16 &amp; BIT_MASK, rgba &gt;&gt; 8 &amp; BIT_MASK, rgba &amp; BIT_MASK);\n    }\n\n    static Result&lt;Color&gt; fromABGR(const int abgr)\n    {\n        return fromRGBA(abgr &amp; BIT_MASK, abgr &gt;&gt; 8 &amp; BIT_MASK, abgr &gt;&gt; 16 &amp; BIT_MASK, abgr &gt;&gt; 24 &amp; BIT_MASK);\n    }\n\n    static Result&lt;Color&gt; fromRGB(const int rgb)\n    {\n        ENDSTONE_CHECKF((rgb &gt;&gt; 24) == 0, \"Extraneous data in: {}\", rgb);\n        return fromRGB(rgb &gt;&gt; 16 &amp; BIT_MASK, rgb &gt;&gt; 8 &amp; BIT_MASK, rgb &amp; BIT_MASK);\n    }\n\n    static Result&lt;Color&gt; fromBGR(const int bgr)\n    {\n        ENDSTONE_CHECKF((bgr &gt;&gt; 24) == 0, \"Extraneous data in: {}\", bgr);\n        return fromBGR(bgr &gt;&gt; 16 &amp; BIT_MASK, bgr &gt;&gt; 8 &amp; BIT_MASK, bgr &amp; BIT_MASK);\n    }\n\n    [[nodiscard]] int getRed() const\n    {\n        return BIT_MASK &amp; red_;\n    }\n\n    [[nodiscard]] Result&lt;Color&gt; setRed(const int red) const\n    {\n        return fromRGBA(red, getGreen(), getBlue(), getAlpha());\n    }\n\n    [[nodiscard]] int getGreen() const\n    {\n        return BIT_MASK &amp; green_;\n    }\n\n    [[nodiscard]] Result&lt;Color&gt; setGreen(const int green) const\n    {\n        return fromRGBA(getRed(), green, getBlue(), getAlpha());\n    }\n\n    [[nodiscard]] int getBlue() const\n    {\n        return BIT_MASK &amp; blue_;\n    }\n\n    [[nodiscard]] Result&lt;Color&gt; setBlue(const int blue) const\n    {\n        return fromRGBA(getRed(), getGreen(), blue, getAlpha());\n    }\n\n    [[nodiscard]] int getAlpha() const\n    {\n        return BIT_MASK &amp; alpha_;\n    }\n\n    [[nodiscard]] Result&lt;Color&gt; setAlpha(const int alpha) const\n    {\n        return fromRGBA(getRed(), getGreen(), getBlue(), alpha);\n    }\n\n    [[nodiscard]] int asRGBA() const\n    {\n        return getRed() &lt;&lt; 24 | getGreen() &lt;&lt; 16 | getBlue() &lt;&lt; 8 | getAlpha();\n    }\n\n    [[nodiscard]] int asABGR() const\n    {\n        return getAlpha() &lt;&lt; 24 | getBlue() &lt;&lt; 16 | getGreen() &lt;&lt; 8 | getRed();\n    }\n\n    [[nodiscard]] int asRGB() const\n    {\n        return getRed() &lt;&lt; 16 | getGreen() &lt;&lt; 8 | getBlue();\n    }\n\n    [[nodiscard]] int asBGR() const\n    {\n        return getBlue() &lt;&lt; 16 | getGreen() &lt;&lt; 8 | getRed();\n    }\n\n    bool operator==(const Color &amp;other) const\n    {\n        return alpha_ == other.alpha_ &amp;&amp; red_ == other.red_ &amp;&amp; green_ == other.green_ &amp;&amp; blue_ == other.blue_;\n    }\n\n    bool operator!=(const Color &amp;other) const\n    {\n        return !(*this == other);\n    }\n\nprivate:\n    std::uint8_t red_, green_, blue_, alpha_;\n};\n\nclass Colors {\npublic:\n    static constexpr auto WHITE = Color(Color::DEFAULT_ALPHA, 255, 255, 255);\n    static constexpr auto BLACK = Color(Color::DEFAULT_ALPHA, 0, 0, 0);\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/image_8h/","title":"File image.h","text":"<p>FileList &gt; endstone &gt; util &gt; image.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/util/color.h\"</code></li> </ul>"},{"location":"reference/cpp/image_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/image_8h/#classes","title":"Classes","text":"Type Name class Image Represents an RGBA image. <p>The documentation for this class was generated from the following file <code>include/endstone/util/image.h</code></p>"},{"location":"reference/cpp/image_8h_source/","title":"File image.h","text":"<p>File List &gt; endstone &gt; util &gt; image.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/util/color.h\"\n\nnamespace endstone {\nclass Image {\npublic:\n    enum class Type {\n        Invalid = 0,\n        Grayscale = 1,\n        RGB = 3,\n        RGBA = 4,\n    };\n\n    explicit Image(const Type type, const int width, const int height)\n        : type_(type), width_(width), height_(height), data_(width * height * 4, '\\0')\n    {\n    }\n\n    template &lt;typename T&gt;\n        requires requires(const T &amp;x) {\n            { x.data() } -&gt; std::convertible_to&lt;const void *&gt;;\n            { x.size() } -&gt; std::convertible_to&lt;std::size_t&gt;;\n        }\n    Image(Type type, int width, int height, const T &amp;data) : Image(type, width, height)\n    {\n        const std::size_t n = std::min(data.size(), data_.size());\n        if (n &gt; 0) {\n            std::memcpy(data_.data(), data.data(), n);\n        }\n    }\n\n    [[nodiscard]] int getWidth() const\n    {\n        return width_;\n    }\n\n    [[nodiscard]] int getHeight() const\n    {\n        return height_;\n    }\n\n    [[nodiscard]] int getDepth() const\n    {\n        switch (type_) {\n        case Type::Grayscale:\n            return 1;\n        case Type::RGB:\n            return 3;\n        case Type::RGBA:\n            return 4;\n        default:\n            return 0;\n        }\n    }\n\n    [[nodiscard]] Color getColor(const int x, const int y) const\n    {\n        const size_t idx = (static_cast&lt;size_t&gt;(y) * width_ + x) * 4;\n        std::uint8_t r = 0, g = 0, b = 0, a = 255;\n        switch (type_) {\n        case Type::Grayscale:\n            r = g = b = static_cast&lt;uint8_t&gt;(data_[idx]);\n            break;\n        case Type::RGB:\n            r = static_cast&lt;uint8_t&gt;(data_[idx]);\n            g = static_cast&lt;uint8_t&gt;(data_[idx + 1]);\n            b = static_cast&lt;uint8_t&gt;(data_[idx + 2]);\n            break;\n        case Type::RGBA:\n            r = static_cast&lt;uint8_t&gt;(data_[idx]);\n            g = static_cast&lt;uint8_t&gt;(data_[idx + 1]);\n            b = static_cast&lt;uint8_t&gt;(data_[idx + 2]);\n            a = static_cast&lt;uint8_t&gt;(data_[idx + 3]);\n            break;\n        default:\n            break;\n        }\n        return {r, g, b, a};\n    }\n\n    void setColor(const int x, const int y, const Color color)\n    {\n        const size_t idx = (static_cast&lt;size_t&gt;(y) * width_ + x) * 4;\n        switch (type_) {\n        case Type::Grayscale:\n            data_[idx] = static_cast&lt;char&gt;(color.getRed());\n            break;\n        case Type::RGB:\n            data_[idx] = static_cast&lt;char&gt;(color.getRed());\n            data_[idx + 1] = static_cast&lt;char&gt;(color.getGreen());\n            data_[idx + 2] = static_cast&lt;char&gt;(color.getBlue());\n            break;\n        case Type::RGBA:\n            data_[idx] = static_cast&lt;char&gt;(color.getRed());\n            data_[idx + 1] = static_cast&lt;char&gt;(color.getGreen());\n            data_[idx + 2] = static_cast&lt;char&gt;(color.getBlue());\n            data_[idx + 3] = static_cast&lt;char&gt;(color.getAlpha());\n            break;\n        default:\n            return;\n        }\n    }\n\n    [[nodiscard]] std::string_view getData() const\n    {\n        return data_;\n    }\n\n    static Result&lt;Image&gt; fromArray(Type type, const int width, const int height,\n                                   const std::vector&lt;unsigned char&gt; &amp;array)\n    {\n        const std::string_view buffer(reinterpret_cast&lt;const char *&gt;(array.data()), array.size());\n        return fromBuffer(type, width, height, buffer);\n    }\n\n    static Result&lt;Image&gt; fromBuffer(Type type, const int width, const int height, std::string_view buffer)\n    {\n        size_t depth = 0;\n        switch (type) {\n        case Type::Grayscale:\n            depth = 1;\n            break;\n        case Type::RGB:\n            depth = 3;\n            break;\n        case Type::RGBA:\n            depth = 4;\n            break;\n        default:\n            return nonstd::make_unexpected(\"Image::fromBuffer: invalid image type\");\n        }\n\n        ENDSTONE_CHECKF(buffer.size() == width * height * depth,\n                        \"Image::fromBuffer: invalid buffer size, got {} bytes, expected {} bytes.\", buffer.size(),\n                        width * height * depth);\n\n        return Image(type, width, height, buffer);\n    }\n\nprivate:\n    Type type_;\n    int width_;\n    int height_;\n    std::string data_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/result_8h/","title":"File result.h","text":"<p>FileList &gt; endstone &gt; util &gt; result.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include &lt;nonstd/expected.hpp&gt;</code></li> </ul>"},{"location":"reference/cpp/result_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/result_8h/#macros","title":"Macros","text":"Type Name define ENDSTONE_CHECK (EXPRESSION, ERROR_MSG) <code>/* multi line expression */</code> define ENDSTONE_CHECKF (EXPRESSION, ERROR_MSG, ...) <code>/* multi line expression */</code> define ENDSTONE_CHECK_RESULT (RESULT) <code>/* multi line expression */</code>"},{"location":"reference/cpp/result_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"reference/cpp/result_8h/#define-endstone_check","title":"define ENDSTONE_CHECK","text":"<pre><code>#define ENDSTONE_CHECK (\n    EXPRESSION,\n    ERROR_MSG\n) `/* multi line expression */`\n</code></pre>"},{"location":"reference/cpp/result_8h/#define-endstone_checkf","title":"define ENDSTONE_CHECKF","text":"<pre><code>#define ENDSTONE_CHECKF (\n    EXPRESSION,\n    ERROR_MSG,\n    ...\n) `/* multi line expression */`\n</code></pre>"},{"location":"reference/cpp/result_8h/#define-endstone_check_result","title":"define ENDSTONE_CHECK_RESULT","text":"<pre><code>#define ENDSTONE_CHECK_RESULT (\n    RESULT\n) `/* multi line expression */`\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/result.h</code></p>"},{"location":"reference/cpp/result_8h_source/","title":"File result.h","text":"<p>File List &gt; endstone &gt; util &gt; result.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;fmt/format.h&gt;\n#include &lt;nonstd/expected.hpp&gt;\n\nnamespace endstone {\n\ntemplate &lt;typename T&gt;\nusing Result = nonstd::expected&lt;T, std::string&gt;;\n\n#define ENDSTONE_CHECK(EXPRESSION, ERROR_MSG) \\\n    if (!(EXPRESSION))                        \\\n        return nonstd::make_unexpected(ERROR_MSG);\n\n#define ENDSTONE_CHECKF(EXPRESSION, ERROR_MSG, ...) \\\n    if (!(EXPRESSION))                              \\\n        return nonstd::make_unexpected(fmt::format(ERROR_MSG, ##__VA_ARGS__));\n\n#define ENDSTONE_CHECK_RESULT(RESULT) \\\n    if (!(RESULT))                    \\\n        return nonstd::make_unexpected(std::move(RESULT.error()));\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/socket__address_8h/","title":"File socket_address.h","text":"<p>FileList &gt; endstone &gt; util &gt; socket_address.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/socket__address_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/socket__address_8h/#classes","title":"Classes","text":"Type Name class SocketAddress Represents an IP Socket Address (hostname + port number). <p>The documentation for this class was generated from the following file <code>include/endstone/util/socket_address.h</code></p>"},{"location":"reference/cpp/socket__address_8h_source/","title":"File socket_address.h","text":"<p>File List &gt; endstone &gt; util &gt; socket_address.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n#include &lt;cstdint&gt;\n#include &lt;string&gt;\n\nnamespace endstone {\n\nclass SocketAddress {\npublic:\n    SocketAddress() = default;\n    SocketAddress(std::string hostname, std::uint32_t port) : hostname_(std::move(hostname)), port_(port) {}\n\n    [[nodiscard]] const std::string &amp;getHostname() const\n    {\n        return hostname_;\n    }\n\n    [[nodiscard]] std::uint32_t getPort() const\n    {\n        return port_;\n    }\n\nprivate:\n    std::string hostname_;\n    std::uint32_t port_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/uuid_8h/","title":"File uuid.h","text":"<p>FileList &gt; endstone &gt; util &gt; uuid.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;cstddef&gt;</code></li> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/uuid_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. namespace std"},{"location":"reference/cpp/uuid_8h/#classes","title":"Classes","text":"Type Name class UUID Implementation of Universally Unique Identifier ( UUID ) struct hash&lt; endstone::UUID &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/uuid_8h_source/","title":"File uuid.h","text":"<p>File List &gt; endstone &gt; util &gt; uuid.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;cstddef&gt;\n#include &lt;cstdint&gt;\n#include &lt;string&gt;\n\nnamespace endstone {\n\nclass UUID {\npublic:\n    std::uint8_t *begin() noexcept\n    {\n        return data;\n    }\n\n    [[nodiscard]] const uint8_t *begin() const noexcept\n    {\n        return data;\n    }\n\n    std::uint8_t *end() noexcept\n    {\n        return data + size();\n    }\n\n    [[nodiscard]] const uint8_t *end() const noexcept\n    {\n        return data + size();\n    }\n\n    [[nodiscard]] static constexpr std::size_t size() noexcept\n    {\n        return 16;\n    }\n\n    [[nodiscard]] bool isNil() const noexcept\n    {\n        return std::all_of(std::begin(data), std::end(data), [](const auto &amp;val) { return val == 0U; });\n    }\n\n    [[nodiscard]] int version() const noexcept\n    {\n        // version is stored in octet 9 which is index 6, since indexes count backwards\n        uint8_t octet9 = data[6];\n        if ((octet9 &amp; 0xF0) == 0x10) {\n            return 1;\n        }\n        if ((octet9 &amp; 0xF0) == 0x20) {\n            return 2;\n        }\n        if ((octet9 &amp; 0xF0) == 0x30) {\n            return 3;\n        }\n        if ((octet9 &amp; 0xF0) == 0x40) {\n            return 4;\n        }\n        if ((octet9 &amp; 0xF0) == 0x50) {\n            return 5;\n        }\n        return -1;\n    }\n\n    void swap(UUID &amp;rhs) noexcept\n    {\n        UUID tmp = *this;\n        *this = rhs;\n        rhs = tmp;\n    }\n\n    [[nodiscard]] std::string str() const\n    {\n        std::string result;\n        result.reserve(36);\n\n        static const char *chars = \"0123456789abcdef\";\n\n        for (size_t i = 0; i &lt; 16; ++i) {\n            result.push_back(chars[(data[i] &gt;&gt; 4) &amp; 0x0F]);\n            result.push_back(chars[data[i] &amp; 0x0F]);\n            if (i == 3 || i == 5 || i == 7 || i == 9) {\n                result.push_back('-');\n            }\n        }\n\n        return result;\n    }\n    std::uint8_t data[16];\n};\nstatic_assert(sizeof(endstone::UUID) == endstone::UUID::size());\n\ninline bool operator==(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return memcmp(lhs.data, rhs.data, sizeof(lhs.data)) == 0;\n}\n\ninline bool operator&lt;(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return memcmp(lhs.data, rhs.data, sizeof(lhs.data)) &lt; 0;\n}\n\ninline bool operator!=(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return !(lhs == rhs);\n}\n\ninline bool operator&gt;(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return rhs &lt; lhs;\n}\ninline bool operator&lt;=(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return !(rhs &lt; lhs);\n}\n\ninline bool operator&gt;=(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return !(lhs &lt; rhs);\n}\n\ninline void swap(UUID &amp;lhs, UUID &amp;rhs) noexcept\n{\n    lhs.swap(rhs);\n}\n\ninline std::size_t hash_value(UUID const &amp;u) noexcept\n{\n    std::size_t seed = 0;\n    for (unsigned char i : u) {\n        seed ^= static_cast&lt;std::size_t&gt;(i) + 0x9e3779b9 + (seed &lt;&lt; 6) + (seed &gt;&gt; 2);\n    }\n\n    return seed;\n}\n\n}  // namespace endstone\n\nnamespace std {\ntemplate &lt;&gt;\nstruct hash&lt;endstone::UUID&gt; {\n    std::size_t operator()(const endstone::UUID &amp;value) const noexcept\n    {\n        return endstone::hash_value(value);\n    }\n};\n}  // namespace std\n</code></pre>"},{"location":"reference/cpp/vector_8h/","title":"File vector.h","text":"<p>FileList &gt; endstone &gt; util &gt; vector.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cmath&gt;</code></li> </ul>"},{"location":"reference/cpp/vector_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/vector_8h/#classes","title":"Classes","text":"Type Name class Vector Represents a 3-dimensional vector. <p>The documentation for this class was generated from the following file <code>include/endstone/util/vector.h</code></p>"},{"location":"reference/cpp/vector_8h_source/","title":"File vector.h","text":"<p>File List &gt; endstone &gt; util &gt; vector.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;cmath&gt;\n\nnamespace endstone {\n\nclass Vector {\npublic:\n    constexpr Vector() = default;\n\n    template &lt;typename T&gt;\n    constexpr Vector(T x, T y, T z)\n        requires(std::is_convertible_v&lt;T, float&gt;)\n        : x_(static_cast&lt;float&gt;(x)), y_(static_cast&lt;float&gt;(y)), z_(static_cast&lt;float&gt;(z))\n    {\n    }\n\n    [[nodiscard]] constexpr float getX() const\n    {\n        return x_;\n    }\n\n    constexpr void setX(float x)\n    {\n        x_ = x;\n    }\n\n    [[nodiscard]] constexpr float getY() const\n    {\n        return y_;\n    }\n\n    constexpr void setY(float y)\n    {\n        y_ = y;\n    }\n\n    [[nodiscard]] constexpr float getZ() const\n    {\n        return z_;\n    }\n\n    constexpr void setZ(float z)\n    {\n        z_ = z;\n    }\n\n    constexpr Vector operator+(const Vector &amp;other) const\n    {\n        return {x_ + other.x_, y_ + other.y_, z_ + other.z_};\n    }\n\n    constexpr Vector operator-(const Vector &amp;other) const\n    {\n        return {x_ - other.x_, y_ - other.y_, z_ - other.z_};\n    }\n\n    constexpr Vector operator*(const Vector &amp;other) const\n    {\n        return {x_ * other.x_, y_ * other.y_, z_ * other.z_};\n    }\n\n    constexpr Vector operator/(const Vector &amp;other) const\n    {\n        return {x_ / other.x_, y_ / other.y_, z_ / other.z_};\n    }\n\n    Vector &amp;operator+=(const Vector &amp;other)\n    {\n        x_ += other.x_;\n        y_ += other.y_;\n        z_ += other.z_;\n        return *this;\n    }\n\n    Vector &amp;operator-=(const Vector &amp;other)\n    {\n        x_ -= other.x_;\n        y_ -= other.y_;\n        z_ -= other.z_;\n        return *this;\n    }\n\n    Vector &amp;operator*=(const Vector &amp;other)\n    {\n        x_ *= other.x_;\n        y_ *= other.y_;\n        z_ *= other.z_;\n        return *this;\n    }\n\n    Vector &amp;operator/=(const Vector &amp;other)\n    {\n        x_ /= other.x_;\n        y_ /= other.y_;\n        z_ /= other.z_;\n        return *this;\n    }\n\n    Vector operator+(float scalar) const\n    {\n        return {x_ + scalar, y_ + scalar, z_ + scalar};\n    }\n\n    Vector operator-(float scalar) const\n    {\n        return {x_ - scalar, y_ - scalar, z_ - scalar};\n    }\n\n    Vector operator*(float scalar) const\n    {\n        return {x_ * scalar, y_ * scalar, z_ * scalar};\n    }\n\n    Vector operator/(float scalar) const\n    {\n        return {x_ / scalar, y_ / scalar, z_ / scalar};\n    }\n\n    friend Vector operator+(float scalar, const Vector &amp;v)\n    {\n        return {scalar + v.x_, scalar + v.y_, scalar + v.z_};\n    }\n\n    friend Vector operator-(float scalar, const Vector &amp;v)\n    {\n        return {scalar - v.x_, scalar - v.y_, scalar - v.z_};\n    }\n\n    friend Vector operator*(float scalar, const Vector &amp;v)\n    {\n        return {scalar * v.x_, scalar * v.y_, scalar * v.z_};\n    }\n\n    friend Vector operator/(float scalar, const Vector &amp;v)\n    {\n        return {scalar / v.x_, scalar / v.y_, scalar / v.z_};\n    }\n\n    constexpr bool operator==(const Vector &amp;other) const\n    {\n        return (x_ == other.x_) &amp;&amp; (y_ == other.y_) &amp;&amp; (z_ == other.z_);\n    }\n\n    [[nodiscard]] float length() const\n    {\n        return std::sqrt(lengthSquared());\n    }\n\n    [[nodiscard]] constexpr float lengthSquared() const\n    {\n        return (x_ * x_) + (y_ * y_) + (z_ * z_);\n    }\n\n    [[nodiscard]] float distance(const Vector &amp;other) const\n    {\n        return std::sqrt(distanceSquared(other));\n    }\n\n    [[nodiscard]] constexpr float distanceSquared(const Vector &amp;other) const\n    {\n        return ((x_ - other.x_) * (x_ - other.x_)) + ((y_ - other.y_) * (y_ - other.y_)) +\n               ((z_ - other.z_) * (z_ - other.z_));\n    }\n\n    [[nodiscard]] Vector &amp;normalize()\n    {\n        const auto len = length();\n        x_ /= len;\n        y_ /= len;\n        z_ /= len;\n        return *this;\n    }\n\nprotected:\n    float x_ = 0.0;\n    float y_ = 0.0;\n    float z_ = 0.0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/logger_8h/","title":"File logger.h","text":"<p>FileList &gt; endstone &gt; logger.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> </ul>"},{"location":"reference/cpp/logger_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/logger_8h/#classes","title":"Classes","text":"Type Name class Logger Logger class which can format and output varies levels of logs. <p>The documentation for this class was generated from the following file <code>include/endstone/logger.h</code></p>"},{"location":"reference/cpp/logger_8h_source/","title":"File logger.h","text":"<p>File List &gt; endstone &gt; logger.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include &lt;fmt/format.h&gt;\n\nnamespace endstone {\n\nclass Logger {\npublic:\n    enum Level : std::uint8_t {\n        Trace = 0,\n        Debug = 1,\n        Info = 2,\n        Warning = 3,\n        Error = 4,\n        Critical = 5,\n        Off = 6,\n    };\n\n    Logger() = default;\n\n    virtual ~Logger() = default;\n    virtual void setLevel(Level level) = 0;\n\n    [[nodiscard]] virtual bool isEnabledFor(Level level) const = 0;\n\n    [[nodiscard]] virtual std::string_view getName() const = 0;\n\n    virtual void log(Level level, std::string_view message) const = 0;\n\n    template &lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int&gt; = 0&gt;\n    void log(Level level, const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        try {\n            log(level, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n        }\n        catch (std::exception &amp;e) {\n            log(Error, e.what());\n        }\n    }\n\n    void trace(const std::string_view message) const\n    {\n        log(Trace, message);\n    }\n\n    template &lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int&gt; = 0&gt;\n    void trace(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Trace, format, std::forward&lt;Args&gt;(args)...);\n    }\n\n    void debug(const std::string_view message) const\n    {\n        log(Debug, message);\n    }\n\n    template &lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int&gt; = 0&gt;\n    void debug(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Debug, format, std::forward&lt;Args&gt;(args)...);\n    }\n\n    void info(const std::string_view message) const\n    {\n        log(Info, message);\n    }\n\n    template &lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int&gt; = 0&gt;\n    void info(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Info, format, std::forward&lt;Args&gt;(args)...);\n    }\n\n    void warning(const std::string_view message) const\n    {\n        log(Warning, message);\n    }\n\n    template &lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int&gt; = 0&gt;\n    void warning(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Warning, format, std::forward&lt;Args&gt;(args)...);\n    }\n\n    void error(const std::string_view message) const\n    {\n        log(Error, message);\n    }\n\n    template &lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int&gt; = 0&gt;\n    void error(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Error, format, std::forward&lt;Args&gt;(args)...);\n    }\n\n    void critical(const std::string_view message) const\n    {\n        log(Critical, message);\n    }\n\n    template &lt;typename... Args, std::enable_if_t&lt;(sizeof...(Args) &gt; 0), int&gt; = 0&gt;\n    void critical(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Critical, format, std::forward&lt;Args&gt;(args)...);\n    }\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/message_8h/","title":"File message.h","text":"<p>FileList &gt; endstone &gt; message.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;variant&gt;</code></li> <li><code>#include \"endstone/lang/translatable.h\"</code></li> </ul>"},{"location":"reference/cpp/message_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon. <p>The documentation for this class was generated from the following file <code>include/endstone/message.h</code></p>"},{"location":"reference/cpp/message_8h_source/","title":"File message.h","text":"<p>File List &gt; endstone &gt; message.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;variant&gt;\n\n#include \"endstone/lang/translatable.h\"\n\nnamespace endstone {\n\nusing Message = std::variant&lt;std::string, Translatable&gt;;\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/offline__player_8h/","title":"File offline_player.h","text":"<p>FileList &gt; endstone &gt; offline_player.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/util/uuid.h\"</code></li> </ul>"},{"location":"reference/cpp/offline__player_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/offline__player_8h/#classes","title":"Classes","text":"Type Name class OfflinePlayer Represents a reference to a player identity and the data belonging to a player that is stored on the disk and can, thus, be retrieved without the player needing to be online. <p>The documentation for this class was generated from the following file <code>include/endstone/offline_player.h</code></p>"},{"location":"reference/cpp/offline__player_8h_source/","title":"File offline_player.h","text":"<p>File List &gt; endstone &gt; offline_player.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/util/uuid.h\"\n\nnamespace endstone {\n\nclass OfflinePlayer {\npublic:\n    virtual ~OfflinePlayer() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual UUID getUniqueId() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player_8h/","title":"File player.h","text":"<p>FileList &gt; endstone &gt; player.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;variant&gt;</code></li> <li><code>#include \"endstone/actor/mob.h\"</code></li> <li><code>#include \"endstone/form/action_form.h\"</code></li> <li><code>#include \"endstone/form/message_form.h\"</code></li> <li><code>#include \"endstone/form/modal_form.h\"</code></li> <li><code>#include \"endstone/game_mode.h\"</code></li> <li><code>#include \"endstone/inventory/player_inventory.h\"</code></li> <li><code>#include \"endstone/offline_player.h\"</code></li> <li><code>#include \"endstone/scoreboard/scoreboard.h\"</code></li> <li><code>#include \"endstone/skin.h\"</code></li> <li><code>#include \"endstone/util/socket_address.h\"</code></li> <li><code>#include \"endstone/util/uuid.h\"</code></li> </ul>"},{"location":"reference/cpp/player_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/player_8h/#classes","title":"Classes","text":"Type Name class Player Represents a player. <p>The documentation for this class was generated from the following file <code>include/endstone/player.h</code></p>"},{"location":"reference/cpp/player_8h_source/","title":"File player.h","text":"<p>File List &gt; endstone &gt; player.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;chrono&gt;\n#include &lt;variant&gt;\n\n#include \"endstone/actor/mob.h\"\n#include \"endstone/form/action_form.h\"\n#include \"endstone/form/message_form.h\"\n#include \"endstone/form/modal_form.h\"\n#include \"endstone/game_mode.h\"\n#include \"endstone/inventory/player_inventory.h\"\n#include \"endstone/offline_player.h\"\n#include \"endstone/scoreboard/scoreboard.h\"\n#include \"endstone/skin.h\"\n#include \"endstone/util/socket_address.h\"\n#include \"endstone/util/uuid.h\"\n\nnamespace endstone {\n\nclass Player : public Mob, public OfflinePlayer {\nprotected:\n    using FormVariant = std::variant&lt;MessageForm, ActionForm, ModalForm&gt;;\n\npublic:\n    [[nodiscard]] std::string getName() const override = 0;\n\n    [[nodiscard]] virtual bool isOp() const = 0;\n\n    virtual void setOp(bool value) = 0;\n\n    [[nodiscard]] virtual std::string getXuid() const = 0;\n\n    [[nodiscard]] virtual SocketAddress getAddress() const = 0;\n\n    virtual void transfer(std::string host, int port) const = 0;\n\n    virtual void kick(std::string message) const = 0;\n\n    // TODO: chat\n\n    virtual bool performCommand(std::string command) const = 0;  // NOLINT(*-use-nodiscard)\n\n    [[nodiscard]] virtual bool isSneaking() const = 0;\n\n    virtual void setSneaking(bool sneak) = 0;\n\n    [[nodiscard]] virtual bool isSprinting() const = 0;\n\n    virtual void setSprinting(bool sprinting) = 0;\n\n    // TODO: playNote\n\n    virtual void playSound(Location location, std::string sound, float volume, float pitch) = 0;\n\n    virtual void stopSound(std::string sound) = 0;\n\n    virtual void stopAllSounds() = 0;\n\n    // TODO: playEffect\n\n    virtual void giveExp(int amount) = 0;\n\n    virtual void giveExpLevels(int amount) = 0;\n\n    [[nodiscard]] virtual float getExpProgress() const = 0;\n\n    virtual Result&lt;void&gt; setExpProgress(float progress) = 0;\n\n    [[nodiscard]] virtual int getExpLevel() const = 0;\n\n    virtual Result&lt;void&gt; setExpLevel(int level) = 0;\n\n    [[nodiscard]] virtual int getTotalExp() const = 0;\n\n    [[nodiscard]] virtual bool getAllowFlight() const = 0;\n\n    virtual void setAllowFlight(bool flight) = 0;\n\n    [[nodiscard]] virtual bool isFlying() const = 0;\n\n    virtual Result&lt;void&gt; setFlying(bool value) = 0;\n\n    [[nodiscard]] virtual float getFlySpeed() const = 0;\n\n    virtual void setFlySpeed(float value) const = 0;\n\n    [[nodiscard]] virtual float getWalkSpeed() const = 0;\n\n    virtual void setWalkSpeed(float value) const = 0;\n\n    [[nodiscard]] virtual Scoreboard &amp;getScoreboard() const = 0;\n\n    void virtual setScoreboard(Scoreboard &amp;scoreboard) = 0;\n\n    virtual void sendPopup(std::string message) const = 0;\n\n    virtual void sendTip(std::string message) const = 0;\n\n    virtual void sendToast(std::string title, std::string content) const = 0;\n\n    virtual void sendTitle(std::string title, std::string subtitle) const = 0;\n\n    virtual void sendTitle(std::string title, std::string subtitle, int fade_in, int stay, int fade_out) const = 0;\n\n    virtual void resetTitle() const = 0;\n\n    virtual void spawnParticle(std::string name, Location location) const = 0;\n\n    virtual void spawnParticle(std::string name, float x, float y, float z) const = 0;\n\n    virtual void spawnParticle(std::string name, Location location,\n                               std::optional&lt;std::string&gt; molang_variables_json) const = 0;\n\n    virtual void spawnParticle(std::string name, float x, float y, float z,\n                               std::optional&lt;std::string&gt; molang_variables_json) const = 0;\n\n    // TODO: getClientViewDistance\n\n    [[nodiscard]] virtual std::chrono::milliseconds getPing() const = 0;\n\n    [[nodiscard]] virtual std::string getLocale() const = 0;\n\n    virtual void updateCommands() const = 0;\n\n    // === EntityHuman === //\n    [[nodiscard]] virtual PlayerInventory &amp;getInventory() const = 0;\n\n    [[nodiscard]] virtual Inventory &amp;getEnderChest() const = 0;\n\n    [[nodiscard]] virtual GameMode getGameMode() const = 0;\n\n    virtual void setGameMode(GameMode mode) = 0;\n\n    [[nodiscard]] virtual std::string getDeviceOS() const = 0;\n\n    [[nodiscard]] virtual std::string getDeviceId() const = 0;\n\n    [[nodiscard]] virtual std::string getGameVersion() const = 0;\n\n    [[nodiscard]] virtual Skin getSkin() const = 0;\n\n    virtual void sendForm(FormVariant form) = 0;\n\n    virtual void closeForm() = 0;\n\n    virtual void sendPacket(int packet_id, std::string_view payload) const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/registry_8h/","title":"File registry.h","text":"<p>FileList &gt; endstone &gt; registry.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;stdexcept&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> </ul>"},{"location":"reference/cpp/registry_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/registry_8h/#classes","title":"Classes","text":"Type Name class Registry &lt;typename T&gt;Abstract registry interface for keyed objects. <p>The documentation for this class was generated from the following file <code>include/endstone/registry.h</code></p>"},{"location":"reference/cpp/registry_8h_source/","title":"File registry.h","text":"<p>File List &gt; endstone &gt; registry.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;functional&gt;\n#include &lt;stdexcept&gt;\n\n#include &lt;fmt/format.h&gt;\n\nnamespace endstone {\n\ntemplate &lt;typename T&gt;\nclass Registry {\npublic:\n    virtual ~Registry() = default;\n\n    virtual T *get(const std::string &amp; key) noexcept = 0;\n\n    virtual const T *get(const std::string &amp; key) const noexcept = 0;\n\n    virtual T &amp;getOrThrow(const std::string &amp; key)\n    {\n        if (auto *p = get(key)) {\n            return *p;\n        }\n        throw std::invalid_argument(fmt::format(\"No registry entry found for key: {}\", key));\n    }\n\n    virtual const T &amp;getOrThrow(const std::string &amp; key) const\n    {\n        if (auto *p = get(key)) {\n            return *p;\n        }\n        throw std::invalid_argument(fmt::format(\"No registry entry found for key: {}\", key));\n    }\n\n    virtual void forEach(std::function&lt;bool(const T &amp;)&gt; func) const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server_8h/","title":"File server.h","text":"<p>FileList &gt; endstone &gt; server.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/ban/ip_ban_list.h\"</code></li> <li><code>#include \"endstone/ban/player_ban_list.h\"</code></li> <li><code>#include \"endstone/block/block_data.h\"</code></li> <li><code>#include \"endstone/boss/boss_bar.h\"</code></li> <li><code>#include \"endstone/lang/language.h\"</code></li> <li><code>#include \"endstone/level/level.h\"</code></li> <li><code>#include \"endstone/logger.h\"</code></li> <li><code>#include \"endstone/map/map_view.h\"</code></li> <li><code>#include \"endstone/player.h\"</code></li> <li><code>#include \"endstone/plugin/service_manager.h\"</code></li> <li><code>#include \"endstone/scoreboard/scoreboard.h\"</code></li> <li><code>#include \"endstone/util/result.h\"</code></li> <li><code>#include \"endstone/util/uuid.h\"</code></li> </ul>"},{"location":"reference/cpp/server_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/server_8h/#classes","title":"Classes","text":"Type Name class Server Represents a server implementation. <p>The documentation for this class was generated from the following file <code>include/endstone/server.h</code></p>"},{"location":"reference/cpp/server_8h_source/","title":"File server.h","text":"<p>File List &gt; endstone &gt; server.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;chrono&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;string_view&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/ban/ip_ban_list.h\"\n#include \"endstone/ban/player_ban_list.h\"\n#include \"endstone/block/block_data.h\"\n#include \"endstone/boss/boss_bar.h\"\n#include \"endstone/lang/language.h\"\n#include \"endstone/level/level.h\"\n#include \"endstone/logger.h\"\n#include \"endstone/map/map_view.h\"\n#include \"endstone/player.h\"\n#include \"endstone/plugin/service_manager.h\"\n#include \"endstone/scoreboard/scoreboard.h\"\n#include \"endstone/util/result.h\"\n#include \"endstone/util/uuid.h\"\n\nnamespace endstone {\n\nclass ConsoleCommandSender;\nclass Enchantment;\nclass ItemFactory;\nclass ItemType;\nclass Scheduler;\nclass PluginCommand;\nclass PluginManager;\n\ntemplate &lt;typename T&gt;\nclass Registry;\n\nclass Server {\npublic:\n    Server() = default;\n    Server(const Server &amp;) = delete;\n    Server &amp;operator=(const Server &amp;) = delete;\n\n    virtual ~Server() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual std::string getVersion() const = 0;\n\n    [[nodiscard]] virtual std::string getMinecraftVersion() const = 0;\n\n    [[nodiscard]] virtual int getProtocolVersion() const = 0;\n\n    [[nodiscard]] virtual Logger &amp;getLogger() const = 0;\n\n    [[nodiscard]] virtual Language &amp;getLanguage() const = 0;\n\n    [[nodiscard]] virtual PluginManager &amp;getPluginManager() const = 0;\n\n    [[nodiscard]] virtual PluginCommand *getPluginCommand(std::string name) const = 0;\n\n    [[nodiscard]] virtual ConsoleCommandSender &amp;getCommandSender() const = 0;\n\n    [[nodiscard]] virtual bool dispatchCommand(CommandSender &amp;sender, std::string command_line) const = 0;\n\n    [[nodiscard]] virtual Scheduler &amp;getScheduler() const = 0;\n\n    [[nodiscard]] virtual Level *getLevel() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Player *&gt; getOnlinePlayers() const = 0;\n\n    [[nodiscard]] virtual int getMaxPlayers() const = 0;\n\n    virtual Result&lt;void&gt; setMaxPlayers(int max_players) = 0;\n\n    [[nodiscard]] virtual Player *getPlayer(endstone::UUID id) const = 0;\n\n    [[nodiscard]] virtual int getPort() const = 0;\n\n    [[nodiscard]] virtual int getPortV6() const = 0;\n\n    [[nodiscard]] virtual bool getOnlineMode() const = 0;\n\n    [[nodiscard]] virtual Player *getPlayer(std::string name) const = 0;\n\n    virtual void shutdown() = 0;\n\n    virtual void reload() = 0;\n\n    virtual void reloadData() = 0;\n\n    virtual void broadcast(const Message &amp;message, const std::string &amp;permission) const = 0;\n\n    virtual void broadcastMessage(const Message &amp;message) const = 0;\n\n    template &lt;typename... Args&gt;\n    void broadcastMessage(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        try {\n            broadcastMessage(fmt::format(format, std::forward&lt;Args&gt;(args)...));\n        }\n        catch (std::exception &amp;e) {\n            getLogger().log(Logger::Error, e.what());\n        }\n    }\n\n    [[nodiscard]] virtual bool isPrimaryThread() const = 0;\n\n    [[nodiscard]] virtual ItemFactory &amp;getItemFactory() const = 0;\n\n    [[nodiscard]] virtual Scoreboard *getScoreboard() const = 0;\n\n    [[nodiscard]] virtual std::shared_ptr&lt;Scoreboard&gt; createScoreboard() = 0;\n\n    virtual float getCurrentMillisecondsPerTick() = 0;\n\n    virtual float getAverageMillisecondsPerTick() = 0;\n\n    virtual float getCurrentTicksPerSecond() = 0;\n    virtual float getAverageTicksPerSecond() = 0;\n\n    virtual float getCurrentTickUsage() = 0;\n\n    virtual float getAverageTickUsage() = 0;\n\n    [[nodiscard]] virtual std::chrono::system_clock::time_point getStartTime() = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;BossBar&gt; createBossBar(std::string title, BarColor color,\n                                                                 BarStyle style) const = 0;\n\n    [[nodiscard]] virtual std::unique_ptr&lt;BossBar&gt; createBossBar(std::string title, BarColor color, BarStyle style,\n                                                                 std::vector&lt;BarFlag&gt; flags) const = 0;\n\n    [[nodiscard]] virtual Result&lt;std::unique_ptr&lt;BlockData&gt;&gt; createBlockData(std::string type) const = 0;\n\n    [[nodiscard]] virtual Result&lt;std::unique_ptr&lt;BlockData&gt;&gt; createBlockData(std::string type,\n                                                                             BlockStates block_states) const = 0;\n\n    [[nodiscard]] virtual PlayerBanList &amp;getBanList() const = 0;\n\n    [[nodiscard]] virtual IpBanList &amp;getIpBanList() const = 0;\n\n    [[nodiscard]] virtual ServiceManager &amp;getServiceManager() const = 0;\n\n    [[nodiscard]] virtual Registry&lt;Enchantment&gt; &amp;getEnchantmentRegistry() const = 0;\n\n    [[nodiscard]] virtual Registry&lt;ItemType&gt; &amp;getItemRegistry() const = 0;\n\n    [[nodiscard]] virtual MapView *getMap(std::int64_t id) const = 0;\n\n    [[nodiscard]] virtual MapView &amp;createMap(const Dimension &amp;dimension) const = 0;\n\n    inline static const std::string BroadcastChannelAdmin = \"endstone.broadcast.admin\";\n\n    inline static const std::string BroadcastChannelUser = \"endstone.broadcast.user\";\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/skin_8h/","title":"File skin.h","text":"<p>FileList &gt; endstone &gt; skin.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/util/image.h\"</code></li> </ul>"},{"location":"reference/cpp/skin_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/skin_8h/#classes","title":"Classes","text":"Type Name class Skin Represents a player skin. <p>The documentation for this class was generated from the following file <code>include/endstone/skin.h</code></p>"},{"location":"reference/cpp/skin_8h_source/","title":"File skin.h","text":"<p>File List &gt; endstone &gt; skin.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/util/image.h\"\n\nnamespace endstone {\n\nclass Skin {\npublic:\n    Skin(std::string id, Image image, std::optional&lt;std::string&gt; cape_id = std::nullopt,\n         std::optional&lt;Image&gt; cape_image = std::nullopt)\n        : id_(std::move(id)), image_(std::move(image)), cape_id_(std::move(cape_id)), cape_image_(std::move(cape_image))\n    {\n    }\n\n    [[nodiscard]] const std::string &amp;getId() const\n    {\n        return id_;\n    }\n\n    [[nodiscard]] const Image &amp;getImage() const\n    {\n        return image_;\n    }\n\n    [[nodiscard]] const std::optional&lt;std::string&gt; &amp;getCapeId() const\n    {\n        return cape_id_;\n    }\n\n    [[nodiscard]] const Image *getCapeImage() const\n    {\n        return cape_image_.has_value() ? &amp;cape_image_.value() : nullptr;\n    }\n\nprivate:\n    std::string id_;\n    Image image_;\n    std::optional&lt;std::string&gt; cape_id_;\n    std::optional&lt;Image&gt; cape_image_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/variant_8h/","title":"File variant.h","text":"<p>FileList &gt; endstone &gt; variant.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/variant_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone Represents a button with text and an optional icon."},{"location":"reference/cpp/variant_8h/#classes","title":"Classes","text":"Type Name struct overloaded &lt;Func&gt;Helper type for visitors. <p>The documentation for this class was generated from the following file <code>include/endstone/variant.h</code></p>"},{"location":"reference/cpp/variant_8h_source/","title":"File variant.h","text":"<p>File List &gt; endstone &gt; variant.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\ntemplate &lt;typename... Func&gt;\nstruct overloaded : Func... {\n    using Func::operator()...;\n};\n\ntemplate &lt;typename... Func&gt;\noverloaded(Func...) -&gt; overloaded&lt;Func...&gt;;\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace endstone Represents a button with text and an optional icon. <ul> <li>namespace core </li> <li>namespace detail </li> </ul> </li> <li>namespace fmt </li> <li>namespace std </li> </ul>"},{"location":"reference/cpp/classes/","title":"Class Index","text":""},{"location":"reference/cpp/classes/#a","title":"a","text":"<ul> <li>ActionForm (endstone)</li> <li>Actor (endstone)</li> <li>ActorDamageEvent (endstone)</li> <li>ActorDeathEvent (endstone)</li> <li>ActorEvent (endstone)</li> <li>ActorExplodeEvent (endstone)</li> <li>ActorKnockbackEvent (endstone)</li> <li>ActorRemoveEvent (endstone)</li> <li>ActorSpawnEvent (endstone)</li> <li>ActorTeleportEvent (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#b","title":"b","text":"<ul> <li>BanEntry (endstone)</li> <li>BanList (endstone)</li> <li>Block (endstone)</li> <li>BlockBreakEvent (endstone)</li> <li>BlockCommandSender (endstone)</li> <li>BlockCookEvent (endstone)</li> <li>BlockData (endstone)</li> <li>BlockEvent (endstone)</li> <li>BlockPistonEvent (endstone)</li> <li>BlockPistonExtendEvent (endstone)</li> <li>BlockPistonRetractEvent (endstone)</li> <li>BlockPlaceEvent (endstone)</li> <li>BlockState (endstone)</li> <li>BossBar (endstone)</li> <li>BroadcastMessageEvent (endstone)</li> <li>Button (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#c","title":"c","text":"<ul> <li>Cancellable (endstone)</li> <li>Chunk (endstone)</li> <li>ChunkEvent (endstone)</li> <li>ChunkLoadEvent (endstone)</li> <li>ChunkUnloadEvent (endstone)</li> <li>Color (endstone)</li> <li>ColorFormat (endstone)</li> <li>Colors (endstone)</li> <li>Command (endstone)</li> <li>CommandBuilder</li> <li>CommandExecutor (endstone)</li> <li>CommandMap (endstone)</li> <li>CommandSender (endstone)</li> <li>CommandSenderWrapper (endstone)</li> <li>ConsoleCommandSender (endstone)</li> <li>Criteria (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#d","title":"d","text":"<ul> <li>DamageSource (endstone)</li> <li>Dimension (endstone)</li> <li>DimensionEvent (endstone)</li> <li>Divider (endstone)</li> <li>Dropdown (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#e","title":"e","text":"<ul> <li>Enchantment (endstone)</li> <li>Event (endstone)</li> <li>EventHandler (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#f","title":"f","text":"<ul> <li>Form (endstone)</li> <li>formatter&lt; endstone::Actor &gt; (fmt)</li> <li>formatter&lt; endstone::Block &gt; (fmt)</li> <li>formatter&lt; endstone::BlockData &gt; (fmt)</li> <li>formatter&lt; endstone::BlockState &gt; (fmt)</li> <li>formatter&lt; endstone::BlockStates &gt; (fmt)</li> <li>formatter&lt; endstone::BlockStates::mapped_type &gt; (fmt)</li> <li>formatter&lt; endstone::BlockStates::value_type &gt; (fmt)</li> <li>formatter&lt; endstone::Chunk &gt; (fmt)</li> <li>formatter&lt; endstone::DamageSource &gt; (fmt)</li> <li>formatter&lt; endstone::Dimension &gt; (fmt)</li> <li>formatter&lt; endstone::ItemStack &gt; (fmt)</li> <li>formatter&lt; endstone::ItemType &gt; (fmt)</li> <li>formatter&lt; endstone::Location &gt; (fmt)</li> </ul>"},{"location":"reference/cpp/classes/#h","title":"h","text":"<ul> <li>HandlerList (endstone)</li> <li>hash&lt; endstone::UUID &gt; (std)</li> <li>Header (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#i","title":"i","text":"<ul> <li>ICancellable (endstone)</li> <li>Image (endstone)</li> <li>Inventory (endstone)</li> <li>IpBanEntry (endstone)</li> <li>IpBanList (endstone)</li> <li>Item (endstone)</li> <li>ItemFactory (endstone)</li> <li>ItemMeta (endstone)</li> <li>ItemStack (endstone)</li> <li>ItemType (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#l","title":"l","text":"<ul> <li>Label (endstone)</li> <li>Language (endstone)</li> <li>LeavesDecayEvent (endstone)</li> <li>Level (endstone)</li> <li>LevelEvent (endstone)</li> <li>Location (endstone)</li> <li>Logger (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#m","title":"m","text":"<ul> <li>MapCanvas (endstone)</li> <li>MapCursor (endstone)</li> <li>MapInitializeEvent (endstone)</li> <li>MapMeta (endstone)</li> <li>MapRenderer (endstone)</li> <li>MapView (endstone)</li> <li>MessageForm (endstone)</li> <li>Mob (endstone)</li> <li>ModalForm (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#o","title":"o","text":"<ul> <li>Objective (endstone)</li> <li>OfflinePlayer (endstone)</li> <li>overloaded (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#p","title":"p","text":"<ul> <li>PacketReceiveEvent (endstone)</li> <li>PacketSendEvent (endstone)</li> <li>Permissible (endstone)</li> <li>Permission (endstone)</li> <li>PermissionAttachment (endstone)</li> <li>PermissionAttachmentInfo (endstone)</li> <li>PermissionBuilder</li> <li>Player (endstone)</li> <li>PlayerBanEntry (endstone)</li> <li>PlayerBanList (endstone)</li> <li>PlayerBedEnterEvent (endstone)</li> <li>PlayerBedLeaveEvent (endstone)</li> <li>PlayerChatEvent (endstone)</li> <li>PlayerCommandEvent (endstone)</li> <li>PlayerDeathEvent (endstone)</li> <li>PlayerDropItemEvent (endstone)</li> <li>PlayerEmoteEvent (endstone)</li> <li>PlayerEvent (endstone)</li> <li>PlayerGameModeChangeEvent (endstone)</li> <li>PlayerInteractActorEvent (endstone)</li> <li>PlayerInteractEvent (endstone)</li> <li>PlayerInventory (endstone)</li> <li>PlayerItemConsumeEvent (endstone)</li> <li>PlayerItemHeldEvent (endstone)</li> <li>PlayerJoinEvent (endstone)</li> <li>PlayerJumpEvent (endstone)</li> <li>PlayerKickEvent (endstone)</li> <li>PlayerLoginEvent (endstone)</li> <li>PlayerMoveEvent (endstone)</li> <li>PlayerPickupItemEvent (endstone)</li> <li>PlayerQuitEvent (endstone)</li> <li>PlayerRespawnEvent (endstone)</li> <li>PlayerSkinChangeEvent (endstone)</li> <li>PlayerTeleportEvent (endstone)</li> <li>Plugin (endstone)</li> <li>PluginCommand (endstone)</li> <li>PluginDescription (endstone)</li> <li>PluginDescriptionBuilder</li> <li>PluginDisableEvent (endstone)</li> <li>PluginEnableEvent (endstone)</li> <li>PluginLoader (endstone)</li> <li>PluginManager (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#r","title":"r","text":"<ul> <li>Recipe (endstone)</li> <li>Registry (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#s","title":"s","text":"<ul> <li>Scheduler (endstone)</li> <li>Score (endstone)</li> <li>Scoreboard (endstone)</li> <li>ScriptMessageEvent (endstone)</li> <li>Server (endstone)</li> <li>ServerCommandEvent (endstone)</li> <li>ServerEvent (endstone)</li> <li>ServerListPingEvent (endstone)</li> <li>ServerLoadEvent (endstone)</li> <li>Service (endstone)</li> <li>ServiceManager (endstone)</li> <li>Skin (endstone)</li> <li>Slider (endstone)</li> <li>SocketAddress (endstone)</li> <li>StepSlider (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#t","title":"t","text":"<ul> <li>Task (endstone)</li> <li>TextInput (endstone)</li> <li>ThunderChangeEvent (endstone)</li> <li>Toggle (endstone)</li> <li>Translatable (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#u","title":"u","text":"<ul> <li>UUID (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#v","title":"v","text":"<ul> <li>Vector (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#w","title":"w","text":"<ul> <li>WeatherChangeEvent (endstone)</li> <li>WeatherEvent (endstone)</li> </ul>"},{"location":"reference/cpp/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class endstone::Form Represents a generic form. </li> <li>class endstone::Permissible Represents an object that may become a server operator and can be assigned permissions. <ul> <li>class endstone::CommandSender Represents a command sender. <ul> <li>class endstone::Actor Represents a base actor in the level. <ul> <li>class endstone::Item Represents a base actor in the level. </li> <li>class endstone::Mob Represents a mobile entity (i.e. living entity), such as a monster or player. <ul> <li>class endstone::Player Represents a player. </li> </ul> </li> </ul> </li> <li>class endstone::BlockCommandSender Represents a block command sender. </li> <li>class endstone::CommandSenderWrapper Represents a wrapper that forwards commands to the wrapped CommandSender and captures its output.</li> <li>class endstone::ConsoleCommandSender Represents a console command sender. </li> </ul> </li> </ul> </li> <li>class endstone::ICancellable <ul> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> </ul> </li> <li>class endstone::Event Represents an event. <ul> <li>class endstone::ActorEvent Represents an Actor-related event. </li> <li>class endstone::ActorEvent Represents an Actor-related event. </li> <li>class endstone::ActorEvent Represents an Actor-related event. </li> <li>class endstone::BlockEvent Represents an Block-related event. <ul> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> </ul> </li> <li>class endstone::LevelEvent Represents events within a level. <ul> <li>class endstone::DimensionEvent Represents events within a level. <ul> <li>class endstone::ChunkEvent Represents a Chunk related event. <ul> <li>class endstone::ChunkLoadEvent Called when a chunk is loaded. </li> <li>class endstone::ChunkUnloadEvent Called when a chunk is unloaded. </li> </ul> </li> </ul> </li> </ul> </li> <li>class endstone::PlayerEvent Represents a player related event. <ul> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::PlayerBedLeaveEvent Called when a player is leaving a bed. </li> <li>class endstone::PlayerDeathEvent Called when a Player dies.</li> <li>class endstone::PlayerJoinEvent Called when a player joins a server. </li> <li>class endstone::PlayerQuitEvent Called when a player leaves a server. </li> <li>class endstone::PlayerRespawnEvent Called when a player respawns. </li> </ul> </li> <li>class endstone::ServerEvent Represents a Server-related event. <ul> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::MapInitializeEvent Called when a map is initialized. </li> <li>class endstone::PluginDisableEvent Called when a plugin is disabled. </li> <li>class endstone::PluginEnableEvent Called when a plugin is enabled. </li> <li>class endstone::ServerLoadEvent Called when either the server startup or reload has completed. </li> </ul> </li> <li>class endstone::WeatherEvent Represents a Weather-related event. <ul> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> </ul> </li> </ul> </li> <li>class endstone::BanEntry A single entry from a ban list. <ul> <li>class endstone::IpBanEntry </li> <li>class endstone::PlayerBanEntry </li> </ul> </li> <li>class endstone::BanList Represents a ban list, containing bans. </li> <li>class endstone::Block Represents a block. </li> <li>class endstone::BlockData Represents the data related to a live block. </li> <li>class endstone::BlockState Represents a captured state of a block, which will not update automatically. </li> <li>class endstone::BossBar Represents a boss bar that is displayed to players. </li> <li>class endstone::Button Represents a button with text and an optional icon. </li> <li>class endstone::Chunk Represents a chunk of blocks. </li> <li>class endstone::Color Represents a color with red, green, blue, and alpha components. </li> <li>class endstone::Colors </li> <li>class endstone::Command Represents a Command , which executes various tasks upon user input. <ul> <li>class endstone::PluginCommand Represents a Command belonging to aPlugin .</li> </ul> </li> <li>class endstone::CommandExecutor Represents a class which contains a single method for executing commands. <ul> <li>class endstone::Plugin Represents a Plugin .</li> </ul> </li> <li>class endstone::CommandMap Represents a command map that manages all commands of the Server .</li> <li>class endstone::Criteria Represents a scoreboard criteria. </li> <li>class endstone::DamageSource Represents a source of damage. </li> <li>class endstone::Dimension Represents a dimension within a Level .</li> <li>class endstone::Divider Represents a divider. </li> <li>class endstone::Dropdown Represents a dropdown with a set of predefined options. <ul> <li>class endstone::StepSlider Represents a step slider with a set of predefined options. </li> </ul> </li> <li>class endstone::Enchantment </li> <li>class endstone::EventHandler Represents a registered EventHandler which associates with aPlugin .</li> <li>class endstone::HandlerList A list of event handlers. Should be instantiated on a per-event basis. </li> <li>class endstone::Header Represents a header with a label. </li> <li>class endstone::Image Represents an RGBA image. </li> <li>class endstone::Inventory Interface to the various inventories. <ul> <li>class endstone::PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots.</li> </ul> </li> <li>class endstone::ItemFactory </li> <li>class endstone::ItemMeta Represents the metadata of a generic item. <ul> <li>class endstone::MapMeta Represents the metadata for a map item. </li> </ul> </li> <li>class endstone::ItemStack Represents a stack of items. </li> <li>class endstone::ItemType Represents an item type. </li> <li>class endstone::Label Represents a text label. </li> <li>class endstone::Language Represents the interface for translating text into different languages. </li> <li>class endstone::Level Represents a level, which may contain actors, chunks and blocks. </li> <li>class endstone::Vector Represents a 3-dimensional vector. <ul> <li>class endstone::Location Represents a 3-dimensional location in a dimension within a level. </li> </ul> </li> <li>class endstone::Logger Logger class which can format and output varies levels of logs.</li> <li>class endstone::MapCanvas Represents a canvas for drawing to a map. </li> <li>class endstone::MapCursor Represents a cursor on a map. </li> <li>class endstone::MapRenderer Represents a renderer for a map. </li> <li>class endstone::MapView Represents a map item. </li> <li>class endstone::Objective Represents an objective on a scoreboard that can show scores specific to entries. </li> <li>class endstone::OfflinePlayer Represents a reference to a player identity and the data belonging to a player that is stored on the disk and can, thus, be retrieved without the player needing to be online. <ul> <li>class endstone::Player Represents a player. </li> </ul> </li> <li>class endstone::Permission Represents a unique permission that may be attached to a Permissible .</li> <li>class endstone::PermissionAttachment Holds information about a permission attachment on a Permissible object.</li> <li>class endstone::PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it.</li> <li>class endstone::PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. </li> <li>class endstone::PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. </li> <li>class endstone::PluginManager Represents a plugin manager that handles all plugins from the Server .</li> <li>class endstone::Recipe Represents some type of crafting recipe. </li> <li>class endstone::Registry Abstract registry interface for keyed objects. </li> <li>class endstone::Scheduler Represents a scheduler that executes various tasks. </li> <li>class endstone::Score Represents a score for an objective on a scoreboard. </li> <li>class endstone::Server Represents a server implementation. </li> <li>class endstone::ServiceManager Represent a service manager that manages services and service providers. </li> <li>class endstone::Skin Represents a player skin. </li> <li>class endstone::Slider Represents a slider with a label. </li> <li>class endstone::SocketAddress Represents an IP Socket Address (hostname + port number). </li> <li>class endstone::Task Represents a task being executed by the scheduler. </li> <li>class endstone::TextInput Represents a text input field. </li> <li>class endstone::Toggle Represents a toggle button with a label. </li> <li>class endstone::Translatable Represents an object with a text representation that can be translated by the Minecraft client. </li> <li>class endstone::UUID Implementation of Universally Unique Identifier ( UUID )</li> <li>class endstone::detail::CommandBuilder </li> <li>class endstone::detail::PermissionBuilder </li> <li>struct endstone::ColorFormat All supported color and format codes. </li> <li>struct endstone::detail::PluginDescriptionBuilder </li> <li>struct std::hash&lt; endstone::UUID &gt; </li> <li>class EventType <ul> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> <li>class endstone::Cancellable A type characterizing events that may be cancelled by a plugin or the server. </li> </ul> </li> <li>class std::enable_shared_from_this&lt; Scoreboard &gt; <ul> <li>class endstone::Scoreboard Represents a scoreboard. </li> </ul> </li> <li>class std::enable_shared_from_this&lt; Service &gt; <ul> <li>class endstone::Service Services represent a list of methods. </li> </ul> </li> <li>class endstone::Func <ul> <li>struct endstone::overloaded Helper type for visitors. </li> </ul> </li> <li>class formatter&lt; string_view &gt; <ul> <li>struct fmt::formatter&lt; endstone::Actor &gt; </li> <li>struct fmt::formatter&lt; endstone::Block &gt; </li> <li>struct fmt::formatter&lt; endstone::BlockData &gt; </li> <li>struct fmt::formatter&lt; endstone::BlockState &gt; </li> <li>struct fmt::formatter&lt; endstone::BlockStates &gt; </li> <li>struct fmt::formatter&lt; endstone::BlockStates::mapped_type &gt; </li> <li>struct fmt::formatter&lt; endstone::BlockStates::value_type &gt; </li> <li>struct fmt::formatter&lt; endstone::Chunk &gt; </li> <li>struct fmt::formatter&lt; endstone::DamageSource &gt; </li> <li>struct fmt::formatter&lt; endstone::Dimension &gt; </li> <li>struct fmt::formatter&lt; endstone::ItemStack &gt; </li> <li>struct fmt::formatter&lt; endstone::ItemType &gt; </li> <li>struct fmt::formatter&lt; endstone::Location &gt; </li> </ul> </li> </ul>"},{"location":"reference/cpp/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"reference/cpp/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"reference/cpp/class_members/","title":"Class Members","text":""},{"location":"reference/cpp/class_members/#a","title":"a","text":"<ul> <li>ActionForm (endstone::ActionForm)</li> <li>addButton (endstone::ActionForm)</li> <li>addDivider (endstone::ActionForm)</li> <li>addHeader (endstone::ActionForm)</li> <li>addLabel (endstone::ActionForm)</li> <li>addScoreboardTag (endstone::Actor)</li> <li>asItem (endstone::Actor)</li> <li>asMob (endstone::Actor)</li> <li>ActorDamageEvent (endstone::ActorDamageEvent)</li> <li>ActorDeathEvent (endstone::ActorDeathEvent)</li> <li>ActorEvent (endstone::ActorEvent, endstone::ActorRemoveEvent)</li> <li>actor_ (endstone::ActorEvent, endstone::PlayerInteractActorEvent)</li> <li>ActorExplodeEvent (endstone::ActorExplodeEvent)</li> <li>ActorKnockbackEvent (endstone::ActorKnockbackEvent)</li> <li>ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>ActorTeleportEvent (endstone::ActorTeleportEvent)</li> <li>addBan (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>addFlag (endstone::BossBar)</li> <li>addPlayer (endstone::BossBar)</li> <li>alpha_ (endstone::Color)</li> <li>asABGR (endstone::Color)</li> <li>asBGR (endstone::Color)</li> <li>asRGB (endstone::Color)</li> <li>asRGBA (endstone::Color)</li> <li>Aqua (endstone::ColorFormat)</li> <li>aliases_ (endstone::Command, endstone::detail::CommandBuilder)</li> <li>allowChangesFrom (endstone::Command)</li> <li>asPluginCommand (endstone::Command, endstone::PluginCommand)</li> <li>asActor (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>asBlock (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>asCommandSender (endstone::CommandSender, endstone::Permissible)</li> <li>asConsole (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>asPlayer (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>addAttachment (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>addOption (endstone::Dropdown)</li> <li>async_ (endstone::Event)</li> <li>addItem (endstone::Inventory)</li> <li>all (endstone::Inventory)</li> <li>address_ (endstone::IpBanEntry, endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>asMetaFor (endstone::ItemFactory)</li> <li>addEnchant (endstone::ItemMeta)</li> <li>as (endstone::ItemMeta)</li> <li>amount_ (endstone::ItemStack)</li> <li>addRenderer (endstone::MapView)</li> <li>addControl (endstone::ModalForm)</li> <li>addParent (endstone::Permission)</li> <li>attachment_ (endstone::PermissionAttachmentInfo)</li> <li>Action (endstone::PlayerInteractEvent)</li> <li>action_ (endstone::PlayerInteractEvent)</li> <li>api_version_ (endstone::PluginDescription)</li> <li>authors_ (endstone::PluginDescription)</li> <li>addPermission (endstone::PluginManager)</li> <li>addObjective (endstone::Scoreboard)</li> <li>aliases (endstone::detail::CommandBuilder)</li> <li>authors (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#b","title":"b","text":"<ul> <li>BlockList (endstone::ActorExplodeEvent)</li> <li>blocks_ (endstone::ActorExplodeEvent)</li> <li>BlockBreakEvent (endstone::BlockBreakEvent)</li> <li>BlockCookEvent (endstone::BlockCookEvent)</li> <li>BlockEvent (endstone::BlockEvent)</li> <li>block_ (endstone::BlockEvent)</li> <li>BlockPistonEvent (endstone::BlockPistonEvent, endstone::BlockPistonExtendEvent, endstone::BlockPistonRetractEvent)</li> <li>BlockPlaceEvent (endstone::BlockPlaceEvent)</li> <li>BroadcastMessageEvent (endstone::BroadcastMessageEvent)</li> <li>Button (endstone::Button)</li> <li>BIT_MASK (endstone::Color)</li> <li>blue_ (endstone::Color)</li> <li>Black (endstone::ColorFormat)</li> <li>Blue (endstone::ColorFormat)</li> <li>Bold (endstone::ColorFormat)</li> <li>BLACK (endstone::Colors)</li> <li>bake (endstone::HandlerList)</li> <li>baked_handlers_ (endstone::HandlerList)</li> <li>button1_text_ (endstone::MessageForm)</li> <li>button2_text_ (endstone::MessageForm)</li> <li>bed_ (endstone::PlayerBedEnterEvent, endstone::PlayerBedLeaveEvent)</li> <li>block_clicked_ (endstone::PlayerInteractEvent)</li> <li>block_face_ (endstone::PlayerInteractEvent)</li> <li>BroadcastChannelAdmin (endstone::Server)</li> <li>BroadcastChannelUser (endstone::Server)</li> <li>broadcast (endstone::Server)</li> <li>broadcastMessage (endstone::Server)</li> <li>begin (endstone::UUID)</li> <li>build (endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder, endstone::detail::PluginDescriptionBuilder)</li> <li>buildCommands (endstone::detail::PluginDescriptionBuilder)</li> <li>buildPermissions (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#c","title":"c","text":"<ul> <li>Control (endstone::ActionForm, endstone::ModalForm)</li> <li>content_ (endstone::ActionForm, endstone::MessageForm)</li> <li>controls_ (endstone::ActionForm, endstone::ModalForm)</li> <li>created_ (endstone::BanEntry)</li> <li>captureState (endstone::Block)</li> <li>clone (endstone::Block, endstone::ItemMeta, endstone::ItemStack, endstone::MapMeta)</li> <li>cancel (endstone::Cancellable, endstone::ICancellable, endstone::Task)</li> <li>ChunkEvent (endstone::ChunkEvent)</li> <li>chunk_ (endstone::ChunkEvent)</li> <li>ChunkLoadEvent (endstone::ChunkLoadEvent)</li> <li>ChunkUnloadEvent (endstone::ChunkUnloadEvent)</li> <li>Color (endstone::Color)</li> <li>Command (endstone::Command)</li> <li>command_map_ (endstone::Command)</li> <li>CommandMap (endstone::CommandMap)</li> <li>clearCommands (endstone::CommandMap)</li> <li>Callback (endstone::CommandSenderWrapper)</li> <li>CommandSenderWrapper (endstone::CommandSenderWrapper)</li> <li>canEnchantItem (endstone::Enchantment)</li> <li>conflictsWith (endstone::Enchantment)</li> <li>cancelled_ (endstone::Event)</li> <li>callEvent (endstone::EventHandler, endstone::PluginManager)</li> <li>clear (endstone::Inventory)</li> <li>contains (endstone::Inventory)</li> <li>containsAtLeast (endstone::Inventory)</li> <li>create (endstone::ItemStack)</li> <li>critical (endstone::Logger)</li> <li>caption_ (endstone::MapCursor)</li> <li>children_ (endstone::Permission, endstone::detail::PermissionBuilder)</li> <li>closeForm (endstone::Player)</li> <li>command_ (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>clicked_position_ (endstone::PlayerInteractEvent)</li> <li>current_ (endstone::PlayerItemHeldEvent)</li> <li>commands_ (endstone::PluginDescription)</li> <li>contributors_ (endstone::PluginDescription)</li> <li>clearPlugins (endstone::PluginManager)</li> <li>cancelTask (endstone::Scheduler)</li> <li>cancelTasks (endstone::Scheduler)</li> <li>clearSlot (endstone::Scoreboard)</li> <li>createBlockData (endstone::Server)</li> <li>createBossBar (endstone::Server)</li> <li>createMap (endstone::Server)</li> <li>createScoreboard (endstone::Server)</li> <li>cape_id_ (endstone::Skin)</li> <li>cape_image_ (endstone::Skin)</li> <li>CommandBuilder (endstone::detail::CommandBuilder)</li> <li>children (endstone::detail::PermissionBuilder)</li> <li>command (endstone::detail::PluginDescriptionBuilder)</li> <li>commands (endstone::detail::PluginDescriptionBuilder)</li> <li>contributors (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#d","title":"d","text":"<ul> <li>damage_ (endstone::ActorDamageEvent, endstone::ItemMeta)</li> <li>damage_source_ (endstone::ActorDamageEvent, endstone::ActorDeathEvent)</li> <li>Date (endstone::BanEntry)</li> <li>DateFormat (endstone::BanEntry)</li> <li>direction_ (endstone::BlockPistonEvent, endstone::MapCursor)</li> <li>DEFAULT_ALPHA (endstone::Color)</li> <li>DarkAqua (endstone::ColorFormat)</li> <li>DarkBlue (endstone::ColorFormat)</li> <li>DarkGray (endstone::ColorFormat)</li> <li>DarkGreen (endstone::ColorFormat)</li> <li>DarkPurple (endstone::ColorFormat)</li> <li>DarkRed (endstone::ColorFormat)</li> <li>description_ (endstone::Command, endstone::Permission, endstone::PluginDescription, endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder)</li> <li>dispatch (endstone::CommandMap)</li> <li>dropItem (endstone::Dimension)</li> <li>DimensionEvent (endstone::DimensionEvent)</li> <li>dimension_ (endstone::DimensionEvent, endstone::Location)</li> <li>Divider (endstone::Divider)</li> <li>Dropdown (endstone::Dropdown, endstone::StepSlider)</li> <li>default_index_ (endstone::Dropdown)</li> <li>data_ (endstone::Image, endstone::ItemStack)</li> <li>display_name_ (endstone::ItemMeta)</li> <li>debug (endstone::Logger)</li> <li>drawImage (endstone::MapCanvas)</li> <li>DefaultPermission (endstone::Permission)</li> <li>default_value_ (endstone::Permission, endstone::Slider, endstone::Toggle, endstone::detail::PermissionBuilder)</li> <li>death_message_ (endstone::PlayerDeathEvent)</li> <li>drop_ (endstone::PlayerDropItemEvent)</li> <li>data_folder_ (endstone::Plugin)</li> <li>default_permission_ (endstone::PluginDescription)</li> <li>depend_ (endstone::PluginDescription)</li> <li>disablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>disablePlugins (endstone::PluginManager)</li> <li>dispatchCommand (endstone::Server)</li> <li>deserialize (endstone::ServerListPingEvent)</li> <li>default_text_ (endstone::TextInput)</li> <li>data (endstone::UUID)</li> <li>distance (endstone::Vector)</li> <li>distanceSquared (endstone::Vector)</li> <li>description (endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder, endstone::detail::PluginDescriptionBuilder)</li> <li>default_ (endstone::detail::PermissionBuilder)</li> <li>default_permission (endstone::detail::PluginDescriptionBuilder)</li> <li>depend (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#e","title":"e","text":"<ul> <li>ENDSTONE_EVENT (endstone::ActorKnockbackEvent, endstone::BlockCookEvent, endstone::BlockPistonExtendEvent, endstone::BlockPistonRetractEvent, endstone::ChunkLoadEvent, endstone::ChunkUnloadEvent, endstone::LeavesDecayEvent, endstone::PacketSendEvent, endstone::PlayerChatEvent, endstone::PlayerDeathEvent, endstone::PlayerInteractEvent, endstone::PlayerJoinEvent, endstone::PlayerJumpEvent, endstone::PlayerKickEvent, endstone::PlayerMoveEvent, endstone::PlayerPickupItemEvent, endstone::PlayerQuitEvent, endstone::PlayerSkinChangeEvent, endstone::PlayerTeleportEvent)</li> <li>expiration_ (endstone::BanEntry)</li> <li>Escape (endstone::ColorFormat)</li> <li>execute (endstone::Command, endstone::PluginCommand)</li> <li>Event (endstone::Event, endstone::ServerEvent)</li> <li>EventHandler (endstone::EventHandler)</li> <li>event_ (endstone::EventHandler, endstone::HandlerList)</li> <li>executor_ (endstone::EventHandler, endstone::PluginCommand)</li> <li>equals (endstone::ItemFactory)</li> <li>enchantments_ (endstone::ItemMeta)</li> <li>error (endstone::Logger)</li> <li>emote_id_ (endstone::PlayerEmoteEvent)</li> <li>enabled_ (endstone::Plugin)</li> <li>enablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>enablePlugins (endstone::PluginManager)</li> <li>empty (endstone::Translatable)</li> <li>end (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_members/#f","title":"f","text":"<ul> <li>from_ (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>fromABGR (endstone::Color)</li> <li>fromBGR (endstone::Color)</li> <li>fromRGB (endstone::Color)</li> <li>fromRGBA (endstone::Color)</li> <li>Form (endstone::Form)</li> <li>fromArray (endstone::Image)</li> <li>fromBuffer (endstone::Image)</li> <li>first (endstone::Inventory)</li> <li>firstEmpty (endstone::Inventory)</li> <li>FormVariant (endstone::Player)</li> <li>format_ (endstone::PlayerChatEvent)</li> <li>full_name_ (endstone::PluginDescription)</li> <li>forEach (endstone::Registry)</li> <li>format (fmt::formatter&lt; endstone::Actor &gt;, fmt::formatter&lt; endstone::Block &gt;, fmt::formatter&lt; endstone::BlockData &gt;, fmt::formatter&lt; endstone::BlockState &gt;, fmt::formatter&lt; endstone::BlockStates &gt;, fmt::formatter&lt; endstone::BlockStates::mapped_type &gt;, fmt::formatter&lt; endstone::BlockStates::value_type &gt;, fmt::formatter&lt; endstone::Chunk &gt;, fmt::formatter&lt; endstone::DamageSource &gt;, fmt::formatter&lt; endstone::Dimension &gt;, fmt::formatter&lt; endstone::ItemStack &gt;, fmt::formatter&lt; endstone::ItemType &gt;, fmt::formatter&lt; endstone::Location &gt;)</li> </ul>"},{"location":"reference/cpp/class_members/#g","title":"g","text":"<ul> <li>getContent (endstone::ActionForm, endstone::MessageForm)</li> <li>getControls (endstone::ActionForm, endstone::ModalForm)</li> <li>getOnSubmit (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>getDimension (endstone::Actor, endstone::Block, endstone::BlockState, endstone::Chunk, endstone::DimensionEvent, endstone::Level, endstone::Location, endstone::MapView)</li> <li>getHealth (endstone::Actor)</li> <li>getId (endstone::Actor, endstone::Enchantment, endstone::ItemType, endstone::MapView, endstone::Skin)</li> <li>getLevel (endstone::Actor, endstone::Chunk, endstone::Dimension, endstone::LevelEvent, endstone::Server, endstone::WeatherEvent)</li> <li>getLocation (endstone::Actor, endstone::ActorExplodeEvent, endstone::Block, endstone::BlockState)</li> <li>getMaxHealth (endstone::Actor)</li> <li>getNameTag (endstone::Actor)</li> <li>getRuntimeId (endstone::Actor, endstone::BlockData)</li> <li>getScoreTag (endstone::Actor)</li> <li>getScoreboardTags (endstone::Actor)</li> <li>getType (endstone::Actor, endstone::Block, endstone::BlockData, endstone::BlockState, endstone::DamageSource, endstone::Dimension, endstone::ItemMeta, endstone::ItemStack, endstone::MapCursor, endstone::MapMeta, endstone::ServerLoadEvent)</li> <li>getVelocity (endstone::Actor)</li> <li>getDamage (endstone::ActorDamageEvent, endstone::ItemMeta)</li> <li>getDamageSource (endstone::ActorDamageEvent, endstone::ActorDeathEvent)</li> <li>getEventName (endstone::ActorDamageEvent, endstone::ActorDeathEvent, endstone::ActorExplodeEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::ActorTeleportEvent, endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::BroadcastMessageEvent, endstone::Event, endstone::PacketReceiveEvent, endstone::PlayerCommandEvent, endstone::PlayerEmoteEvent, endstone::PlayerGameModeChangeEvent, endstone::PlayerInteractActorEvent, endstone::PlayerLoginEvent, endstone::PlayerRespawnEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ScriptMessageEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>getActor (endstone::ActorEvent, endstone::DamageSource, endstone::PlayerInteractActorEvent)</li> <li>getBlockList (endstone::ActorExplodeEvent)</li> <li>getKnockback (endstone::ActorKnockbackEvent)</li> <li>getSource (endstone::ActorKnockbackEvent, endstone::BanEntry, endstone::BlockCookEvent)</li> <li>getFrom (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>getTo (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>getCreated (endstone::BanEntry)</li> <li>getExpiration (endstone::BanEntry)</li> <li>getReason (endstone::BanEntry, endstone::PlayerKickEvent)</li> <li>getBanEntry (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>getEntries (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList, endstone::Scoreboard)</li> <li>getData (endstone::Block, endstone::BlockState, endstone::Image, endstone::ItemStack)</li> <li>getRelative (endstone::Block)</li> <li>getX (endstone::Block, endstone::BlockState, endstone::Chunk, endstone::MapCursor, endstone::Vector)</li> <li>getY (endstone::Block, endstone::BlockState, endstone::MapCursor, endstone::Vector)</li> <li>getZ (endstone::Block, endstone::BlockState, endstone::Chunk, endstone::Vector)</li> <li>getPlayer (endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::PacketReceiveEvent, endstone::PacketSendEvent, endstone::PlayerEvent, endstone::Server)</li> <li>getBlock (endstone::BlockCommandSender, endstone::BlockEvent, endstone::BlockState, endstone::PlayerInteractEvent)</li> <li>getResult (endstone::BlockCookEvent, endstone::Recipe)</li> <li>getBlockStates (endstone::BlockData)</li> <li>getDirection (endstone::BlockPistonEvent, endstone::Location, endstone::MapCursor)</li> <li>getBlockAgainst (endstone::BlockPlaceEvent)</li> <li>getBlockPlacedState (endstone::BlockPlaceEvent)</li> <li>getBlockReplaced (endstone::BlockPlaceEvent)</li> <li>getColor (endstone::BossBar, endstone::Image)</li> <li>getPlayers (endstone::BossBar)</li> <li>getProgress (endstone::BossBar)</li> <li>getStyle (endstone::BossBar)</li> <li>getTitle (endstone::BossBar, endstone::Form)</li> <li>getMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::ScriptMessageEvent)</li> <li>getRecipients (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>getIcon (endstone::Button, endstone::ModalForm)</li> <li>getOnClick (endstone::Button)</li> <li>getText (endstone::Button, endstone::Label, endstone::Translatable)</li> <li>getChunk (endstone::ChunkEvent)</li> <li>getAlpha (endstone::Color)</li> <li>getBlue (endstone::Color)</li> <li>getGreen (endstone::Color)</li> <li>getRed (endstone::Color)</li> <li>green_ (endstone::Color)</li> <li>Gold (endstone::ColorFormat)</li> <li>Gray (endstone::ColorFormat)</li> <li>Green (endstone::ColorFormat)</li> <li>getAliases (endstone::Command)</li> <li>getDescription (endstone::Command, endstone::Permission, endstone::Plugin, endstone::PluginDescription)</li> <li>getName (endstone::Command, endstone::CommandSender, endstone::CommandSenderWrapper, endstone::Criteria, endstone::Dimension, endstone::Level, endstone::Logger, endstone::Objective, endstone::OfflinePlayer, endstone::Permission, endstone::Player, endstone::PlayerBanEntry, endstone::Plugin, endstone::PluginDescription, endstone::Server)</li> <li>getPermissions (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription, endstone::PluginManager)</li> <li>getUsages (endstone::Command)</li> <li>getCommand (endstone::CommandMap, endstone::PlayerCommandEvent, endstone::Plugin, endstone::ServerCommandEvent)</li> <li>getServer (endstone::CommandSender, endstone::CommandSenderWrapper, endstone::Plugin, endstone::PluginLoader)</li> <li>getEffectivePermissions (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>getPermissionLevel (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>getDefaultRenderType (endstone::Criteria)</li> <li>getDamagingActor (endstone::DamageSource)</li> <li>getActors (endstone::Dimension, endstone::Level)</li> <li>getBlockAt (endstone::Dimension)</li> <li>getHighestBlockAt (endstone::Dimension)</li> <li>getHighestBlockYAt (endstone::Dimension)</li> <li>getLoadedChunks (endstone::Dimension)</li> <li>getDefaultIndex (endstone::Dropdown)</li> <li>getLabel (endstone::Dropdown, endstone::Header, endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>getOptions (endstone::Dropdown)</li> <li>get (endstone::Enchantment, endstone::ItemType, endstone::Registry, endstone::ServiceManager)</li> <li>getMaxLevel (endstone::Enchantment)</li> <li>getStartLevel (endstone::Enchantment)</li> <li>getTranslationKey (endstone::Enchantment, endstone::ItemStack, endstone::ItemType)</li> <li>getEventType (endstone::EventHandler)</li> <li>getPlugin (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginCommand, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::PluginManager)</li> <li>getPriority (endstone::EventHandler)</li> <li>getOnClose (endstone::Form)</li> <li>getHandlers (endstone::HandlerList)</li> <li>getDepth (endstone::Image)</li> <li>getHeight (endstone::Image)</li> <li>getWidth (endstone::Image)</li> <li>getContents (endstone::Inventory)</li> <li>getItem (endstone::Inventory, endstone::PlayerDropItemEvent, endstone::PlayerInteractEvent, endstone::PlayerItemConsumeEvent, endstone::PlayerPickupItemEvent)</li> <li>getMaxStackSize (endstone::Inventory, endstone::ItemStack, endstone::ItemType)</li> <li>getSize (endstone::Inventory)</li> <li>getAddress (endstone::IpBanEntry, endstone::PacketReceiveEvent, endstone::PacketSendEvent, endstone::Player)</li> <li>getItemStack (endstone::Item)</li> <li>getPickupDelay (endstone::Item)</li> <li>getThrower (endstone::Item)</li> <li>getItemMeta (endstone::ItemFactory, endstone::ItemStack)</li> <li>getDisplayName (endstone::ItemMeta, endstone::Objective)</li> <li>getEnchantLevel (endstone::ItemMeta)</li> <li>getEnchants (endstone::ItemMeta)</li> <li>getLore (endstone::ItemMeta)</li> <li>getRepairCost (endstone::ItemMeta)</li> <li>getAmount (endstone::ItemStack)</li> <li>getMaxDurability (endstone::ItemType)</li> <li>getLocale (endstone::Language, endstone::Player)</li> <li>getDimensions (endstone::Level)</li> <li>getSeed (endstone::Level)</li> <li>getTime (endstone::Level)</li> <li>getBlockX (endstone::Location)</li> <li>getBlockY (endstone::Location)</li> <li>getBlockZ (endstone::Location)</li> <li>getPitch (endstone::Location)</li> <li>getYaw (endstone::Location)</li> <li>getBasePixel (endstone::MapCanvas)</li> <li>getBasePixelColor (endstone::MapCanvas)</li> <li>getCursors (endstone::MapCanvas)</li> <li>getMapView (endstone::MapCanvas, endstone::MapMeta)</li> <li>getPixel (endstone::MapCanvas)</li> <li>getPixelColor (endstone::MapCanvas)</li> <li>getCaption (endstone::MapCursor)</li> <li>getMap (endstone::MapInitializeEvent, endstone::Server)</li> <li>getMapId (endstone::MapMeta)</li> <li>getCenterX (endstone::MapView)</li> <li>getCenterZ (endstone::MapView)</li> <li>getRenderers (endstone::MapView)</li> <li>getScale (endstone::MapView)</li> <li>getButton1 (endstone::MessageForm)</li> <li>getButton2 (endstone::MessageForm)</li> <li>getSubmitButton (endstone::ModalForm)</li> <li>getCriteria (endstone::Objective)</li> <li>getDisplaySlot (endstone::Objective)</li> <li>getRenderType (endstone::Objective)</li> <li>getScore (endstone::Objective)</li> <li>getScoreboard (endstone::Objective, endstone::Player, endstone::Score, endstone::Server)</li> <li>getSortOrder (endstone::Objective)</li> <li>getUniqueId (endstone::OfflinePlayer, endstone::PlayerBanEntry)</li> <li>getPacketId (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>getPayload (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>getSubClientId (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>getChildren (endstone::Permission)</li> <li>getDefault (endstone::Permission)</li> <li>getPermissibles (endstone::Permission)</li> <li>getPermissible (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>getRemovalCallback (endstone::PermissionAttachment)</li> <li>getAttachment (endstone::PermissionAttachmentInfo)</li> <li>getPermission (endstone::PermissionAttachmentInfo, endstone::PluginManager)</li> <li>getValue (endstone::PermissionAttachmentInfo, endstone::Score)</li> <li>getAllowFlight (endstone::Player)</li> <li>getDeviceId (endstone::Player)</li> <li>getDeviceOS (endstone::Player)</li> <li>getEnderChest (endstone::Player)</li> <li>getExpLevel (endstone::Player)</li> <li>getExpProgress (endstone::Player)</li> <li>getFlySpeed (endstone::Player)</li> <li>getGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>getGameVersion (endstone::Player)</li> <li>getInventory (endstone::Player)</li> <li>getPing (endstone::Player)</li> <li>getSkin (endstone::Player)</li> <li>getTotalExp (endstone::Player)</li> <li>getWalkSpeed (endstone::Player)</li> <li>getXuid (endstone::Player, endstone::PlayerBanEntry)</li> <li>giveExp (endstone::Player)</li> <li>giveExpLevels (endstone::Player)</li> <li>getBed (endstone::PlayerBedEnterEvent, endstone::PlayerBedLeaveEvent)</li> <li>getFormat (endstone::PlayerChatEvent)</li> <li>getDeathMessage (endstone::PlayerDeathEvent)</li> <li>getEmoteId (endstone::PlayerEmoteEvent)</li> <li>getNewGameMode (endstone::PlayerGameModeChangeEvent)</li> <li>getAction (endstone::PlayerInteractEvent)</li> <li>getBlockFace (endstone::PlayerInteractEvent)</li> <li>getClickedPosition (endstone::PlayerInteractEvent)</li> <li>getBoots (endstone::PlayerInventory)</li> <li>getChestplate (endstone::PlayerInventory)</li> <li>getHeldItemSlot (endstone::PlayerInventory)</li> <li>getHelmet (endstone::PlayerInventory)</li> <li>getItemInMainHand (endstone::PlayerInventory)</li> <li>getItemInOffHand (endstone::PlayerInventory)</li> <li>getLeggings (endstone::PlayerInventory)</li> <li>getHand (endstone::PlayerItemConsumeEvent)</li> <li>getNewSlot (endstone::PlayerItemHeldEvent)</li> <li>getPreviousSlot (endstone::PlayerItemHeldEvent)</li> <li>getJoinMessage (endstone::PlayerJoinEvent)</li> <li>getKickMessage (endstone::PlayerLoginEvent)</li> <li>getQuitMessage (endstone::PlayerQuitEvent)</li> <li>getNewSkin (endstone::PlayerSkinChangeEvent)</li> <li>getSkinChangeMessage (endstone::PlayerSkinChangeEvent)</li> <li>getDataFolder (endstone::Plugin)</li> <li>getLogger (endstone::Plugin, endstone::Server)</li> <li>getPluginLoader (endstone::Plugin)</li> <li>getExecutor (endstone::PluginCommand)</li> <li>getAPIVersion (endstone::PluginDescription)</li> <li>getAuthors (endstone::PluginDescription)</li> <li>getCommands (endstone::PluginDescription)</li> <li>getContributors (endstone::PluginDescription)</li> <li>getDefaultPermission (endstone::PluginDescription)</li> <li>getDepend (endstone::PluginDescription)</li> <li>getFullName (endstone::PluginDescription)</li> <li>getLoad (endstone::PluginDescription)</li> <li>getLoadBefore (endstone::PluginDescription)</li> <li>getPrefix (endstone::PluginDescription)</li> <li>getProvides (endstone::PluginDescription)</li> <li>getSoftDepend (endstone::PluginDescription)</li> <li>getVersion (endstone::PluginDescription, endstone::Server)</li> <li>getWebsite (endstone::PluginDescription)</li> <li>getPluginFileFilters (endstone::PluginLoader)</li> <li>getDefaultPermSubscriptions (endstone::PluginManager)</li> <li>getDefaultPermissions (endstone::PluginManager)</li> <li>getPermissionSubscriptions (endstone::PluginManager)</li> <li>getPlugins (endstone::PluginManager)</li> <li>getOrThrow (endstone::Registry)</li> <li>getPendingTasks (endstone::Scheduler)</li> <li>getEntry (endstone::Score)</li> <li>getObjective (endstone::Score, endstone::Scoreboard)</li> <li>getObjectives (endstone::Scoreboard)</li> <li>getObjectivesByCriteria (endstone::Scoreboard)</li> <li>getScores (endstone::Scoreboard)</li> <li>getMessageId (endstone::ScriptMessageEvent)</li> <li>getSender (endstone::ScriptMessageEvent, endstone::ServerCommandEvent)</li> <li>getAverageMillisecondsPerTick (endstone::Server)</li> <li>getAverageTickUsage (endstone::Server)</li> <li>getAverageTicksPerSecond (endstone::Server)</li> <li>getBanList (endstone::Server)</li> <li>getCommandSender (endstone::Server)</li> <li>getCurrentMillisecondsPerTick (endstone::Server)</li> <li>getCurrentTickUsage (endstone::Server)</li> <li>getCurrentTicksPerSecond (endstone::Server)</li> <li>getEnchantmentRegistry (endstone::Server)</li> <li>getIpBanList (endstone::Server)</li> <li>getItemFactory (endstone::Server)</li> <li>getItemRegistry (endstone::Server)</li> <li>getLanguage (endstone::Server)</li> <li>getMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>getMinecraftVersion (endstone::Server)</li> <li>getOnlineMode (endstone::Server)</li> <li>getOnlinePlayers (endstone::Server)</li> <li>getPluginCommand (endstone::Server)</li> <li>getPluginManager (endstone::Server)</li> <li>getPort (endstone::Server, endstone::SocketAddress)</li> <li>getPortV6 (endstone::Server)</li> <li>getProtocolVersion (endstone::Server)</li> <li>getScheduler (endstone::Server)</li> <li>getServiceManager (endstone::Server)</li> <li>getStartTime (endstone::Server)</li> <li>game_mode_ (endstone::ServerListPingEvent)</li> <li>getLevelName (endstone::ServerListPingEvent)</li> <li>getLocalPort (endstone::ServerListPingEvent)</li> <li>getLocalPortV6 (endstone::ServerListPingEvent)</li> <li>getMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>getMotd (endstone::ServerListPingEvent)</li> <li>getNetworkProtocolVersion (endstone::ServerListPingEvent)</li> <li>getNumPlayers (endstone::ServerListPingEvent)</li> <li>getRemoteHost (endstone::ServerListPingEvent)</li> <li>getRemotePort (endstone::ServerListPingEvent)</li> <li>getServerGuid (endstone::ServerListPingEvent)</li> <li>getCapeId (endstone::Skin)</li> <li>getCapeImage (endstone::Skin)</li> <li>getImage (endstone::Skin)</li> <li>getDefaultValue (endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>getMax (endstone::Slider)</li> <li>getMin (endstone::Slider)</li> <li>getStep (endstone::Slider)</li> <li>getHostname (endstone::SocketAddress)</li> <li>getOwner (endstone::Task)</li> <li>getTaskId (endstone::Task)</li> <li>getPlaceholder (endstone::TextInput)</li> <li>getParameters (endstone::Translatable)</li> </ul>"},{"location":"reference/cpp/class_members/#h","title":"h","text":"<ul> <li>hasFlag (endstone::BossBar)</li> <li>hasPermission (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>HandlerList (endstone::HandlerList)</li> <li>handlers_ (endstone::HandlerList)</li> <li>Header (endstone::Header)</li> <li>height_ (endstone::Image)</li> <li>hasDamage (endstone::ItemMeta)</li> <li>hasDisplayName (endstone::ItemMeta)</li> <li>hasEnchant (endstone::ItemMeta)</li> <li>hasEnchants (endstone::ItemMeta)</li> <li>hasLore (endstone::ItemMeta)</li> <li>hasRepairCost (endstone::ItemMeta)</li> <li>hasItemMeta (endstone::ItemStack)</li> <li>hasMapId (endstone::MapMeta)</li> <li>hasMapView (endstone::MapMeta)</li> <li>hasBlock (endstone::PlayerInteractEvent)</li> <li>hasItem (endstone::PlayerInteractEvent)</li> <li>hand_ (endstone::PlayerItemConsumeEvent)</li> <li>hostname_ (endstone::SocketAddress)</li> </ul>"},{"location":"reference/cpp/class_members/#i","title":"i","text":"<ul> <li>isDead (endstone::Actor)</li> <li>isInLava (endstone::Actor)</li> <li>isInWater (endstone::Actor)</li> <li>isNameTagAlwaysVisible (endstone::Actor)</li> <li>isNameTagVisible (endstone::Actor)</li> <li>isOnGround (endstone::Actor)</li> <li>isValid (endstone::Actor)</li> <li>isBanned (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>isVisible (endstone::BossBar, endstone::MapCursor)</li> <li>icon_ (endstone::Button, endstone::ModalForm)</li> <li>isCancellable (endstone::Cancellable, endstone::Event)</li> <li>isCancelled (endstone::Cancellable, endstone::ICancellable, endstone::Task)</li> <li>Italic (endstone::ColorFormat)</li> <li>isRegistered (endstone::Command)</li> <li>isPermissionSet (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>isReadOnly (endstone::Criteria)</li> <li>isIndirect (endstone::DamageSource)</li> <li>isAsynchronous (endstone::Event)</li> <li>ignore_cancelled_ (endstone::EventHandler)</li> <li>isIgnoreCancelled (endstone::EventHandler)</li> <li>Image (endstone::Image)</li> <li>isEmpty (endstone::Inventory, endstone::ItemMeta, endstone::MapMeta)</li> <li>IpBanEntry (endstone::IpBanEntry)</li> <li>isUnlimitedLifetime (endstone::Item)</li> <li>isApplicable (endstone::ItemFactory)</li> <li>ItemMeta (endstone::ItemMeta)</li> <li>isUnbreakable (endstone::ItemMeta)</li> <li>ItemStack (endstone::ItemStack)</li> <li>isEndstoneItemStack (endstone::ItemStack)</li> <li>isSimilar (endstone::ItemStack)</li> <li>info (endstone::Logger)</li> <li>isEnabledFor (endstone::Logger)</li> <li>isMapEmpty (endstone::MapMeta)</li> <li>initialize (endstone::MapRenderer)</li> <li>isContextual (endstone::MapRenderer)</li> <li>isEndstoneMapRenderer (endstone::MapRenderer)</li> <li>is_contextual_ (endstone::MapRenderer)</li> <li>isLocked (endstone::MapView)</li> <li>isUnlimitedTracking (endstone::MapView)</li> <li>isVirtual (endstone::MapView)</li> <li>isGliding (endstone::Mob)</li> <li>isDisplayed (endstone::Objective)</li> <li>isModifiable (endstone::Objective)</li> <li>init (endstone::Permission)</li> <li>isFlying (endstone::Player)</li> <li>isOp (endstone::Player)</li> <li>isSneaking (endstone::Player)</li> <li>isSprinting (endstone::Player)</li> <li>isMuted (endstone::PlayerEmoteEvent)</li> <li>item_ (endstone::PlayerInteractEvent, endstone::PlayerItemConsumeEvent, endstone::PlayerPickupItemEvent)</li> <li>isEnabled (endstone::Plugin)</li> <li>isPluginEnabled (endstone::PluginManager)</li> <li>isQueued (endstone::Scheduler)</li> <li>isRunning (endstone::Scheduler)</li> <li>isScoreSet (endstone::Score)</li> <li>isPrimaryThread (endstone::Server)</li> <li>id_ (endstone::Skin)</li> <li>image_ (endstone::Skin)</li> <li>isSync (endstone::Task)</li> <li>isNil (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_members/#j","title":"j","text":"<ul> <li>join_message_ (endstone::PlayerJoinEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#k","title":"k","text":"<ul> <li>knockback_ (endstone::ActorKnockbackEvent)</li> <li>kick (endstone::Player)</li> </ul>"},{"location":"reference/cpp/class_members/#l","title":"l","text":"<ul> <li>location_ (endstone::ActorExplodeEvent)</li> <li>LightPurple (endstone::ColorFormat)</li> <li>label_ (endstone::Dropdown, endstone::Header, endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>lore_ (endstone::ItemMeta)</li> <li>Label (endstone::Label)</li> <li>LevelEvent (endstone::LevelEvent)</li> <li>level_ (endstone::LevelEvent, endstone::WeatherEvent)</li> <li>Location (endstone::Location)</li> <li>Level (endstone::Logger)</li> <li>Logger (endstone::Logger)</li> <li>log (endstone::Logger)</li> <li>loader_ (endstone::Plugin)</li> <li>logger_ (endstone::Plugin)</li> <li>load_ (endstone::PluginDescription)</li> <li>load_before_ (endstone::PluginDescription)</li> <li>loadPlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>loadPlugins (endstone::PluginLoader, endstone::PluginManager)</li> <li>level_name_ (endstone::ServerListPingEvent)</li> <li>local_port_ (endstone::ServerListPingEvent)</li> <li>local_port_v6_ (endstone::ServerListPingEvent)</li> <li>LoadType (endstone::ServerLoadEvent)</li> <li>load (endstone::ServiceManager, endstone::detail::PluginDescriptionBuilder)</li> <li>length (endstone::Vector)</li> <li>lengthSquared (endstone::Vector)</li> <li>load_before (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#m","title":"m","text":"<ul> <li>mob_ (endstone::ActorKnockbackEvent)</li> <li>message_ (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::PlayerLoginEvent, endstone::PlayerSkinChangeEvent, endstone::ScriptMessageEvent)</li> <li>MaterialAmethyst (endstone::ColorFormat)</li> <li>MaterialCopper (endstone::ColorFormat)</li> <li>MaterialDiamond (endstone::ColorFormat)</li> <li>MaterialEmerald (endstone::ColorFormat)</li> <li>MaterialGold (endstone::ColorFormat)</li> <li>MaterialIron (endstone::ColorFormat)</li> <li>MaterialLapis (endstone::ColorFormat)</li> <li>MaterialNetherite (endstone::ColorFormat)</li> <li>MaterialQuartz (endstone::ColorFormat)</li> <li>MaterialRedstone (endstone::ColorFormat)</li> <li>MaterialResin (endstone::ColorFormat)</li> <li>MinecoinGold (endstone::ColorFormat)</li> <li>mtx_ (endstone::HandlerList)</li> <li>meta_ (endstone::ItemStack)</li> <li>MapCursor (endstone::MapCursor)</li> <li>MapInitializeEvent (endstone::MapInitializeEvent)</li> <li>map_ (endstone::MapInitializeEvent)</li> <li>MapMeta (endstone::MapMeta)</li> <li>map_id_ (endstone::MapMeta)</li> <li>MapRenderer (endstone::MapRenderer)</li> <li>muted_ (endstone::PlayerEmoteEvent)</li> <li>message_id_ (endstone::ScriptMessageEvent)</li> <li>max_players_ (endstone::ServerListPingEvent)</li> <li>minecraft_version_network_ (endstone::ServerListPingEvent)</li> <li>motd_ (endstone::ServerListPingEvent)</li> <li>max_ (endstone::Slider)</li> <li>min_ (endstone::Slider)</li> </ul>"},{"location":"reference/cpp/class_members/#n","title":"n","text":"<ul> <li>NAME (endstone::ActorDamageEvent, endstone::ActorDeathEvent, endstone::ActorExplodeEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::ActorTeleportEvent, endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::BroadcastMessageEvent, endstone::PacketReceiveEvent, endstone::PlayerCommandEvent, endstone::PlayerEmoteEvent, endstone::PlayerGameModeChangeEvent, endstone::PlayerInteractActorEvent, endstone::PlayerLoginEvent, endstone::PlayerRespawnEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ScriptMessageEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>name_ (endstone::Command, endstone::Permission, endstone::PlayerBanEntry, endstone::PluginDescription, endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder)</li> <li>new_game_mode_ (endstone::PlayerGameModeChangeEvent)</li> <li>new_skin_ (endstone::PlayerSkinChangeEvent)</li> <li>network_protocol_version_ (endstone::ServerListPingEvent)</li> <li>num_players_ (endstone::ServerListPingEvent)</li> <li>normalize (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#o","title":"o","text":"<ul> <li>OnSubmitCallback (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>on_submit_ (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>OnClickCallback (endstone::Button)</li> <li>on_click_ (endstone::Button)</li> <li>operator!= (endstone::Color, endstone::ItemStack, endstone::ItemType, endstone::Objective)</li> <li>operator== (endstone::Color, endstone::ItemStack, endstone::ItemType, endstone::Objective, endstone::Vector)</li> <li>Obfuscated (endstone::ColorFormat)</li> <li>onCommand (endstone::CommandExecutor)</li> <li>operator= (endstone::CommandMap, endstone::Event, endstone::Plugin, endstone::PluginLoader, endstone::PluginManager, endstone::Server)</li> <li>on_error_ (endstone::CommandSenderWrapper)</li> <li>on_message_ (endstone::CommandSenderWrapper)</li> <li>options_ (endstone::Dropdown)</li> <li>OnCloseCallback (endstone::Form)</li> <li>on_close_ (endstone::Form)</li> <li>owned_payload_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>onDisable (endstone::Plugin)</li> <li>onEnable (endstone::Plugin)</li> <li>onLoad (endstone::Plugin)</li> <li>owner_ (endstone::PluginCommand)</li> <li>operator* (endstone::Vector)</li> <li>operator*= (endstone::Vector)</li> <li>operator+ (endstone::Vector)</li> <li>operator+= (endstone::Vector)</li> <li>operator- (endstone::Vector)</li> <li>operator-= (endstone::Vector)</li> <li>operator/ (endstone::Vector)</li> <li>operator/= (endstone::Vector)</li> <li>operator() (std::hash&lt; endstone::UUID &gt;)</li> </ul>"},{"location":"reference/cpp/class_members/#p","title":"p","text":"<ul> <li>player_ (endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::PacketReceiveEvent, endstone::PacketSendEvent, endstone::PlayerEvent)</li> <li>placed_against_ (endstone::BlockPlaceEvent)</li> <li>placed_block_ (endstone::BlockPlaceEvent)</li> <li>permissions_ (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription, endstone::detail::CommandBuilder)</li> <li>plugin_ (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginDisableEvent, endstone::PluginEnableEvent)</li> <li>priority_ (endstone::EventHandler)</li> <li>pitch_ (endstone::Location)</li> <li>PacketReceiveEvent (endstone::PacketReceiveEvent)</li> <li>packet_id_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>payload_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>PacketSendEvent (endstone::PacketSendEvent)</li> <li>Permission (endstone::Permission)</li> <li>plugin_manager_ (endstone::Permission)</li> <li>PermissionAttachment (endstone::PermissionAttachment)</li> <li>permissible_ (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>PermissionAttachmentInfo (endstone::PermissionAttachmentInfo)</li> <li>permission_ (endstone::PermissionAttachmentInfo)</li> <li>performCommand (endstone::Player)</li> <li>playSound (endstone::Player)</li> <li>PlayerBanEntry (endstone::PlayerBanEntry)</li> <li>PlayerBedEnterEvent (endstone::PlayerBedEnterEvent)</li> <li>PlayerBedLeaveEvent (endstone::PlayerBedLeaveEvent)</li> <li>PlayerChatEvent (endstone::PlayerChatEvent)</li> <li>PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>PlayerDeathEvent (endstone::PlayerDeathEvent)</li> <li>PlayerDropItemEvent (endstone::PlayerDropItemEvent)</li> <li>PlayerEmoteEvent (endstone::PlayerEmoteEvent)</li> <li>PlayerEvent (endstone::PlayerEvent)</li> <li>PlayerGameModeChangeEvent (endstone::PlayerGameModeChangeEvent)</li> <li>PlayerInteractActorEvent (endstone::PlayerInteractActorEvent)</li> <li>PlayerInteractEvent (endstone::PlayerInteractEvent)</li> <li>PlayerItemConsumeEvent (endstone::PlayerItemConsumeEvent)</li> <li>PlayerItemHeldEvent (endstone::PlayerItemHeldEvent)</li> <li>previous_ (endstone::PlayerItemHeldEvent)</li> <li>PlayerJoinEvent (endstone::PlayerJoinEvent)</li> <li>PlayerMoveEvent (endstone::PlayerJumpEvent, endstone::PlayerMoveEvent, endstone::PlayerTeleportEvent)</li> <li>PlayerKickEvent (endstone::PlayerKickEvent)</li> <li>PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>PlayerPickupItemEvent (endstone::PlayerPickupItemEvent)</li> <li>PlayerQuitEvent (endstone::PlayerQuitEvent)</li> <li>PlayerRespawnEvent (endstone::PlayerRespawnEvent)</li> <li>PlayerSkinChangeEvent (endstone::PlayerSkinChangeEvent)</li> <li>Plugin (endstone::Plugin)</li> <li>PluginCommand (endstone::PluginCommand)</li> <li>PluginDescription (endstone::PluginDescription)</li> <li>prefix_ (endstone::PluginDescription)</li> <li>provides_ (endstone::PluginDescription)</li> <li>PluginDisableEvent (endstone::PluginDisableEvent)</li> <li>PluginEnableEvent (endstone::PluginEnableEvent)</li> <li>PluginLoader (endstone::PluginLoader)</li> <li>PluginManager (endstone::PluginManager)</li> <li>ping_response_ (endstone::ServerListPingEvent)</li> <li>port_ (endstone::SocketAddress)</li> <li>placeholder_ (endstone::TextInput)</li> <li>params_ (endstone::Translatable)</li> <li>permissions (endstone::detail::CommandBuilder, endstone::detail::PluginDescriptionBuilder)</li> <li>PermissionBuilder (endstone::detail::PermissionBuilder)</li> <li>permission (endstone::detail::PluginDescriptionBuilder)</li> <li>prefix (endstone::detail::PluginDescriptionBuilder)</li> <li>provides (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#q","title":"q","text":"<ul> <li>quit_message_ (endstone::PlayerQuitEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#r","title":"r","text":"<ul> <li>remove (endstone::Actor, endstone::Inventory, endstone::PermissionAttachment)</li> <li>removeScoreboardTag (endstone::Actor)</li> <li>raw_knockback_ (endstone::ActorKnockbackEvent)</li> <li>reason_ (endstone::BanEntry, endstone::PlayerKickEvent)</li> <li>removeBan (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>result_ (endstone::BlockCookEvent)</li> <li>removeAll (endstone::BossBar)</li> <li>removeFlag (endstone::BossBar)</li> <li>removePlayer (endstone::BossBar)</li> <li>recipients_ (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>red_ (endstone::Color)</li> <li>Red (endstone::ColorFormat)</li> <li>Reset (endstone::ColorFormat)</li> <li>registerTo (endstone::Command)</li> <li>registerCommand (endstone::CommandMap)</li> <li>recalculatePermissions (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>removeAttachment (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>registerHandler (endstone::HandlerList)</li> <li>removeItem (endstone::Inventory)</li> <li>removeEnchant (endstone::ItemMeta)</li> <li>removeEnchants (endstone::ItemMeta)</li> <li>repair_cost_ (endstone::ItemMeta)</li> <li>render (endstone::MapRenderer)</li> <li>removeRenderer (endstone::MapView)</li> <li>recalculatePermissibles (endstone::Permission)</li> <li>removed_ (endstone::PermissionAttachment)</li> <li>resetTitle (endstone::Player)</li> <li>registerEvent (endstone::Plugin, endstone::PluginManager)</li> <li>recalculatePermissionDefaults (endstone::PluginManager)</li> <li>registerLoader (endstone::PluginManager)</li> <li>removePermission (endstone::PluginManager)</li> <li>runTask (endstone::Scheduler)</li> <li>runTaskAsync (endstone::Scheduler)</li> <li>runTaskLater (endstone::Scheduler)</li> <li>runTaskLaterAsync (endstone::Scheduler)</li> <li>runTaskTimer (endstone::Scheduler)</li> <li>runTaskTimerAsync (endstone::Scheduler)</li> <li>resetScores (endstone::Scoreboard)</li> <li>reload (endstone::Server)</li> <li>reloadData (endstone::Server)</li> <li>remote_host_ (endstone::ServerListPingEvent)</li> <li>remote_port_ (endstone::ServerListPingEvent)</li> <li>registerService (endstone::ServiceManager)</li> </ul>"},{"location":"reference/cpp/class_members/#s","title":"s","text":"<ul> <li>setContent (endstone::ActionForm, endstone::MessageForm)</li> <li>setControls (endstone::ActionForm, endstone::ModalForm)</li> <li>setOnSubmit (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>setHealth (endstone::Actor)</li> <li>setNameTag (endstone::Actor)</li> <li>setNameTagAlwaysVisible (endstone::Actor)</li> <li>setNameTagVisible (endstone::Actor)</li> <li>setRotation (endstone::Actor)</li> <li>setScoreTag (endstone::Actor)</li> <li>setDamage (endstone::ActorDamageEvent, endstone::ItemMeta)</li> <li>setKnockback (endstone::ActorKnockbackEvent)</li> <li>source_ (endstone::ActorKnockbackEvent, endstone::BanEntry, endstone::BlockCookEvent)</li> <li>setFrom (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>setTo (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>setCreated (endstone::BanEntry)</li> <li>setExpiration (endstone::BanEntry)</li> <li>setReason (endstone::BanEntry, endstone::PlayerKickEvent)</li> <li>setSource (endstone::BanEntry)</li> <li>setData (endstone::Block, endstone::BlockState, endstone::ItemStack)</li> <li>setType (endstone::Block, endstone::BlockState, endstone::ItemStack, endstone::MapCursor)</li> <li>setResult (endstone::BlockCookEvent)</li> <li>setColor (endstone::BossBar, endstone::Image)</li> <li>setProgress (endstone::BossBar)</li> <li>setStyle (endstone::BossBar)</li> <li>setTitle (endstone::BossBar, endstone::Form)</li> <li>setVisible (endstone::BossBar, endstone::MapCursor)</li> <li>setMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>setIcon (endstone::Button, endstone::ModalForm)</li> <li>setOnClick (endstone::Button)</li> <li>setText (endstone::Button, endstone::Label)</li> <li>setCancelled (endstone::Cancellable, endstone::ICancellable)</li> <li>setAlpha (endstone::Color)</li> <li>setBlue (endstone::Color)</li> <li>setGreen (endstone::Color)</li> <li>setRed (endstone::Color)</li> <li>setAliases (endstone::Command)</li> <li>setDescription (endstone::Command, endstone::Permission)</li> <li>setName (endstone::Command)</li> <li>setPermissions (endstone::Command)</li> <li>setUsages (endstone::Command)</li> <li>sendErrorMessage (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>sendMessage (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>sender_ (endstone::CommandSenderWrapper, endstone::ScriptMessageEvent, endstone::ServerCommandEvent)</li> <li>spawnActor (endstone::Dimension)</li> <li>setDefaultIndex (endstone::Dropdown)</li> <li>setLabel (endstone::Dropdown, endstone::Header, endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>setOptions (endstone::Dropdown)</li> <li>setOnClose (endstone::Form)</li> <li>setContents (endstone::Inventory)</li> <li>setItem (endstone::Inventory)</li> <li>setItemStack (endstone::Item)</li> <li>setPickupDelay (endstone::Item)</li> <li>setThrower (endstone::Item)</li> <li>setUnlimitedLifetime (endstone::Item)</li> <li>setDisplayName (endstone::ItemMeta, endstone::Objective)</li> <li>setLore (endstone::ItemMeta)</li> <li>setRepairCost (endstone::ItemMeta)</li> <li>setUnbreakable (endstone::ItemMeta)</li> <li>setAmount (endstone::ItemStack)</li> <li>setItemMeta (endstone::ItemStack)</li> <li>setItemMeta0 (endstone::ItemStack)</li> <li>setTime (endstone::Level)</li> <li>setDimension (endstone::Location, endstone::MapView)</li> <li>setPitch (endstone::Location)</li> <li>setYaw (endstone::Location)</li> <li>setLevel (endstone::Logger)</li> <li>setCursors (endstone::MapCanvas)</li> <li>setPixel (endstone::MapCanvas)</li> <li>setPixelColor (endstone::MapCanvas)</li> <li>setCaption (endstone::MapCursor)</li> <li>setDirection (endstone::MapCursor)</li> <li>setX (endstone::MapCursor, endstone::Vector)</li> <li>setY (endstone::MapCursor, endstone::Vector)</li> <li>setMapId (endstone::MapMeta)</li> <li>setMapView (endstone::MapMeta)</li> <li>Scale (endstone::MapView)</li> <li>setCenterX (endstone::MapView)</li> <li>setCenterZ (endstone::MapView)</li> <li>setLocked (endstone::MapView)</li> <li>setScale (endstone::MapView)</li> <li>setUnlimitedTracking (endstone::MapView)</li> <li>setButton1 (endstone::MessageForm)</li> <li>setButton2 (endstone::MessageForm)</li> <li>setSubmitButton (endstone::ModalForm)</li> <li>submit_button_text_ (endstone::ModalForm)</li> <li>setDisplay (endstone::Objective)</li> <li>setDisplaySlot (endstone::Objective)</li> <li>setSortOrder (endstone::Objective)</li> <li>setPayload (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>sub_client_id_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>setDefault (endstone::Permission)</li> <li>setPermission (endstone::PermissionAttachment)</li> <li>setRemovalCallback (endstone::PermissionAttachment)</li> <li>sendForm (endstone::Player)</li> <li>sendPacket (endstone::Player)</li> <li>sendPopup (endstone::Player)</li> <li>sendTip (endstone::Player)</li> <li>sendTitle (endstone::Player)</li> <li>sendToast (endstone::Player)</li> <li>setAllowFlight (endstone::Player)</li> <li>setExpLevel (endstone::Player)</li> <li>setExpProgress (endstone::Player)</li> <li>setFlySpeed (endstone::Player)</li> <li>setFlying (endstone::Player)</li> <li>setGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>setOp (endstone::Player)</li> <li>setScoreboard (endstone::Player)</li> <li>setSneaking (endstone::Player)</li> <li>setSprinting (endstone::Player)</li> <li>setWalkSpeed (endstone::Player)</li> <li>spawnParticle (endstone::Player)</li> <li>stopAllSounds (endstone::Player)</li> <li>stopSound (endstone::Player)</li> <li>setFormat (endstone::PlayerChatEvent)</li> <li>setPlayer (endstone::PlayerChatEvent)</li> <li>setCommand (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>setDeathMessage (endstone::PlayerDeathEvent)</li> <li>setMuted (endstone::PlayerEmoteEvent)</li> <li>setBoots (endstone::PlayerInventory)</li> <li>setChestplate (endstone::PlayerInventory)</li> <li>setHeldItemSlot (endstone::PlayerInventory)</li> <li>setHelmet (endstone::PlayerInventory)</li> <li>setItemInMainHand (endstone::PlayerInventory)</li> <li>setItemInOffHand (endstone::PlayerInventory)</li> <li>setLeggings (endstone::PlayerInventory)</li> <li>setJoinMessage (endstone::PlayerJoinEvent)</li> <li>setKickMessage (endstone::PlayerLoginEvent)</li> <li>setQuitMessage (endstone::PlayerQuitEvent)</li> <li>setSkinChangeMessage (endstone::PlayerSkinChangeEvent)</li> <li>server_ (endstone::Plugin, endstone::PluginLoader)</li> <li>setEnabled (endstone::Plugin)</li> <li>setExecutor (endstone::PluginCommand)</li> <li>soft_depend_ (endstone::PluginDescription)</li> <li>subscribeToDefaultPerms (endstone::PluginManager)</li> <li>subscribeToPermission (endstone::PluginManager)</li> <li>setValue (endstone::Score)</li> <li>ScriptMessageEvent (endstone::ScriptMessageEvent)</li> <li>Server (endstone::Server)</li> <li>setMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>shutdown (endstone::Server)</li> <li>ServerCommandEvent (endstone::ServerCommandEvent)</li> <li>ServerListPingEvent (endstone::ServerListPingEvent)</li> <li>serialize (endstone::ServerListPingEvent)</li> <li>server_guid_ (endstone::ServerListPingEvent)</li> <li>setLevelName (endstone::ServerListPingEvent)</li> <li>setLocalPort (endstone::ServerListPingEvent)</li> <li>setLocalPortV6 (endstone::ServerListPingEvent)</li> <li>setMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>setMotd (endstone::ServerListPingEvent)</li> <li>setNumPlayers (endstone::ServerListPingEvent)</li> <li>setServerGuid (endstone::ServerListPingEvent)</li> <li>ServerLoadEvent (endstone::ServerLoadEvent)</li> <li>Skin (endstone::Skin)</li> <li>Slider (endstone::Slider)</li> <li>setDefaultValue (endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>setMax (endstone::Slider)</li> <li>setMin (endstone::Slider)</li> <li>setStep (endstone::Slider)</li> <li>step_ (endstone::Slider)</li> <li>SocketAddress (endstone::SocketAddress)</li> <li>setPlaceholder (endstone::TextInput)</li> <li>size (endstone::UUID)</li> <li>str (endstone::UUID)</li> <li>swap (endstone::UUID)</li> <li>setZ (endstone::Vector)</li> <li>soft_depend (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#t","title":"t","text":"<ul> <li>teleport (endstone::Actor)</li> <li>to_ (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>text_ (endstone::Button, endstone::Label, endstone::Translatable)</li> <li>testPermission (endstone::Command)</li> <li>testPermissionSilently (endstone::Command)</li> <li>Type (endstone::Criteria, endstone::Dimension, endstone::Image, endstone::ItemMeta, endstone::MapCursor, fmt::formatter&lt; endstone::Actor &gt;, fmt::formatter&lt; endstone::Block &gt;, fmt::formatter&lt; endstone::BlockData &gt;, fmt::formatter&lt; endstone::BlockState &gt;, fmt::formatter&lt; endstone::BlockStates &gt;, fmt::formatter&lt; endstone::BlockStates::mapped_type &gt;, fmt::formatter&lt; endstone::BlockStates::value_type &gt;, fmt::formatter&lt; endstone::DamageSource &gt;, fmt::formatter&lt; endstone::ItemStack &gt;, fmt::formatter&lt; endstone::ItemType &gt;)</li> <li>title_ (endstone::Form)</li> <li>type_ (endstone::Image, endstone::ItemStack, endstone::MapCursor, endstone::ServerLoadEvent)</li> <li>translate (endstone::Language)</li> <li>trace (endstone::Logger)</li> <li>TYPE (endstone::MapMeta)</li> <li>transfer (endstone::Player)</li> <li>TextInput (endstone::TextInput)</li> <li>ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>toThunderState (endstone::ThunderChangeEvent)</li> <li>Toggle (endstone::Toggle)</li> <li>Translatable (endstone::Translatable)</li> <li>toWeatherState (endstone::WeatherChangeEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#u","title":"u","text":"<ul> <li>update (endstone::BlockState)</li> <li>unregisterFrom (endstone::Command)</li> <li>usages_ (endstone::Command, endstone::detail::CommandBuilder)</li> <li>unregister (endstone::HandlerList, endstone::Objective, endstone::ServiceManager)</li> <li>unbreakable_ (endstone::ItemMeta)</li> <li>unsetPermission (endstone::PermissionAttachment)</li> <li>updateCommands (endstone::Player)</li> <li>uuid_ (endstone::PlayerBanEntry)</li> <li>unsubscribeFromDefaultPerms (endstone::PluginManager)</li> <li>unsubscribeFromPermission (endstone::PluginManager)</li> <li>unregisterAll (endstone::ServiceManager)</li> <li>usages (endstone::detail::CommandBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#v","title":"v","text":"<ul> <li>valid_ (endstone::HandlerList)</li> <li>visible_ (endstone::MapCursor)</li> <li>value_ (endstone::PermissionAttachmentInfo)</li> <li>version_ (endstone::PluginDescription)</li> <li>version (endstone::UUID)</li> <li>Vector (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#w","title":"w","text":"<ul> <li>White (endstone::ColorFormat)</li> <li>WHITE (endstone::Colors)</li> <li>width_ (endstone::Image)</li> <li>warning (endstone::Logger)</li> <li>website_ (endstone::PluginDescription)</li> <li>WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>WeatherEvent (endstone::WeatherEvent)</li> <li>website (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_members/#x","title":"x","text":"<ul> <li>x_ (endstone::MapCursor, endstone::Vector)</li> <li>xuid_ (endstone::PlayerBanEntry)</li> </ul>"},{"location":"reference/cpp/class_members/#y","title":"y","text":"<ul> <li>Yellow (endstone::ColorFormat)</li> <li>yaw_ (endstone::Location)</li> <li>y_ (endstone::MapCursor, endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#z","title":"z","text":"<ul> <li>z_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#_1","title":"~","text":"<ul> <li>~ActorEvent (endstone::ActorEvent)</li> <li>~ActorExplodeEvent (endstone::ActorExplodeEvent)</li> <li>~ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>~ActorTeleportEvent (endstone::ActorTeleportEvent)</li> <li>~BanList (endstone::BanList)</li> <li>~Block (endstone::Block)</li> <li>~BlockBreakEvent (endstone::BlockBreakEvent)</li> <li>~BlockData (endstone::BlockData)</li> <li>~BlockEvent (endstone::BlockEvent)</li> <li>~BlockPlaceEvent (endstone::BlockPlaceEvent)</li> <li>~BlockState (endstone::BlockState)</li> <li>~BossBar (endstone::BossBar)</li> <li>~Chunk (endstone::Chunk)</li> <li>~ChunkLoadEvent (endstone::ChunkLoadEvent)</li> <li>~ChunkUnloadEvent (endstone::ChunkUnloadEvent)</li> <li>~Command (endstone::Command)</li> <li>~CommandExecutor (endstone::CommandExecutor)</li> <li>~CommandMap (endstone::CommandMap)</li> <li>~Criteria (endstone::Criteria)</li> <li>~DamageSource (endstone::DamageSource)</li> <li>~Dimension (endstone::Dimension)</li> <li>~Enchantment (endstone::Enchantment)</li> <li>~Event (endstone::Event)</li> <li>~ICancellable (endstone::ICancellable)</li> <li>~Inventory (endstone::Inventory)</li> <li>~IpBanList (endstone::IpBanList)</li> <li>~ItemFactory (endstone::ItemFactory)</li> <li>~ItemMeta (endstone::ItemMeta)</li> <li>~ItemStack (endstone::ItemStack)</li> <li>~ItemType (endstone::ItemType)</li> <li>~Language (endstone::Language)</li> <li>~Level (endstone::Level)</li> <li>~Logger (endstone::Logger)</li> <li>~MapCanvas (endstone::MapCanvas)</li> <li>~MapRenderer (endstone::MapRenderer)</li> <li>~MapView (endstone::MapView)</li> <li>~Objective (endstone::Objective)</li> <li>~OfflinePlayer (endstone::OfflinePlayer)</li> <li>~Permissible (endstone::Permissible)</li> <li>~PlayerBanList (endstone::PlayerBanList)</li> <li>~PlayerBedLeaveEvent (endstone::PlayerBedLeaveEvent)</li> <li>~PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>~PlayerEmoteEvent (endstone::PlayerEmoteEvent)</li> <li>~PlayerEvent (endstone::PlayerEvent)</li> <li>~PlayerGameModeChangeEvent (endstone::PlayerGameModeChangeEvent)</li> <li>~PlayerInteractActorEvent (endstone::PlayerInteractActorEvent)</li> <li>~PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>~PlayerRespawnEvent (endstone::PlayerRespawnEvent)</li> <li>~Plugin (endstone::Plugin)</li> <li>~PluginLoader (endstone::PluginLoader)</li> <li>~PluginManager (endstone::PluginManager)</li> <li>~Recipe (endstone::Recipe)</li> <li>~Registry (endstone::Registry)</li> <li>~Scheduler (endstone::Scheduler)</li> <li>~Score (endstone::Score)</li> <li>~Scoreboard (endstone::Scoreboard)</li> <li>~Server (endstone::Server)</li> <li>~Service (endstone::Service)</li> <li>~ServiceManager (endstone::ServiceManager)</li> <li>~Task (endstone::Task)</li> <li>~ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>~WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>~WeatherEvent (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_member_functions/","title":"Class Member Functions","text":""},{"location":"reference/cpp/class_member_functions/#a","title":"a","text":"<ul> <li>ActionForm (endstone::ActionForm)</li> <li>addButton (endstone::ActionForm)</li> <li>addDivider (endstone::ActionForm)</li> <li>addHeader (endstone::ActionForm)</li> <li>addLabel (endstone::ActionForm)</li> <li>addScoreboardTag (endstone::Actor)</li> <li>asItem (endstone::Actor)</li> <li>asMob (endstone::Actor)</li> <li>ActorDamageEvent (endstone::ActorDamageEvent)</li> <li>ActorDeathEvent (endstone::ActorDeathEvent)</li> <li>ActorEvent (endstone::ActorEvent, endstone::ActorRemoveEvent)</li> <li>ActorExplodeEvent (endstone::ActorExplodeEvent)</li> <li>ActorKnockbackEvent (endstone::ActorKnockbackEvent)</li> <li>ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>ActorTeleportEvent (endstone::ActorTeleportEvent)</li> <li>addBan (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>addFlag (endstone::BossBar)</li> <li>addPlayer (endstone::BossBar)</li> <li>asABGR (endstone::Color)</li> <li>asBGR (endstone::Color)</li> <li>asRGB (endstone::Color)</li> <li>asRGBA (endstone::Color)</li> <li>allowChangesFrom (endstone::Command)</li> <li>asPluginCommand (endstone::Command, endstone::PluginCommand)</li> <li>asActor (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>asBlock (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>asCommandSender (endstone::CommandSender, endstone::Permissible)</li> <li>asConsole (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>asPlayer (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>addAttachment (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>addOption (endstone::Dropdown)</li> <li>addItem (endstone::Inventory)</li> <li>all (endstone::Inventory)</li> <li>asMetaFor (endstone::ItemFactory)</li> <li>addEnchant (endstone::ItemMeta)</li> <li>as (endstone::ItemMeta)</li> <li>addRenderer (endstone::MapView)</li> <li>addControl (endstone::ModalForm)</li> <li>addParent (endstone::Permission)</li> <li>addPermission (endstone::PluginManager)</li> <li>addObjective (endstone::Scoreboard)</li> <li>aliases (endstone::detail::CommandBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#b","title":"b","text":"<ul> <li>BlockBreakEvent (endstone::BlockBreakEvent)</li> <li>BlockCookEvent (endstone::BlockCookEvent)</li> <li>BlockEvent (endstone::BlockEvent)</li> <li>BlockPistonEvent (endstone::BlockPistonEvent, endstone::BlockPistonExtendEvent, endstone::BlockPistonRetractEvent)</li> <li>BlockPlaceEvent (endstone::BlockPlaceEvent)</li> <li>BroadcastMessageEvent (endstone::BroadcastMessageEvent)</li> <li>Button (endstone::Button)</li> <li>bake (endstone::HandlerList)</li> <li>broadcast (endstone::Server)</li> <li>broadcastMessage (endstone::Server)</li> <li>begin (endstone::UUID)</li> <li>build (endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder, endstone::detail::PluginDescriptionBuilder)</li> <li>buildCommands (endstone::detail::PluginDescriptionBuilder)</li> <li>buildPermissions (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#c","title":"c","text":"<ul> <li>captureState (endstone::Block)</li> <li>clone (endstone::Block, endstone::ItemMeta, endstone::ItemStack, endstone::MapMeta)</li> <li>cancel (endstone::Cancellable, endstone::ICancellable, endstone::Task)</li> <li>ChunkEvent (endstone::ChunkEvent)</li> <li>ChunkLoadEvent (endstone::ChunkLoadEvent)</li> <li>ChunkUnloadEvent (endstone::ChunkUnloadEvent)</li> <li>Color (endstone::Color)</li> <li>Command (endstone::Command)</li> <li>CommandMap (endstone::CommandMap)</li> <li>clearCommands (endstone::CommandMap)</li> <li>CommandSenderWrapper (endstone::CommandSenderWrapper)</li> <li>canEnchantItem (endstone::Enchantment)</li> <li>conflictsWith (endstone::Enchantment)</li> <li>callEvent (endstone::EventHandler, endstone::PluginManager)</li> <li>clear (endstone::Inventory)</li> <li>contains (endstone::Inventory)</li> <li>containsAtLeast (endstone::Inventory)</li> <li>create (endstone::ItemStack)</li> <li>critical (endstone::Logger)</li> <li>closeForm (endstone::Player)</li> <li>clearPlugins (endstone::PluginManager)</li> <li>cancelTask (endstone::Scheduler)</li> <li>cancelTasks (endstone::Scheduler)</li> <li>clearSlot (endstone::Scoreboard)</li> <li>createBlockData (endstone::Server)</li> <li>createBossBar (endstone::Server)</li> <li>createMap (endstone::Server)</li> <li>createScoreboard (endstone::Server)</li> <li>CommandBuilder (endstone::detail::CommandBuilder)</li> <li>children (endstone::detail::PermissionBuilder)</li> <li>command (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#d","title":"d","text":"<ul> <li>dispatch (endstone::CommandMap)</li> <li>dropItem (endstone::Dimension)</li> <li>DimensionEvent (endstone::DimensionEvent)</li> <li>Divider (endstone::Divider)</li> <li>Dropdown (endstone::Dropdown, endstone::StepSlider)</li> <li>debug (endstone::Logger)</li> <li>drawImage (endstone::MapCanvas)</li> <li>disablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>disablePlugins (endstone::PluginManager)</li> <li>dispatchCommand (endstone::Server)</li> <li>deserialize (endstone::ServerListPingEvent)</li> <li>distance (endstone::Vector)</li> <li>distanceSquared (endstone::Vector)</li> <li>description (endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder)</li> <li>default_ (endstone::detail::PermissionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#e","title":"e","text":"<ul> <li>ENDSTONE_EVENT (endstone::ActorKnockbackEvent, endstone::BlockCookEvent, endstone::BlockPistonExtendEvent, endstone::BlockPistonRetractEvent, endstone::ChunkLoadEvent, endstone::ChunkUnloadEvent, endstone::LeavesDecayEvent, endstone::PacketSendEvent, endstone::PlayerChatEvent, endstone::PlayerDeathEvent, endstone::PlayerInteractEvent, endstone::PlayerJoinEvent, endstone::PlayerJumpEvent, endstone::PlayerKickEvent, endstone::PlayerMoveEvent, endstone::PlayerPickupItemEvent, endstone::PlayerQuitEvent, endstone::PlayerSkinChangeEvent, endstone::PlayerTeleportEvent)</li> <li>execute (endstone::Command, endstone::PluginCommand)</li> <li>Event (endstone::Event, endstone::ServerEvent)</li> <li>EventHandler (endstone::EventHandler)</li> <li>equals (endstone::ItemFactory)</li> <li>error (endstone::Logger)</li> <li>enablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>enablePlugins (endstone::PluginManager)</li> <li>empty (endstone::Translatable)</li> <li>end (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#f","title":"f","text":"<ul> <li>fromABGR (endstone::Color)</li> <li>fromBGR (endstone::Color)</li> <li>fromRGB (endstone::Color)</li> <li>fromRGBA (endstone::Color)</li> <li>Form (endstone::Form)</li> <li>fromArray (endstone::Image)</li> <li>fromBuffer (endstone::Image)</li> <li>first (endstone::Inventory)</li> <li>firstEmpty (endstone::Inventory)</li> <li>forEach (endstone::Registry)</li> <li>format (fmt::formatter&lt; endstone::Actor &gt;, fmt::formatter&lt; endstone::Block &gt;, fmt::formatter&lt; endstone::BlockData &gt;, fmt::formatter&lt; endstone::BlockState &gt;, fmt::formatter&lt; endstone::BlockStates &gt;, fmt::formatter&lt; endstone::BlockStates::mapped_type &gt;, fmt::formatter&lt; endstone::BlockStates::value_type &gt;, fmt::formatter&lt; endstone::Chunk &gt;, fmt::formatter&lt; endstone::DamageSource &gt;, fmt::formatter&lt; endstone::Dimension &gt;, fmt::formatter&lt; endstone::ItemStack &gt;, fmt::formatter&lt; endstone::ItemType &gt;, fmt::formatter&lt; endstone::Location &gt;)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#g","title":"g","text":"<ul> <li>getContent (endstone::ActionForm, endstone::MessageForm)</li> <li>getControls (endstone::ActionForm, endstone::ModalForm)</li> <li>getOnSubmit (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>getDimension (endstone::Actor, endstone::Block, endstone::BlockState, endstone::Chunk, endstone::DimensionEvent, endstone::Level, endstone::Location, endstone::MapView)</li> <li>getHealth (endstone::Actor)</li> <li>getId (endstone::Actor, endstone::Enchantment, endstone::ItemType, endstone::MapView, endstone::Skin)</li> <li>getLevel (endstone::Actor, endstone::Chunk, endstone::Dimension, endstone::LevelEvent, endstone::Server, endstone::WeatherEvent)</li> <li>getLocation (endstone::Actor, endstone::ActorExplodeEvent, endstone::Block, endstone::BlockState)</li> <li>getMaxHealth (endstone::Actor)</li> <li>getNameTag (endstone::Actor)</li> <li>getRuntimeId (endstone::Actor, endstone::BlockData)</li> <li>getScoreTag (endstone::Actor)</li> <li>getScoreboardTags (endstone::Actor)</li> <li>getType (endstone::Actor, endstone::Block, endstone::BlockData, endstone::BlockState, endstone::DamageSource, endstone::Dimension, endstone::ItemMeta, endstone::ItemStack, endstone::MapCursor, endstone::MapMeta, endstone::ServerLoadEvent)</li> <li>getVelocity (endstone::Actor)</li> <li>getDamage (endstone::ActorDamageEvent, endstone::ItemMeta)</li> <li>getDamageSource (endstone::ActorDamageEvent, endstone::ActorDeathEvent)</li> <li>getEventName (endstone::ActorDamageEvent, endstone::ActorDeathEvent, endstone::ActorExplodeEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::ActorTeleportEvent, endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::BroadcastMessageEvent, endstone::Event, endstone::PacketReceiveEvent, endstone::PlayerCommandEvent, endstone::PlayerEmoteEvent, endstone::PlayerGameModeChangeEvent, endstone::PlayerInteractActorEvent, endstone::PlayerLoginEvent, endstone::PlayerRespawnEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ScriptMessageEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>getActor (endstone::ActorEvent, endstone::DamageSource, endstone::PlayerInteractActorEvent)</li> <li>getBlockList (endstone::ActorExplodeEvent)</li> <li>getKnockback (endstone::ActorKnockbackEvent)</li> <li>getSource (endstone::ActorKnockbackEvent, endstone::BanEntry, endstone::BlockCookEvent)</li> <li>getFrom (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>getTo (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>getCreated (endstone::BanEntry)</li> <li>getExpiration (endstone::BanEntry)</li> <li>getReason (endstone::BanEntry, endstone::PlayerKickEvent)</li> <li>getBanEntry (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>getEntries (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList, endstone::Scoreboard)</li> <li>getData (endstone::Block, endstone::BlockState, endstone::Image, endstone::ItemStack)</li> <li>getRelative (endstone::Block)</li> <li>getX (endstone::Block, endstone::BlockState, endstone::Chunk, endstone::MapCursor, endstone::Vector)</li> <li>getY (endstone::Block, endstone::BlockState, endstone::MapCursor, endstone::Vector)</li> <li>getZ (endstone::Block, endstone::BlockState, endstone::Chunk, endstone::Vector)</li> <li>getPlayer (endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::PacketReceiveEvent, endstone::PacketSendEvent, endstone::PlayerEvent, endstone::Server)</li> <li>getBlock (endstone::BlockCommandSender, endstone::BlockEvent, endstone::BlockState, endstone::PlayerInteractEvent)</li> <li>getResult (endstone::BlockCookEvent, endstone::Recipe)</li> <li>getBlockStates (endstone::BlockData)</li> <li>getDirection (endstone::BlockPistonEvent, endstone::Location, endstone::MapCursor)</li> <li>getBlockAgainst (endstone::BlockPlaceEvent)</li> <li>getBlockPlacedState (endstone::BlockPlaceEvent)</li> <li>getBlockReplaced (endstone::BlockPlaceEvent)</li> <li>getColor (endstone::BossBar, endstone::Image)</li> <li>getPlayers (endstone::BossBar)</li> <li>getProgress (endstone::BossBar)</li> <li>getStyle (endstone::BossBar)</li> <li>getTitle (endstone::BossBar, endstone::Form)</li> <li>getMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::ScriptMessageEvent)</li> <li>getRecipients (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>getIcon (endstone::Button, endstone::ModalForm)</li> <li>getOnClick (endstone::Button)</li> <li>getText (endstone::Button, endstone::Label, endstone::Translatable)</li> <li>getChunk (endstone::ChunkEvent)</li> <li>getAlpha (endstone::Color)</li> <li>getBlue (endstone::Color)</li> <li>getGreen (endstone::Color)</li> <li>getRed (endstone::Color)</li> <li>getAliases (endstone::Command)</li> <li>getDescription (endstone::Command, endstone::Permission, endstone::Plugin, endstone::PluginDescription)</li> <li>getName (endstone::Command, endstone::CommandSender, endstone::CommandSenderWrapper, endstone::Criteria, endstone::Dimension, endstone::Level, endstone::Logger, endstone::Objective, endstone::OfflinePlayer, endstone::Permission, endstone::Player, endstone::PlayerBanEntry, endstone::Plugin, endstone::PluginDescription, endstone::Server)</li> <li>getPermissions (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription, endstone::PluginManager)</li> <li>getUsages (endstone::Command)</li> <li>getCommand (endstone::CommandMap, endstone::PlayerCommandEvent, endstone::Plugin, endstone::ServerCommandEvent)</li> <li>getServer (endstone::CommandSender, endstone::CommandSenderWrapper, endstone::Plugin, endstone::PluginLoader)</li> <li>getEffectivePermissions (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>getPermissionLevel (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>getDefaultRenderType (endstone::Criteria)</li> <li>getDamagingActor (endstone::DamageSource)</li> <li>getActors (endstone::Dimension, endstone::Level)</li> <li>getBlockAt (endstone::Dimension)</li> <li>getHighestBlockAt (endstone::Dimension)</li> <li>getHighestBlockYAt (endstone::Dimension)</li> <li>getLoadedChunks (endstone::Dimension)</li> <li>getDefaultIndex (endstone::Dropdown)</li> <li>getLabel (endstone::Dropdown, endstone::Header, endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>getOptions (endstone::Dropdown)</li> <li>get (endstone::Enchantment, endstone::ItemType, endstone::Registry, endstone::ServiceManager)</li> <li>getMaxLevel (endstone::Enchantment)</li> <li>getStartLevel (endstone::Enchantment)</li> <li>getTranslationKey (endstone::Enchantment, endstone::ItemStack, endstone::ItemType)</li> <li>getEventType (endstone::EventHandler)</li> <li>getPlugin (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginCommand, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::PluginManager)</li> <li>getPriority (endstone::EventHandler)</li> <li>getOnClose (endstone::Form)</li> <li>getHandlers (endstone::HandlerList)</li> <li>getDepth (endstone::Image)</li> <li>getHeight (endstone::Image)</li> <li>getWidth (endstone::Image)</li> <li>getContents (endstone::Inventory)</li> <li>getItem (endstone::Inventory, endstone::PlayerDropItemEvent, endstone::PlayerInteractEvent, endstone::PlayerItemConsumeEvent, endstone::PlayerPickupItemEvent)</li> <li>getMaxStackSize (endstone::Inventory, endstone::ItemStack, endstone::ItemType)</li> <li>getSize (endstone::Inventory)</li> <li>getAddress (endstone::IpBanEntry, endstone::PacketReceiveEvent, endstone::PacketSendEvent, endstone::Player)</li> <li>getItemStack (endstone::Item)</li> <li>getPickupDelay (endstone::Item)</li> <li>getThrower (endstone::Item)</li> <li>getItemMeta (endstone::ItemFactory, endstone::ItemStack)</li> <li>getDisplayName (endstone::ItemMeta, endstone::Objective)</li> <li>getEnchantLevel (endstone::ItemMeta)</li> <li>getEnchants (endstone::ItemMeta)</li> <li>getLore (endstone::ItemMeta)</li> <li>getRepairCost (endstone::ItemMeta)</li> <li>getAmount (endstone::ItemStack)</li> <li>getMaxDurability (endstone::ItemType)</li> <li>getLocale (endstone::Language, endstone::Player)</li> <li>getDimensions (endstone::Level)</li> <li>getSeed (endstone::Level)</li> <li>getTime (endstone::Level)</li> <li>getBlockX (endstone::Location)</li> <li>getBlockY (endstone::Location)</li> <li>getBlockZ (endstone::Location)</li> <li>getPitch (endstone::Location)</li> <li>getYaw (endstone::Location)</li> <li>getBasePixel (endstone::MapCanvas)</li> <li>getBasePixelColor (endstone::MapCanvas)</li> <li>getCursors (endstone::MapCanvas)</li> <li>getMapView (endstone::MapCanvas, endstone::MapMeta)</li> <li>getPixel (endstone::MapCanvas)</li> <li>getPixelColor (endstone::MapCanvas)</li> <li>getCaption (endstone::MapCursor)</li> <li>getMap (endstone::MapInitializeEvent, endstone::Server)</li> <li>getMapId (endstone::MapMeta)</li> <li>getCenterX (endstone::MapView)</li> <li>getCenterZ (endstone::MapView)</li> <li>getRenderers (endstone::MapView)</li> <li>getScale (endstone::MapView)</li> <li>getButton1 (endstone::MessageForm)</li> <li>getButton2 (endstone::MessageForm)</li> <li>getSubmitButton (endstone::ModalForm)</li> <li>getCriteria (endstone::Objective)</li> <li>getDisplaySlot (endstone::Objective)</li> <li>getRenderType (endstone::Objective)</li> <li>getScore (endstone::Objective)</li> <li>getScoreboard (endstone::Objective, endstone::Player, endstone::Score, endstone::Server)</li> <li>getSortOrder (endstone::Objective)</li> <li>getUniqueId (endstone::OfflinePlayer, endstone::PlayerBanEntry)</li> <li>getPacketId (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>getPayload (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>getSubClientId (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>getChildren (endstone::Permission)</li> <li>getDefault (endstone::Permission)</li> <li>getPermissibles (endstone::Permission)</li> <li>getPermissible (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>getRemovalCallback (endstone::PermissionAttachment)</li> <li>getAttachment (endstone::PermissionAttachmentInfo)</li> <li>getPermission (endstone::PermissionAttachmentInfo, endstone::PluginManager)</li> <li>getValue (endstone::PermissionAttachmentInfo, endstone::Score)</li> <li>getAllowFlight (endstone::Player)</li> <li>getDeviceId (endstone::Player)</li> <li>getDeviceOS (endstone::Player)</li> <li>getEnderChest (endstone::Player)</li> <li>getExpLevel (endstone::Player)</li> <li>getExpProgress (endstone::Player)</li> <li>getFlySpeed (endstone::Player)</li> <li>getGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>getGameVersion (endstone::Player)</li> <li>getInventory (endstone::Player)</li> <li>getPing (endstone::Player)</li> <li>getSkin (endstone::Player)</li> <li>getTotalExp (endstone::Player)</li> <li>getWalkSpeed (endstone::Player)</li> <li>getXuid (endstone::Player, endstone::PlayerBanEntry)</li> <li>giveExp (endstone::Player)</li> <li>giveExpLevels (endstone::Player)</li> <li>getBed (endstone::PlayerBedEnterEvent, endstone::PlayerBedLeaveEvent)</li> <li>getFormat (endstone::PlayerChatEvent)</li> <li>getDeathMessage (endstone::PlayerDeathEvent)</li> <li>getEmoteId (endstone::PlayerEmoteEvent)</li> <li>getNewGameMode (endstone::PlayerGameModeChangeEvent)</li> <li>getAction (endstone::PlayerInteractEvent)</li> <li>getBlockFace (endstone::PlayerInteractEvent)</li> <li>getClickedPosition (endstone::PlayerInteractEvent)</li> <li>getBoots (endstone::PlayerInventory)</li> <li>getChestplate (endstone::PlayerInventory)</li> <li>getHeldItemSlot (endstone::PlayerInventory)</li> <li>getHelmet (endstone::PlayerInventory)</li> <li>getItemInMainHand (endstone::PlayerInventory)</li> <li>getItemInOffHand (endstone::PlayerInventory)</li> <li>getLeggings (endstone::PlayerInventory)</li> <li>getHand (endstone::PlayerItemConsumeEvent)</li> <li>getNewSlot (endstone::PlayerItemHeldEvent)</li> <li>getPreviousSlot (endstone::PlayerItemHeldEvent)</li> <li>getJoinMessage (endstone::PlayerJoinEvent)</li> <li>getKickMessage (endstone::PlayerLoginEvent)</li> <li>getQuitMessage (endstone::PlayerQuitEvent)</li> <li>getNewSkin (endstone::PlayerSkinChangeEvent)</li> <li>getSkinChangeMessage (endstone::PlayerSkinChangeEvent)</li> <li>getDataFolder (endstone::Plugin)</li> <li>getLogger (endstone::Plugin, endstone::Server)</li> <li>getPluginLoader (endstone::Plugin)</li> <li>getExecutor (endstone::PluginCommand)</li> <li>getAPIVersion (endstone::PluginDescription)</li> <li>getAuthors (endstone::PluginDescription)</li> <li>getCommands (endstone::PluginDescription)</li> <li>getContributors (endstone::PluginDescription)</li> <li>getDefaultPermission (endstone::PluginDescription)</li> <li>getDepend (endstone::PluginDescription)</li> <li>getFullName (endstone::PluginDescription)</li> <li>getLoad (endstone::PluginDescription)</li> <li>getLoadBefore (endstone::PluginDescription)</li> <li>getPrefix (endstone::PluginDescription)</li> <li>getProvides (endstone::PluginDescription)</li> <li>getSoftDepend (endstone::PluginDescription)</li> <li>getVersion (endstone::PluginDescription, endstone::Server)</li> <li>getWebsite (endstone::PluginDescription)</li> <li>getPluginFileFilters (endstone::PluginLoader)</li> <li>getDefaultPermSubscriptions (endstone::PluginManager)</li> <li>getDefaultPermissions (endstone::PluginManager)</li> <li>getPermissionSubscriptions (endstone::PluginManager)</li> <li>getPlugins (endstone::PluginManager)</li> <li>getOrThrow (endstone::Registry)</li> <li>getPendingTasks (endstone::Scheduler)</li> <li>getEntry (endstone::Score)</li> <li>getObjective (endstone::Score, endstone::Scoreboard)</li> <li>getObjectives (endstone::Scoreboard)</li> <li>getObjectivesByCriteria (endstone::Scoreboard)</li> <li>getScores (endstone::Scoreboard)</li> <li>getMessageId (endstone::ScriptMessageEvent)</li> <li>getSender (endstone::ScriptMessageEvent, endstone::ServerCommandEvent)</li> <li>getAverageMillisecondsPerTick (endstone::Server)</li> <li>getAverageTickUsage (endstone::Server)</li> <li>getAverageTicksPerSecond (endstone::Server)</li> <li>getBanList (endstone::Server)</li> <li>getCommandSender (endstone::Server)</li> <li>getCurrentMillisecondsPerTick (endstone::Server)</li> <li>getCurrentTickUsage (endstone::Server)</li> <li>getCurrentTicksPerSecond (endstone::Server)</li> <li>getEnchantmentRegistry (endstone::Server)</li> <li>getIpBanList (endstone::Server)</li> <li>getItemFactory (endstone::Server)</li> <li>getItemRegistry (endstone::Server)</li> <li>getLanguage (endstone::Server)</li> <li>getMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>getMinecraftVersion (endstone::Server)</li> <li>getOnlineMode (endstone::Server)</li> <li>getOnlinePlayers (endstone::Server)</li> <li>getPluginCommand (endstone::Server)</li> <li>getPluginManager (endstone::Server)</li> <li>getPort (endstone::Server, endstone::SocketAddress)</li> <li>getPortV6 (endstone::Server)</li> <li>getProtocolVersion (endstone::Server)</li> <li>getScheduler (endstone::Server)</li> <li>getServiceManager (endstone::Server)</li> <li>getStartTime (endstone::Server)</li> <li>getLevelName (endstone::ServerListPingEvent)</li> <li>getLocalPort (endstone::ServerListPingEvent)</li> <li>getLocalPortV6 (endstone::ServerListPingEvent)</li> <li>getMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>getMotd (endstone::ServerListPingEvent)</li> <li>getNetworkProtocolVersion (endstone::ServerListPingEvent)</li> <li>getNumPlayers (endstone::ServerListPingEvent)</li> <li>getRemoteHost (endstone::ServerListPingEvent)</li> <li>getRemotePort (endstone::ServerListPingEvent)</li> <li>getServerGuid (endstone::ServerListPingEvent)</li> <li>getCapeId (endstone::Skin)</li> <li>getCapeImage (endstone::Skin)</li> <li>getImage (endstone::Skin)</li> <li>getDefaultValue (endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>getMax (endstone::Slider)</li> <li>getMin (endstone::Slider)</li> <li>getStep (endstone::Slider)</li> <li>getHostname (endstone::SocketAddress)</li> <li>getOwner (endstone::Task)</li> <li>getTaskId (endstone::Task)</li> <li>getPlaceholder (endstone::TextInput)</li> <li>getParameters (endstone::Translatable)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#h","title":"h","text":"<ul> <li>hasFlag (endstone::BossBar)</li> <li>hasPermission (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>HandlerList (endstone::HandlerList)</li> <li>Header (endstone::Header)</li> <li>hasDamage (endstone::ItemMeta)</li> <li>hasDisplayName (endstone::ItemMeta)</li> <li>hasEnchant (endstone::ItemMeta)</li> <li>hasEnchants (endstone::ItemMeta)</li> <li>hasLore (endstone::ItemMeta)</li> <li>hasRepairCost (endstone::ItemMeta)</li> <li>hasItemMeta (endstone::ItemStack)</li> <li>hasMapId (endstone::MapMeta)</li> <li>hasMapView (endstone::MapMeta)</li> <li>hasBlock (endstone::PlayerInteractEvent)</li> <li>hasItem (endstone::PlayerInteractEvent)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#i","title":"i","text":"<ul> <li>isDead (endstone::Actor)</li> <li>isInLava (endstone::Actor)</li> <li>isInWater (endstone::Actor)</li> <li>isNameTagAlwaysVisible (endstone::Actor)</li> <li>isNameTagVisible (endstone::Actor)</li> <li>isOnGround (endstone::Actor)</li> <li>isValid (endstone::Actor)</li> <li>isBanned (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>isVisible (endstone::BossBar, endstone::MapCursor)</li> <li>isCancellable (endstone::Cancellable, endstone::Event)</li> <li>isCancelled (endstone::Cancellable, endstone::ICancellable, endstone::Task)</li> <li>isRegistered (endstone::Command)</li> <li>isPermissionSet (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>isReadOnly (endstone::Criteria)</li> <li>isIndirect (endstone::DamageSource)</li> <li>isAsynchronous (endstone::Event)</li> <li>isIgnoreCancelled (endstone::EventHandler)</li> <li>Image (endstone::Image)</li> <li>isEmpty (endstone::Inventory, endstone::ItemMeta, endstone::MapMeta)</li> <li>IpBanEntry (endstone::IpBanEntry)</li> <li>isUnlimitedLifetime (endstone::Item)</li> <li>isApplicable (endstone::ItemFactory)</li> <li>ItemMeta (endstone::ItemMeta)</li> <li>isUnbreakable (endstone::ItemMeta)</li> <li>ItemStack (endstone::ItemStack)</li> <li>isEndstoneItemStack (endstone::ItemStack)</li> <li>isSimilar (endstone::ItemStack)</li> <li>info (endstone::Logger)</li> <li>isEnabledFor (endstone::Logger)</li> <li>isMapEmpty (endstone::MapMeta)</li> <li>initialize (endstone::MapRenderer)</li> <li>isContextual (endstone::MapRenderer)</li> <li>isEndstoneMapRenderer (endstone::MapRenderer)</li> <li>isLocked (endstone::MapView)</li> <li>isUnlimitedTracking (endstone::MapView)</li> <li>isVirtual (endstone::MapView)</li> <li>isGliding (endstone::Mob)</li> <li>isDisplayed (endstone::Objective)</li> <li>isModifiable (endstone::Objective)</li> <li>init (endstone::Permission)</li> <li>isFlying (endstone::Player)</li> <li>isOp (endstone::Player)</li> <li>isSneaking (endstone::Player)</li> <li>isSprinting (endstone::Player)</li> <li>isMuted (endstone::PlayerEmoteEvent)</li> <li>isEnabled (endstone::Plugin)</li> <li>isPluginEnabled (endstone::PluginManager)</li> <li>isQueued (endstone::Scheduler)</li> <li>isRunning (endstone::Scheduler)</li> <li>isScoreSet (endstone::Score)</li> <li>isPrimaryThread (endstone::Server)</li> <li>isSync (endstone::Task)</li> <li>isNil (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#k","title":"k","text":"<ul> <li>kick (endstone::Player)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#l","title":"l","text":"<ul> <li>Label (endstone::Label)</li> <li>LevelEvent (endstone::LevelEvent)</li> <li>Location (endstone::Location)</li> <li>Logger (endstone::Logger)</li> <li>log (endstone::Logger)</li> <li>loadPlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>loadPlugins (endstone::PluginLoader, endstone::PluginManager)</li> <li>load (endstone::ServiceManager)</li> <li>length (endstone::Vector)</li> <li>lengthSquared (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#m","title":"m","text":"<ul> <li>MapCursor (endstone::MapCursor)</li> <li>MapInitializeEvent (endstone::MapInitializeEvent)</li> <li>MapMeta (endstone::MapMeta)</li> <li>MapRenderer (endstone::MapRenderer)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#n","title":"n","text":"<ul> <li>normalize (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#o","title":"o","text":"<ul> <li>operator!= (endstone::Color, endstone::ItemStack, endstone::ItemType, endstone::Objective)</li> <li>operator== (endstone::Color, endstone::ItemStack, endstone::ItemType, endstone::Objective, endstone::Vector)</li> <li>onCommand (endstone::CommandExecutor)</li> <li>operator= (endstone::CommandMap, endstone::Event, endstone::Plugin, endstone::PluginLoader, endstone::PluginManager, endstone::Server)</li> <li>onDisable (endstone::Plugin)</li> <li>onEnable (endstone::Plugin)</li> <li>onLoad (endstone::Plugin)</li> <li>operator* (endstone::Vector)</li> <li>operator*= (endstone::Vector)</li> <li>operator+ (endstone::Vector)</li> <li>operator+= (endstone::Vector)</li> <li>operator- (endstone::Vector)</li> <li>operator-= (endstone::Vector)</li> <li>operator/ (endstone::Vector)</li> <li>operator/= (endstone::Vector)</li> <li>operator() (std::hash&lt; endstone::UUID &gt;)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#p","title":"p","text":"<ul> <li>PacketReceiveEvent (endstone::PacketReceiveEvent)</li> <li>PacketSendEvent (endstone::PacketSendEvent)</li> <li>Permission (endstone::Permission)</li> <li>PermissionAttachment (endstone::PermissionAttachment)</li> <li>PermissionAttachmentInfo (endstone::PermissionAttachmentInfo)</li> <li>performCommand (endstone::Player)</li> <li>playSound (endstone::Player)</li> <li>PlayerBanEntry (endstone::PlayerBanEntry)</li> <li>PlayerBedEnterEvent (endstone::PlayerBedEnterEvent)</li> <li>PlayerBedLeaveEvent (endstone::PlayerBedLeaveEvent)</li> <li>PlayerChatEvent (endstone::PlayerChatEvent)</li> <li>PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>PlayerDeathEvent (endstone::PlayerDeathEvent)</li> <li>PlayerDropItemEvent (endstone::PlayerDropItemEvent)</li> <li>PlayerEmoteEvent (endstone::PlayerEmoteEvent)</li> <li>PlayerEvent (endstone::PlayerEvent)</li> <li>PlayerGameModeChangeEvent (endstone::PlayerGameModeChangeEvent)</li> <li>PlayerInteractActorEvent (endstone::PlayerInteractActorEvent)</li> <li>PlayerInteractEvent (endstone::PlayerInteractEvent)</li> <li>PlayerItemConsumeEvent (endstone::PlayerItemConsumeEvent)</li> <li>PlayerItemHeldEvent (endstone::PlayerItemHeldEvent)</li> <li>PlayerJoinEvent (endstone::PlayerJoinEvent)</li> <li>PlayerMoveEvent (endstone::PlayerJumpEvent, endstone::PlayerMoveEvent, endstone::PlayerTeleportEvent)</li> <li>PlayerKickEvent (endstone::PlayerKickEvent)</li> <li>PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>PlayerPickupItemEvent (endstone::PlayerPickupItemEvent)</li> <li>PlayerQuitEvent (endstone::PlayerQuitEvent)</li> <li>PlayerRespawnEvent (endstone::PlayerRespawnEvent)</li> <li>PlayerSkinChangeEvent (endstone::PlayerSkinChangeEvent)</li> <li>Plugin (endstone::Plugin)</li> <li>PluginCommand (endstone::PluginCommand)</li> <li>PluginDescription (endstone::PluginDescription)</li> <li>PluginDisableEvent (endstone::PluginDisableEvent)</li> <li>PluginEnableEvent (endstone::PluginEnableEvent)</li> <li>PluginLoader (endstone::PluginLoader)</li> <li>PluginManager (endstone::PluginManager)</li> <li>permissions (endstone::detail::CommandBuilder)</li> <li>PermissionBuilder (endstone::detail::PermissionBuilder)</li> <li>permission (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#r","title":"r","text":"<ul> <li>remove (endstone::Actor, endstone::Inventory, endstone::PermissionAttachment)</li> <li>removeScoreboardTag (endstone::Actor)</li> <li>removeBan (endstone::BanList, endstone::IpBanList, endstone::PlayerBanList)</li> <li>removeAll (endstone::BossBar)</li> <li>removeFlag (endstone::BossBar)</li> <li>removePlayer (endstone::BossBar)</li> <li>registerTo (endstone::Command)</li> <li>registerCommand (endstone::CommandMap)</li> <li>recalculatePermissions (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>removeAttachment (endstone::CommandSenderWrapper, endstone::Permissible)</li> <li>registerHandler (endstone::HandlerList)</li> <li>removeItem (endstone::Inventory)</li> <li>removeEnchant (endstone::ItemMeta)</li> <li>removeEnchants (endstone::ItemMeta)</li> <li>render (endstone::MapRenderer)</li> <li>removeRenderer (endstone::MapView)</li> <li>recalculatePermissibles (endstone::Permission)</li> <li>resetTitle (endstone::Player)</li> <li>registerEvent (endstone::Plugin, endstone::PluginManager)</li> <li>recalculatePermissionDefaults (endstone::PluginManager)</li> <li>registerLoader (endstone::PluginManager)</li> <li>removePermission (endstone::PluginManager)</li> <li>runTask (endstone::Scheduler)</li> <li>runTaskAsync (endstone::Scheduler)</li> <li>runTaskLater (endstone::Scheduler)</li> <li>runTaskLaterAsync (endstone::Scheduler)</li> <li>runTaskTimer (endstone::Scheduler)</li> <li>runTaskTimerAsync (endstone::Scheduler)</li> <li>resetScores (endstone::Scoreboard)</li> <li>reload (endstone::Server)</li> <li>reloadData (endstone::Server)</li> <li>registerService (endstone::ServiceManager)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#s","title":"s","text":"<ul> <li>setContent (endstone::ActionForm, endstone::MessageForm)</li> <li>setControls (endstone::ActionForm, endstone::ModalForm)</li> <li>setOnSubmit (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>setHealth (endstone::Actor)</li> <li>setNameTag (endstone::Actor)</li> <li>setNameTagAlwaysVisible (endstone::Actor)</li> <li>setNameTagVisible (endstone::Actor)</li> <li>setRotation (endstone::Actor)</li> <li>setScoreTag (endstone::Actor)</li> <li>setDamage (endstone::ActorDamageEvent, endstone::ItemMeta)</li> <li>setKnockback (endstone::ActorKnockbackEvent)</li> <li>setFrom (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>setTo (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>setCreated (endstone::BanEntry)</li> <li>setExpiration (endstone::BanEntry)</li> <li>setReason (endstone::BanEntry, endstone::PlayerKickEvent)</li> <li>setSource (endstone::BanEntry)</li> <li>setData (endstone::Block, endstone::BlockState, endstone::ItemStack)</li> <li>setType (endstone::Block, endstone::BlockState, endstone::ItemStack, endstone::MapCursor)</li> <li>setResult (endstone::BlockCookEvent)</li> <li>setColor (endstone::BossBar, endstone::Image)</li> <li>setProgress (endstone::BossBar)</li> <li>setStyle (endstone::BossBar)</li> <li>setTitle (endstone::BossBar, endstone::Form)</li> <li>setVisible (endstone::BossBar, endstone::MapCursor)</li> <li>setMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>setIcon (endstone::Button, endstone::ModalForm)</li> <li>setOnClick (endstone::Button)</li> <li>setText (endstone::Button, endstone::Label)</li> <li>setCancelled (endstone::Cancellable, endstone::ICancellable)</li> <li>setAlpha (endstone::Color)</li> <li>setBlue (endstone::Color)</li> <li>setGreen (endstone::Color)</li> <li>setRed (endstone::Color)</li> <li>setAliases (endstone::Command)</li> <li>setDescription (endstone::Command, endstone::Permission)</li> <li>setName (endstone::Command)</li> <li>setPermissions (endstone::Command)</li> <li>setUsages (endstone::Command)</li> <li>sendErrorMessage (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>sendMessage (endstone::CommandSender, endstone::CommandSenderWrapper)</li> <li>spawnActor (endstone::Dimension)</li> <li>setDefaultIndex (endstone::Dropdown)</li> <li>setLabel (endstone::Dropdown, endstone::Header, endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>setOptions (endstone::Dropdown)</li> <li>setOnClose (endstone::Form)</li> <li>setContents (endstone::Inventory)</li> <li>setItem (endstone::Inventory)</li> <li>setItemStack (endstone::Item)</li> <li>setPickupDelay (endstone::Item)</li> <li>setThrower (endstone::Item)</li> <li>setUnlimitedLifetime (endstone::Item)</li> <li>setDisplayName (endstone::ItemMeta, endstone::Objective)</li> <li>setLore (endstone::ItemMeta)</li> <li>setRepairCost (endstone::ItemMeta)</li> <li>setUnbreakable (endstone::ItemMeta)</li> <li>setAmount (endstone::ItemStack)</li> <li>setItemMeta (endstone::ItemStack)</li> <li>setItemMeta0 (endstone::ItemStack)</li> <li>setTime (endstone::Level)</li> <li>setDimension (endstone::Location, endstone::MapView)</li> <li>setPitch (endstone::Location)</li> <li>setYaw (endstone::Location)</li> <li>setLevel (endstone::Logger)</li> <li>setCursors (endstone::MapCanvas)</li> <li>setPixel (endstone::MapCanvas)</li> <li>setPixelColor (endstone::MapCanvas)</li> <li>setCaption (endstone::MapCursor)</li> <li>setDirection (endstone::MapCursor)</li> <li>setX (endstone::MapCursor, endstone::Vector)</li> <li>setY (endstone::MapCursor, endstone::Vector)</li> <li>setMapId (endstone::MapMeta)</li> <li>setMapView (endstone::MapMeta)</li> <li>setCenterX (endstone::MapView)</li> <li>setCenterZ (endstone::MapView)</li> <li>setLocked (endstone::MapView)</li> <li>setScale (endstone::MapView)</li> <li>setUnlimitedTracking (endstone::MapView)</li> <li>setButton1 (endstone::MessageForm)</li> <li>setButton2 (endstone::MessageForm)</li> <li>setSubmitButton (endstone::ModalForm)</li> <li>setDisplay (endstone::Objective)</li> <li>setDisplaySlot (endstone::Objective)</li> <li>setSortOrder (endstone::Objective)</li> <li>setPayload (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>setDefault (endstone::Permission)</li> <li>setPermission (endstone::PermissionAttachment)</li> <li>setRemovalCallback (endstone::PermissionAttachment)</li> <li>sendForm (endstone::Player)</li> <li>sendPacket (endstone::Player)</li> <li>sendPopup (endstone::Player)</li> <li>sendTip (endstone::Player)</li> <li>sendTitle (endstone::Player)</li> <li>sendToast (endstone::Player)</li> <li>setAllowFlight (endstone::Player)</li> <li>setExpLevel (endstone::Player)</li> <li>setExpProgress (endstone::Player)</li> <li>setFlySpeed (endstone::Player)</li> <li>setFlying (endstone::Player)</li> <li>setGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>setOp (endstone::Player)</li> <li>setScoreboard (endstone::Player)</li> <li>setSneaking (endstone::Player)</li> <li>setSprinting (endstone::Player)</li> <li>setWalkSpeed (endstone::Player)</li> <li>spawnParticle (endstone::Player)</li> <li>stopAllSounds (endstone::Player)</li> <li>stopSound (endstone::Player)</li> <li>setFormat (endstone::PlayerChatEvent)</li> <li>setPlayer (endstone::PlayerChatEvent)</li> <li>setCommand (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>setDeathMessage (endstone::PlayerDeathEvent)</li> <li>setMuted (endstone::PlayerEmoteEvent)</li> <li>setBoots (endstone::PlayerInventory)</li> <li>setChestplate (endstone::PlayerInventory)</li> <li>setHeldItemSlot (endstone::PlayerInventory)</li> <li>setHelmet (endstone::PlayerInventory)</li> <li>setItemInMainHand (endstone::PlayerInventory)</li> <li>setItemInOffHand (endstone::PlayerInventory)</li> <li>setLeggings (endstone::PlayerInventory)</li> <li>setJoinMessage (endstone::PlayerJoinEvent)</li> <li>setKickMessage (endstone::PlayerLoginEvent)</li> <li>setQuitMessage (endstone::PlayerQuitEvent)</li> <li>setSkinChangeMessage (endstone::PlayerSkinChangeEvent)</li> <li>setEnabled (endstone::Plugin)</li> <li>setExecutor (endstone::PluginCommand)</li> <li>subscribeToDefaultPerms (endstone::PluginManager)</li> <li>subscribeToPermission (endstone::PluginManager)</li> <li>setValue (endstone::Score)</li> <li>ScriptMessageEvent (endstone::ScriptMessageEvent)</li> <li>Server (endstone::Server)</li> <li>setMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>shutdown (endstone::Server)</li> <li>ServerCommandEvent (endstone::ServerCommandEvent)</li> <li>ServerListPingEvent (endstone::ServerListPingEvent)</li> <li>serialize (endstone::ServerListPingEvent)</li> <li>setLevelName (endstone::ServerListPingEvent)</li> <li>setLocalPort (endstone::ServerListPingEvent)</li> <li>setLocalPortV6 (endstone::ServerListPingEvent)</li> <li>setMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>setMotd (endstone::ServerListPingEvent)</li> <li>setNumPlayers (endstone::ServerListPingEvent)</li> <li>setServerGuid (endstone::ServerListPingEvent)</li> <li>ServerLoadEvent (endstone::ServerLoadEvent)</li> <li>Skin (endstone::Skin)</li> <li>Slider (endstone::Slider)</li> <li>setDefaultValue (endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>setMax (endstone::Slider)</li> <li>setMin (endstone::Slider)</li> <li>setStep (endstone::Slider)</li> <li>SocketAddress (endstone::SocketAddress)</li> <li>setPlaceholder (endstone::TextInput)</li> <li>size (endstone::UUID)</li> <li>str (endstone::UUID)</li> <li>swap (endstone::UUID)</li> <li>setZ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#t","title":"t","text":"<ul> <li>teleport (endstone::Actor)</li> <li>testPermission (endstone::Command)</li> <li>testPermissionSilently (endstone::Command)</li> <li>translate (endstone::Language)</li> <li>trace (endstone::Logger)</li> <li>transfer (endstone::Player)</li> <li>TextInput (endstone::TextInput)</li> <li>ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>toThunderState (endstone::ThunderChangeEvent)</li> <li>Toggle (endstone::Toggle)</li> <li>Translatable (endstone::Translatable)</li> <li>toWeatherState (endstone::WeatherChangeEvent)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#u","title":"u","text":"<ul> <li>update (endstone::BlockState)</li> <li>unregisterFrom (endstone::Command)</li> <li>unregister (endstone::HandlerList, endstone::Objective, endstone::ServiceManager)</li> <li>unsetPermission (endstone::PermissionAttachment)</li> <li>updateCommands (endstone::Player)</li> <li>unsubscribeFromDefaultPerms (endstone::PluginManager)</li> <li>unsubscribeFromPermission (endstone::PluginManager)</li> <li>unregisterAll (endstone::ServiceManager)</li> <li>usages (endstone::detail::CommandBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#v","title":"v","text":"<ul> <li>version (endstone::UUID)</li> <li>Vector (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#w","title":"w","text":"<ul> <li>warning (endstone::Logger)</li> <li>WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>WeatherEvent (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#_1","title":"~","text":"<ul> <li>~ActorEvent (endstone::ActorEvent)</li> <li>~ActorExplodeEvent (endstone::ActorExplodeEvent)</li> <li>~ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>~ActorTeleportEvent (endstone::ActorTeleportEvent)</li> <li>~BanList (endstone::BanList)</li> <li>~Block (endstone::Block)</li> <li>~BlockBreakEvent (endstone::BlockBreakEvent)</li> <li>~BlockData (endstone::BlockData)</li> <li>~BlockEvent (endstone::BlockEvent)</li> <li>~BlockPlaceEvent (endstone::BlockPlaceEvent)</li> <li>~BlockState (endstone::BlockState)</li> <li>~BossBar (endstone::BossBar)</li> <li>~Chunk (endstone::Chunk)</li> <li>~ChunkLoadEvent (endstone::ChunkLoadEvent)</li> <li>~ChunkUnloadEvent (endstone::ChunkUnloadEvent)</li> <li>~Command (endstone::Command)</li> <li>~CommandExecutor (endstone::CommandExecutor)</li> <li>~CommandMap (endstone::CommandMap)</li> <li>~Criteria (endstone::Criteria)</li> <li>~DamageSource (endstone::DamageSource)</li> <li>~Dimension (endstone::Dimension)</li> <li>~Enchantment (endstone::Enchantment)</li> <li>~Event (endstone::Event)</li> <li>~ICancellable (endstone::ICancellable)</li> <li>~Inventory (endstone::Inventory)</li> <li>~IpBanList (endstone::IpBanList)</li> <li>~ItemFactory (endstone::ItemFactory)</li> <li>~ItemMeta (endstone::ItemMeta)</li> <li>~ItemStack (endstone::ItemStack)</li> <li>~ItemType (endstone::ItemType)</li> <li>~Language (endstone::Language)</li> <li>~Level (endstone::Level)</li> <li>~Logger (endstone::Logger)</li> <li>~MapCanvas (endstone::MapCanvas)</li> <li>~MapRenderer (endstone::MapRenderer)</li> <li>~MapView (endstone::MapView)</li> <li>~Objective (endstone::Objective)</li> <li>~OfflinePlayer (endstone::OfflinePlayer)</li> <li>~Permissible (endstone::Permissible)</li> <li>~PlayerBanList (endstone::PlayerBanList)</li> <li>~PlayerBedLeaveEvent (endstone::PlayerBedLeaveEvent)</li> <li>~PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>~PlayerEmoteEvent (endstone::PlayerEmoteEvent)</li> <li>~PlayerEvent (endstone::PlayerEvent)</li> <li>~PlayerGameModeChangeEvent (endstone::PlayerGameModeChangeEvent)</li> <li>~PlayerInteractActorEvent (endstone::PlayerInteractActorEvent)</li> <li>~PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>~PlayerRespawnEvent (endstone::PlayerRespawnEvent)</li> <li>~Plugin (endstone::Plugin)</li> <li>~PluginLoader (endstone::PluginLoader)</li> <li>~PluginManager (endstone::PluginManager)</li> <li>~Recipe (endstone::Recipe)</li> <li>~Registry (endstone::Registry)</li> <li>~Scheduler (endstone::Scheduler)</li> <li>~Score (endstone::Score)</li> <li>~Scoreboard (endstone::Scoreboard)</li> <li>~Server (endstone::Server)</li> <li>~Service (endstone::Service)</li> <li>~ServiceManager (endstone::ServiceManager)</li> <li>~Task (endstone::Task)</li> <li>~ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>~WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>~WeatherEvent (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/","title":"Class Member Variables","text":""},{"location":"reference/cpp/class_member_variables/#a","title":"a","text":"<ul> <li>actor_ (endstone::ActorEvent, endstone::PlayerInteractActorEvent)</li> <li>alpha_ (endstone::Color)</li> <li>Aqua (endstone::ColorFormat)</li> <li>aliases_ (endstone::Command, endstone::detail::CommandBuilder)</li> <li>async_ (endstone::Event)</li> <li>address_ (endstone::IpBanEntry, endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>amount_ (endstone::ItemStack)</li> <li>attachment_ (endstone::PermissionAttachmentInfo)</li> <li>action_ (endstone::PlayerInteractEvent)</li> <li>api_version_ (endstone::PluginDescription)</li> <li>authors_ (endstone::PluginDescription)</li> <li>authors (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#b","title":"b","text":"<ul> <li>blocks_ (endstone::ActorExplodeEvent)</li> <li>block_ (endstone::BlockEvent)</li> <li>BIT_MASK (endstone::Color)</li> <li>blue_ (endstone::Color)</li> <li>Black (endstone::ColorFormat)</li> <li>Blue (endstone::ColorFormat)</li> <li>Bold (endstone::ColorFormat)</li> <li>BLACK (endstone::Colors)</li> <li>baked_handlers_ (endstone::HandlerList)</li> <li>button1_text_ (endstone::MessageForm)</li> <li>button2_text_ (endstone::MessageForm)</li> <li>bed_ (endstone::PlayerBedEnterEvent, endstone::PlayerBedLeaveEvent)</li> <li>block_clicked_ (endstone::PlayerInteractEvent)</li> <li>block_face_ (endstone::PlayerInteractEvent)</li> <li>BroadcastChannelAdmin (endstone::Server)</li> <li>BroadcastChannelUser (endstone::Server)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#c","title":"c","text":"<ul> <li>content_ (endstone::ActionForm, endstone::MessageForm)</li> <li>controls_ (endstone::ActionForm, endstone::ModalForm)</li> <li>created_ (endstone::BanEntry)</li> <li>chunk_ (endstone::ChunkEvent)</li> <li>command_map_ (endstone::Command)</li> <li>cancelled_ (endstone::Event)</li> <li>caption_ (endstone::MapCursor)</li> <li>children_ (endstone::Permission, endstone::detail::PermissionBuilder)</li> <li>command_ (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>clicked_position_ (endstone::PlayerInteractEvent)</li> <li>current_ (endstone::PlayerItemHeldEvent)</li> <li>commands_ (endstone::PluginDescription)</li> <li>contributors_ (endstone::PluginDescription)</li> <li>cape_id_ (endstone::Skin)</li> <li>cape_image_ (endstone::Skin)</li> <li>commands (endstone::detail::PluginDescriptionBuilder)</li> <li>contributors (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#d","title":"d","text":"<ul> <li>damage_ (endstone::ActorDamageEvent, endstone::ItemMeta)</li> <li>damage_source_ (endstone::ActorDamageEvent, endstone::ActorDeathEvent)</li> <li>DateFormat (endstone::BanEntry)</li> <li>direction_ (endstone::BlockPistonEvent, endstone::MapCursor)</li> <li>DEFAULT_ALPHA (endstone::Color)</li> <li>DarkAqua (endstone::ColorFormat)</li> <li>DarkBlue (endstone::ColorFormat)</li> <li>DarkGray (endstone::ColorFormat)</li> <li>DarkGreen (endstone::ColorFormat)</li> <li>DarkPurple (endstone::ColorFormat)</li> <li>DarkRed (endstone::ColorFormat)</li> <li>description_ (endstone::Command, endstone::Permission, endstone::PluginDescription, endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder)</li> <li>dimension_ (endstone::DimensionEvent, endstone::Location)</li> <li>default_index_ (endstone::Dropdown)</li> <li>data_ (endstone::Image, endstone::ItemStack)</li> <li>display_name_ (endstone::ItemMeta)</li> <li>DefaultPermission (endstone::Permission)</li> <li>default_value_ (endstone::Permission, endstone::Slider, endstone::Toggle, endstone::detail::PermissionBuilder)</li> <li>death_message_ (endstone::PlayerDeathEvent)</li> <li>drop_ (endstone::PlayerDropItemEvent)</li> <li>data_folder_ (endstone::Plugin)</li> <li>default_permission_ (endstone::PluginDescription)</li> <li>depend_ (endstone::PluginDescription)</li> <li>default_text_ (endstone::TextInput)</li> <li>data (endstone::UUID)</li> <li>default_permission (endstone::detail::PluginDescriptionBuilder)</li> <li>depend (endstone::detail::PluginDescriptionBuilder)</li> <li>description (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#e","title":"e","text":"<ul> <li>expiration_ (endstone::BanEntry)</li> <li>Escape (endstone::ColorFormat)</li> <li>event_ (endstone::EventHandler, endstone::HandlerList)</li> <li>executor_ (endstone::EventHandler, endstone::PluginCommand)</li> <li>enchantments_ (endstone::ItemMeta)</li> <li>emote_id_ (endstone::PlayerEmoteEvent)</li> <li>enabled_ (endstone::Plugin)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#f","title":"f","text":"<ul> <li>from_ (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent)</li> <li>format_ (endstone::PlayerChatEvent)</li> <li>full_name_ (endstone::PluginDescription)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#g","title":"g","text":"<ul> <li>green_ (endstone::Color)</li> <li>Gold (endstone::ColorFormat)</li> <li>Gray (endstone::ColorFormat)</li> <li>Green (endstone::ColorFormat)</li> <li>game_mode_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#h","title":"h","text":"<ul> <li>handlers_ (endstone::HandlerList)</li> <li>height_ (endstone::Image)</li> <li>hand_ (endstone::PlayerItemConsumeEvent)</li> <li>hostname_ (endstone::SocketAddress)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#i","title":"i","text":"<ul> <li>icon_ (endstone::Button, endstone::ModalForm)</li> <li>Italic (endstone::ColorFormat)</li> <li>ignore_cancelled_ (endstone::EventHandler)</li> <li>is_contextual_ (endstone::MapRenderer)</li> <li>item_ (endstone::PlayerInteractEvent, endstone::PlayerItemConsumeEvent, endstone::PlayerPickupItemEvent)</li> <li>id_ (endstone::Skin)</li> <li>image_ (endstone::Skin)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#j","title":"j","text":"<ul> <li>join_message_ (endstone::PlayerJoinEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#k","title":"k","text":"<ul> <li>knockback_ (endstone::ActorKnockbackEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#l","title":"l","text":"<ul> <li>location_ (endstone::ActorExplodeEvent)</li> <li>LightPurple (endstone::ColorFormat)</li> <li>label_ (endstone::Dropdown, endstone::Header, endstone::Slider, endstone::TextInput, endstone::Toggle)</li> <li>lore_ (endstone::ItemMeta)</li> <li>level_ (endstone::LevelEvent, endstone::WeatherEvent)</li> <li>loader_ (endstone::Plugin)</li> <li>logger_ (endstone::Plugin)</li> <li>load_ (endstone::PluginDescription)</li> <li>load_before_ (endstone::PluginDescription)</li> <li>level_name_ (endstone::ServerListPingEvent)</li> <li>local_port_ (endstone::ServerListPingEvent)</li> <li>local_port_v6_ (endstone::ServerListPingEvent)</li> <li>load (endstone::detail::PluginDescriptionBuilder)</li> <li>load_before (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#m","title":"m","text":"<ul> <li>mob_ (endstone::ActorKnockbackEvent)</li> <li>message_ (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::PlayerLoginEvent, endstone::PlayerSkinChangeEvent, endstone::ScriptMessageEvent)</li> <li>MaterialAmethyst (endstone::ColorFormat)</li> <li>MaterialCopper (endstone::ColorFormat)</li> <li>MaterialDiamond (endstone::ColorFormat)</li> <li>MaterialEmerald (endstone::ColorFormat)</li> <li>MaterialGold (endstone::ColorFormat)</li> <li>MaterialIron (endstone::ColorFormat)</li> <li>MaterialLapis (endstone::ColorFormat)</li> <li>MaterialNetherite (endstone::ColorFormat)</li> <li>MaterialQuartz (endstone::ColorFormat)</li> <li>MaterialRedstone (endstone::ColorFormat)</li> <li>MaterialResin (endstone::ColorFormat)</li> <li>MinecoinGold (endstone::ColorFormat)</li> <li>mtx_ (endstone::HandlerList)</li> <li>meta_ (endstone::ItemStack)</li> <li>map_ (endstone::MapInitializeEvent)</li> <li>map_id_ (endstone::MapMeta)</li> <li>muted_ (endstone::PlayerEmoteEvent)</li> <li>message_id_ (endstone::ScriptMessageEvent)</li> <li>max_players_ (endstone::ServerListPingEvent)</li> <li>minecraft_version_network_ (endstone::ServerListPingEvent)</li> <li>motd_ (endstone::ServerListPingEvent)</li> <li>max_ (endstone::Slider)</li> <li>min_ (endstone::Slider)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#n","title":"n","text":"<ul> <li>NAME (endstone::ActorDamageEvent, endstone::ActorDeathEvent, endstone::ActorExplodeEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::ActorTeleportEvent, endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::BroadcastMessageEvent, endstone::PacketReceiveEvent, endstone::PlayerCommandEvent, endstone::PlayerEmoteEvent, endstone::PlayerGameModeChangeEvent, endstone::PlayerInteractActorEvent, endstone::PlayerLoginEvent, endstone::PlayerRespawnEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ScriptMessageEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>name_ (endstone::Command, endstone::Permission, endstone::PlayerBanEntry, endstone::PluginDescription, endstone::detail::CommandBuilder, endstone::detail::PermissionBuilder)</li> <li>new_game_mode_ (endstone::PlayerGameModeChangeEvent)</li> <li>new_skin_ (endstone::PlayerSkinChangeEvent)</li> <li>network_protocol_version_ (endstone::ServerListPingEvent)</li> <li>num_players_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#o","title":"o","text":"<ul> <li>on_submit_ (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>on_click_ (endstone::Button)</li> <li>Obfuscated (endstone::ColorFormat)</li> <li>on_error_ (endstone::CommandSenderWrapper)</li> <li>on_message_ (endstone::CommandSenderWrapper)</li> <li>options_ (endstone::Dropdown)</li> <li>on_close_ (endstone::Form)</li> <li>owned_payload_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>owner_ (endstone::PluginCommand)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#p","title":"p","text":"<ul> <li>player_ (endstone::BlockBreakEvent, endstone::BlockPlaceEvent, endstone::PacketReceiveEvent, endstone::PacketSendEvent, endstone::PlayerEvent)</li> <li>placed_against_ (endstone::BlockPlaceEvent)</li> <li>placed_block_ (endstone::BlockPlaceEvent)</li> <li>permissions_ (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription, endstone::detail::CommandBuilder)</li> <li>plugin_ (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginDisableEvent, endstone::PluginEnableEvent)</li> <li>priority_ (endstone::EventHandler)</li> <li>pitch_ (endstone::Location)</li> <li>packet_id_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>payload_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>plugin_manager_ (endstone::Permission)</li> <li>permissible_ (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>permission_ (endstone::PermissionAttachmentInfo)</li> <li>previous_ (endstone::PlayerItemHeldEvent)</li> <li>prefix_ (endstone::PluginDescription)</li> <li>provides_ (endstone::PluginDescription)</li> <li>ping_response_ (endstone::ServerListPingEvent)</li> <li>port_ (endstone::SocketAddress)</li> <li>placeholder_ (endstone::TextInput)</li> <li>params_ (endstone::Translatable)</li> <li>permissions (endstone::detail::PluginDescriptionBuilder)</li> <li>prefix (endstone::detail::PluginDescriptionBuilder)</li> <li>provides (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#q","title":"q","text":"<ul> <li>quit_message_ (endstone::PlayerQuitEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#r","title":"r","text":"<ul> <li>raw_knockback_ (endstone::ActorKnockbackEvent)</li> <li>reason_ (endstone::BanEntry, endstone::PlayerKickEvent)</li> <li>result_ (endstone::BlockCookEvent)</li> <li>recipients_ (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>red_ (endstone::Color)</li> <li>Red (endstone::ColorFormat)</li> <li>Reset (endstone::ColorFormat)</li> <li>repair_cost_ (endstone::ItemMeta)</li> <li>removed_ (endstone::PermissionAttachment)</li> <li>remote_host_ (endstone::ServerListPingEvent)</li> <li>remote_port_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#s","title":"s","text":"<ul> <li>source_ (endstone::ActorKnockbackEvent, endstone::BanEntry, endstone::BlockCookEvent)</li> <li>sender_ (endstone::CommandSenderWrapper, endstone::ScriptMessageEvent, endstone::ServerCommandEvent)</li> <li>submit_button_text_ (endstone::ModalForm)</li> <li>sub_client_id_ (endstone::PacketReceiveEvent, endstone::PacketSendEvent)</li> <li>server_ (endstone::Plugin, endstone::PluginLoader)</li> <li>soft_depend_ (endstone::PluginDescription)</li> <li>server_guid_ (endstone::ServerListPingEvent)</li> <li>step_ (endstone::Slider)</li> <li>soft_depend (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#t","title":"t","text":"<ul> <li>to_ (endstone::ActorTeleportEvent, endstone::PlayerMoveEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>text_ (endstone::Button, endstone::Label, endstone::Translatable)</li> <li>title_ (endstone::Form)</li> <li>type_ (endstone::Image, endstone::ItemStack, endstone::MapCursor, endstone::ServerLoadEvent)</li> <li>TYPE (endstone::MapMeta)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#u","title":"u","text":"<ul> <li>usages_ (endstone::Command, endstone::detail::CommandBuilder)</li> <li>unbreakable_ (endstone::ItemMeta)</li> <li>uuid_ (endstone::PlayerBanEntry)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#v","title":"v","text":"<ul> <li>valid_ (endstone::HandlerList)</li> <li>visible_ (endstone::MapCursor)</li> <li>value_ (endstone::PermissionAttachmentInfo)</li> <li>version_ (endstone::PluginDescription)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#w","title":"w","text":"<ul> <li>White (endstone::ColorFormat)</li> <li>WHITE (endstone::Colors)</li> <li>width_ (endstone::Image)</li> <li>website_ (endstone::PluginDescription)</li> <li>website (endstone::detail::PluginDescriptionBuilder)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#x","title":"x","text":"<ul> <li>x_ (endstone::MapCursor, endstone::Vector)</li> <li>xuid_ (endstone::PlayerBanEntry)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#y","title":"y","text":"<ul> <li>Yellow (endstone::ColorFormat)</li> <li>yaw_ (endstone::Location)</li> <li>y_ (endstone::MapCursor, endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#z","title":"z","text":"<ul> <li>z_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_typedefs/","title":"Class Member Typedefs","text":""},{"location":"reference/cpp/class_member_typedefs/#b","title":"b","text":"<ul> <li>BlockList (endstone::ActorExplodeEvent)</li> </ul>"},{"location":"reference/cpp/class_member_typedefs/#c","title":"c","text":"<ul> <li>Control (endstone::ActionForm, endstone::ModalForm)</li> <li>Callback (endstone::CommandSenderWrapper)</li> </ul>"},{"location":"reference/cpp/class_member_typedefs/#d","title":"d","text":"<ul> <li>Date (endstone::BanEntry)</li> </ul>"},{"location":"reference/cpp/class_member_typedefs/#f","title":"f","text":"<ul> <li>FormVariant (endstone::Player)</li> </ul>"},{"location":"reference/cpp/class_member_typedefs/#o","title":"o","text":"<ul> <li>OnSubmitCallback (endstone::ActionForm, endstone::MessageForm, endstone::ModalForm)</li> <li>OnClickCallback (endstone::Button)</li> <li>OnCloseCallback (endstone::Form)</li> </ul>"},{"location":"reference/cpp/class_member_typedefs/#t","title":"t","text":"<ul> <li>Type (fmt::formatter&lt; endstone::Actor &gt;, fmt::formatter&lt; endstone::Block &gt;, fmt::formatter&lt; endstone::BlockData &gt;, fmt::formatter&lt; endstone::BlockState &gt;, fmt::formatter&lt; endstone::BlockStates &gt;, fmt::formatter&lt; endstone::BlockStates::mapped_type &gt;, fmt::formatter&lt; endstone::BlockStates::value_type &gt;, fmt::formatter&lt; endstone::DamageSource &gt;, fmt::formatter&lt; endstone::ItemStack &gt;, fmt::formatter&lt; endstone::ItemType &gt;)</li> </ul>"},{"location":"reference/cpp/class_member_enums/","title":"Class Member Enums","text":""},{"location":"reference/cpp/class_member_enums/#a","title":"a","text":"<ul> <li>Action (endstone::PlayerInteractEvent)</li> </ul>"},{"location":"reference/cpp/class_member_enums/#l","title":"l","text":"<ul> <li>Level (endstone::Logger)</li> <li>LoadType (endstone::ServerLoadEvent)</li> </ul>"},{"location":"reference/cpp/class_member_enums/#s","title":"s","text":"<ul> <li>Scale (endstone::MapView)</li> </ul>"},{"location":"reference/cpp/class_member_enums/#t","title":"t","text":"<ul> <li>Type (endstone::Criteria, endstone::Dimension, endstone::Image, endstone::ItemMeta, endstone::MapCursor)</li> </ul>"},{"location":"reference/cpp/namespace_members/","title":"Namespace Members","text":""},{"location":"reference/cpp/namespace_members/#b","title":"b","text":"<ul> <li>BarColor (endstone)</li> <li>BarFlag (endstone)</li> <li>BarStyle (endstone)</li> <li>BlockFace (endstone)</li> <li>BlockStates (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#d","title":"d","text":"<ul> <li>DisplaySlot (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#e","title":"e","text":"<ul> <li>EquipmentSlot (endstone)</li> <li>EventPriority (endstone)</li> <li>EventResult (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#g","title":"g","text":"<ul> <li>GameMode (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#h","title":"h","text":"<ul> <li>hash_value (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#m","title":"m","text":"<ul> <li>Message (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#o","title":"o","text":"<ul> <li>ObjectiveSortOrder (endstone)</li> <li>operator!= (endstone)</li> <li>operator&lt; (endstone)</li> <li>operator&lt;= (endstone)</li> <li>operator== (endstone)</li> <li>operator&gt; (endstone)</li> <li>operator&gt;= (endstone)</li> <li>overloaded (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#p","title":"p","text":"<ul> <li>PermissionDefault (endstone)</li> <li>PermissionLevel (endstone)</li> <li>PermissionRemovedExecutor (endstone)</li> <li>PluginLoadOrder (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#r","title":"r","text":"<ul> <li>RenderType (endstone)</li> <li>Result (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#s","title":"s","text":"<ul> <li>ScoreEntry (endstone)</li> <li>ServicePriority (endstone)</li> <li>swap (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#t","title":"t","text":"<ul> <li>TaskId (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_functions/","title":"Namespace Member Functions","text":""},{"location":"reference/cpp/namespace_member_functions/#h","title":"h","text":"<ul> <li>hash_value (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_functions/#o","title":"o","text":"<ul> <li>operator!= (endstone)</li> <li>operator&lt; (endstone)</li> <li>operator&lt;= (endstone)</li> <li>operator== (endstone)</li> <li>operator&gt; (endstone)</li> <li>operator&gt;= (endstone)</li> <li>overloaded (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_functions/#s","title":"s","text":"<ul> <li>swap (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"reference/cpp/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":""},{"location":"reference/cpp/namespace_member_typedefs/#b","title":"b","text":"<ul> <li>BlockStates (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_typedefs/#m","title":"m","text":"<ul> <li>Message (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_typedefs/#p","title":"p","text":"<ul> <li>PermissionRemovedExecutor (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_typedefs/#r","title":"r","text":"<ul> <li>Result (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_typedefs/#s","title":"s","text":"<ul> <li>ScoreEntry (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_typedefs/#t","title":"t","text":"<ul> <li>TaskId (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/","title":"Namespace Member Enums","text":""},{"location":"reference/cpp/namespace_member_enums/#b","title":"b","text":"<ul> <li>BarColor (endstone)</li> <li>BarFlag (endstone)</li> <li>BarStyle (endstone)</li> <li>BlockFace (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#d","title":"d","text":"<ul> <li>DisplaySlot (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#e","title":"e","text":"<ul> <li>EquipmentSlot (endstone)</li> <li>EventPriority (endstone)</li> <li>EventResult (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#g","title":"g","text":"<ul> <li>GameMode (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#o","title":"o","text":"<ul> <li>ObjectiveSortOrder (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#p","title":"p","text":"<ul> <li>PermissionDefault (endstone)</li> <li>PermissionLevel (endstone)</li> <li>PluginLoadOrder (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#r","title":"r","text":"<ul> <li>RenderType (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#s","title":"s","text":"<ul> <li>ServicePriority (endstone)</li> </ul>"},{"location":"reference/cpp/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"reference/cpp/macros/","title":"Macros","text":""},{"location":"reference/cpp/macros/#e","title":"e","text":"<ul> <li>ENDSTONE_EVENT (event.h)</li> <li>ENDSTONE_EXPORT (plugin.h)</li> <li>ENDSTONE_PLUGIN (plugin.h)</li> <li>ENDSTONE_CHECK (result.h)</li> <li>ENDSTONE_CHECKF (result.h)</li> <li>ENDSTONE_CHECK_RESULT (result.h)</li> </ul>"},{"location":"reference/cpp/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"reference/cpp/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}