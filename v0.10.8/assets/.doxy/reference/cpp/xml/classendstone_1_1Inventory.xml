<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classendstone_1_1Inventory" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>endstone::Inventory</compoundname>
    <derivedcompoundref refid="classendstone_1_1PlayerInventory" prot="public" virt="non-virtual">endstone::PlayerInventory</derivedcompoundref>
    <includes refid="inventory_8h" local="no">endstone/inventory/inventory.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classendstone_1_1Inventory_1ae4195380f173c841a5df5ddea12087ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual endstone::Inventory::~Inventory</definition>
        <argsstring>()=default</argsstring>
        <name>~Inventory</name>
        <qualifiedname>endstone::Inventory::~Inventory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="30" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1aeb95253ae2eaa18839b05b3612a7007e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int endstone::Inventory::getSize</definition>
        <argsstring>() const =0</argsstring>
        <name>getSize</name>
        <qualifiedname>endstone::Inventory::getSize</qualifiedname>
        <briefdescription>
<para>Returns the size of the inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the inventory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="36" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1ae57598046e6b5df98a7710d91953a823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int endstone::Inventory::getMaxStackSize</definition>
        <argsstring>() const =0</argsstring>
        <name>getMaxStackSize</name>
        <qualifiedname>endstone::Inventory::getMaxStackSize</qualifiedname>
        <briefdescription>
<para>Returns the maximum stack size for an <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> in this inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The maximum size for an <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> in this inventory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="43" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1ade917e3c7719cb3ec7b6ffa8db27462b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt; ItemStack &gt; endstone::Inventory::getItem</definition>
        <argsstring>(int index) const =0</argsstring>
        <name>getItem</name>
        <qualifiedname>endstone::Inventory::getItem</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> found in the slot at the given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the Slot&apos;s <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to return</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> in the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="52" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1ad1d02b72943819764794ebc3ccb66e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void endstone::Inventory::setItem</definition>
        <argsstring>(int index, const ItemStack *item)=0</argsstring>
        <name>setItem</name>
        <qualifiedname>endstone::Inventory::setItem</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Stores the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> at the given index of the inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index where to put the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="60" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a70dc622a7f4ecaf2e6bae130a2326f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unordered_map&lt; int, <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> * &gt;</type>
        <definition>virtual std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::addItem</definition>
        <argsstring>(std::vector&lt; ItemStack * &gt; items)=0</argsstring>
        <name>addItem</name>
        <qualifiedname>endstone::Inventory::addItem</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> * &gt;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Stores the given ItemStacks in the inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This will try to fill existing stacks and empty slots as well as it can.</para>
</simplesect>
<simplesect kind="note"><para>The returned map contains what it couldn&apos;t store, where the key is the index, and the value is the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref>. If all items are stored, it will return an empty map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>The ItemStacks to add</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map containing items that couldn&apos;t be added. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="74" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a7cc5b3f5922baff4b878398a21ded738" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unordered_map&lt; int, <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> * &gt;</type>
        <definition>virtual std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::removeItem</definition>
        <argsstring>(std::vector&lt; ItemStack * &gt; items)=0</argsstring>
        <name>removeItem</name>
        <qualifiedname>endstone::Inventory::removeItem</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> * &gt;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Removes the given ItemStacks from the inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It will try to remove &apos;as much as possible&apos; from the types and amounts you give as arguments.</para>
</simplesect>
<simplesect kind="note"><para>The returned HashMap contains what it couldn&apos;t remove, where the key is the index, and the value is the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref>. If all the given ItemStacks are removed, it will return an empty map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>The ItemStacks to remove</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map containing items that couldn&apos;t be removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="88" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1adb3dc76d1831c648ce06f265ea58ac23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;(std::is_convertible_v&lt;Args, <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;&gt; &amp;&amp; ...)&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; int, <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> * &gt;</type>
        <definition>std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::addItem</definition>
        <argsstring>(Args &amp;&amp;...items)</argsstring>
        <name>addItem</name>
        <qualifiedname>endstone::Inventory::addItem</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Stores the given ItemStacks in the inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This will try to fill existing stacks and empty slots as well as it can.</para>
</simplesect>
<simplesect kind="note"><para>The returned map contains what it couldn&apos;t store, where the key is the index, and the value is the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref>. If all items are stored, it will return an empty map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>The ItemStacks to add</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map containing items that couldn&apos;t be added. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="103" column="24" bodyfile="include/endstone/inventory/inventory.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a2f4af3f93e53605d1c1540084305fdf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;(std::is_convertible_v&lt;Args, <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;&gt; &amp;&amp; ...)&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; int, <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> * &gt;</type>
        <definition>std::unordered_map&lt; int, ItemStack * &gt; endstone::Inventory::removeItem</definition>
        <argsstring>(Args &amp;&amp;...items)</argsstring>
        <name>removeItem</name>
        <qualifiedname>endstone::Inventory::removeItem</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Removes the given ItemStacks from the inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It will try to remove &apos;as much as possible&apos; from the types and amounts you give as arguments.</para>
</simplesect>
<simplesect kind="note"><para>The returned HashMap contains what it couldn&apos;t remove, where the key is the index, and the value is the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref>. If all the given ItemStacks are removed, it will return an empty map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>The ItemStacks to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map containing items that couldn&apos;t be removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="120" column="24" bodyfile="include/endstone/inventory/inventory.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1aed3238de786bddbcf39761658b95c48b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &gt; &gt;</type>
        <definition>virtual std::vector&lt; std::unique_ptr&lt; ItemStack &gt; &gt; endstone::Inventory::getContents</definition>
        <argsstring>() const =0</argsstring>
        <name>getContents</name>
        <qualifiedname>endstone::Inventory::getContents</qualifiedname>
        <briefdescription>
<para>Returns all ItemStacks from the inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An array of ItemStacks from the inventory. Individual items may be null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="130" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a44f969fa5f94ddd9c44a94ea7b1643d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; void &gt;</type>
        <definition>virtual Result&lt; void &gt; endstone::Inventory::setContents</definition>
        <argsstring>(std::vector&lt; const ItemStack * &gt; items)=0</argsstring>
        <name>setContents</name>
        <qualifiedname>endstone::Inventory::setContents</qualifiedname>
        <param>
          <type>std::vector&lt; const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> * &gt;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Completely replaces the inventory&apos;s contents. Removes all existing contents and replaces it with the ItemStacks given in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>A complete replacement for the contents; the length must be less than or equal to <ref refid="classendstone_1_1Inventory_1aeb95253ae2eaa18839b05b3612a7007e" kindref="member">getSize()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="138" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a0a7ae4ea788ee3da73d32c3e891081e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; bool &gt;</type>
        <definition>virtual Result&lt; bool &gt; endstone::Inventory::contains</definition>
        <argsstring>(const std::string &amp;type) const =0</argsstring>
        <name>contains</name>
        <qualifiedname>endstone::Inventory::contains</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Checks if the inventory contains any ItemStacks with the given <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The item type to check for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if an <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> is found with the given <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="147" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a5c25510c8e1b29286608bc04b42512dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool endstone::Inventory::contains</definition>
        <argsstring>(const ItemStack &amp;item) const =0</argsstring>
        <name>contains</name>
        <qualifiedname>endstone::Inventory::contains</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Checks if the inventory contains any ItemStacks with the given <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This will only return true if both the type and the amount of the stack match.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to match against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if any exactly matching ItemStacks were found, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="157" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1afdc19f459553b5b6fa058600e9aea8f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool endstone::Inventory::contains</definition>
        <argsstring>(const ItemStack &amp;item, int amount) const =0</argsstring>
        <name>contains</name>
        <qualifiedname>endstone::Inventory::contains</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Checks if the inventory contains at least the minimum amount specified of exactly matching ItemStacks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>An <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> only counts if both the type and the amount of the stack match.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to match against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>how many identical stacks to check for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if amount less than 1 or if amount of exactly matching ItemStacks were found, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="169" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a3400bbe27b7ab65c14d3d1194d60535f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; bool &gt;</type>
        <definition>virtual Result&lt; bool &gt; endstone::Inventory::containsAtLeast</definition>
        <argsstring>(const std::string &amp;type, int amount) const =0</argsstring>
        <name>containsAtLeast</name>
        <qualifiedname>endstone::Inventory::containsAtLeast</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Checks if the inventory contains any ItemStacks with the given <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref>, adding to at least the minimum amount specified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref> to check for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum amount</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if amount is less than 1, true if enough ItemStacks were found to add to the given amount </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="180" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a1ad7af2b4f4e7ae60e1c9067e8e0af29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool endstone::Inventory::containsAtLeast</definition>
        <argsstring>(const ItemStack &amp;item, int amount) const =0</argsstring>
        <name>containsAtLeast</name>
        <qualifiedname>endstone::Inventory::containsAtLeast</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Checks if the inventory contains ItemStacks matching the given <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> whose amounts sum to at least the minimum amount specified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to match against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum amount</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if amount less than 1 or enough ItemStacks were found to add to the given amount, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="191" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1aedbde69f2a6217ddaf34e9a28ec4a512" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; std::unordered_map&lt; int, std::unique_ptr&lt; <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &gt; &gt; &gt;</type>
        <definition>virtual Result&lt; std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; &gt; endstone::Inventory::all</definition>
        <argsstring>(const std::string &amp;type) const =0</argsstring>
        <name>all</name>
        <qualifiedname>endstone::Inventory::all</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Finds all slots in the inventory containing any ItemStacks with the given <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned map contains entries where, the key is the slot index, and the value is the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> in that slot. If no matching <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> is found, an empty map is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref> to match against</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map from slot indexes to item at index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="203" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1abbe720b7ba894612f866a8cf060077ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unordered_map&lt; int, std::unique_ptr&lt; <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &gt; &gt;</type>
        <definition>virtual std::unordered_map&lt; int, std::unique_ptr&lt; ItemStack &gt; &gt; endstone::Inventory::all</definition>
        <argsstring>(const ItemStack &amp;item) const =0</argsstring>
        <name>all</name>
        <qualifiedname>endstone::Inventory::all</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Finds all slots in the inventory containing any ItemStacks with the given <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This will only match slots if both the type and the amount of the stack match</para>
</simplesect>
The returned map contains entries where, the key is the slot index, and the value is the <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> in that slot. If no matching <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> is found, an empty map is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to match against</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map from slot indexes to item at index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="218" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a7ed0e640354bf650679ac160b5225738" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; int &gt;</type>
        <definition>virtual Result&lt; int &gt; endstone::Inventory::first</definition>
        <argsstring>(const std::string &amp;type) const =0</argsstring>
        <name>first</name>
        <qualifiedname>endstone::Inventory::first</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Finds the first slot in the inventory containing an <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> with the given <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref> to look for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The slot index of the given <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref> or -1 if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="227" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1afd3997dd60d7f4f0649aa4280f05bc24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int endstone::Inventory::first</definition>
        <argsstring>(const ItemStack &amp;item) const =0</argsstring>
        <name>first</name>
        <qualifiedname>endstone::Inventory::first</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns the first slot in the inventory containing an <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> with the given stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to match against</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The slot index of the given <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> or -1 if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="236" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a26fb3d2b14213b78a13a0cc46d9a6128" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int endstone::Inventory::firstEmpty</definition>
        <argsstring>() const =0</argsstring>
        <name>firstEmpty</name>
        <qualifiedname>endstone::Inventory::firstEmpty</qualifiedname>
        <briefdescription>
<para>Returns the first empty Slot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first empty Slot found, or -1 if no empty slots. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="243" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1ade31b1be3db4e11cadda1767a419c62c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool endstone::Inventory::isEmpty</definition>
        <argsstring>() const =0</argsstring>
        <name>isEmpty</name>
        <qualifiedname>endstone::Inventory::isEmpty</qualifiedname>
        <briefdescription>
<para>Check whether this inventory is empty. An inventory is considered to be empty if there are no ItemStacks in any slot of this inventory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="251" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a09b31e51bf891c8f33bfca46707bf573" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; void &gt;</type>
        <definition>virtual Result&lt; void &gt; endstone::Inventory::remove</definition>
        <argsstring>(const std::string &amp;type)=0</argsstring>
        <name>remove</name>
        <qualifiedname>endstone::Inventory::remove</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Removes all stacks in the inventory matching the given <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemType" kindref="compound">ItemType</ref> to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="258" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1af3402b278d0775d48a56593bf49ee52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void endstone::Inventory::remove</definition>
        <argsstring>(const ItemStack &amp;item)=0</argsstring>
        <name>remove</name>
        <qualifiedname>endstone::Inventory::remove</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Removes all stacks in the inventory matching the given stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This will only match a slot if both the type and the amount of the stack match</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classendstone_1_1ItemStack" kindref="compound">ItemStack</ref> to match against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="267" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1a367187fb26cad50974f6a01f0df9e86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void endstone::Inventory::clear</definition>
        <argsstring>(int index)=0</argsstring>
        <name>clear</name>
        <qualifiedname>endstone::Inventory::clear</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Clears out a particular slot in the index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="274" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Inventory_1afc114b9f2e5c05fb1e1388963b8c86e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void endstone::Inventory::clear</definition>
        <argsstring>()=0</argsstring>
        <name>clear</name>
        <qualifiedname>endstone::Inventory::clear</qualifiedname>
        <briefdescription>
<para>Clears out the whole <ref refid="classendstone_1_1Inventory" kindref="compound">Inventory</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/inventory/inventory.h" line="279" column="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Interface to the various inventories. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>endstone::Inventory</label>
        <link refid="classendstone_1_1Inventory"/>
      </node>
      <node id="2">
        <label>endstone::PlayerInventory</label>
        <link refid="classendstone_1_1PlayerInventory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/endstone/inventory/inventory.h" line="28" column="1" bodyfile="include/endstone/inventory/inventory.h" bodystart="28" bodyend="280"/>
    <listofallmembers>
      <member refid="classendstone_1_1Inventory_1a70dc622a7f4ecaf2e6bae130a2326f78" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>addItem</name></member>
      <member refid="classendstone_1_1Inventory_1adb3dc76d1831c648ce06f265ea58ac23" prot="public" virt="non-virtual"><scope>endstone::Inventory</scope><name>addItem</name></member>
      <member refid="classendstone_1_1Inventory_1aedbde69f2a6217ddaf34e9a28ec4a512" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>all</name></member>
      <member refid="classendstone_1_1Inventory_1abbe720b7ba894612f866a8cf060077ae" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>all</name></member>
      <member refid="classendstone_1_1Inventory_1a367187fb26cad50974f6a01f0df9e86c" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>clear</name></member>
      <member refid="classendstone_1_1Inventory_1afc114b9f2e5c05fb1e1388963b8c86e8" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>clear</name></member>
      <member refid="classendstone_1_1Inventory_1a0a7ae4ea788ee3da73d32c3e891081e1" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>contains</name></member>
      <member refid="classendstone_1_1Inventory_1a5c25510c8e1b29286608bc04b42512dc" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>contains</name></member>
      <member refid="classendstone_1_1Inventory_1afdc19f459553b5b6fa058600e9aea8f1" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>contains</name></member>
      <member refid="classendstone_1_1Inventory_1a3400bbe27b7ab65c14d3d1194d60535f" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>containsAtLeast</name></member>
      <member refid="classendstone_1_1Inventory_1a1ad7af2b4f4e7ae60e1c9067e8e0af29" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>containsAtLeast</name></member>
      <member refid="classendstone_1_1Inventory_1a7ed0e640354bf650679ac160b5225738" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>first</name></member>
      <member refid="classendstone_1_1Inventory_1afd3997dd60d7f4f0649aa4280f05bc24" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>first</name></member>
      <member refid="classendstone_1_1Inventory_1a26fb3d2b14213b78a13a0cc46d9a6128" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>firstEmpty</name></member>
      <member refid="classendstone_1_1Inventory_1aed3238de786bddbcf39761658b95c48b" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>getContents</name></member>
      <member refid="classendstone_1_1Inventory_1ade917e3c7719cb3ec7b6ffa8db27462b" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>getItem</name></member>
      <member refid="classendstone_1_1Inventory_1ae57598046e6b5df98a7710d91953a823" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>getMaxStackSize</name></member>
      <member refid="classendstone_1_1Inventory_1aeb95253ae2eaa18839b05b3612a7007e" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>getSize</name></member>
      <member refid="classendstone_1_1Inventory_1ade31b1be3db4e11cadda1767a419c62c" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>isEmpty</name></member>
      <member refid="classendstone_1_1Inventory_1a09b31e51bf891c8f33bfca46707bf573" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>remove</name></member>
      <member refid="classendstone_1_1Inventory_1af3402b278d0775d48a56593bf49ee52e" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>remove</name></member>
      <member refid="classendstone_1_1Inventory_1a7cc5b3f5922baff4b878398a21ded738" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>removeItem</name></member>
      <member refid="classendstone_1_1Inventory_1a2f4af3f93e53605d1c1540084305fdf4" prot="public" virt="non-virtual"><scope>endstone::Inventory</scope><name>removeItem</name></member>
      <member refid="classendstone_1_1Inventory_1a44f969fa5f94ddd9c44a94ea7b1643d8" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>setContents</name></member>
      <member refid="classendstone_1_1Inventory_1ad1d02b72943819764794ebc3ccb66e4c" prot="public" virt="pure-virtual"><scope>endstone::Inventory</scope><name>setItem</name></member>
      <member refid="classendstone_1_1Inventory_1ae4195380f173c841a5df5ddea12087ae" prot="public" virt="virtual"><scope>endstone::Inventory</scope><name>~Inventory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
