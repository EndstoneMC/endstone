<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classendstone_1_1Registry" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>endstone::Registry</compoundname>
    <includes refid="registry_8h" local="no">endstone/registry.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classendstone_1_1Registry_1a9396db9d9eea6543c7ed9d6162e9822a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual endstone::Registry&lt; T &gt;::~Registry</definition>
        <argsstring>()=default</argsstring>
        <name>~Registry</name>
        <qualifiedname>endstone::Registry::~Registry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/registry.h" line="33" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Registry_1a12086295fb74563d44e4e362cff1598b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>T *</type>
        <definition>virtual T * endstone::Registry&lt; T &gt;::get</definition>
        <argsstring>(NamespacedKey key) noexcept=0</argsstring>
        <name>get</name>
        <qualifiedname>endstone::Registry::get</qualifiedname>
        <param>
          <type><ref refid="classendstone_1_1NamespacedKey" kindref="compound">NamespacedKey</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the object by its key. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a raw pointer to the object, or nullptr if not found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-null key to look up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T* Pointer to the object, or nullptr if it does not exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/registry.h" line="43" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Registry_1a99649cc36f14453c0013b82e0f3843db" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>const T *</type>
        <definition>virtual const T * endstone::Registry&lt; T &gt;::get</definition>
        <argsstring>(NamespacedKey key) const noexcept=0</argsstring>
        <name>get</name>
        <qualifiedname>endstone::Registry::get</qualifiedname>
        <param>
          <type><ref refid="classendstone_1_1NamespacedKey" kindref="compound">NamespacedKey</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Const overload of <ref refid="classendstone_1_1Registry_1a12086295fb74563d44e4e362cff1598b" kindref="member">get()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-null key to look up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const T* Pointer to the object, or nullptr if it does not exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/registry.h" line="51" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Registry_1a72a8c099b8f3fa87b3ecd6a3b1ef4834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>T &amp;</type>
        <definition>virtual T &amp; endstone::Registry&lt; T &gt;::getOrThrow</definition>
        <argsstring>(const NamespacedKey key)</argsstring>
        <name>getOrThrow</name>
        <qualifiedname>endstone::Registry::getOrThrow</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1NamespacedKey" kindref="compound">NamespacedKey</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the object by its key or throw if missing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the object to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to the object with the given key. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if no object with the given key exists. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/registry.h" line="60" column="15" bodyfile="include/endstone/registry.h" bodystart="60" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Registry_1a2e2e60ccbebb8aea3cb57afe54f5443c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const T &amp;</type>
        <definition>virtual const T &amp; endstone::Registry&lt; T &gt;::getOrThrow</definition>
        <argsstring>(const NamespacedKey key) const</argsstring>
        <name>getOrThrow</name>
        <qualifiedname>endstone::Registry::getOrThrow</qualifiedname>
        <param>
          <type>const <ref refid="classendstone_1_1NamespacedKey" kindref="compound">NamespacedKey</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Const overload of <ref refid="classendstone_1_1Registry_1a72a8c099b8f3fa87b3ecd6a3b1ef4834" kindref="member">getOrThrow()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the object to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const T&amp; Const reference to the object with the given key. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if no object with the given key exists. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/registry.h" line="75" column="21" bodyfile="include/endstone/registry.h" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classendstone_1_1Registry_1ad4ccf75b2d21093309be4663cbc9e71b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void endstone::Registry&lt; T &gt;::forEach</definition>
        <argsstring>(std::function&lt; bool(const T &amp;)&gt; func) const =0</argsstring>
        <name>forEach</name>
        <qualifiedname>endstone::Registry::forEach</qualifiedname>
        <param>
          <type>std::function&lt; bool(const T &amp;)&gt;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Apply a function to each stored element. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterates over all stored elements and applies the provided function to them. The iteration continues until the function returns false or all elements have been processed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>A callable object taking a const reference to an element and returning a boolean. Returning false stops the iteration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/endstone/registry.h" line="93" column="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Abstract registry interface for keyed objects. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides lookup by key (nullable or exception-throwing) and iteration.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must satisfy Keyed, i.e. implement getKey(). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/endstone/registry.h" line="31" column="1" bodyfile="include/endstone/registry.h" bodystart="31" bodyend="94"/>
    <listofallmembers>
      <member refid="classendstone_1_1Registry_1ad4ccf75b2d21093309be4663cbc9e71b" prot="public" virt="pure-virtual"><scope>endstone::Registry</scope><name>forEach</name></member>
      <member refid="classendstone_1_1Registry_1a12086295fb74563d44e4e362cff1598b" prot="public" virt="pure-virtual"><scope>endstone::Registry</scope><name>get</name></member>
      <member refid="classendstone_1_1Registry_1a99649cc36f14453c0013b82e0f3843db" prot="public" virt="pure-virtual"><scope>endstone::Registry</scope><name>get</name></member>
      <member refid="classendstone_1_1Registry_1a72a8c099b8f3fa87b3ecd6a3b1ef4834" prot="public" virt="virtual"><scope>endstone::Registry</scope><name>getOrThrow</name></member>
      <member refid="classendstone_1_1Registry_1a2e2e60ccbebb8aea3cb57afe54f5443c" prot="public" virt="virtual"><scope>endstone::Registry</scope><name>getOrThrow</name></member>
      <member refid="classendstone_1_1Registry_1a9396db9d9eea6543c7ed9d6162e9822a" prot="public" virt="virtual"><scope>endstone::Registry</scope><name>~Registry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
